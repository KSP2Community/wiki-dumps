<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.11/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.11/ http://www.mediawiki.org/xml/export-0.11.xsd" version="0.11" xml:lang="en">
  <siteinfo>
    <sitename>KSP 2 Modding Wiki</sitename>
    <dbname>bitnami_mediawiki</dbname>
    <base>https://wiki.spacewarp.org/wiki/Main_Page</base>
    <generator>MediaWiki 1.40.1</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">KSP2 Modding Wiki</namespace>
      <namespace key="5" case="first-letter">KSP2 Modding Wiki talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Main Page</title>
    <ns>0</ns>
    <id>1</id>
    <revision>
      <id>1</id>
      <timestamp>2023-04-15T20:07:34Z</timestamp>
      <contributor>
        <username>MediaWiki default</username>
        <id>2</id>
      </contributor>
      <origin>1</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="755" sha1="22vz5zlxa2zctewimaum2bf1due8hkl" xml:space="preserve">&lt;strong&gt;MediaWiki has been installed.&lt;/strong&gt;

Consult the [https://www.mediawiki.org/wiki/Special:MyLanguage/Help:Contents User's Guide] for information on using the wiki software.

== Getting started ==
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:Configuration_settings Configuration settings list]
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:FAQ MediaWiki FAQ]
* [https://lists.wikimedia.org/postorius/lists/mediawiki-announce.lists.wikimedia.org/ MediaWiki release mailing list]
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Localisation#Translation_resources Localise MediaWiki for your language]
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:Combating_spam Learn how to combat spam on your wiki]</text>
      <sha1>22vz5zlxa2zctewimaum2bf1due8hkl</sha1>
    </revision>
    <revision>
      <id>2</id>
      <parentid>1</parentid>
      <timestamp>2023-04-15T22:51:37Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Main Page]]" ([Edit=Allow only administrators] (indefinite) [Move=Allow only administrators] (indefinite))</comment>
      <origin>1</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="755" sha1="22vz5zlxa2zctewimaum2bf1due8hkl" xml:space="preserve">&lt;strong&gt;MediaWiki has been installed.&lt;/strong&gt;

Consult the [https://www.mediawiki.org/wiki/Special:MyLanguage/Help:Contents User's Guide] for information on using the wiki software.

== Getting started ==
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:Configuration_settings Configuration settings list]
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:FAQ MediaWiki FAQ]
* [https://lists.wikimedia.org/postorius/lists/mediawiki-announce.lists.wikimedia.org/ MediaWiki release mailing list]
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Localisation#Translation_resources Localise MediaWiki for your language]
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:Combating_spam Learn how to combat spam on your wiki]</text>
      <sha1>22vz5zlxa2zctewimaum2bf1due8hkl</sha1>
    </revision>
    <revision>
      <id>3</id>
      <parentid>2</parentid>
      <timestamp>2023-04-15T22:58:30Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>3</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="184" sha1="6mx5qbgiapq5f6zzuaj6ih8oidldvcq" xml:space="preserve">&lt;strong&gt;Welcome to KSP 2 Modding Wiki&lt;/strong&gt;

This wiki serves as a place to share knowledge about modding KSP 2. Anyone can create their own articles or contribute to existing ones.</text>
      <sha1>6mx5qbgiapq5f6zzuaj6ih8oidldvcq</sha1>
    </revision>
    <revision>
      <id>5</id>
      <parentid>3</parentid>
      <timestamp>2023-04-15T23:05:46Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>5</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="245" sha1="08r7dx5c3ttsqtc4cb72sy2gb3mwy31" xml:space="preserve">[[Category:TOC]]

&lt;strong&gt;Welcome to KSP 2 Modding Wiki&lt;/strong&gt;

This wiki serves as a place to share knowledge about modding KSP 2. Anyone can create their own articles or contribute to existing ones.

{{#categorytree:TOC|hideroot|mode=pages}}</text>
      <sha1>08r7dx5c3ttsqtc4cb72sy2gb3mwy31</sha1>
    </revision>
    <revision>
      <id>10</id>
      <parentid>5</parentid>
      <timestamp>2023-04-15T23:15:08Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>10</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="413" sha1="ttqyji2wkh2vwrc2xmqf5r0kgdyrmkm" xml:space="preserve">[[Category:TOC]]

'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone can create their own articles or contribute to existing ones.

== Categories ==
{{#categorytree:TOC|hideroot|mode=pages}}

== Create a new article ==
&lt;div style="float: left;"&gt;
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new article
placeholder=Article name
&lt;/inputbox&gt;
&lt;/div&gt;</text>
      <sha1>ttqyji2wkh2vwrc2xmqf5r0kgdyrmkm</sha1>
    </revision>
    <revision>
      <id>14</id>
      <parentid>10</parentid>
      <timestamp>2023-04-16T00:04:19Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>14</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="878" sha1="aq3hqhcytia1gkrcdpkplgvm7f721ml" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Existing categories==
To create your own category, simple create a page with the prefix "Category:", for example "Category:Part modding".
{{#categorytree:TOC|hideroot|mode=pages}}

==Create a new page==
For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;syntaxhighlight lang="xml" inline&gt;&lt;syntaxhighlight&gt;&lt;/syntaxhighlight&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.

&lt;div style="float: left;"&gt;
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;
&lt;/div&gt;</text>
      <sha1>aq3hqhcytia1gkrcdpkplgvm7f721ml</sha1>
    </revision>
    <revision>
      <id>15</id>
      <parentid>14</parentid>
      <timestamp>2023-04-16T00:09:35Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>15</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1012" sha1="j56ne5ia8y1uh830bgwadn12zrbj9rn" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Category list==
To assign a page to a category, use the following: &lt;syntaxhighlight inline&gt;[[Category:My category]]&lt;/syntaxhighlight&gt;. To create a new category if it does not exist yet, simple create a page with the prefix "Category:", for example "Category:My category".
{{#categorytree:TOC|hideroot|mode=pages}}

==Create a new page==
For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;syntaxhighlight lang="xml" inline&gt;&lt;syntaxhighlight&gt;&lt;/syntaxhighlight&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.

&lt;div style="float: left;"&gt;
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;
&lt;/div&gt;</text>
      <sha1>j56ne5ia8y1uh830bgwadn12zrbj9rn</sha1>
    </revision>
    <revision>
      <id>16</id>
      <parentid>15</parentid>
      <timestamp>2023-04-16T00:10:48Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>16</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="995" sha1="c4a8nyh7q6yjdlafqwtp5qjqdf3nrgy" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Category list==
{{#categorytree:TOC|hideroot|mode=pages}}

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

==== Help ====
To assign a page to a category, use the following: &lt;syntaxhighlight inline=""&gt;[[Category:My category]]&lt;/syntaxhighlight&gt;. To create a new category if it does not exist yet, simple create a page with the prefix "Category:", for example "Category:My category".For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;syntaxhighlight lang="xml" inline&gt;&lt;syntaxhighlight&gt;&lt;/syntaxhighlight&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.</text>
      <sha1>c4a8nyh7q6yjdlafqwtp5qjqdf3nrgy</sha1>
    </revision>
    <revision>
      <id>17</id>
      <parentid>16</parentid>
      <timestamp>2023-04-16T00:11:58Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <comment>/* Help */</comment>
      <origin>17</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1024" sha1="0z86o5rdmu9d5qosrmi3tcxrc8is5i7" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Category list==
{{#categorytree:TOC|hideroot|mode=pages}}

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

==== Help ====
To assign a page to a category, put the following line at the top of your page: &lt;syntaxhighlight inline=""&gt;[[Category:My category]]&lt;/syntaxhighlight&gt;. To create a new category if it does not exist yet, simple create a page with the prefix "Category:", for example "Category:My category".For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;syntaxhighlight lang="xml" inline&gt;&lt;syntaxhighlight&gt;&lt;/syntaxhighlight&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.</text>
      <sha1>0z86o5rdmu9d5qosrmi3tcxrc8is5i7</sha1>
    </revision>
    <revision>
      <id>18</id>
      <parentid>17</parentid>
      <timestamp>2023-04-16T00:13:46Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>18</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1029" sha1="78ick3fk5y2bjtr0hxkdq6b42m1xcum" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Category list==
{{#categorytree:TOC|hideroot|mode=pages}}

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

==== Help ====
To assign a page to a category, put the following line at the top of your page: &lt;syntaxhighlight inline=""&gt;[[Category:My category]]&lt;/syntaxhighlight&gt;. To create a new category if it does not exist yet, simple create a page with the prefix "Category:", for example "Category:My category".

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;syntaxhighlight lang="xml" inline=""&gt;&lt;syntaxhighlight&gt;&lt;/syntaxhighlight&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.</text>
      <sha1>78ick3fk5y2bjtr0hxkdq6b42m1xcum</sha1>
    </revision>
    <revision>
      <id>19</id>
      <parentid>18</parentid>
      <timestamp>2023-04-16T00:15:32Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>19</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1003" sha1="iqrs72edki8a88j0fdjv256srztcr29" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Category list==
{{#categorytree:TOC|hideroot|mode=pages}}

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

==== Help ====
To assign a page to a category, put the following line at the top of your page: &lt;syntaxhighlight inline=""&gt;[[Category:My category]]&lt;/syntaxhighlight&gt;. To create a new category if it does not exist yet, simple create a page with the prefix "Category:", for example "Category:My category".

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.</text>
      <sha1>iqrs72edki8a88j0fdjv256srztcr29</sha1>
    </revision>
    <revision>
      <id>20</id>
      <parentid>19</parentid>
      <timestamp>2023-04-16T00:16:18Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>20</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="988" sha1="b7xq2iocpythjch8bdl1v2drxehrhvb" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Category list==
{{#categorytree:TOC|hideroot|mode=pages}}

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

==== Help ====
To assign a page to a category, put the following line at the top of your page: &lt;code&gt;&lt;nowiki&gt;[[Category:My category]]&lt;/nowiki&gt;&lt;/code&gt;. To create a new category if it does not exist yet, simple create a page with the prefix "Category:", for example "Category:My category".

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.</text>
      <sha1>b7xq2iocpythjch8bdl1v2drxehrhvb</sha1>
    </revision>
    <revision>
      <id>21</id>
      <parentid>20</parentid>
      <timestamp>2023-04-16T00:22:58Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>21</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1331" sha1="m50jfvafnlx5xd4f0vdas3ucdoanxt0" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Category list==
{{#categorytree:TOC|hideroot|mode=pages}}

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

==== Help ====
To assign a page to a category, put the following line at the top of your page: &lt;code&gt;&lt;nowiki&gt;[[Category:My category]]&lt;/nowiki&gt;&lt;/code&gt;. To create a new category if it does not exist yet, simple create a page with the prefix "Category:", for example "Category:My category".

All new categories should either be subcategories of "TOC" to be displayed in the list on this page, or subcategories of other already existing categories. You can achieve this by placing this line at the top of the category's page: &lt;code&gt;&lt;nowiki&gt;[[Category:TOC]]&lt;/nowiki&gt;&lt;/code&gt;, similarly to how any other categories get assigned to pages.

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.</text>
      <sha1>m50jfvafnlx5xd4f0vdas3ucdoanxt0</sha1>
    </revision>
    <revision>
      <id>30</id>
      <parentid>21</parentid>
      <timestamp>2023-04-16T15:00:52Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <comment>/* Category list */</comment>
      <origin>30</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1327" sha1="6yanexys7apzdwhw7po4n85uijnwulp" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Page list==
{{#categorytree:TOC|hideroot|mode=pages}}

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

==== Help ====
To assign a page to a category, put the following line at the top of your page: &lt;code&gt;&lt;nowiki&gt;[[Category:My category]]&lt;/nowiki&gt;&lt;/code&gt;. To create a new category if it does not exist yet, simple create a page with the prefix "Category:", for example "Category:My category".

All new categories should either be subcategories of "TOC" to be displayed in the list on this page, or subcategories of other already existing categories. You can achieve this by placing this line at the top of the category's page: &lt;code&gt;&lt;nowiki&gt;[[Category:TOC]]&lt;/nowiki&gt;&lt;/code&gt;, similarly to how any other categories get assigned to pages.

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.</text>
      <sha1>6yanexys7apzdwhw7po4n85uijnwulp</sha1>
    </revision>
    <revision>
      <id>31</id>
      <parentid>30</parentid>
      <timestamp>2023-04-16T15:20:37Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>31</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1366" sha1="silkuh2uqnsxic97geve8mu2kdt9iam" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Page list==
You can find the list of all pages grouped by categories here: [[Category:TOC]].

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

==== Help ====
To assign a page to a category, put the following line at the top of your page: &lt;code&gt;&lt;nowiki&gt;[[Category:My category]]&lt;/nowiki&gt;&lt;/code&gt;. To create a new category if it does not exist yet, simple create a page with the prefix "Category:", for example "Category:My category".

All new categories should either be subcategories of "TOC" to be displayed in the list on this page, or subcategories of other already existing categories. You can achieve this by placing this line at the top of the category's page: &lt;code&gt;&lt;nowiki&gt;[[Category:TOC]]&lt;/nowiki&gt;&lt;/code&gt;, similarly to how any other categories get assigned to pages.

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.</text>
      <sha1>silkuh2uqnsxic97geve8mu2kdt9iam</sha1>
    </revision>
    <revision>
      <id>32</id>
      <parentid>31</parentid>
      <timestamp>2023-04-16T15:21:06Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>32</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1401" sha1="icgcq3uw0juqc9cfcor1c9s5l74k666" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Page list==
You can find the list of all pages grouped by categories here: [[:Category:TOC|Table of contents]].
[[Category:TOC]]
==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

==== Help ====
To assign a page to a category, put the following line at the top of your page: &lt;code&gt;&lt;nowiki&gt;[[Category:My category]]&lt;/nowiki&gt;&lt;/code&gt;. To create a new category if it does not exist yet, simple create a page with the prefix "Category:", for example "Category:My category".

All new categories should either be subcategories of "TOC" to be displayed in the list on this page, or subcategories of other already existing categories. You can achieve this by placing this line at the top of the category's page: &lt;code&gt;&lt;nowiki&gt;[[Category:TOC]]&lt;/nowiki&gt;&lt;/code&gt;, similarly to how any other categories get assigned to pages.

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.</text>
      <sha1>icgcq3uw0juqc9cfcor1c9s5l74k666</sha1>
    </revision>
    <revision>
      <id>65</id>
      <parentid>32</parentid>
      <timestamp>2023-05-21T23:01:03Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>65</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1555" sha1="hri51197esvruszpyhagb96fl7qw681" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Page list==
You can find the list of all pages grouped by categories here:
&lt;categorytree mode="pages"&gt;TOC&lt;/categorytree&gt;

'''Disclaimer:''' the above list might not be always up-to-date. For an always updated list of categories, you can check the [[:Category:TOC|Table of contents]].

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

====Help====
To assign a page to a category, put the following line at the top of your page: &lt;code&gt;&lt;nowiki&gt;[[Category:My category]]&lt;/nowiki&gt;&lt;/code&gt;. To create a new category if it does not exist yet, simple create a page with the prefix "Category:", for example "Category:My category".

All new categories should either be subcategories of "TOC" to be displayed in the list on this page, or subcategories of other already existing categories. You can achieve this by placing this line at the top of the category's page: &lt;code&gt;&lt;nowiki&gt;[[Category:TOC]]&lt;/nowiki&gt;&lt;/code&gt;, similarly to how any other categories get assigned to pages.

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.</text>
      <sha1>hri51197esvruszpyhagb96fl7qw681</sha1>
    </revision>
    <revision>
      <id>94</id>
      <parentid>65</parentid>
      <timestamp>2023-05-26T17:21:47Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>94</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1575" sha1="prac6ics9qs0voh1uyunm78awptkoje" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Page list==
You can find the list of all pages grouped by categories here:
&lt;categorytree mode="pages"&gt;TOC&lt;/categorytree&gt;

'''Disclaimer:''' the above list might not be always up-to-date. For an always updated list of categories, you can check the [[:Category:TOC|Table of contents]].

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

====Help====
To assign a page to a category, put the following line at the top or bottom of your page: &lt;code&gt;&lt;nowiki&gt;[[Category:My category]]&lt;/nowiki&gt;&lt;/code&gt;. To create a new category if it does not exist yet, simply create a page with the prefix "Category:", for example "Category:My category".

All new categories should either be subcategories of "TOC" to be displayed in the list on this page, or subcategories of other already existing categories. You can achieve this by placing this line at the top or bottom of the category's page: &lt;code&gt;&lt;nowiki&gt;[[Category:TOC]]&lt;/nowiki&gt;&lt;/code&gt;, similarly to how any other categories get assigned to pages.

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.</text>
      <sha1>prac6ics9qs0voh1uyunm78awptkoje</sha1>
    </revision>
    <revision>
      <id>131</id>
      <parentid>94</parentid>
      <timestamp>2023-08-02T23:59:45Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>/* Help */</comment>
      <origin>131</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1607" sha1="s5s6q9sm68tjifhltp30e7wetrlow0e" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Page list==
You can find the list of all pages grouped by categories here:
&lt;categorytree mode="pages"&gt;TOC&lt;/categorytree&gt;

'''Disclaimer:''' the above list might not be always up-to-date. For an always updated list of categories, you can check the [[:Category:TOC|Table of contents]].

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

====Help====
To assign a page to a category, put the following line at the top of your page: &lt;code&gt;&lt;nowiki&gt;[[Category:My category]]&lt;/nowiki&gt;&lt;/code&gt;.

To create a new category if it does not exist yet, simply create a page with the prefix "Category:", for example "Category:My category", and add a description of the category in the body.

All new categories should either be subcategories of "TOC" to be displayed in the list on this page, or subcategories of other already existing categories. You can achieve this by placing this line at the top of the category's page: &lt;code&gt;&lt;nowiki&gt;[[Category:TOC]]&lt;/nowiki&gt;&lt;/code&gt;, similarly to how any other categories get assigned to pages.

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.</text>
      <sha1>s5s6q9sm68tjifhltp30e7wetrlow0e</sha1>
    </revision>
    <revision>
      <id>132</id>
      <parentid>131</parentid>
      <timestamp>2023-08-03T00:00:09Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>132</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1444" sha1="5o7g1wzflfavq5t4j8cpwa0zgnz6c03" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Page list==
You can find the list of all pages grouped by categories here:
&lt;categorytree mode="pages"&gt;TOC&lt;/categorytree&gt;

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

====Help====
To assign a page to a category, put the following line at the top of your page: &lt;code&gt;&lt;nowiki&gt;[[Category:My category]]&lt;/nowiki&gt;&lt;/code&gt;.

To create a new category if it does not exist yet, simply create a page with the prefix "Category:", for example "Category:My category", and add a description of the category in the body.

All new categories should either be subcategories of "TOC" to be displayed in the list on this page, or subcategories of other already existing categories. You can achieve this by placing this line at the top of the category's page: &lt;code&gt;&lt;nowiki&gt;[[Category:TOC]]&lt;/nowiki&gt;&lt;/code&gt;, similarly to how any other categories get assigned to pages.

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.</text>
      <sha1>5o7g1wzflfavq5t4j8cpwa0zgnz6c03</sha1>
    </revision>
    <revision>
      <id>143</id>
      <parentid>132</parentid>
      <timestamp>2023-08-03T00:10:27Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>143</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1445" sha1="779yljrx34fzeuex12tg30zzxtp6364" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Page list==
You can find the list of all pages grouped by categories here: 
&lt;categorytree mode="pages"&gt;TOC&lt;/categorytree&gt;

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

====Help====
To assign a page to a category, put the following line at the top of your page: &lt;code&gt;&lt;nowiki&gt;[[Category:My category]]&lt;/nowiki&gt;&lt;/code&gt;.

To create a new category if it does not exist yet, simply create a page with the prefix "Category:", for example "Category:My category", and add a description of the category in the body.

All new categories should either be subcategories of "TOC" to be displayed in the list on this page, or subcategories of other already existing categories. You can achieve this by placing this line at the top of the category's page: &lt;code&gt;&lt;nowiki&gt;[[Category:TOC]]&lt;/nowiki&gt;&lt;/code&gt;, similarly to how any other categories get assigned to pages.

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.</text>
      <sha1>779yljrx34fzeuex12tg30zzxtp6364</sha1>
    </revision>
    <revision>
      <id>167</id>
      <parentid>143</parentid>
      <timestamp>2023-10-25T10:45:46Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>/* Help collapsed by default */</comment>
      <origin>167</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1495" sha1="pj0toszf33x2e53zxah5ogqetmr9aoa" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Page list==
You can find the list of all pages grouped by categories here: 
&lt;categorytree mode="pages"&gt;TOC&lt;/categorytree&gt;

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

====Help====

&lt;div class="mw-collapsible mw-collapsed"&gt;
To assign a page to a category, put the following line at the top of your page: &lt;code&gt;&lt;nowiki&gt;[[Category:My category]]&lt;/nowiki&gt;&lt;/code&gt;.

To create a new category if it does not exist yet, simply create a page with the prefix "Category:", for example "Category:My category", and add a description of the category in the body.

All new categories should either be subcategories of "TOC" to be displayed in the list on this page, or subcategories of other already existing categories. You can achieve this by placing this line at the top of the category's page: &lt;code&gt;&lt;nowiki&gt;[[Category:TOC]]&lt;/nowiki&gt;&lt;/code&gt;, similarly to how any other categories get assigned to pages.

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.
&lt;/div&gt;</text>
      <sha1>pj0toszf33x2e53zxah5ogqetmr9aoa</sha1>
    </revision>
    <revision>
      <id>169</id>
      <parentid>167</parentid>
      <timestamp>2023-10-25T10:51:55Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Added links section</comment>
      <origin>169</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1776" sha1="p59mvoqal56ls21z57bnebvn95n6grg" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Page list==
You can find the list of all pages grouped by categories here: 
&lt;categorytree mode="pages"&gt;TOC&lt;/categorytree&gt;

== Links ==

* [https://ksp2community.github.io/ KSP 2 Unofficial API Reference]
* [https://discord.gg/hHW5gpHxfE KSP 2 Modding Society Discord Server]
* [https://docs.spacewarp.org/ SpaceWarp Modding API Documentation]
* [https://github.com/KSP2Community KSP 2 Community GitHub]

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

====Help====

&lt;div class="mw-collapsible mw-collapsed"&gt;
To assign a page to a category, put the following line at the top of your page: &lt;code&gt;&lt;nowiki&gt;[[Category:My category]]&lt;/nowiki&gt;&lt;/code&gt;.

To create a new category if it does not exist yet, simply create a page with the prefix "Category:", for example "Category:My category", and add a description of the category in the body.

All new categories should either be subcategories of "TOC" to be displayed in the list on this page, or subcategories of other already existing categories. You can achieve this by placing this line at the top of the category's page: &lt;code&gt;&lt;nowiki&gt;[[Category:TOC]]&lt;/nowiki&gt;&lt;/code&gt;, similarly to how any other categories get assigned to pages.

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.
&lt;/div&gt;</text>
      <sha1>p59mvoqal56ls21z57bnebvn95n6grg</sha1>
    </revision>
    <revision>
      <id>170</id>
      <parentid>169</parentid>
      <timestamp>2023-10-25T10:54:24Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Added NuGet server link</comment>
      <origin>170</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1837" sha1="gy70pvtcib3dsb3whd7e3mkrosmymq8" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Page list==
You can find the list of all pages grouped by categories here: 
&lt;categorytree mode="pages"&gt;TOC&lt;/categorytree&gt;

== Links ==

* [https://ksp2community.github.io/ KSP 2 Unofficial API Reference]
* [https://discord.gg/hHW5gpHxfE KSP 2 Modding Society Discord Server]
* [https://docs.spacewarp.org/ SpaceWarp Modding API Documentation]
* [https://nuget.spacewarp.org KSP 2 Community NuGet Server]
* [https://github.com/KSP2Community KSP 2 Community GitHub]

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

====Help====

&lt;div class="mw-collapsible mw-collapsed"&gt;
To assign a page to a category, put the following line at the top of your page: &lt;code&gt;&lt;nowiki&gt;[[Category:My category]]&lt;/nowiki&gt;&lt;/code&gt;.

To create a new category if it does not exist yet, simply create a page with the prefix "Category:", for example "Category:My category", and add a description of the category in the body.

All new categories should either be subcategories of "TOC" to be displayed in the list on this page, or subcategories of other already existing categories. You can achieve this by placing this line at the top of the category's page: &lt;code&gt;&lt;nowiki&gt;[[Category:TOC]]&lt;/nowiki&gt;&lt;/code&gt;, similarly to how any other categories get assigned to pages.

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.
&lt;/div&gt;</text>
      <sha1>gy70pvtcib3dsb3whd7e3mkrosmymq8</sha1>
    </revision>
    <revision>
      <id>255</id>
      <parentid>170</parentid>
      <timestamp>2023-12-23T23:21:35Z</timestamp>
      <contributor>
        <username>Cheese</username>
        <id>7</id>
      </contributor>
      <comment>Update API link</comment>
      <origin>255</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1828" sha1="3dmn2mdf0pm1ceupp3b36vez6212vqn" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Page list==
You can find the list of all pages grouped by categories here: 
&lt;categorytree mode="pages"&gt;TOC&lt;/categorytree&gt;

== Links ==

* [https://api.kerbal.wiki KSP 2 Unofficial API Reference]
* [https://discord.gg/hHW5gpHxfE KSP 2 Modding Society Discord Server]
* [https://docs.spacewarp.org/ SpaceWarp Modding API Documentation]
* [https://nuget.spacewarp.org KSP 2 Community NuGet Server]
* [https://github.com/KSP2Community KSP 2 Community GitHub]

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

====Help====

&lt;div class="mw-collapsible mw-collapsed"&gt;
To assign a page to a category, put the following line at the top of your page: &lt;code&gt;&lt;nowiki&gt;[[Category:My category]]&lt;/nowiki&gt;&lt;/code&gt;.

To create a new category if it does not exist yet, simply create a page with the prefix "Category:", for example "Category:My category", and add a description of the category in the body.

All new categories should either be subcategories of "TOC" to be displayed in the list on this page, or subcategories of other already existing categories. You can achieve this by placing this line at the top of the category's page: &lt;code&gt;&lt;nowiki&gt;[[Category:TOC]]&lt;/nowiki&gt;&lt;/code&gt;, similarly to how any other categories get assigned to pages.

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.
&lt;/div&gt;</text>
      <sha1>3dmn2mdf0pm1ceupp3b36vez6212vqn</sha1>
    </revision>
  </page>
  <page>
    <title>Category:TOC</title>
    <ns>14</ns>
    <id>3</id>
    <revision>
      <id>6</id>
      <timestamp>2023-04-15T23:06:20Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <comment>Created blank page</comment>
      <origin>6</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Getting started</title>
    <ns>14</ns>
    <id>4</id>
    <revision>
      <id>7</id>
      <timestamp>2023-04-15T23:08:18Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "This category should contain articles on the very basics of KSP 2 modding and how to set up everything and get started."</comment>
      <origin>7</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="119" sha1="4zm9z95i38ogq3xxovuefs6hq4s3v5i" xml:space="preserve">This category should contain articles on the very basics of KSP 2 modding and how to set up everything and get started.</text>
      <sha1>4zm9z95i38ogq3xxovuefs6hq4s3v5i</sha1>
    </revision>
    <revision>
      <id>8</id>
      <parentid>7</parentid>
      <timestamp>2023-04-15T23:08:39Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>8</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="137" sha1="dk7e3j56mdtpoy8rthiqr9wtzcenwk2" xml:space="preserve">[[Category:TOC]]

This category should contain articles on the very basics of KSP 2 modding and how to set up everything and get started.</text>
      <sha1>dk7e3j56mdtpoy8rthiqr9wtzcenwk2</sha1>
    </revision>
    <revision>
      <id>9</id>
      <parentid>8</parentid>
      <timestamp>2023-04-15T23:08:45Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>9</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="136" sha1="q6zeoacyne7wl30frus9xsfdgiqd217" xml:space="preserve">[[Category:TOC]]
This category should contain articles on the very basics of KSP 2 modding and how to set up everything and get started.</text>
      <sha1>q6zeoacyne7wl30frus9xsfdgiqd217</sha1>
    </revision>
    <revision>
      <id>163</id>
      <parentid>9</parentid>
      <timestamp>2023-10-24T20:11:26Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>163</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="142" sha1="5h247e73k41zv3e9x09u03kpkhgzr38" xml:space="preserve">This category should contain articles on the very basics of KSP 2 modding and how to set up everything and get started.
[[Category:Tutorials]]</text>
      <sha1>5h247e73k41zv3e9x09u03kpkhgzr38</sha1>
    </revision>
  </page>
  <page>
    <title>User:Cheese</title>
    <ns>2</ns>
    <id>6</id>
    <revision>
      <id>22</id>
      <timestamp>2023-04-16T12:38:11Z</timestamp>
      <contributor>
        <username>Cheese</username>
        <id>7</id>
      </contributor>
      <comment>Created my own user page :3</comment>
      <origin>22</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="71" sha1="cw0ef22bmwygdaudht8k1t5i14dck61" xml:space="preserve">Lead developer of [https://github.com/SpaceWarpDev/SpaceWarp SpaceWarp]</text>
      <sha1>cw0ef22bmwygdaudht8k1t5i14dck61</sha1>
    </revision>
    <revision>
      <id>95</id>
      <parentid>22</parentid>
      <timestamp>2023-05-31T16:53:05Z</timestamp>
      <contributor>
        <username>Cheese</username>
        <id>7</id>
      </contributor>
      <minor/>
      <origin>95</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="91" sha1="odmn9qujcr7q09xg2c5dk7l0b806t8e" xml:space="preserve">Lead developer of [https://github.com/SpaceWarpDev/SpaceWarp SpaceWarp]

Admin of this wiki</text>
      <sha1>odmn9qujcr7q09xg2c5dk7l0b806t8e</sha1>
    </revision>
  </page>
  <page>
    <title>Setting up a Development Environment</title>
    <ns>0</ns>
    <id>7</id>
    <revision>
      <id>23</id>
      <timestamp>2023-04-16T13:17:14Z</timestamp>
      <contributor>
        <username>Cheese</username>
        <id>7</id>
      </contributor>
      <comment>Initial Creation</comment>
      <origin>23</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3854" sha1="hlsiaajdqs67nzr02cl52laifodvu8f" xml:space="preserve">This page provides information on how to set up a development environment for Kerbal Space Program 2 modding.

==Prerequisites==
This guide assumes you have the following prerequisites satisfied

# That you own a copy of Kerbal Space Program 2
# That you have dotnet installed
# That you have an IDE such as Rider or Visual Studio, or some other way to compile C# code into a DLL
==Template Setup==
This is the first step in setting up a development environment, depending on which IDE/Method of compilation you are using it has to be done in a few different ways.

===Visual Studio or no IDE===
First install the template using the following command in the command line
 dotnet new install SpaceWarp.Template
====Visual Studio====
If you are then using Visual Studio to develop the mods, the next steps are as follows
# Open Visual Studio
# ''Create a new project''
# Search for "SpaceWarp" in the search bar at the top, then select it and click ''Next''
# Fill out your project name and click ''Next''
# Fill out the fields on the following page. You can find more information about the parameters by hovering over the corresponding "i" icons
# Click on ''Create'' and your project will be made.
====No IDE====
If you aren't using Visual Studio, use the following command but replace all the parameters with the ones to describe your mod
 dotnet new spacewarpmod -n MyAwesomeModName -G my_awesome_mod_name -A "munix" -B "com.github.munix.my_awesome_mod_name" -M "My Awesome Mod Name" -D "This is the description of my awesome mod." -S "https://github.com/munix/MyAwesomeModName" -V "1.0.0"
{| class="wikitable" style="margin:auto"
|+ Parameters (Bold entries are required)
|-
! Parameter !! Console Argument !! Short Argument !! Description !! Default Value
|-
| Project name || --name || -n || The name of your project in PascalCase || &lt;code&gt;&lt;current directory name&gt;&lt;/code&gt;
|-
| TargetFramework || --TargetFramework || -T || .NET version to target, default value is set for KSP 2 || &lt;code&gt;.netstandard2.0&lt;/code&gt;
|-
| UnityVersion || --UnityVersion || -U || Unity version to target, default value is set for KSP 2 || &lt;code&gt;2020.3.33&lt;/code&gt;
|-
| '''GUID''' || --GUID || -G || Your mod's ID which serves as the folder and .dll name of your built mod, used by SpaceWarp || -
|-
| '''Author''' || --Author || -A || The name(s) of the mod's author(s) || -
|-
| '''BepinexName''' || --BepinexName || -B || Your mod's ID in domain syntax, for example: com.github.author.modname, used by BepInEx || -
|-
| '''ModName''' || --ModName || -M || The name of your mod || -
|-
| Description || --Description || -D || A short description of your mod || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Source || --Source || -S || The repository or download location of the mod's source code || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Check Version	|| --CheckVersion || -C || URL to up-to-date swinfo.json for version checking (for example: https://raw.githubusercontent.com/author/mod/main/swinfo.json) || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Version || --Version || -V || The mod's initial version || &lt;code&gt;1.0.0&lt;/code&gt;
|}
===Rider===
For rider the steps are as follows
# Download the latest release of [https://github.com/arthomnix/KerbalDev/releases KerbalDev]
# In Rider, install the plugin by going to the settings/plugins, and click the gear icon to install the zip file as a plugin from disk
# Now create a new solution via the new SpaceWarp Mod template, and fill out every parameter except Description/Source/Check Version
==Post Template Instantiation==
After you have instantiated the template, the next steps are to copy KSP2's DLL to the project, this is done by copying &lt;code&gt;&lt;KSP2 Root&gt;/KSP2_x64_Data/Managed/Assembly-CSharp.dll&lt;/code&gt; intoto the &lt;code&gt;&lt;project root&gt;/external_dlls/&lt;/code&gt; folder

Now you should be set up with an example project and can get started on your mod.</text>
      <sha1>hlsiaajdqs67nzr02cl52laifodvu8f</sha1>
    </revision>
    <revision>
      <id>24</id>
      <parentid>23</parentid>
      <timestamp>2023-04-16T13:18:00Z</timestamp>
      <contributor>
        <username>Cheese</username>
        <id>7</id>
      </contributor>
      <minor/>
      <comment>Add category</comment>
      <origin>24</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3883" sha1="2rmmdy8l6576sxg8ngoy41d5bdomniv" xml:space="preserve">[[Category:Getting Started]]
This page provides information on how to set up a development environment for Kerbal Space Program 2 modding.

==Prerequisites==
This guide assumes you have the following prerequisites satisfied

# That you own a copy of Kerbal Space Program 2
# That you have dotnet installed
# That you have an IDE such as Rider or Visual Studio, or some other way to compile C# code into a DLL
==Template Setup==
This is the first step in setting up a development environment, depending on which IDE/Method of compilation you are using it has to be done in a few different ways.

===Visual Studio or no IDE===
First install the template using the following command in the command line
 dotnet new install SpaceWarp.Template
====Visual Studio====
If you are then using Visual Studio to develop the mods, the next steps are as follows
# Open Visual Studio
# ''Create a new project''
# Search for "SpaceWarp" in the search bar at the top, then select it and click ''Next''
# Fill out your project name and click ''Next''
# Fill out the fields on the following page. You can find more information about the parameters by hovering over the corresponding "i" icons
# Click on ''Create'' and your project will be made.
====No IDE====
If you aren't using Visual Studio, use the following command but replace all the parameters with the ones to describe your mod
 dotnet new spacewarpmod -n MyAwesomeModName -G my_awesome_mod_name -A "munix" -B "com.github.munix.my_awesome_mod_name" -M "My Awesome Mod Name" -D "This is the description of my awesome mod." -S "https://github.com/munix/MyAwesomeModName" -V "1.0.0"
{| class="wikitable" style="margin:auto"
|+ Parameters (Bold entries are required)
|-
! Parameter !! Console Argument !! Short Argument !! Description !! Default Value
|-
| Project name || --name || -n || The name of your project in PascalCase || &lt;code&gt;&lt;current directory name&gt;&lt;/code&gt;
|-
| TargetFramework || --TargetFramework || -T || .NET version to target, default value is set for KSP 2 || &lt;code&gt;.netstandard2.0&lt;/code&gt;
|-
| UnityVersion || --UnityVersion || -U || Unity version to target, default value is set for KSP 2 || &lt;code&gt;2020.3.33&lt;/code&gt;
|-
| '''GUID''' || --GUID || -G || Your mod's ID which serves as the folder and .dll name of your built mod, used by SpaceWarp || -
|-
| '''Author''' || --Author || -A || The name(s) of the mod's author(s) || -
|-
| '''BepinexName''' || --BepinexName || -B || Your mod's ID in domain syntax, for example: com.github.author.modname, used by BepInEx || -
|-
| '''ModName''' || --ModName || -M || The name of your mod || -
|-
| Description || --Description || -D || A short description of your mod || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Source || --Source || -S || The repository or download location of the mod's source code || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Check Version	|| --CheckVersion || -C || URL to up-to-date swinfo.json for version checking (for example: https://raw.githubusercontent.com/author/mod/main/swinfo.json) || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Version || --Version || -V || The mod's initial version || &lt;code&gt;1.0.0&lt;/code&gt;
|}
===Rider===
For rider the steps are as follows
# Download the latest release of [https://github.com/arthomnix/KerbalDev/releases KerbalDev]
# In Rider, install the plugin by going to the settings/plugins, and click the gear icon to install the zip file as a plugin from disk
# Now create a new solution via the new SpaceWarp Mod template, and fill out every parameter except Description/Source/Check Version
==Post Template Instantiation==
After you have instantiated the template, the next steps are to copy KSP2's DLL to the project, this is done by copying &lt;code&gt;&lt;KSP2 Root&gt;/KSP2_x64_Data/Managed/Assembly-CSharp.dll&lt;/code&gt; intoto the &lt;code&gt;&lt;project root&gt;/external_dlls/&lt;/code&gt; folder

Now you should be set up with an example project and can get started on your mod.</text>
      <sha1>2rmmdy8l6576sxg8ngoy41d5bdomniv</sha1>
    </revision>
    <revision>
      <id>25</id>
      <parentid>24</parentid>
      <timestamp>2023-04-16T13:18:19Z</timestamp>
      <contributor>
        <username>Cheese</username>
        <id>7</id>
      </contributor>
      <minor/>
      <comment>Fix category</comment>
      <origin>25</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3883" sha1="23ilqdle396wllmb9p1x8aho46v8p8u" xml:space="preserve">[[Category:Getting started]]
This page provides information on how to set up a development environment for Kerbal Space Program 2 modding.

==Prerequisites==
This guide assumes you have the following prerequisites satisfied

# That you own a copy of Kerbal Space Program 2
# That you have dotnet installed
# That you have an IDE such as Rider or Visual Studio, or some other way to compile C# code into a DLL
==Template Setup==
This is the first step in setting up a development environment, depending on which IDE/Method of compilation you are using it has to be done in a few different ways.

===Visual Studio or no IDE===
First install the template using the following command in the command line
 dotnet new install SpaceWarp.Template
====Visual Studio====
If you are then using Visual Studio to develop the mods, the next steps are as follows
# Open Visual Studio
# ''Create a new project''
# Search for "SpaceWarp" in the search bar at the top, then select it and click ''Next''
# Fill out your project name and click ''Next''
# Fill out the fields on the following page. You can find more information about the parameters by hovering over the corresponding "i" icons
# Click on ''Create'' and your project will be made.
====No IDE====
If you aren't using Visual Studio, use the following command but replace all the parameters with the ones to describe your mod
 dotnet new spacewarpmod -n MyAwesomeModName -G my_awesome_mod_name -A "munix" -B "com.github.munix.my_awesome_mod_name" -M "My Awesome Mod Name" -D "This is the description of my awesome mod." -S "https://github.com/munix/MyAwesomeModName" -V "1.0.0"
{| class="wikitable" style="margin:auto"
|+ Parameters (Bold entries are required)
|-
! Parameter !! Console Argument !! Short Argument !! Description !! Default Value
|-
| Project name || --name || -n || The name of your project in PascalCase || &lt;code&gt;&lt;current directory name&gt;&lt;/code&gt;
|-
| TargetFramework || --TargetFramework || -T || .NET version to target, default value is set for KSP 2 || &lt;code&gt;.netstandard2.0&lt;/code&gt;
|-
| UnityVersion || --UnityVersion || -U || Unity version to target, default value is set for KSP 2 || &lt;code&gt;2020.3.33&lt;/code&gt;
|-
| '''GUID''' || --GUID || -G || Your mod's ID which serves as the folder and .dll name of your built mod, used by SpaceWarp || -
|-
| '''Author''' || --Author || -A || The name(s) of the mod's author(s) || -
|-
| '''BepinexName''' || --BepinexName || -B || Your mod's ID in domain syntax, for example: com.github.author.modname, used by BepInEx || -
|-
| '''ModName''' || --ModName || -M || The name of your mod || -
|-
| Description || --Description || -D || A short description of your mod || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Source || --Source || -S || The repository or download location of the mod's source code || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Check Version	|| --CheckVersion || -C || URL to up-to-date swinfo.json for version checking (for example: https://raw.githubusercontent.com/author/mod/main/swinfo.json) || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Version || --Version || -V || The mod's initial version || &lt;code&gt;1.0.0&lt;/code&gt;
|}
===Rider===
For rider the steps are as follows
# Download the latest release of [https://github.com/arthomnix/KerbalDev/releases KerbalDev]
# In Rider, install the plugin by going to the settings/plugins, and click the gear icon to install the zip file as a plugin from disk
# Now create a new solution via the new SpaceWarp Mod template, and fill out every parameter except Description/Source/Check Version
==Post Template Instantiation==
After you have instantiated the template, the next steps are to copy KSP2's DLL to the project, this is done by copying &lt;code&gt;&lt;KSP2 Root&gt;/KSP2_x64_Data/Managed/Assembly-CSharp.dll&lt;/code&gt; intoto the &lt;code&gt;&lt;project root&gt;/external_dlls/&lt;/code&gt; folder

Now you should be set up with an example project and can get started on your mod.</text>
      <sha1>23ilqdle396wllmb9p1x8aho46v8p8u</sha1>
    </revision>
    <revision>
      <id>26</id>
      <parentid>25</parentid>
      <timestamp>2023-04-16T14:43:31Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <comment>Some minor formatting changes + added required versions of VS and .NET</comment>
      <origin>26</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3910" sha1="o64v7bam697m85gf67o20w3tprzqr0q" xml:space="preserve">[[Category:Getting started]]
This page provides information on how to set up a development environment for Kerbal Space Program 2 modding.

==Prerequisites==
This guide assumes you have the following prerequisites satisfied

# That you own a copy of Kerbal Space Program 2
# That you have the .NET 6 SDK or newer installed
# That you have an IDE such as Rider or Visual Studio 2022, or some other way to compile C# code into a DLL
==Template Setup==
This is the first step in setting up a development environment, depending on which IDE/method of compilation you are using it has to be done in a few different ways.

===Visual Studio or no IDE===
First install the template using the following command in the command line:
 dotnet new install SpaceWarp.Template
====Visual Studio====
If you are then using Visual Studio to develop the mods, the next steps are as follows:
# Open Visual Studio
# ''Create a new project''
# Search for "SpaceWarp" in the search bar at the top, then select it and click ''Next''
# Fill out your project name and click ''Next''
# Fill out the fields on the following page. You can find more information about the parameters by hovering over the corresponding "i" icons
# Click on ''Create'' and your project will be made.
====No IDE====
If you aren't using Visual Studio, use the following command but replace all the parameters with the ones to describe your mod
 dotnet new spacewarpmod -n MyAwesomeModName -G my_awesome_mod_name -A "munix" -B "com.github.munix.my_awesome_mod_name" -M "My Awesome Mod Name" -D "This is the description of my awesome mod." -S "https://github.com/munix/MyAwesomeModName" -V "1.0.0"
{| class="wikitable" style="margin:auto"
|+ Parameters (Bold entries are required)
|-
! Parameter !! Console Argument !! Short Argument !! Description !! Default Value
|-
| Project name || --name || -n || The name of your project in PascalCase || &lt;code&gt;&lt;current directory name&gt;&lt;/code&gt;
|-
| TargetFramework || --TargetFramework || -T || .NET version to target, default value is set for KSP 2 || &lt;code&gt;.netstandard2.0&lt;/code&gt;
|-
| UnityVersion || --UnityVersion || -U || Unity version to target, default value is set for KSP 2 || &lt;code&gt;2020.3.33&lt;/code&gt;
|-
| '''GUID''' || --GUID || -G || Your mod's ID which serves as the folder and .dll name of your built mod, used by SpaceWarp || -
|-
| '''Author''' || --Author || -A || The name(s) of the mod's author(s) || -
|-
| '''BepinexName''' || --BepinexName || -B || Your mod's ID in domain syntax, for example: com.github.author.modname, used by BepInEx || -
|-
| '''ModName''' || --ModName || -M || The name of your mod || -
|-
| Description || --Description || -D || A short description of your mod || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Source || --Source || -S || The repository or download location of the mod's source code || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Check Version	|| --CheckVersion || -C || URL to up-to-date swinfo.json for version checking (for example: https://raw.githubusercontent.com/author/mod/main/swinfo.json) || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Version || --Version || -V || The mod's initial version || &lt;code&gt;1.0.0&lt;/code&gt;
|}
===Rider===
For Rider the steps are as follows:
# Download the latest release of [https://github.com/arthomnix/KerbalDev/releases KerbalDev]
# In Rider, install the plugin by going to the Settings -&gt; Plugins, and click the gear icon to install the zip file as a plugin from disk
# Now create a new solution via the new SpaceWarp Mod template, and fill out every parameter except Description/Source/Check Version
==Post Template Instantiation==
After you have instantiated the template, the next steps are to copy KSP2's DLL to the project, this is done by copying &lt;code&gt;&lt;KSP2 Root&gt;/KSP2_x64_Data/Managed/Assembly-CSharp.dll&lt;/code&gt; into the &lt;code&gt;&lt;project root&gt;/external_dlls/&lt;/code&gt; folder.

Now you should be set up with an example project and can get started on your mod.</text>
      <sha1>o64v7bam697m85gf67o20w3tprzqr0q</sha1>
    </revision>
    <revision>
      <id>27</id>
      <parentid>26</parentid>
      <timestamp>2023-04-16T14:43:45Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>27</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3911" sha1="44xc1k2n4c1dasyp7wew5iyrgjacjnz" xml:space="preserve">[[Category:Getting started]]
This page provides information on how to set up a development environment for Kerbal Space Program 2 modding.

==Prerequisites==
This guide assumes you have the following prerequisites satisfied:

# That you own a copy of Kerbal Space Program 2
# That you have the .NET 6 SDK or newer installed
# That you have an IDE such as Rider or Visual Studio 2022, or some other way to compile C# code into a DLL
==Template Setup==
This is the first step in setting up a development environment, depending on which IDE/method of compilation you are using it has to be done in a few different ways.

===Visual Studio or no IDE===
First install the template using the following command in the command line:
 dotnet new install SpaceWarp.Template
====Visual Studio====
If you are then using Visual Studio to develop the mods, the next steps are as follows:
# Open Visual Studio
# ''Create a new project''
# Search for "SpaceWarp" in the search bar at the top, then select it and click ''Next''
# Fill out your project name and click ''Next''
# Fill out the fields on the following page. You can find more information about the parameters by hovering over the corresponding "i" icons
# Click on ''Create'' and your project will be made.
====No IDE====
If you aren't using Visual Studio, use the following command but replace all the parameters with the ones to describe your mod
 dotnet new spacewarpmod -n MyAwesomeModName -G my_awesome_mod_name -A "munix" -B "com.github.munix.my_awesome_mod_name" -M "My Awesome Mod Name" -D "This is the description of my awesome mod." -S "https://github.com/munix/MyAwesomeModName" -V "1.0.0"
{| class="wikitable" style="margin:auto"
|+ Parameters (Bold entries are required)
|-
! Parameter !! Console Argument !! Short Argument !! Description !! Default Value
|-
| Project name || --name || -n || The name of your project in PascalCase || &lt;code&gt;&lt;current directory name&gt;&lt;/code&gt;
|-
| TargetFramework || --TargetFramework || -T || .NET version to target, default value is set for KSP 2 || &lt;code&gt;.netstandard2.0&lt;/code&gt;
|-
| UnityVersion || --UnityVersion || -U || Unity version to target, default value is set for KSP 2 || &lt;code&gt;2020.3.33&lt;/code&gt;
|-
| '''GUID''' || --GUID || -G || Your mod's ID which serves as the folder and .dll name of your built mod, used by SpaceWarp || -
|-
| '''Author''' || --Author || -A || The name(s) of the mod's author(s) || -
|-
| '''BepinexName''' || --BepinexName || -B || Your mod's ID in domain syntax, for example: com.github.author.modname, used by BepInEx || -
|-
| '''ModName''' || --ModName || -M || The name of your mod || -
|-
| Description || --Description || -D || A short description of your mod || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Source || --Source || -S || The repository or download location of the mod's source code || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Check Version	|| --CheckVersion || -C || URL to up-to-date swinfo.json for version checking (for example: https://raw.githubusercontent.com/author/mod/main/swinfo.json) || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Version || --Version || -V || The mod's initial version || &lt;code&gt;1.0.0&lt;/code&gt;
|}
===Rider===
For Rider the steps are as follows:
# Download the latest release of [https://github.com/arthomnix/KerbalDev/releases KerbalDev]
# In Rider, install the plugin by going to the Settings -&gt; Plugins, and click the gear icon to install the zip file as a plugin from disk
# Now create a new solution via the new SpaceWarp Mod template, and fill out every parameter except Description/Source/Check Version
==Post Template Instantiation==
After you have instantiated the template, the next steps are to copy KSP2's DLL to the project, this is done by copying &lt;code&gt;&lt;KSP2 Root&gt;/KSP2_x64_Data/Managed/Assembly-CSharp.dll&lt;/code&gt; into the &lt;code&gt;&lt;project root&gt;/external_dlls/&lt;/code&gt; folder.

Now you should be set up with an example project and can get started on your mod.</text>
      <sha1>44xc1k2n4c1dasyp7wew5iyrgjacjnz</sha1>
    </revision>
    <revision>
      <id>308</id>
      <parentid>27</parentid>
      <timestamp>2024-01-13T14:03:22Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>308</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="753" sha1="f05kg1rzmomzzonaihzs99mh7arhji4" xml:space="preserve">[[Category:Getting started]]
There are three main types of projects that you will be creating most of the time:

* '''Unity project''' - used to add objects such as parts or planets into the game.
* '''.NET project''' - mostly composed of C# code, useful for example for various small QoL and gameplay enhancements or fixes, etc.
* '''Mixed project''' - a combination of the previous two, used for example if you want to create parts with custom modules, or when making a gameplay tool with a UI.

To set up a standalone Unity project, see [[Setting up Unity]].

For the .NET and mixed project types, you can use the [https://github.com/SpaceWarpDev/SpaceWarp.Template SpaceWarp.Template]. Further instructions are provided on the repository's homepage.</text>
      <sha1>f05kg1rzmomzzonaihzs99mh7arhji4</sha1>
    </revision>
  </page>
  <page>
    <title>Category:KSP 1 code conversion</title>
    <ns>14</ns>
    <id>8</id>
    <revision>
      <id>28</id>
      <timestamp>2023-04-16T14:55:30Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "[[Category:TOS]] Guides and tips on how to adapt KSP 1 mod code to KSP 2."</comment>
      <origin>28</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="73" sha1="k2qrj2pujcrqrfoka2uuamic0lnb6ym" xml:space="preserve">[[Category:TOS]]
Guides and tips on how to adapt KSP 1 mod code to KSP 2.</text>
      <sha1>k2qrj2pujcrqrfoka2uuamic0lnb6ym</sha1>
    </revision>
    <revision>
      <id>29</id>
      <parentid>28</parentid>
      <timestamp>2023-04-16T14:55:45Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>29</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="73" sha1="khi72oc8fkidv6c48oxe0vs1634fhce" xml:space="preserve">[[Category:TOC]]
Guides and tips on how to adapt KSP 1 mod code to KSP 2.</text>
      <sha1>khi72oc8fkidv6c48oxe0vs1634fhce</sha1>
    </revision>
  </page>
  <page>
    <title>Orbits and PatchedConicsOrbit methods and info</title>
    <ns>0</ns>
    <id>9</id>
    <revision>
      <id>33</id>
      <timestamp>2023-04-16T19:09:52Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <comment>Initial version - very rough. Needs editing and a lot more info</comment>
      <origin>33</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3543" sha1="i2j7ii1skb78xqu6h5tnfxkdbkf19ns" xml:space="preserve">{{DISPLAYTITLE:Orbits and PatchedConicsOrbit methods and info}}
[[Category:KSP 1 code conversion]]

When porting from KSP1 to KSP2 one of the first things you're likely to encounter is the fact that where KSP1 defined an orbit using the Orbit class, in KSP2 it's now the PatchedConicsOrbit class. These classes have a lot in common; for example, there are a number of methods and properties where the names are almost identical other than a change of case for the initial character. Nevertheless, there are a few differences that you should know about when porting KSP1 code to work in KSP2.

So where you might have a variable of type Orbit, now you'll mostly use a variable of type PatchedConicsOrbit.
{| class="wikitable"
|+Orbit vs PatchedConicOrbit Properties
!KSP1
!KSP2
|-
|Orbit o;
|PatchedConicsOrbit o;
|-
|o.referenceBody.position
|o.referenceBody.Position.localPosition
|-
|o.referenceBody.transform.up
|o.referenceBody.transform.up.vector
|-
|o.referenceBody.transform.right
|o.referenceBody.transform.right.vector
|-
|o.referenceBody.Radius
|o.referenceBody.radius
|-
|o.referenceBody.orbit
|o.referenceBody.Orbit
|-
|o.LAN
|o.longitudeOfAscendingNode
|-
|Planetarium.up
|o.ReferenceFrame.up.vector
|-
|Planetarium.right
|o.ReferenceFrame.right.vector
|-
|o.PeR
|o.Periapsis
|-
|o.PeA
|o.PeriapsisArl
|-
|o.ApR
|o.Apoapsis
|-
|o.ApA
|o.ApoapsisArl
|-
|o.trueAnomaly
|o.TrueAnomaly
|-
|o.patchEndTransition
|o.PatchEndTransition
|-
|o.referenceBody.timeWarpAltitudeLimits [n]
|o.referenceBody.TimeWarpAltitudeOffset*n
|-
|
|
|}
{| class="wikitable"
|+Orbit vs PatchedConicOrbit Methods
!KSP1
!KSP2
|-
|o.getOrbitalVelocityAtUT()
|o.GetOrbitalVelocityAtUTZup()
|-
|o.getRelativePositionAtUT()
|o.GetRelativePositionAtUT()
|-
|o.GetOrbitNormal()
|o.GetRelativeOrbitNormal()
|-
|o.referenceBody.GetLatitude()
|o.referenceBody.GetLatLonAltFromRadius()
|-
|
|
|}


Body Type: Properties and Methods

TypeCelestialBody -&gt; CelestialBodyComponent

Vessel Type: Properties and Methods

Coordinate Systems

Useful Code Block Conversions

Was

o.GetOrbitalStateVectorsAtUT(UT, out pos, out vel);

newOrbit.UpdateFromStateVectors(pos, vel, o.referenceBody, UT);

Is

o.GetOrbitalStateVectorsAtUT(UT, out pos, out vel);

KSP.Sim.Position position = new KSP.Sim.Position(o.referenceBody.coordinateSystem, OrbitExtensions.SwapYZ(pos - o.referenceBody.Position.localPosition));

KSP.Sim.Velocity velocity = new KSP.Sim.Velocity(o.referenceBody.relativeToMotion, OrbitExtensions.SwapYZ(vel));

newOrbit.UpdateFromStateVectors(position, velocity, o.referenceBody, UT);

Was

PatchedConics.SolverParameters solverParameters = new PatchedConics.SolverParameters();

Is

PatchedConicSolver.SolverParameters solverParameters = new PatchedConicSolver.SolverParameters();

Was

PatchedConics.CalculatePatch(o, nextOrbit, UT, solverParameters, null);

Is

nextOrbit = o.NextPatch as PatchedConicsOrbit;

Was

o.UTAtMeanAnomaly(o.GetMeanAnomalyAtEccentricAnomaly(o.GetEccentricAnomalyAtTrueAnomaly(trueAnomaly)), UT);

Is

o.GetUTforTrueAnomaly(trueAnomaly*UtilMath.Deg2Rad, o.period);

New Code

public static Vector3d DvToBurnVec(PatchedConicsOrbit o, Vector3d dV, double UT)

{

Vector3d burnVec;

burnVec.x = Vector3d.Dot(dV, o.RadialPlus(UT));

burnVec.y = Vector3d.Dot(dV, o.NormalPlus(UT));

burnVec.z = Vector3d.Dot(dV, -1 * o.Prograde(UT)); return burnVec;

}

public static Vector3d BurnVecToDv(PatchedConicsOrbit o, Vector3d burnVec, double UT) { return burnVec.x * o.RadialPlus(UT) + burnVec.y * o.NormalPlus(UT) - burnVec.z * o.Prograde(UT); }</text>
      <sha1>i2j7ii1skb78xqu6h5tnfxkdbkf19ns</sha1>
    </revision>
    <revision>
      <id>34</id>
      <parentid>33</parentid>
      <timestamp>2023-04-16T21:15:17Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Admin moved page [[Translating KSP1 code to KSP2]] to [[Orbits and PatchedConicsOrbit methods and info]] without leaving a redirect: Name change</comment>
      <origin>33</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3543" sha1="i2j7ii1skb78xqu6h5tnfxkdbkf19ns" xml:space="preserve">{{DISPLAYTITLE:Orbits and PatchedConicsOrbit methods and info}}
[[Category:KSP 1 code conversion]]

When porting from KSP1 to KSP2 one of the first things you're likely to encounter is the fact that where KSP1 defined an orbit using the Orbit class, in KSP2 it's now the PatchedConicsOrbit class. These classes have a lot in common; for example, there are a number of methods and properties where the names are almost identical other than a change of case for the initial character. Nevertheless, there are a few differences that you should know about when porting KSP1 code to work in KSP2.

So where you might have a variable of type Orbit, now you'll mostly use a variable of type PatchedConicsOrbit.
{| class="wikitable"
|+Orbit vs PatchedConicOrbit Properties
!KSP1
!KSP2
|-
|Orbit o;
|PatchedConicsOrbit o;
|-
|o.referenceBody.position
|o.referenceBody.Position.localPosition
|-
|o.referenceBody.transform.up
|o.referenceBody.transform.up.vector
|-
|o.referenceBody.transform.right
|o.referenceBody.transform.right.vector
|-
|o.referenceBody.Radius
|o.referenceBody.radius
|-
|o.referenceBody.orbit
|o.referenceBody.Orbit
|-
|o.LAN
|o.longitudeOfAscendingNode
|-
|Planetarium.up
|o.ReferenceFrame.up.vector
|-
|Planetarium.right
|o.ReferenceFrame.right.vector
|-
|o.PeR
|o.Periapsis
|-
|o.PeA
|o.PeriapsisArl
|-
|o.ApR
|o.Apoapsis
|-
|o.ApA
|o.ApoapsisArl
|-
|o.trueAnomaly
|o.TrueAnomaly
|-
|o.patchEndTransition
|o.PatchEndTransition
|-
|o.referenceBody.timeWarpAltitudeLimits [n]
|o.referenceBody.TimeWarpAltitudeOffset*n
|-
|
|
|}
{| class="wikitable"
|+Orbit vs PatchedConicOrbit Methods
!KSP1
!KSP2
|-
|o.getOrbitalVelocityAtUT()
|o.GetOrbitalVelocityAtUTZup()
|-
|o.getRelativePositionAtUT()
|o.GetRelativePositionAtUT()
|-
|o.GetOrbitNormal()
|o.GetRelativeOrbitNormal()
|-
|o.referenceBody.GetLatitude()
|o.referenceBody.GetLatLonAltFromRadius()
|-
|
|
|}


Body Type: Properties and Methods

TypeCelestialBody -&gt; CelestialBodyComponent

Vessel Type: Properties and Methods

Coordinate Systems

Useful Code Block Conversions

Was

o.GetOrbitalStateVectorsAtUT(UT, out pos, out vel);

newOrbit.UpdateFromStateVectors(pos, vel, o.referenceBody, UT);

Is

o.GetOrbitalStateVectorsAtUT(UT, out pos, out vel);

KSP.Sim.Position position = new KSP.Sim.Position(o.referenceBody.coordinateSystem, OrbitExtensions.SwapYZ(pos - o.referenceBody.Position.localPosition));

KSP.Sim.Velocity velocity = new KSP.Sim.Velocity(o.referenceBody.relativeToMotion, OrbitExtensions.SwapYZ(vel));

newOrbit.UpdateFromStateVectors(position, velocity, o.referenceBody, UT);

Was

PatchedConics.SolverParameters solverParameters = new PatchedConics.SolverParameters();

Is

PatchedConicSolver.SolverParameters solverParameters = new PatchedConicSolver.SolverParameters();

Was

PatchedConics.CalculatePatch(o, nextOrbit, UT, solverParameters, null);

Is

nextOrbit = o.NextPatch as PatchedConicsOrbit;

Was

o.UTAtMeanAnomaly(o.GetMeanAnomalyAtEccentricAnomaly(o.GetEccentricAnomalyAtTrueAnomaly(trueAnomaly)), UT);

Is

o.GetUTforTrueAnomaly(trueAnomaly*UtilMath.Deg2Rad, o.period);

New Code

public static Vector3d DvToBurnVec(PatchedConicsOrbit o, Vector3d dV, double UT)

{

Vector3d burnVec;

burnVec.x = Vector3d.Dot(dV, o.RadialPlus(UT));

burnVec.y = Vector3d.Dot(dV, o.NormalPlus(UT));

burnVec.z = Vector3d.Dot(dV, -1 * o.Prograde(UT)); return burnVec;

}

public static Vector3d BurnVecToDv(PatchedConicsOrbit o, Vector3d burnVec, double UT) { return burnVec.x * o.RadialPlus(UT) + burnVec.y * o.NormalPlus(UT) - burnVec.z * o.Prograde(UT); }</text>
      <sha1>i2j7ii1skb78xqu6h5tnfxkdbkf19ns</sha1>
    </revision>
    <revision>
      <id>38</id>
      <parentid>34</parentid>
      <timestamp>2023-04-17T21:41:01Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <minor/>
      <comment>Removed empty table rows</comment>
      <origin>38</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3529" sha1="mbgipjgvu4q2ifsohniva5r3nj1ezeb" xml:space="preserve">{{DISPLAYTITLE:Orbits and PatchedConicsOrbit methods and info}}
[[Category:KSP 1 code conversion]]

When porting from KSP1 to KSP2 one of the first things you're likely to encounter is the fact that where KSP1 defined an orbit using the Orbit class, in KSP2 it's now the PatchedConicsOrbit class. These classes have a lot in common; for example, there are a number of methods and properties where the names are almost identical other than a change of case for the initial character. Nevertheless, there are a few differences that you should know about when porting KSP1 code to work in KSP2.

So where you might have a variable of type Orbit, now you'll mostly use a variable of type PatchedConicsOrbit.
{| class="wikitable"
|+Orbit vs PatchedConicOrbit Properties
!KSP1
!KSP2
|-
|Orbit o;
|PatchedConicsOrbit o;
|-
|o.referenceBody.position
|o.referenceBody.Position.localPosition
|-
|o.referenceBody.transform.up
|o.referenceBody.transform.up.vector
|-
|o.referenceBody.transform.right
|o.referenceBody.transform.right.vector
|-
|o.referenceBody.Radius
|o.referenceBody.radius
|-
|o.referenceBody.orbit
|o.referenceBody.Orbit
|-
|o.LAN
|o.longitudeOfAscendingNode
|-
|Planetarium.up
|o.ReferenceFrame.up.vector
|-
|Planetarium.right
|o.ReferenceFrame.right.vector
|-
|o.PeR
|o.Periapsis
|-
|o.PeA
|o.PeriapsisArl
|-
|o.ApR
|o.Apoapsis
|-
|o.ApA
|o.ApoapsisArl
|-
|o.trueAnomaly
|o.TrueAnomaly
|-
|o.patchEndTransition
|o.PatchEndTransition
|-
|o.referenceBody.timeWarpAltitudeLimits [n]
|o.referenceBody.TimeWarpAltitudeOffset*n
|}
{| class="wikitable"
|+Orbit vs PatchedConicOrbit Methods
!KSP1
!KSP2
|-
|o.getOrbitalVelocityAtUT()
|o.GetOrbitalVelocityAtUTZup()
|-
|o.getRelativePositionAtUT()
|o.GetRelativePositionAtUT()
|-
|o.GetOrbitNormal()
|o.GetRelativeOrbitNormal()
|-
|o.referenceBody.GetLatitude()
|o.referenceBody.GetLatLonAltFromRadius()
|}


Body Type: Properties and Methods

TypeCelestialBody -&gt; CelestialBodyComponent

Vessel Type: Properties and Methods

Coordinate Systems

Useful Code Block Conversions

Was

o.GetOrbitalStateVectorsAtUT(UT, out pos, out vel);

newOrbit.UpdateFromStateVectors(pos, vel, o.referenceBody, UT);

Is

o.GetOrbitalStateVectorsAtUT(UT, out pos, out vel);

KSP.Sim.Position position = new KSP.Sim.Position(o.referenceBody.coordinateSystem, OrbitExtensions.SwapYZ(pos - o.referenceBody.Position.localPosition));

KSP.Sim.Velocity velocity = new KSP.Sim.Velocity(o.referenceBody.relativeToMotion, OrbitExtensions.SwapYZ(vel));

newOrbit.UpdateFromStateVectors(position, velocity, o.referenceBody, UT);

Was

PatchedConics.SolverParameters solverParameters = new PatchedConics.SolverParameters();

Is

PatchedConicSolver.SolverParameters solverParameters = new PatchedConicSolver.SolverParameters();

Was

PatchedConics.CalculatePatch(o, nextOrbit, UT, solverParameters, null);

Is

nextOrbit = o.NextPatch as PatchedConicsOrbit;

Was

o.UTAtMeanAnomaly(o.GetMeanAnomalyAtEccentricAnomaly(o.GetEccentricAnomalyAtTrueAnomaly(trueAnomaly)), UT);

Is

o.GetUTforTrueAnomaly(trueAnomaly*UtilMath.Deg2Rad, o.period);

New Code

public static Vector3d DvToBurnVec(PatchedConicsOrbit o, Vector3d dV, double UT)

{

Vector3d burnVec;

burnVec.x = Vector3d.Dot(dV, o.RadialPlus(UT));

burnVec.y = Vector3d.Dot(dV, o.NormalPlus(UT));

burnVec.z = Vector3d.Dot(dV, -1 * o.Prograde(UT)); return burnVec;

}

public static Vector3d BurnVecToDv(PatchedConicsOrbit o, Vector3d burnVec, double UT) { return burnVec.x * o.RadialPlus(UT) + burnVec.y * o.NormalPlus(UT) - burnVec.z * o.Prograde(UT); }</text>
      <sha1>mbgipjgvu4q2ifsohniva5r3nj1ezeb</sha1>
    </revision>
  </page>
  <page>
    <title>Modding Resources</title>
    <ns>0</ns>
    <id>10</id>
    <revision>
      <id>35</id>
      <timestamp>2023-04-17T13:31:16Z</timestamp>
      <contributor>
        <username>AtomicTech</username>
        <id>10</id>
      </contributor>
      <comment>Made page.</comment>
      <origin>35</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="588" sha1="2pyaqjf5i27ry1c0anq7df3l97t95fy" xml:space="preserve">The original Kerbal Space Program enjoyed a number of different avenues for aspiring modders to learn how to dig into KSP's code. Kerbal Space Program 2 shares many similar platforms but, as the game is in its infancy, these sources can be hard to find. To combat this, we've complied a list here of the most active modding groups for those of us who wish to start digging into KSP 2's code:

* '''[https://forum.kerbalspaceprogram.com/ The Kerbal Space Program Forums]'''

* [https://disboard.org/server/1078696971088433153 '''The KSP 2 Modding Society''']

(Page will be updated later.)</text>
      <sha1>2pyaqjf5i27ry1c0anq7df3l97t95fy</sha1>
    </revision>
  </page>
  <page>
    <title>File:Screenshot194-KerbinBound.png</title>
    <ns>6</ns>
    <id>11</id>
    <revision>
      <id>36</id>
      <timestamp>2023-04-17T13:38:08Z</timestamp>
      <contributor>
        <username>AtomicTech</username>
        <id>10</id>
      </contributor>
      <origin>36</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="32" sha1="0ug6fsxlx0qox39nukyqo6m894l0dpr" xml:space="preserve">From my old series, KerbinBound.</text>
      <sha1>0ug6fsxlx0qox39nukyqo6m894l0dpr</sha1>
    </revision>
  </page>
  <page>
    <title>User:AtomicTech</title>
    <ns>2</ns>
    <id>12</id>
    <revision>
      <id>37</id>
      <timestamp>2023-04-17T13:39:30Z</timestamp>
      <contributor>
        <username>AtomicTech</username>
        <id>10</id>
      </contributor>
      <comment>Made the page.</comment>
      <origin>37</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="271" sha1="hw5ui7ixkswgff2qou16u1p7txvtk5x" xml:space="preserve">Formerly: KSP Mod Developer and Mission Report Writer. 

Currently: Forums Dweller and KSP 2 Modding Society Administrator.
[[File:Screenshot194-KerbinBound.png|thumb|A picture from KerbinBound.]]
https://forum.kerbalspaceprogram.com/index.php?/profile/210823-atomictech/</text>
      <sha1>hw5ui7ixkswgff2qou16u1p7txvtk5x</sha1>
    </revision>
  </page>
  <page>
    <title>KSP 2 Mod Equivalents</title>
    <ns>0</ns>
    <id>13</id>
    <revision>
      <id>39</id>
      <timestamp>2023-04-18T17:53:26Z</timestamp>
      <contributor>
        <username>AtomicTech</username>
        <id>10</id>
      </contributor>
      <comment>Made page.</comment>
      <origin>39</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="303" sha1="fcf6gbpm5mtbkmo0t94h03rb228ttu0" xml:space="preserve">Kerbal Space Program has a catalog of mods spanning back to 2011. A significant number of them were Quality of Life (QoL) mods which aimed to make a players experience better. On this list, we've compiled a number of mods that are spiritual successors to their KSP 1 counterparts.
(Content coming soon.)</text>
      <sha1>fcf6gbpm5mtbkmo0t94h03rb228ttu0</sha1>
    </revision>
  </page>
  <page>
    <title>User talk:AtomicTech</title>
    <ns>3</ns>
    <id>14</id>
    <revision>
      <id>40</id>
      <timestamp>2023-04-18T17:58:10Z</timestamp>
      <contributor>
        <username>AtomicTech</username>
        <id>10</id>
      </contributor>
      <comment>Created blank page</comment>
      <origin>40</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
  </page>
  <page>
    <title>Talk:Main Page</title>
    <ns>1</ns>
    <id>15</id>
    <revision>
      <id>41</id>
      <timestamp>2023-04-21T14:12:48Z</timestamp>
      <contributor>
        <username>AtomicTech</username>
        <id>10</id>
      </contributor>
      <comment>m</comment>
      <origin>41</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
  </page>
  <page>
    <title>Part modding videos (tutorials)</title>
    <ns>0</ns>
    <id>16</id>
    <revision>
      <id>42</id>
      <timestamp>2023-04-23T16:30:04Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Created page with "Following are video tutorials for making part mods by LuxStice:  &lt;youtube&gt;https://www.youtube.com/watch?v=9fQg-oMqcH8&lt;/youtube&gt;  &lt;youtube&gt;https://www.youtube.com/watch?v=G-g0AxrFMGM&lt;/youtube&gt;"</comment>
      <origin>42</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="191" sha1="b0crt1w5rw7uwtgla8xq15y44o3pd4m" xml:space="preserve">Following are video tutorials for making part mods by LuxStice:

&lt;youtube&gt;https://www.youtube.com/watch?v=9fQg-oMqcH8&lt;/youtube&gt;

&lt;youtube&gt;https://www.youtube.com/watch?v=G-g0AxrFMGM&lt;/youtube&gt;</text>
      <sha1>b0crt1w5rw7uwtgla8xq15y44o3pd4m</sha1>
    </revision>
    <revision>
      <id>43</id>
      <parentid>42</parentid>
      <timestamp>2023-04-23T16:31:09Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>43</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="208" sha1="ikteo4iibbvh6r58tsnfkrxg4lxfve9" xml:space="preserve">[Parts modding]

Following are video tutorials for making part mods by LuxStice:

&lt;youtube&gt;https://www.youtube.com/watch?v=9fQg-oMqcH8&lt;/youtube&gt;

&lt;youtube&gt;https://www.youtube.com/watch?v=G-g0AxrFMGM&lt;/youtube&gt;</text>
      <sha1>ikteo4iibbvh6r58tsnfkrxg4lxfve9</sha1>
    </revision>
    <revision>
      <id>44</id>
      <parentid>43</parentid>
      <timestamp>2023-04-23T16:31:23Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>44</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="210" sha1="9osct4zas32bsuvkxksm83k53wctah2" xml:space="preserve">[[Parts modding]]

Following are video tutorials for making part mods by LuxStice:

&lt;youtube&gt;https://www.youtube.com/watch?v=9fQg-oMqcH8&lt;/youtube&gt;

&lt;youtube&gt;https://www.youtube.com/watch?v=G-g0AxrFMGM&lt;/youtube&gt;</text>
      <sha1>9osct4zas32bsuvkxksm83k53wctah2</sha1>
    </revision>
    <revision>
      <id>45</id>
      <parentid>44</parentid>
      <timestamp>2023-04-23T16:31:43Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>45</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="219" sha1="hpuq8jq2q6ah8zl9u3d8rr7a0k6fp9u" xml:space="preserve">[[Category:Parts modding]]

Following are video tutorials for making part mods by LuxStice:

&lt;youtube&gt;https://www.youtube.com/watch?v=9fQg-oMqcH8&lt;/youtube&gt;

&lt;youtube&gt;https://www.youtube.com/watch?v=G-g0AxrFMGM&lt;/youtube&gt;</text>
      <sha1>hpuq8jq2q6ah8zl9u3d8rr7a0k6fp9u</sha1>
    </revision>
    <revision>
      <id>139</id>
      <parentid>45</parentid>
      <timestamp>2023-08-03T00:08:32Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>139</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="242" sha1="61lvzet8jzd2zkv4avtej3fqf6fo9rg" xml:space="preserve">[[Category:Parts modding]]
[[Category:Tutorials]]

Following are video tutorials for making part mods by LuxStice:

&lt;youtube&gt;https://www.youtube.com/watch?v=9fQg-oMqcH8&lt;/youtube&gt;

&lt;youtube&gt;https://www.youtube.com/watch?v=G-g0AxrFMGM&lt;/youtube&gt;</text>
      <sha1>61lvzet8jzd2zkv4avtej3fqf6fo9rg</sha1>
    </revision>
    <revision>
      <id>140</id>
      <parentid>139</parentid>
      <timestamp>2023-08-03T00:08:45Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <minor/>
      <comment>Munix moved page [[Part modding video tutorials]] to [[Part modding videos (tutorials)]]</comment>
      <origin>139</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="242" sha1="61lvzet8jzd2zkv4avtej3fqf6fo9rg" xml:space="preserve">[[Category:Parts modding]]
[[Category:Tutorials]]

Following are video tutorials for making part mods by LuxStice:

&lt;youtube&gt;https://www.youtube.com/watch?v=9fQg-oMqcH8&lt;/youtube&gt;

&lt;youtube&gt;https://www.youtube.com/watch?v=G-g0AxrFMGM&lt;/youtube&gt;</text>
      <sha1>61lvzet8jzd2zkv4avtej3fqf6fo9rg</sha1>
    </revision>
    <revision>
      <id>191</id>
      <parentid>140</parentid>
      <timestamp>2023-10-28T12:33:26Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Changed categories</comment>
      <origin>191</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="243" sha1="b023l5f84p94ur4adnqb8loqk85t2zj" xml:space="preserve">[[Category:Tutorials]]

Following are video tutorials for making part mods by LuxStice:

&lt;youtube&gt;https://www.youtube.com/watch?v=9fQg-oMqcH8&lt;/youtube&gt;

&lt;youtube&gt;https://www.youtube.com/watch?v=G-g0AxrFMGM&lt;/youtube&gt;
[[Category:Creating parts]]</text>
      <sha1>b023l5f84p94ur4adnqb8loqk85t2zj</sha1>
    </revision>
    <revision>
      <id>192</id>
      <parentid>191</parentid>
      <timestamp>2023-10-28T12:33:54Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Changed categories</comment>
      <origin>192</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="219" sha1="sbst50yh3h6hhpcg3lzdijo3zjpx7vr" xml:space="preserve">Following are video tutorials for making part mods by LuxStice:

&lt;youtube&gt;https://www.youtube.com/watch?v=9fQg-oMqcH8&lt;/youtube&gt;

&lt;youtube&gt;https://www.youtube.com/watch?v=G-g0AxrFMGM&lt;/youtube&gt;
[[Category:Creating parts]]</text>
      <sha1>sbst50yh3h6hhpcg3lzdijo3zjpx7vr</sha1>
    </revision>
    <revision>
      <id>328</id>
      <parentid>192</parentid>
      <timestamp>2024-01-15T02:10:20Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>328</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="222" sha1="k3cp40e9jdfmc6fg02oklxbimze2ule" xml:space="preserve">Following are video tutorials for making part mods by LuxStice:

&lt;youtube&gt;https://www.youtube.com/watch?v=9fQg-oMqcH8&lt;/youtube&gt;

&lt;youtube&gt;https://www.youtube.com/watch?v=G-g0AxrFMGM&lt;/youtube&gt;
[[Category:Parts and modules]]</text>
      <sha1>k3cp40e9jdfmc6fg02oklxbimze2ule</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Parts modding</title>
    <ns>14</ns>
    <id>17</id>
    <revision>
      <id>46</id>
      <timestamp>2023-04-23T16:32:04Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Created page with "Pages which focus on making part mods."</comment>
      <origin>46</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="38" sha1="0flu4zw26x41ys1fmp0zi62afy8cvso" xml:space="preserve">Pages which focus on making part mods.</text>
      <sha1>0flu4zw26x41ys1fmp0zi62afy8cvso</sha1>
    </revision>
    <revision>
      <id>47</id>
      <parentid>46</parentid>
      <timestamp>2023-04-23T16:32:16Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>47</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="56" sha1="828ripegakj85kmzsy5gwewkz6xdgnh" xml:space="preserve">[[Category:TOC]]

Pages which focus on making part mods.</text>
      <sha1>828ripegakj85kmzsy5gwewkz6xdgnh</sha1>
    </revision>
    <revision>
      <id>48</id>
      <parentid>47</parentid>
      <timestamp>2023-04-23T16:32:22Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>48</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="55" sha1="r5bf0a1wp1a4pe360qpa03yhf8n5cmn" xml:space="preserve">[[Category:TOC]]
Pages which focus on making part mods.</text>
      <sha1>r5bf0a1wp1a4pe360qpa03yhf8n5cmn</sha1>
    </revision>
  </page>
  <page>
    <title>Subscribe to game Messages</title>
    <ns>0</ns>
    <id>18</id>
    <revision>
      <id>49</id>
      <timestamp>2023-05-03T09:01:00Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Created page with "Game triggers a bunch of Messages (events) you can subscribe to in your code in order to react to those messages.  For instance 'VesselDeltaVCalculationMessage' for whenever the game is doing updates to any vessel deltav, or UIButtonClickedMessage for when the player clicks on any UI element.  You could always do any check inside an Update() method of your plugin class, but using Messages is more efficient when you need to do checks on events that are not triggered very..."</comment>
      <origin>49</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="821" sha1="lfthytc3rm8mp1j9x08llkadw0ovcwn" xml:space="preserve">Game triggers a bunch of Messages (events) you can subscribe to in your code in order to react to those messages.

For instance 'VesselDeltaVCalculationMessage' for whenever the game is doing updates to any vessel deltav, or UIButtonClickedMessage for when the player clicks on any UI element.

You could always do any check inside an Update() method of your plugin class, but using Messages is more efficient when you need to do checks on events that are not triggered very often.


To see what Messages are being triggered on certain events you an use the ShowKSP2Events mod: https://github.com/Falki-git/ShowKSP2Events.


This mod displays Messages as they are being triggered, colors them to make it easier to see when the event was triggered and it keeps a count of how many times an event has been triggered so far.</text>
      <sha1>lfthytc3rm8mp1j9x08llkadw0ovcwn</sha1>
    </revision>
    <revision>
      <id>51</id>
      <parentid>49</parentid>
      <timestamp>2023-05-03T09:07:49Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Add page content</comment>
      <origin>51</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="934" sha1="lcv6host5zy041ncefin036ai0ywqir" xml:space="preserve">Game triggers a bunch of Messages (events) you can subscribe to in your code in order to react to those messages.

For instance ''&lt;code&gt;VesselDeltaVCalculationMessage&lt;/code&gt;'' for whenever the game is doing updates to any vessel deltav, or ''&lt;code&gt;UIButtonClickedMessage&lt;/code&gt;'' for when the player clicks on any UI element.

You could always do any check inside an ''Update()'' method of your plugin class, but using Messages is more efficient when you need to do checks on events that are not triggered very often.



'''To see what Messages are being triggered on certain events you an use the &lt;code&gt;ShowKSP2Events&lt;/code&gt; mod:'''

'''https://github.com/Falki-git/ShowKSP2Events&lt;nowiki/&gt;.'''



This mod displays Messages as they are being triggered, colors them to make it easier to see when the event was triggered and it keeps a count of how many times an event has been triggered so far.

[[File:ShowKSP2Events.png|left|thumb]]</text>
      <sha1>lcv6host5zy041ncefin036ai0ywqir</sha1>
    </revision>
    <revision>
      <id>53</id>
      <parentid>51</parentid>
      <timestamp>2023-05-05T07:15:28Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Add to Tools category</comment>
      <origin>53</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="971" sha1="ryd23ni835475tf5zloa1oc4t524c17" xml:space="preserve">Game triggers a bunch of Messages (events) you can subscribe to in your code in order to react to those messages.

For instance ''&lt;code&gt;VesselDeltaVCalculationMessage&lt;/code&gt;'' for whenever the game is doing updates to any vessel deltav, or ''&lt;code&gt;UIButtonClickedMessage&lt;/code&gt;'' for when the player clicks on any UI element.

You could always do any check inside an ''Update()'' method of your plugin class, but using Messages is more efficient when you need to do checks on events that are not triggered very often.



'''To see what Messages are being triggered on certain events you an use the &lt;code&gt;ShowKSP2Events&lt;/code&gt; mod:'''

'''https://github.com/Falki-git/ShowKSP2Events&lt;nowiki/&gt;.'''



This mod displays Messages as they are being triggered, colors them to make it easier to see when the event was triggered and it keeps a count of how many times an event has been triggered so far.

[[File:ShowKSP2Events 1.2.0.png|left|thumb|1000x1000px]]
[[Category:Tools]]</text>
      <sha1>ryd23ni835475tf5zloa1oc4t524c17</sha1>
    </revision>
    <revision>
      <id>114</id>
      <parentid>53</parentid>
      <timestamp>2023-07-27T12:03:56Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Change link from github to spacedock</comment>
      <origin>114</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="960" sha1="at07tu70hfmwbrk7z44zp6ejz8gity1" xml:space="preserve">Game triggers a bunch of Messages (events) you can subscribe to in your code in order to react to those messages.

For instance ''&lt;code&gt;VesselDeltaVCalculationMessage&lt;/code&gt;'' for whenever the game is doing updates to any vessel deltav, or ''&lt;code&gt;UIButtonClickedMessage&lt;/code&gt;'' for when the player clicks on any UI element.

You could always do any check inside an ''Update()'' method of your plugin class, but using Messages is more efficient when you need to do checks on events that are not triggered very often.



'''To see what Messages are being triggered on certain events you an use the &lt;code&gt;ShowKSP2Events&lt;/code&gt; mod:'''

https://spacedock.info/mod/3375/ShowKSP2Events.




This mod displays Messages as they are being triggered, colors them to make it easier to see when the event was triggered and it keeps a count of how many times an event has been triggered so far.

[[File:ShowKSP2Events 1.2.0.png|left|thumb|1000x1000px]]
[[Category:Tools]]</text>
      <sha1>at07tu70hfmwbrk7z44zp6ejz8gity1</sha1>
    </revision>
    <revision>
      <id>160</id>
      <parentid>114</parentid>
      <timestamp>2023-10-23T22:00:39Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>First!</comment>
      <origin>160</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="986" sha1="pgthiemg9xgcfaade8l25oka48njm4z" xml:space="preserve">Game triggers a bunch of Messages (events) you can subscribe to in your code in order to react to those messages.

For instance ''&lt;code&gt;VesselDeltaVCalculationMessage&lt;/code&gt;'' for whenever the game is doing updates to any vessel deltav, or ''&lt;code&gt;UIButtonClickedMessage&lt;/code&gt;'' for when the player clicks on any UI element.

You could always do any check inside an ''Update()'' method of your plugin class, but using Messages is more efficient when you need to do checks on events that are not triggered very often.



'''To see what Messages are being triggered on certain events you an use the &lt;code&gt;ShowKSP2Events&lt;/code&gt; mod:'''

https://spacedock.info/mod/3375/ShowKSP2Events, or download it with CKAN.




This mod displays Messages as they are being triggered, colors them to make it easier to see when the event was triggered and it keeps a count of how many times an event has been triggered so far.

[[File:ShowKSP2Events 1.2.0.png|left|thumb|1000x1000px]]
[[Category:Tools]]</text>
      <sha1>pgthiemg9xgcfaade8l25oka48njm4z</sha1>
    </revision>
    <revision>
      <id>166</id>
      <parentid>160</parentid>
      <timestamp>2023-10-24T20:28:33Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <comment>Move to "Messages" category</comment>
      <origin>166</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="989" sha1="nwz45xjnfsntus1zxn9vg1is3e6lsti" xml:space="preserve">[[Category:Messages]]
Game triggers a bunch of Messages (events) you can subscribe to in your code in order to react to those messages.

For instance ''&lt;code&gt;VesselDeltaVCalculationMessage&lt;/code&gt;'' for whenever the game is doing updates to any vessel deltav, or ''&lt;code&gt;UIButtonClickedMessage&lt;/code&gt;'' for when the player clicks on any UI element.

You could always do any check inside an ''Update()'' method of your plugin class, but using Messages is more efficient when you need to do checks on events that are not triggered very often.



'''To see what Messages are being triggered on certain events you an use the &lt;code&gt;ShowKSP2Events&lt;/code&gt; mod:'''

https://spacedock.info/mod/3375/ShowKSP2Events, or download it with CKAN.




This mod displays Messages as they are being triggered, colors them to make it easier to see when the event was triggered and it keeps a count of how many times an event has been triggered so far.

[[File:ShowKSP2Events 1.2.0.png|left|thumb|1000x1000px]]</text>
      <sha1>nwz45xjnfsntus1zxn9vg1is3e6lsti</sha1>
    </revision>
    <revision>
      <id>168</id>
      <parentid>166</parentid>
      <timestamp>2023-10-25T10:49:44Z</timestamp>
      <contributor>
        <username>Cheese</username>
        <id>7</id>
      </contributor>
      <minor/>
      <comment>Change game to "The game" and fix some formatting</comment>
      <origin>168</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="990" sha1="cy2n5iqrfrbaerarflnp9tmuq72j1f2" xml:space="preserve">[[Category:Messages]]
The game triggers a bunch of Messages (events) you can subscribe to in your code in order to react to those messages.

For instance ''&lt;code&gt;VesselDeltaVCalculationMessage&lt;/code&gt;'' for whenever the game is doing updates to any vessel deltav, or ''&lt;code&gt;UIButtonClickedMessage&lt;/code&gt;'' for when the player clicks on any UI element.

You could always do any check inside an ''Update()'' method of your plugin class, but using Messages is more efficient when you need to do checks on events that are not triggered very often.



'''To see what Messages are being triggered on certain events you an use the &lt;code&gt;ShowKSP2Events&lt;/code&gt; mod:'''

https://spacedock.info/mod/3375/ShowKSP2Events, or download it with CKAN


This mod displays Messages as they are being triggered, colors them to make it easier to see when the event was triggered and it keeps a count of how many times an event has been triggered so far.

[[File:ShowKSP2Events 1.2.0.png|left|thumb|1000x1000px]]</text>
      <sha1>cy2n5iqrfrbaerarflnp9tmuq72j1f2</sha1>
    </revision>
    <revision>
      <id>256</id>
      <parentid>168</parentid>
      <timestamp>2023-12-24T23:21:16Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Replaced UIButtonClickedMessage with GameStateChangedMessage as it's more useful</comment>
      <origin>256</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1025" sha1="618miaj1tk1pzwjnr0xz6p3fhwb8dpo" xml:space="preserve">[[Category:Messages]]
The game triggers a bunch of Messages (events) you can subscribe to in your code in order to react to those messages.

For instance ''&lt;code&gt;VesselDeltaVCalculationMessage&lt;/code&gt;'' for whenever the game is doing updates to any vessel deltav, or ''&lt;code&gt;GameStateChangedMessage&lt;/code&gt;'' for when the player enters a different screen (e.g. Flight state -&gt; KSC state).

You could always do any check inside an ''Update()'' method of your plugin class, but using Messages is more efficient when you need to do checks on events that are not triggered very often.



'''To see what Messages are being triggered on certain events you an use the &lt;code&gt;ShowKSP2Events&lt;/code&gt; mod:'''

https://spacedock.info/mod/3375/ShowKSP2Events, or download it with CKAN


This mod displays Messages as they are being triggered, colors them to make it easier to see when the event was triggered and it keeps a count of how many times an event has been triggered so far.

[[File:ShowKSP2Events 1.2.0.png|left|thumb|1000x1000px]]</text>
      <sha1>618miaj1tk1pzwjnr0xz6p3fhwb8dpo</sha1>
    </revision>
  </page>
  <page>
    <title>File:ShowKSP2Events.png</title>
    <ns>6</ns>
    <id>19</id>
    <revision>
      <id>50</id>
      <timestamp>2023-05-03T09:06:36Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <origin>50</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="22" sha1="npgrz43w80vax52j6ahh6qvlutnnnuz" xml:space="preserve">ShowKSP2Events example</text>
      <sha1>npgrz43w80vax52j6ahh6qvlutnnnuz</sha1>
    </revision>
  </page>
  <page>
    <title>File:ShowKSP2Events 1.2.0.png</title>
    <ns>6</ns>
    <id>20</id>
    <revision>
      <id>52</id>
      <timestamp>2023-05-05T07:09:58Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <origin>52</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="20" sha1="finkn47dbf3a8yu8melv9ic6i3f89jd" xml:space="preserve">ShowKSP2Events 1.2.0</text>
      <sha1>finkn47dbf3a8yu8melv9ic6i3f89jd</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Tools</title>
    <ns>14</ns>
    <id>21</id>
    <revision>
      <id>54</id>
      <timestamp>2023-05-05T07:17:04Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Add description and TOC category.</comment>
      <origin>54</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="42" sha1="cpkc69jyqpu46jmtviildcw4uwzoelu" xml:space="preserve">Tools you can use to mod.
[[Category:TOC]]</text>
      <sha1>cpkc69jyqpu46jmtviildcw4uwzoelu</sha1>
    </revision>
  </page>
  <page>
    <title>Sizes</title>
    <ns>0</ns>
    <id>22</id>
    <revision>
      <id>55</id>
      <timestamp>2023-05-18T16:39:19Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <comment>Created page with "Meshes in KSP2 come in a variety of shapes and forms, but for cyllinder-like shapes, they maintain a set number of segments. {| class="wikitable" |+ !diameter !Sides |- |1.25m |24 |- |2.5m |48 |- |3.75m | |- |5m | |}"</comment>
      <origin>55</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="216" sha1="92jd2f3qazm6w8krc1o8ih4gkfhul49" xml:space="preserve">Meshes in KSP2 come in a variety of shapes and forms, but for cyllinder-like shapes, they maintain a set number of segments.
{| class="wikitable"
|+
!diameter
!Sides
|-
|1.25m
|24
|-
|2.5m
|48
|-
|3.75m
|
|-
|5m
|
|}</text>
      <sha1>92jd2f3qazm6w8krc1o8ih4gkfhul49</sha1>
    </revision>
    <revision>
      <id>60</id>
      <parentid>55</parentid>
      <timestamp>2023-05-21T12:42:11Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Added category</comment>
      <origin>60</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="243" sha1="a9bmyh85g2c9g9k3f5kc5pbdtudz8g8" xml:space="preserve">Meshes in KSP2 come in a variety of shapes and forms, but for cyllinder-like shapes, they maintain a set number of segments.
{| class="wikitable"
|+
!diameter
!Sides
|-
|1.25m
|24
|-
|2.5m
|48
|-
|3.75m
|
|-
|5m
|
|}
[[Category:Parts modding]]</text>
      <sha1>a9bmyh85g2c9g9k3f5kc5pbdtudz8g8</sha1>
    </revision>
    <revision>
      <id>66</id>
      <parentid>60</parentid>
      <timestamp>2023-05-21T23:36:54Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <comment>Added labels to the table</comment>
      <origin>66</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="393" sha1="t7k61de3afe263f2lqvp3syymiswjk9" xml:space="preserve">Meshes in KSP2 come in a variety of shapes and forms, but for cyllinder-like shapes, they maintain a set number of segments.
{| class="wikitable"
|+
!Label
!diameter
!Sides
|-
|XS-
|0.3125m
|
|-
|XS
|0.625m
|
|-
|XS+
|0.9375m
|
|-
|SM
|1.25m
|24
|-
|SM+
|1.875m
|
|-
|MD
|2.5m
|48
|-
|MD+
|3.125m
|
|-
|LG
|3.75m
|
|-
|LG+
|4.375m
|
|-
|XL
|5m
|
|-
|
|
|
|-
|
|
|
|}
[[Category:Parts modding]]</text>
      <sha1>t7k61de3afe263f2lqvp3syymiswjk9</sha1>
    </revision>
    <revision>
      <id>67</id>
      <parentid>66</parentid>
      <timestamp>2023-05-21T23:41:48Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <minor/>
      <comment>LuxStice moved page [[Mesh convention]] to [[Sizes]] without leaving a redirect</comment>
      <origin>66</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="393" sha1="t7k61de3afe263f2lqvp3syymiswjk9" xml:space="preserve">Meshes in KSP2 come in a variety of shapes and forms, but for cyllinder-like shapes, they maintain a set number of segments.
{| class="wikitable"
|+
!Label
!diameter
!Sides
|-
|XS-
|0.3125m
|
|-
|XS
|0.625m
|
|-
|XS+
|0.9375m
|
|-
|SM
|1.25m
|24
|-
|SM+
|1.875m
|
|-
|MD
|2.5m
|48
|-
|MD+
|3.125m
|
|-
|LG
|3.75m
|
|-
|LG+
|4.375m
|
|-
|XL
|5m
|
|-
|
|
|
|-
|
|
|
|}
[[Category:Parts modding]]</text>
      <sha1>t7k61de3afe263f2lqvp3syymiswjk9</sha1>
    </revision>
    <revision>
      <id>68</id>
      <parentid>67</parentid>
      <timestamp>2023-05-21T23:45:27Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <origin>68</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="644" sha1="n3sx6gjitnn49ftd4xb9zw2tqdg1w36" xml:space="preserve">KSP2 brought more life to the sizes present in KSP1, giving them labels and colors acording to each diameter. Here is some information about it
{| class="wikitable"
|+Regular Sizes
!Label
!diameter
!Sides
|-
|XS-
|0.3125m
|
|-
|XS
|0.625m
|
|-
|XS+
|0.9375m
|
|-
|SM
|1.25m
|24
|-
|SM+
|1.875m
|
|-
|MD
|2.5m
|48
|-
|MD+
|3.125m
|
|-
|LG
|3.75m
|
|-
|LG+
|4.375m
|
|-
|XL
|5m
|
|}

=== Special Sizes ===
Other than the ones shown above, there's also some extra sizes added by KSP1 (and ported to KSP2) and by mods. Here's some of them
{| class="wikitable"
|+
!Label
!Diameter
|-
|MK2
|1.25m in the center
|-
|Mk3
|
|}
[[Category:Parts modding]]</text>
      <sha1>n3sx6gjitnn49ftd4xb9zw2tqdg1w36</sha1>
    </revision>
    <revision>
      <id>69</id>
      <parentid>68</parentid>
      <timestamp>2023-05-24T18:28:02Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <origin>69</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="648" sha1="bulr1km0bcrcotg7xox2u3fpikg879w" xml:space="preserve">KSP2 brought more life to the sizes present in KSP1, giving them labels and colors acording to each diameter. Here is some information about it
{| class="wikitable"
|+Regular Sizes
!Label
!diameter
!Sides
|-
|XS-
|0.3125m
|
|-
|XS
|0.625m
|12
|-
|XS+
|0.9375m
|
|-
|SM
|1.25m
|24
|-
|SM+
|1.875m
|
|-
|MD
|2.5m
|36
|-
|MD+
|3.125m
|
|-
|LG
|3.75m
|48
|-
|LG+
|4.375m
|
|-
|XL
|5m
|
|}

=== Special Sizes ===
Other than the ones shown above, there's also some extra sizes added by KSP1 (and ported to KSP2) and by mods. Here's some of them
{| class="wikitable"
|+
!Label
!Diameter
|-
|MK2
|1.25m in the center
|-
|Mk3
|
|}
[[Category:Parts modding]]</text>
      <sha1>bulr1km0bcrcotg7xox2u3fpikg879w</sha1>
    </revision>
    <revision>
      <id>118</id>
      <parentid>69</parentid>
      <timestamp>2023-08-02T23:13:30Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>118</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="810" sha1="017oo7cma0mllqigrhf2ev3mefu7txi" xml:space="preserve">KSP2 brought more life to the sizes present in KSP1, giving them labels and colors according to each diameter. Here is some information about it

===Regular Sizes===
The rows in bold are stock game sizes and the rest are added by mods.
{| class="wikitable"
!Label
!diameter
!Sides
|-
|XS-
|0.3125m
|
|-
|'''XS'''
|'''0.625m'''
|'''12'''
|-
|XS+
|0.9375m
|
|-
|'''SM'''
|'''1.25m'''
|'''24'''
|-
|SM+
|1.875m
|
|-
|'''MD'''
|'''2.5m'''
|'''36'''
|-
|MD+
|3.125m
|
|-
|'''LG'''
|'''3.75m'''
|'''48'''
|-
|LG+ 
|4.375m 
|
|-
|'''XL'''
|'''5m'''
|
|}

=== Special Sizes===
Other than the ones shown above, there's also some extra sizes added by KSP1 (and ported to KSP2) and by mods. Here's some of them:
{| class="wikitable"
|+
!Label
!Diameter
|-
|MK2
|1.25m in the center
|-
|Mk3
|
|}
[[Category:Parts modding]]</text>
      <sha1>017oo7cma0mllqigrhf2ev3mefu7txi</sha1>
    </revision>
    <revision>
      <id>119</id>
      <parentid>118</parentid>
      <timestamp>2023-08-02T23:20:02Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>119</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="837" sha1="mm5jvqa61l9qyzecq9s6j6rih7becc9" xml:space="preserve">KSP2 brought more life to the sizes present in KSP1, giving them labels and colors according to each diameter. Here is some information about it

===Regular Sizes===
The rows in bold are stock game sizes and the rest are added by mods.
{| class="wikitable"
!Label
!diameter
!Sides
|-
|XS-
|0.3125m
|
|-
|'''XS'''
|'''0.625m'''
|'''12'''
|-
|XS+
|0.9375m
|
|-
|'''SM'''
|'''1.25m'''
|'''24'''
|-
|SM+
|1.875m
|
|-
|'''MD'''
|'''2.5m'''
|'''36'''
|-
|MD+
|3.125m
|
|-
|'''LG'''
|'''3.75m'''
|'''48'''
|-
|LG+ 
|4.375m 
|
|-
|'''XL'''
|'''5m'''
|
|-
|'''XXL'''
|'''10m'''
|
|}

=== Special Sizes===
Other than the ones shown above, there's also some extra sizes added by KSP1 (and ported to KSP2) and by mods. Here's some of them:
{| class="wikitable"
|+
!Label
!Diameter
|-
|MK2
|1.25m in the center
|-
|Mk3
|
|}
[[Category:Parts modding]]</text>
      <sha1>mm5jvqa61l9qyzecq9s6j6rih7becc9</sha1>
    </revision>
    <revision>
      <id>124</id>
      <parentid>119</parentid>
      <timestamp>2023-08-02T23:36:54Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>124</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1100" sha1="cshfqk83nxb08jmgwp6n4ekyk5zlgy2" xml:space="preserve">KSP2 brought more life to the sizes present in KSP1, giving them labels and colors according to each diameter. Here is some information about them. This list does not contain all possible sizes as defined by the game, and it also contains modded part sizes. For a list of all the stock game part sizes available to be used in the Core Part Data module and part JSON definitions files, see [[Size Category]].

===Regular Sizes===
The rows in bold are stock game sizes and the rest are added by mods.
{| class="wikitable"
!Label
!diameter
!Sides
|-
|XS-
|0.3125m
|
|-
|'''XS'''
|'''0.625m'''
|'''12'''
|-
|XS+ 
|0.9375m 
|
|-
|'''SM'''
|'''1.25m'''
|'''24'''
|-
|SM+
| 1.875m
|
|-
|'''MD'''
|'''2.5m'''
|'''36'''
|-
|MD+
|3.125m
|
|-
|'''LG'''
|'''3.75m'''
|'''48'''
|-
|LG+
|4.375m
|
|-
|'''XL'''
|'''5m'''
|
|-
|'''XXL'''
|'''10m'''
|
|}

===Special Sizes===
Other than the ones shown above, there's also some extra sizes added by KSP1 (and ported to KSP2) and by mods. Here's some of them:
{| class="wikitable"
|+
!Label
!Diameter
|-
|MK2
|1.25m in the center
|-
|Mk3
|
|}
[[Category:Parts modding]]</text>
      <sha1>cshfqk83nxb08jmgwp6n4ekyk5zlgy2</sha1>
    </revision>
    <revision>
      <id>125</id>
      <parentid>124</parentid>
      <timestamp>2023-08-02T23:37:05Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>125</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1101" sha1="glmaoz2nom814b7rodcpgwxp6he986k" xml:space="preserve">KSP2 brought more life to the sizes present in KSP1, giving them labels and colors according to each diameter. Here is some information about them.

This list does not contain all possible sizes as defined by the game, and it also contains modded part sizes. For a list of all the stock game part sizes available to be used in the Core Part Data module and part JSON definitions files, see [[Size Category]].

===Regular Sizes===
The rows in bold are stock game sizes and the rest are added by mods.
{| class="wikitable"
!Label
!diameter
!Sides
|-
|XS-
|0.3125m
|
|-
|'''XS'''
|'''0.625m'''
|'''12'''
|-
|XS+ 
|0.9375m 
|
|-
|'''SM'''
|'''1.25m'''
|'''24'''
|-
|SM+
| 1.875m
|
|-
|'''MD'''
|'''2.5m'''
|'''36'''
|-
|MD+
|3.125m
|
|-
|'''LG'''
|'''3.75m'''
|'''48'''
|-
|LG+
|4.375m
|
|-
|'''XL'''
|'''5m'''
|
|-
|'''XXL'''
|'''10m'''
|
|}

===Special Sizes===
Other than the ones shown above, there's also some extra sizes added by KSP1 (and ported to KSP2) and by mods. Here's some of them:
{| class="wikitable"
|+
!Label
!Diameter
|-
|MK2
|1.25m in the center
|-
|Mk3
|
|}
[[Category:Parts modding]]</text>
      <sha1>glmaoz2nom814b7rodcpgwxp6he986k</sha1>
    </revision>
    <revision>
      <id>260</id>
      <parentid>125</parentid>
      <timestamp>2023-12-25T14:45:20Z</timestamp>
      <contributor>
        <username>StanWildin</username>
        <id>17</id>
      </contributor>
      <comment>pretty much a full overhaul of the parts documentation. Adding height and what it means and how to use it as well as the modeling language.</comment>
      <origin>260</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4448" sha1="achr4es9qz06p97a7yzmpgyz8l89fbg" xml:space="preserve">KSP2 brought more life to the sizes presets in KSP1, giving them labels as well as colors for each diameter. Here is some information about them.

This list does not contain all possible sizes as defined by the game, and it also contains modded part sizes. For a list of all the stock game part sizes available to be used in the Core Part Data module and part JSON definitions files, see [[Size Category]].

= '''AssetStudioModGUI''' =
Here's how to understand labels and how to find the right parts. I recommend excluding the reentry mesh when searching for a part or include the category of the part you want to find. Sadly you cant filter two things at the same time so you'll have to look through the whole list. One very good tip is to look for a short name that doesn't have _reentry or _lod1, lod2 in it. That's usually the actual part. Also you can sort the categories so they are together for each medium like texture, sprite, text, animation or mesh etc.

=== Part Size ===
{| class="wikitable"
!'''&lt;big&gt;''(x)V''&lt;/big&gt;'''
!'''&lt;big&gt;''=''&lt;/big&gt;'''
!'''&lt;big&gt;''Size of part''&lt;/big&gt;'''
!'''&lt;big&gt;''Label''&lt;/big&gt;'''
|-
|'''0v'''
|'''='''
|'''Extra Small'''
|'''(XS)'''
|-
|'''1v'''
|'''='''
|'''Small'''
|'''(SM)'''
|-
|'''2v'''
|'''='''
|'''Medium'''
|'''(MD)'''
|-
|'''3v'''
|'''='''
|'''Large'''
|'''(LG)'''
|-
|'''4v'''
|'''='''
|'''Extra Large'''
|'''(XL)'''
|-
|'''5v'''
|'''='''
|'''Extra Extra Large'''
|'''(XXL)'''
|}

=== Part Scale ===
{| class="wikitable"
!'''&lt;big&gt;''S(x)''&lt;/big&gt;'''
!'''&lt;big&gt;''=''&lt;/big&gt;'''
!'''&lt;big&gt;''Scale of part''&lt;/big&gt;'''
!'''&lt;big&gt;''Reference''&lt;/big&gt;'''
!&lt;big&gt;'''''Stack'''''&lt;/big&gt;
|-
|'''s1'''
|'''='''
|'''One Stack'''
|'''none'''
|'''1x1'''
|-
|'''s2'''
|'''='''
|'''One Stack that contains two of S1'''
|'''Short'''
|'''1x2'''
|-
|'''s3'''
|'''='''
|'''One stack that contains two of S2'''
|'''none'''
|'''1x4'''
|-
|'''s4'''
|'''='''
|'''One stack that contains two of S3'''
|'''Long'''
|'''1x8'''
|}

= Stock KSP2 Part Sizes and Modded Sizes =
Here are the Charts for the Sizes you'll have to follow when modeling.

Formula behind the design language of parts:      Height + ('''Fake''') Margin = Bevel [Amount to Bevel]

=== Stock Parts ===
{| class="wikitable"
!''&lt;big&gt;'''Size'''&lt;/big&gt;''
!&lt;big&gt;'''''Width'''''&lt;/big&gt;
!&lt;big&gt;'''''Height'''''&lt;/big&gt;
!'''&lt;big&gt;''Margin''&lt;/big&gt;'''
!&lt;big&gt;'''''Bevel'''''&lt;/big&gt;
!&lt;big&gt;'''''Faces'''''&lt;/big&gt;
!
|-
|'''XS'''
|'''0.625m'''
|'''23.4375cm'''
|'''+ 5cm'''
|'''[0.025]'''
|'''12'''
|
|-
|'''SM'''
|'''1.25m'''
|'''46.875cm'''
|'''+ 5cm'''
|'''[0.025]'''
|'''24'''
|
|-
|'''MD'''
|'''2.5m'''
|'''0.9375m'''
|'''+ 0.05m'''
|'''[0.025]'''
|'''36'''
|
|-
|'''LG'''
|'''3.75m'''
|'''1.875m'''
|'''+ 0.1m'''
|'''[0.03]'''
|'''48'''
|
|-
|'''XL'''
|'''5m'''
|'''1.875m'''
|'''+ 0.1m'''
|'''[0.05]'''
|'''48'''
|
|-
|'''XXL'''
|'''10m'''
|'''10m Ball'''
|
|
|'''60'''
|
|}
So what does '''Fake''' Margin mean? Well it's basically the point where the two objects connect and clip into each others geometry making a seal. Those parts don't have collisions. It can also be referred to as wiggle room or a light bleeding seal. The real height is what’s visible and also what is measured.

==== Example of Fake and Real Height: ====
[[File:Pasted image 1.png|left|1079x1079px]]













==== '''Example of Visible Height:''' ====
[[File:Pasted image 0.png|right|1080x1080px]]




















As you can see. The blue line is where the actual object connects to its Gizmo/Origin and the “fake” height/Margin is inside the other object. So when modelling your object, please work in the volume of the parts real/actual size and when you are done you can increase the volume to the ('''Margin''') amount for the respective size.

=== Modded/Custom Parts ===
{| class="wikitable"
!''&lt;big&gt;'''Size'''&lt;/big&gt;''
!'''&lt;big&gt;''Width''&lt;/big&gt;'''
!'''&lt;big&gt;''Height''&lt;/big&gt;'''
!'''&lt;big&gt;''Faces''&lt;/big&gt;'''
!
|-
|'''XS-'''
|'''0.3125m'''
|
|
|
|-
|'''XS+'''
|'''0.9375m'''
|
|
|
|-
|'''SM+'''
|'''1.875m'''
|
|
|
|-
|'''MD+'''
|'''3.125m'''
|
|
|
|-
|'''LG+'''
|'''4.375m'''
|
|
|
|}

===Special Sizes===
Other than the ones shown above, there's also some extra sizes added by KSP1 (and ported to KSP2) and by mods. Here's some of them:

(WIP)
{| class="wikitable"
|+
!'''''&lt;big&gt;Label&lt;/big&gt;'''''
!'''''&lt;big&gt;Diameter&lt;/big&gt;'''''
|-
|'''MK2'''
|'''1.25m in the center'''
|-
|'''Mk3'''
|
|}
[[Category:Parts modding]]





''&lt;u&gt;More to come&lt;/u&gt;''

'''''&lt;small&gt;Created by StanWildin&lt;/small&gt;'''''</text>
      <sha1>achr4es9qz06p97a7yzmpgyz8l89fbg</sha1>
    </revision>
    <revision>
      <id>261</id>
      <parentid>260</parentid>
      <timestamp>2023-12-25T14:46:57Z</timestamp>
      <contributor>
        <username>StanWildin</username>
        <id>17</id>
      </contributor>
      <minor/>
      <origin>261</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4453" sha1="2n6ujzcf46uuud4aznoxhp9t096eznq" xml:space="preserve">KSP2 brought more life to the sizes presets in KSP1, giving them labels as well as colors for each diameter. Here is some information about them.

This list does not contain all possible sizes as defined by the game, and it also contains modded part sizes. For a list of all the stock game part sizes available to be used in the Core Part Data module and part JSON definitions files, see [[Size Category]].

= '''AssetStudioModGUI''' =
Here's how to understand labels and how to find the right parts. I recommend excluding the reentry mesh when searching for a part or include the category of the part you want to find. Sadly you cant filter two things at the same time so you'll have to look through the whole list. One very good tip is to look for a short name that doesn't have _reentry or _lod1, lod2 in it. That's usually the actual part. Also you can sort the categories so they are together for each medium like texture, sprite, text, animation or mesh etc.

=== Part Size ===
{| class="wikitable"
!'''&lt;big&gt;''(x)V''&lt;/big&gt;'''
!'''&lt;big&gt;''=''&lt;/big&gt;'''
!'''&lt;big&gt;''Size of part''&lt;/big&gt;'''
!'''&lt;big&gt;''Label''&lt;/big&gt;'''
|-
|'''0v'''
|'''='''
|'''Extra Small'''
|'''(XS)'''
|-
|'''1v'''
|'''='''
|'''Small'''
|'''(SM)'''
|-
|'''2v'''
|'''='''
|'''Medium'''
|'''(MD)'''
|-
|'''3v'''
|'''='''
|'''Large'''
|'''(LG)'''
|-
|'''4v'''
|'''='''
|'''Extra Large'''
|'''(XL)'''
|-
|'''5v'''
|'''='''
|'''Extra Extra Large'''
|'''(XXL)'''
|}

=== Part Scale ===
{| class="wikitable"
!'''&lt;big&gt;''S(x)''&lt;/big&gt;'''
!'''&lt;big&gt;''=''&lt;/big&gt;'''
!'''&lt;big&gt;''Scale of part''&lt;/big&gt;'''
!'''&lt;big&gt;''Reference''&lt;/big&gt;'''
!&lt;big&gt;'''''Stack'''''&lt;/big&gt;
|-
|'''s1'''
|'''='''
|'''One Stack'''
|'''none'''
|'''1x1'''
|-
|'''s2'''
|'''='''
|'''One Stack that contains two of S1'''
|'''Short'''
|'''1x2'''
|-
|'''s3'''
|'''='''
|'''One stack that contains two of S2'''
|'''none'''
|'''1x4'''
|-
|'''s4'''
|'''='''
|'''One stack that contains two of S3'''
|'''Long'''
|'''1x8'''
|}

= Stock KSP2 Part Sizes and Modded Sizes =
Here are the Charts for the Sizes you'll have to follow when modeling.

Formula behind the design language of parts:      Height + ('''Fake''') Margin = Bevel [Amount to Bevel]

=== Stock Parts ===
{| class="wikitable"
!''&lt;big&gt;'''Size'''&lt;/big&gt;''
!&lt;big&gt;'''''Width'''''&lt;/big&gt;
!&lt;big&gt;'''''Height'''''&lt;/big&gt;
!'''&lt;big&gt;''Margin''&lt;/big&gt;'''
!&lt;big&gt;'''''Bevel'''''&lt;/big&gt;
!&lt;big&gt;'''''Faces'''''&lt;/big&gt;
!
|-
|'''XS'''
|'''0.625m'''
|'''23.4375cm'''
|'''+ 5cm'''
|'''[0.025]'''
|'''12'''
|
|-
|'''SM'''
|'''1.25m'''
|'''46.875cm'''
|'''+ 5cm'''
|'''[0.025]'''
|'''24'''
|
|-
|'''MD'''
|'''2.5m'''
|'''0.9375m'''
|'''+ 0.05m'''
|'''[0.025]'''
|'''36'''
|
|-
|'''LG'''
|'''3.75m'''
|'''1.875m'''
|'''+ 0.1m'''
|'''[0.03]'''
|'''48'''
|
|-
|'''XL'''
|'''5m'''
|'''1.875m'''
|'''+ 0.1m'''
|'''[0.05]'''
|'''48'''
|
|-
|'''XXL'''
|'''10m'''
|'''10m Ball'''
|
|
|'''60'''
|
|}
So what does '''Fake''' Margin mean? Well it's basically the point where the two objects connect and clip into each others geometry making a seal. Those parts don't have collisions. It can also be referred to as wiggle room or a light bleeding seal. The real height is what’s visible and also what is measured.

==== Example of Fake and Real Height: ====
[[File:Pasted image 1.png|left|1079x1079px]]















==== '''Example of Visible Height:''' ====
[[File:Pasted image 0.png|right|1080x1080px]]























As you can see. The blue line is where the actual object connects to its Gizmo/Origin and the “fake” height/Margin is inside the other object. So when modelling your object, please work in the volume of the parts real/actual size and when you are done you can increase the volume to the ('''Margin''') amount for the respective size.

=== Modded/Custom Parts ===
{| class="wikitable"
!''&lt;big&gt;'''Size'''&lt;/big&gt;''
!'''&lt;big&gt;''Width''&lt;/big&gt;'''
!'''&lt;big&gt;''Height''&lt;/big&gt;'''
!'''&lt;big&gt;''Faces''&lt;/big&gt;'''
!
|-
|'''XS-'''
|'''0.3125m'''
|
|
|
|-
|'''XS+'''
|'''0.9375m'''
|
|
|
|-
|'''SM+'''
|'''1.875m'''
|
|
|
|-
|'''MD+'''
|'''3.125m'''
|
|
|
|-
|'''LG+'''
|'''4.375m'''
|
|
|
|}

===Special Sizes===
Other than the ones shown above, there's also some extra sizes added by KSP1 (and ported to KSP2) and by mods. Here's some of them:

(WIP)
{| class="wikitable"
|+
!'''''&lt;big&gt;Label&lt;/big&gt;'''''
!'''''&lt;big&gt;Diameter&lt;/big&gt;'''''
|-
|'''MK2'''
|'''1.25m in the center'''
|-
|'''Mk3'''
|
|}
[[Category:Parts modding]]





''&lt;u&gt;More to come&lt;/u&gt;''

'''''&lt;small&gt;Created by StanWildin&lt;/small&gt;'''''</text>
      <sha1>2n6ujzcf46uuud4aznoxhp9t096eznq</sha1>
    </revision>
    <revision>
      <id>262</id>
      <parentid>261</parentid>
      <timestamp>2023-12-25T14:48:43Z</timestamp>
      <contributor>
        <username>StanWildin</username>
        <id>17</id>
      </contributor>
      <minor/>
      <comment>/* Example of Visible Height: */</comment>
      <origin>262</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4810" sha1="pg4b0jzth4sxs1rn6uryo0z2ydp62g1" xml:space="preserve">KSP2 brought more life to the sizes presets in KSP1, giving them labels as well as colors for each diameter. Here is some information about them.

This list does not contain all possible sizes as defined by the game, and it also contains modded part sizes. For a list of all the stock game part sizes available to be used in the Core Part Data module and part JSON definitions files, see [[Size Category]].

= '''AssetStudioModGUI''' =
Here's how to understand labels and how to find the right parts. I recommend excluding the reentry mesh when searching for a part or include the category of the part you want to find. Sadly you cant filter two things at the same time so you'll have to look through the whole list. One very good tip is to look for a short name that doesn't have _reentry or _lod1, lod2 in it. That's usually the actual part. Also you can sort the categories so they are together for each medium like texture, sprite, text, animation or mesh etc.

=== Part Size ===
{| class="wikitable"
!'''&lt;big&gt;''(x)V''&lt;/big&gt;'''
!'''&lt;big&gt;''=''&lt;/big&gt;'''
!'''&lt;big&gt;''Size of part''&lt;/big&gt;'''
!'''&lt;big&gt;''Label''&lt;/big&gt;'''
|-
|'''0v'''
|'''='''
|'''Extra Small'''
|'''(XS)'''
|-
|'''1v'''
|'''='''
|'''Small'''
|'''(SM)'''
|-
|'''2v'''
|'''='''
|'''Medium'''
|'''(MD)'''
|-
|'''3v'''
|'''='''
|'''Large'''
|'''(LG)'''
|-
|'''4v'''
|'''='''
|'''Extra Large'''
|'''(XL)'''
|-
|'''5v'''
|'''='''
|'''Extra Extra Large'''
|'''(XXL)'''
|}

=== Part Scale ===
{| class="wikitable"
!'''&lt;big&gt;''S(x)''&lt;/big&gt;'''
!'''&lt;big&gt;''=''&lt;/big&gt;'''
!'''&lt;big&gt;''Scale of part''&lt;/big&gt;'''
!'''&lt;big&gt;''Reference''&lt;/big&gt;'''
!&lt;big&gt;'''''Stack'''''&lt;/big&gt;
|-
|'''s1'''
|'''='''
|'''One Stack'''
|'''none'''
|'''1x1'''
|-
|'''s2'''
|'''='''
|'''One Stack that contains two of S1'''
|'''Short'''
|'''1x2'''
|-
|'''s3'''
|'''='''
|'''One stack that contains two of S2'''
|'''none'''
|'''1x4'''
|-
|'''s4'''
|'''='''
|'''One stack that contains two of S3'''
|'''Long'''
|'''1x8'''
|}

= Stock KSP2 Part Sizes and Modded Sizes =
Here are the Charts for the Sizes you'll have to follow when modeling.

Formula behind the design language of parts:      Height + ('''Fake''') Margin = Bevel [Amount to Bevel]

=== Stock Parts ===
{| class="wikitable"
!''&lt;big&gt;'''Size'''&lt;/big&gt;''
!&lt;big&gt;'''''Width'''''&lt;/big&gt;
!&lt;big&gt;'''''Height'''''&lt;/big&gt;
!'''&lt;big&gt;''Margin''&lt;/big&gt;'''
!&lt;big&gt;'''''Bevel'''''&lt;/big&gt;
!&lt;big&gt;'''''Faces'''''&lt;/big&gt;
!
|-
|'''XS'''
|'''0.625m'''
|'''23.4375cm'''
|'''+ 5cm'''
|'''[0.025]'''
|'''12'''
|
|-
|'''SM'''
|'''1.25m'''
|'''46.875cm'''
|'''+ 5cm'''
|'''[0.025]'''
|'''24'''
|
|-
|'''MD'''
|'''2.5m'''
|'''0.9375m'''
|'''+ 0.05m'''
|'''[0.025]'''
|'''36'''
|
|-
|'''LG'''
|'''3.75m'''
|'''1.875m'''
|'''+ 0.1m'''
|'''[0.03]'''
|'''48'''
|
|-
|'''XL'''
|'''5m'''
|'''1.875m'''
|'''+ 0.1m'''
|'''[0.05]'''
|'''48'''
|
|-
|'''XXL'''
|'''10m'''
|'''10m Ball'''
|
|
|'''60'''
|
|}
So what does '''Fake''' Margin mean? Well it's basically the point where the two objects connect and clip into each others geometry making a seal. Those parts don't have collisions. It can also be referred to as wiggle room or a light bleeding seal. The real height is what’s visible and also what is measured.

==== Example of Fake and Real Height: ====
[[File:Pasted image 1.png|left|1000x1000px|frameless]]















==== '''Example of Visible Height:''' ====
[[File:Pasted image 0.png|1000x1000px|left|frameless]]






















As you can see. The blue line is where the actual object connects to its Gizmo/Origin and the “fake” height/Margin is inside the other object. So when modelling your object, please work in the volume of the parts real/actual size and when you are done you can increase the volume to the ('''Margin''') amount for the respective size.

As you can see. The blue line is where the actual object connects to its Gizmo/Origin and the “fake” height/Margin is inside the other object. So when modelling your object, please work in the volume of the parts real/actual size and when you are done you can increase the volume to the ('''Margin''') amount for the respective size.

=== Modded/Custom Parts ===
{| class="wikitable"
!''&lt;big&gt;'''Size'''&lt;/big&gt;''
!'''&lt;big&gt;''Width''&lt;/big&gt;'''
!'''&lt;big&gt;''Height''&lt;/big&gt;'''
!'''&lt;big&gt;''Faces''&lt;/big&gt;'''
!
|-
|'''XS-'''
|'''0.3125m'''
|
|
|
|-
|'''XS+'''
|'''0.9375m'''
|
|
|
|-
|'''SM+'''
|'''1.875m'''
|
|
|
|-
|'''MD+'''
|'''3.125m'''
|
|
|
|-
|'''LG+'''
|'''4.375m'''
|
|
|
|}

===Special Sizes===
Other than the ones shown above, there's also some extra sizes added by KSP1 (and ported to KSP2) and by mods. Here's some of them:

(WIP)
{| class="wikitable"
|+
!'''''&lt;big&gt;Label&lt;/big&gt;'''''
!'''''&lt;big&gt;Diameter&lt;/big&gt;'''''
|-
|'''MK2'''
|'''1.25m in the center'''
|-
|'''Mk3'''
|
|}
[[Category:Parts modding]]





''&lt;u&gt;More to come&lt;/u&gt;''

'''''&lt;small&gt;Created by StanWildin&lt;/small&gt;'''''</text>
      <sha1>pg4b0jzth4sxs1rn6uryo0z2ydp62g1</sha1>
    </revision>
    <revision>
      <id>263</id>
      <parentid>262</parentid>
      <timestamp>2023-12-25T14:50:35Z</timestamp>
      <contributor>
        <username>StanWildin</username>
        <id>17</id>
      </contributor>
      <minor/>
      <origin>263</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4425" sha1="j3jdayg056093lx0ib20psfr2z2w6l8" xml:space="preserve">KSP2 brought more life to the sizes presets in KSP1, giving them labels as well as colors for each diameter. Here is some information about them.

This list does not contain all possible sizes as defined by the game, and it also contains modded part sizes. For a list of all the stock game part sizes available to be used in the Core Part Data module and part JSON definitions files, see [[Size Category]].

= '''AssetStudioModGUI''' =
Here's how to understand labels and how to find the right parts. I recommend excluding the reentry mesh when searching for a part or include the category of the part you want to find. Sadly you cant filter two things at the same time so you'll have to look through the whole list. One very good tip is to look for a short name that doesn't have _reentry or _lod1, lod2 in it. That's usually the actual part. Also you can sort the categories so they are together for each medium like texture, sprite, text, animation or mesh etc.

=== Part Size ===
{| class="wikitable"
!'''&lt;big&gt;''(x)V''&lt;/big&gt;'''
!'''&lt;big&gt;''=''&lt;/big&gt;'''
!'''&lt;big&gt;''Size of part''&lt;/big&gt;'''
!'''&lt;big&gt;''Label''&lt;/big&gt;'''
|-
|'''0v'''
|'''='''
|'''Extra Small'''
|'''(XS)'''
|-
|'''1v'''
|'''='''
|'''Small'''
|'''(SM)'''
|-
|'''2v'''
|'''='''
|'''Medium'''
|'''(MD)'''
|-
|'''3v'''
|'''='''
|'''Large'''
|'''(LG)'''
|-
|'''4v'''
|'''='''
|'''Extra Large'''
|'''(XL)'''
|-
|'''5v'''
|'''='''
|'''Extra Extra Large'''
|'''(XXL)'''
|}

=== Part Scale ===
{| class="wikitable"
!'''&lt;big&gt;''S(x)''&lt;/big&gt;'''
!'''&lt;big&gt;''=''&lt;/big&gt;'''
!'''&lt;big&gt;''Scale of part''&lt;/big&gt;'''
!'''&lt;big&gt;''Reference''&lt;/big&gt;'''
!&lt;big&gt;'''''Stack'''''&lt;/big&gt;
|-
|'''s1'''
|'''='''
|'''One Stack'''
|'''none'''
|'''1x1'''
|-
|'''s2'''
|'''='''
|'''One Stack that contains two of S1'''
|'''Short'''
|'''1x2'''
|-
|'''s3'''
|'''='''
|'''One stack that contains two of S2'''
|'''none'''
|'''1x4'''
|-
|'''s4'''
|'''='''
|'''One stack that contains two of S3'''
|'''Long'''
|'''1x8'''
|}

= Stock KSP2 Part Sizes and Modded Sizes =
Here are the Charts for the Sizes you'll have to follow when modeling.

Formula behind the design language of parts:      Height + ('''Fake''') Margin = Bevel [Amount to Bevel]

=== Stock Parts ===
{| class="wikitable"
!''&lt;big&gt;'''Size'''&lt;/big&gt;''
!&lt;big&gt;'''''Width'''''&lt;/big&gt;
!&lt;big&gt;'''''Height'''''&lt;/big&gt;
!'''&lt;big&gt;''Margin''&lt;/big&gt;'''
!&lt;big&gt;'''''Bevel'''''&lt;/big&gt;
!&lt;big&gt;'''''Faces'''''&lt;/big&gt;
!
|-
|'''XS'''
|'''0.625m'''
|'''23.4375cm'''
|'''+ 5cm'''
|'''[0.025]'''
|'''12'''
|
|-
|'''SM'''
|'''1.25m'''
|'''46.875cm'''
|'''+ 5cm'''
|'''[0.025]'''
|'''24'''
|
|-
|'''MD'''
|'''2.5m'''
|'''0.9375m'''
|'''+ 0.05m'''
|'''[0.025]'''
|'''36'''
|
|-
|'''LG'''
|'''3.75m'''
|'''1.875m'''
|'''+ 0.1m'''
|'''[0.03]'''
|'''48'''
|
|-
|'''XL'''
|'''5m'''
|'''1.875m'''
|'''+ 0.1m'''
|'''[0.05]'''
|'''48'''
|
|-
|'''XXL'''
|'''10m'''
|'''10m Ball'''
|
|
|'''60'''
|
|}
So what does '''Fake''' Margin mean? Well it's basically the point where the two objects connect and clip into each others geometry making a seal. Those parts don't have collisions. It can also be referred to as wiggle room or a light bleeding seal. The real height is what’s visible and also what is measured.

==== Example of Fake and Real Height: ====
[[File:Pasted_image_1.png|frameless|1049x1049px]]

==== '''Example of Visible Height:''' ====
[[File:Pasted_image_0.png|frameless|1049x1049px]]
As you can see. The blue line is where the actual object connects to its Gizmo/Origin and the “fake” height/Margin is inside the other object. So when modelling your object, please work in the volume of the parts real/actual size and when you are done you can increase the volume to the ('''Margin''') amount for the respective size.

=== Modded/Custom Parts ===
{| class="wikitable"
!''&lt;big&gt;'''Size'''&lt;/big&gt;''
!'''&lt;big&gt;''Width''&lt;/big&gt;'''
!'''&lt;big&gt;''Height''&lt;/big&gt;'''
!'''&lt;big&gt;''Faces''&lt;/big&gt;'''
!
|-
|'''XS-'''
|'''0.3125m'''
|
|
|
|-
|'''XS+'''
|'''0.9375m'''
|
|
|
|-
|'''SM+'''
|'''1.875m'''
|
|
|
|-
|'''MD+'''
|'''3.125m'''
|
|
|
|-
|'''LG+'''
|'''4.375m'''
|
|
|
|}

===Special Sizes===
Other than the ones shown above, there's also some extra sizes added by KSP1 (and ported to KSP2) and by mods. Here's some of them:

(WIP)
{| class="wikitable"
|+
!'''''&lt;big&gt;Label&lt;/big&gt;'''''
!'''''&lt;big&gt;Diameter&lt;/big&gt;'''''
|-
|'''MK2'''
|'''1.25m in the center'''
|-
|'''Mk3'''
|
|}
[[Category:Parts modding]]





''&lt;u&gt;More to come&lt;/u&gt;''

'''''&lt;small&gt;Created by StanWildin&lt;/small&gt;'''''</text>
      <sha1>j3jdayg056093lx0ib20psfr2z2w6l8</sha1>
    </revision>
    <revision>
      <id>264</id>
      <parentid>263</parentid>
      <timestamp>2023-12-25T14:51:09Z</timestamp>
      <contributor>
        <username>StanWildin</username>
        <id>17</id>
      </contributor>
      <minor/>
      <origin>264</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4426" sha1="ppvz555wvqrsj5d1hc5p4a4urqhrg5p" xml:space="preserve">KSP2 brought more life to the sizes presets in KSP1, giving them labels as well as colors for each diameter. Here is some information about them.

This list does not contain all possible sizes as defined by the game, and it also contains modded part sizes. For a list of all the stock game part sizes available to be used in the Core Part Data module and part JSON definitions files, see [[Size Category]].

= '''AssetStudioModGUI''' =
Here's how to understand labels and how to find the right parts. I recommend excluding the reentry mesh when searching for a part or include the category of the part you want to find. Sadly you cant filter two things at the same time so you'll have to look through the whole list. One very good tip is to look for a short name that doesn't have _reentry or _lod1, lod2 in it. That's usually the actual part. Also you can sort the categories so they are together for each medium like texture, sprite, text, animation or mesh etc.

=== Part Size ===
{| class="wikitable"
!'''&lt;big&gt;''(x)V''&lt;/big&gt;'''
!'''&lt;big&gt;''=''&lt;/big&gt;'''
!'''&lt;big&gt;''Size of part''&lt;/big&gt;'''
!'''&lt;big&gt;''Label''&lt;/big&gt;'''
|-
|'''0v'''
|'''='''
|'''Extra Small'''
|'''(XS)'''
|-
|'''1v'''
|'''='''
|'''Small'''
|'''(SM)'''
|-
|'''2v'''
|'''='''
|'''Medium'''
|'''(MD)'''
|-
|'''3v'''
|'''='''
|'''Large'''
|'''(LG)'''
|-
|'''4v'''
|'''='''
|'''Extra Large'''
|'''(XL)'''
|-
|'''5v'''
|'''='''
|'''Extra Extra Large'''
|'''(XXL)'''
|}

=== Part Scale ===
{| class="wikitable"
!'''&lt;big&gt;''S(x)''&lt;/big&gt;'''
!'''&lt;big&gt;''=''&lt;/big&gt;'''
!'''&lt;big&gt;''Scale of part''&lt;/big&gt;'''
!'''&lt;big&gt;''Reference''&lt;/big&gt;'''
!&lt;big&gt;'''''Stack'''''&lt;/big&gt;
|-
|'''s1'''
|'''='''
|'''One Stack'''
|'''none'''
|'''1x1'''
|-
|'''s2'''
|'''='''
|'''One Stack that contains two of S1'''
|'''Short'''
|'''1x2'''
|-
|'''s3'''
|'''='''
|'''One stack that contains two of S2'''
|'''none'''
|'''1x4'''
|-
|'''s4'''
|'''='''
|'''One stack that contains two of S3'''
|'''Long'''
|'''1x8'''
|}

= Stock KSP2 Part Sizes and Modded Sizes =
Here are the Charts for the Sizes you'll have to follow when modeling.

Formula behind the design language of parts:      Height + ('''Fake''') Margin = Bevel [Amount to Bevel]

=== Stock Parts ===
{| class="wikitable"
!''&lt;big&gt;'''Size'''&lt;/big&gt;''
!&lt;big&gt;'''''Width'''''&lt;/big&gt;
!&lt;big&gt;'''''Height'''''&lt;/big&gt;
!'''&lt;big&gt;''Margin''&lt;/big&gt;'''
!&lt;big&gt;'''''Bevel'''''&lt;/big&gt;
!&lt;big&gt;'''''Faces'''''&lt;/big&gt;
!
|-
|'''XS'''
|'''0.625m'''
|'''23.4375cm'''
|'''+ 5cm'''
|'''[0.025]'''
|'''12'''
|
|-
|'''SM'''
|'''1.25m'''
|'''46.875cm'''
|'''+ 5cm'''
|'''[0.025]'''
|'''24'''
|
|-
|'''MD'''
|'''2.5m'''
|'''0.9375m'''
|'''+ 0.05m'''
|'''[0.025]'''
|'''36'''
|
|-
|'''LG'''
|'''3.75m'''
|'''1.875m'''
|'''+ 0.1m'''
|'''[0.03]'''
|'''48'''
|
|-
|'''XL'''
|'''5m'''
|'''1.875m'''
|'''+ 0.1m'''
|'''[0.05]'''
|'''48'''
|
|-
|'''XXL'''
|'''10m'''
|'''10m Ball'''
|
|
|'''60'''
|
|}
So what does '''Fake''' Margin mean? Well it's basically the point where the two objects connect and clip into each others geometry making a seal. Those parts don't have collisions. It can also be referred to as wiggle room or a light bleeding seal. The real height is what’s visible and also what is measured.

==== Example of Fake and Real Height: ====
[[File:Pasted_image_1.png|frameless|1049x1049px]]

==== '''Example of Visible Height:''' ====
[[File:Pasted_image_0.png|frameless|1049x1049px]]

As you can see. The blue line is where the actual object connects to its Gizmo/Origin and the “fake” height/Margin is inside the other object. So when modelling your object, please work in the volume of the parts real/actual size and when you are done you can increase the volume to the ('''Margin''') amount for the respective size.

=== Modded/Custom Parts ===
{| class="wikitable"
!''&lt;big&gt;'''Size'''&lt;/big&gt;''
!'''&lt;big&gt;''Width''&lt;/big&gt;'''
!'''&lt;big&gt;''Height''&lt;/big&gt;'''
!'''&lt;big&gt;''Faces''&lt;/big&gt;'''
!
|-
|'''XS-'''
|'''0.3125m'''
|
|
|
|-
|'''XS+'''
|'''0.9375m'''
|
|
|
|-
|'''SM+'''
|'''1.875m'''
|
|
|
|-
|'''MD+'''
|'''3.125m'''
|
|
|
|-
|'''LG+'''
|'''4.375m'''
|
|
|
|}

===Special Sizes===
Other than the ones shown above, there's also some extra sizes added by KSP1 (and ported to KSP2) and by mods. Here's some of them:

(WIP)
{| class="wikitable"
|+
!'''''&lt;big&gt;Label&lt;/big&gt;'''''
!'''''&lt;big&gt;Diameter&lt;/big&gt;'''''
|-
|'''MK2'''
|'''1.25m in the center'''
|-
|'''Mk3'''
|
|}
[[Category:Parts modding]]





''&lt;u&gt;More to come&lt;/u&gt;''

'''''&lt;small&gt;Created by StanWildin&lt;/small&gt;'''''</text>
      <sha1>ppvz555wvqrsj5d1hc5p4a4urqhrg5p</sha1>
    </revision>
    <revision>
      <id>279</id>
      <parentid>264</parentid>
      <timestamp>2024-01-05T15:58:41Z</timestamp>
      <contributor>
        <username>Cheese</username>
        <id>7</id>
      </contributor>
      <comment>XS uses 24 faces, not 12</comment>
      <origin>279</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4420" sha1="snddyjds0iw44anzhl4mz6gggqgod1j" xml:space="preserve">KSP2 brought more life to the sizes presets in KSP1, giving them labels as well as colors for each diameter. Here is some information about them.

This list does not contain all possible sizes as defined by the game, and it also contains modded part sizes. For a list of all the stock game part sizes available to be used in the Core Part Data module and part JSON definitions files, see [[Size Category]].

= '''AssetStudioModGUI''' =
Here's how to understand labels and how to find the right parts. I recommend excluding the reentry mesh when searching for a part or include the category of the part you want to find. Sadly you cant filter two things at the same time so you'll have to look through the whole list. One very good tip is to look for a short name that doesn't have _reentry or _lod1, lod2 in it. That's usually the actual part. Also you can sort the categories so they are together for each medium like texture, sprite, text, animation or mesh etc.

=== Part Size ===
{| class="wikitable"
!'''&lt;big&gt;''(x)V''&lt;/big&gt;'''
!'''&lt;big&gt;''=''&lt;/big&gt;'''
!'''&lt;big&gt;''Size of part''&lt;/big&gt;'''
!'''&lt;big&gt;''Label''&lt;/big&gt;'''
|-
|'''0v'''
|'''='''
|'''Extra Small'''
|'''(XS)'''
|-
|'''1v'''
|'''='''
|'''Small'''
|'''(SM)'''
|-
|'''2v'''
|'''='''
|'''Medium'''
|'''(MD)'''
|-
|'''3v'''
|'''='''
|'''Large'''
|'''(LG)'''
|-
|'''4v'''
|'''='''
|'''Extra Large'''
|'''(XL)'''
|-
|'''5v'''
|'''='''
|'''Extra Extra Large'''
|'''(XXL)'''
|}

=== Part Scale ===
{| class="wikitable"
!'''&lt;big&gt;''S(x)''&lt;/big&gt;'''
!'''&lt;big&gt;''=''&lt;/big&gt;'''
!'''&lt;big&gt;''Scale of part''&lt;/big&gt;'''
!'''&lt;big&gt;''Reference''&lt;/big&gt;'''
!&lt;big&gt;'''''Stack'''''&lt;/big&gt;
|-
|'''s1'''
|'''='''
|'''One Stack'''
|'''none'''
|'''1x1'''
|-
|'''s2'''
|'''='''
|'''One Stack that contains two of S1'''
|'''Short'''
|'''1x2'''
|-
|'''s3'''
|'''='''
|'''One stack that contains two of S2'''
|'''none'''
|'''1x4'''
|-
|'''s4'''
|'''='''
|'''One stack that contains two of S3'''
|'''Long'''
|'''1x8'''
|}

= Stock KSP2 Part Sizes and Modded Sizes =
Here are the Charts for the Sizes you'll have to follow when modeling.

Formula behind the design language of parts:      Height + ('''Fake''') Margin = Bevel [Amount to Bevel]

=== Stock Parts ===
{| class="wikitable"
!''&lt;big&gt;'''Size'''&lt;/big&gt;''
!&lt;big&gt;'''''Width'''''&lt;/big&gt;
!&lt;big&gt;'''''Height'''''&lt;/big&gt;
!'''&lt;big&gt;''Margin''&lt;/big&gt;'''
!&lt;big&gt;'''''Bevel'''''&lt;/big&gt;
!&lt;big&gt;'''''Faces'''''&lt;/big&gt;
!
|-
|'''XS'''
|'''0.625m'''
|'''23.4375cm'''
|'''+ 5cm'''
|'''[0.025]'''
|24
|
|-
|'''SM'''
|'''1.25m'''
|'''46.875cm'''
|'''+ 5cm'''
|'''[0.025]'''
|'''24'''
|
|-
|'''MD'''
|'''2.5m'''
|'''0.9375m'''
|'''+ 0.05m'''
|'''[0.025]'''
|'''36'''
|
|-
|'''LG'''
|'''3.75m'''
|'''1.875m'''
|'''+ 0.1m'''
|'''[0.03]'''
|'''48'''
|
|-
|'''XL'''
|'''5m'''
|'''1.875m'''
|'''+ 0.1m'''
|'''[0.05]'''
|'''48'''
|
|-
|'''XXL'''
|'''10m'''
|'''10m Ball'''
|
|
|'''60'''
|
|}
So what does '''Fake''' Margin mean? Well it's basically the point where the two objects connect and clip into each others geometry making a seal. Those parts don't have collisions. It can also be referred to as wiggle room or a light bleeding seal. The real height is what’s visible and also what is measured.

==== Example of Fake and Real Height: ====
[[File:Pasted_image_1.png|frameless|1049x1049px]]

==== '''Example of Visible Height:''' ====
[[File:Pasted_image_0.png|frameless|1049x1049px]]

As you can see. The blue line is where the actual object connects to its Gizmo/Origin and the “fake” height/Margin is inside the other object. So when modelling your object, please work in the volume of the parts real/actual size and when you are done you can increase the volume to the ('''Margin''') amount for the respective size.

=== Modded/Custom Parts ===
{| class="wikitable"
!''&lt;big&gt;'''Size'''&lt;/big&gt;''
!'''&lt;big&gt;''Width''&lt;/big&gt;'''
!'''&lt;big&gt;''Height''&lt;/big&gt;'''
!'''&lt;big&gt;''Faces''&lt;/big&gt;'''
!
|-
|'''XS-'''
|'''0.3125m'''
|
|
|
|-
|'''XS+'''
|'''0.9375m'''
|
|
|
|-
|'''SM+'''
|'''1.875m'''
|
|
|
|-
|'''MD+'''
|'''3.125m'''
|
|
|
|-
|'''LG+'''
|'''4.375m'''
|
|
|
|}

===Special Sizes===
Other than the ones shown above, there's also some extra sizes added by KSP1 (and ported to KSP2) and by mods. Here's some of them:

(WIP)
{| class="wikitable"
|+
!'''''&lt;big&gt;Label&lt;/big&gt;'''''
!'''''&lt;big&gt;Diameter&lt;/big&gt;'''''
|-
|'''MK2'''
|'''1.25m in the center'''
|-
|'''Mk3'''
|
|}
[[Category:Parts modding]]





''&lt;u&gt;More to come&lt;/u&gt;''

'''''&lt;small&gt;Created by StanWildin&lt;/small&gt;'''''</text>
      <sha1>snddyjds0iw44anzhl4mz6gggqgod1j</sha1>
    </revision>
  </page>
  <page>
    <title>Scenery - Standard (Opaque) shader</title>
    <ns>0</ns>
    <id>23</id>
    <revision>
      <id>56</id>
      <timestamp>2023-05-18T19:42:16Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <comment>Created page with "=== Main shader used for the parts === This (KSP2/Scenery/Standard (Opaque)) is the main shader used for parts and the shader that allows for parts to be repainted. {| class="wikitable sortable mw-collapsible" |+Color !Property !Name !Type !Default Value !Recommended Value !Description |- |'''_Color''' |Color |Color |(1, 1, 1, 1) |(1, 1, 1, 1) |Color multiplier for ''_MainTex'' |- |'''_MainTex''' |Albedo Map |Texture2D |white | |Map used for areas with no color under the..."</comment>
      <origin>56</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2993" sha1="2vbjpsazb0pdcvaklzjp0a23n2gvuv3" xml:space="preserve">=== Main shader used for the parts ===
This (KSP2/Scenery/Standard (Opaque)) is the main shader used for parts and the shader that allows for parts to be repainted.
{| class="wikitable sortable mw-collapsible"
|+Color
!Property
!Name
!Type
!Default Value
!Recommended Value
!Description
|-
|'''_Color'''
|Color
|Color
|(1, 1, 1, 1)
|(1, 1, 1, 1)
|Color multiplier for ''_MainTex''
|-
|'''_MainTex'''
|Albedo Map
|Texture2D
|white
|
|Map used for areas with no color under the _Paint
|-
|'''_MetallicGlossMap'''
|Metallic
|Texture2D
|white
|
|Main map for smoothness/metallic
|-
|'''_Metallic'''
|Metallic/Smoothness Map
|float(0, 1)
|0
|1
|
|-
|'''_GlossMapScale'''
|Smoothness Scale
|float(0, 1)
|1
|1
|Multiplier for smoothness
|-
|'''_MipBias'''
|[https://docs.unity3d.com/ScriptReference/Texture-mipMapBias.html Mip Bias]
|float(0, 1)
|0.8
|0.8
|
|-
|'''_BumpMap'''
|Normal Map
|Texture2D
|bump
|
|Main normal/bump map for the part
|-
|'''_DetailBumpMap'''
|Detail Normal Map
|Texture2D
|bump
|
|tileable extra details
|-
|'''_DetailMask'''
|Detail Mask
|Texture2D
|white
|
|mask for ''_DetailBumpMap''
|-
|'''_DetailBumpScale'''
|Detail Normal Scale
|float(0, 1)
|1
|
|Multiplier for details' bump
|-
|'''_DetailBumpTiling'''
|Detail Normal Tiling
|float(0.01, 10)
|1
|
|
|-
|'''_OcclusionMap'''
|Occlusion Map
|Texture2D
|white
|
|Stock part's dont seem to use this. Occlusion seems to imbeded into ''_MainTex'', ''_MetallicGlossMap'' and ''_PaintMaskGlossMap''
|-
|'''_OcclusionStrength'''
|Strength
|float(0, 1)
|1
|
|Multiplier for ambient occlusion
|-
|'''_EmissionMap'''
|Emission Map
|Texture2D
|white
|
|Map for emission used by engines and generators
|-
|'''_EmissionColor'''
|Emission Color
|
|(0, 0, 0, 1)
|white
|
|-
|'''_UseTimeOfDay'''
|Use Time of Day
|Toggle
|0 (false)
|
|
|-
|'''_TimeOfDayDotMin'''
|Min
|float(-1, 1)
| -0.005
|
|
|-
|'''_TimeOfDayDotMax'''
|Max
|float(-1, 1)
|0.005
|
|
|-
|'''_PaintA'''
|Paint Color A
|Color
|white
|
|Base paint for the part (will be overwritten during runtime)
|-
|'''_PaintB'''
|Paint Color B
|Color
|white
|
|Accent paint for the part (will be overwritten during runtime)
|-
|'''_PaintMaskGlossMap'''
|Paint Mask
|Texture2D
|white
|
|This is a special texture where:
'''alpha channel''' dictates the smoothness
'''red channel''' dictates the accent
'''green channel''' dictates the base (this also masks the accent)
'''blue channel''' dictates where it should show the original texture
|-
|'''_PaintGlossMapScale'''
|Paint Smoothness Scale
|float(0, 1)
|1
|1
|Multiplier for smoothness on painted areas
|-
|'''_SmoothnessOverride'''
|Use PaintMask for Paint Smoothness
|Toggle
|0 (false)
|1 (true)
|when true, ''_PaintMaskGlossMap'' will be used for mettalic (on painted areas) instead of ''_MetallicGlossMap''
|-
|'''_RimFalloff'''
|_RimFalloff
|float(0.01, 5)
|0.1
|0.1
|
|-
|'''_RimColor'''
|_RimColor
|Color
|transparent
|
|
|-
|'''_Culling'''
|Cull Mode
|float
|2
|2
|
|-
|'''_Offset'''
|Depth Offset
|float(-1, 1)
|0
|0
|
|}</text>
      <sha1>2vbjpsazb0pdcvaklzjp0a23n2gvuv3</sha1>
    </revision>
    <revision>
      <id>57</id>
      <parentid>56</parentid>
      <timestamp>2023-05-18T19:42:49Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <minor/>
      <origin>57</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2998" sha1="9rmuxz4tayvlqc19sazelu7igyf76n4" xml:space="preserve">=== Main shader used for the parts ===
This (KSP2/Scenery/Standard (Opaque)) is the main shader used for parts and the shader that allows for parts to be repainted.
{| class="wikitable sortable mw-collapsible"
|+Color
!Property
!Name
!Type
!Default Value
!Recommended Value
!Description
|-
|'''_Color'''
|Color
|Color
|(1, 1, 1, 1)
|(1, 1, 1, 1)
|Color multiplier for ''_MainTex''
|-
|'''_MainTex'''
|Albedo Map
|Texture2D
|white
|
|Map used for areas with no color under the _Paint
|-
|'''_MetallicGlossMap'''
|Metallic
|Texture2D
|white
|
|Main map for smoothness/metallic
|-
|'''_Metallic'''
|Metallic/Smoothness Map
|float(0, 1)
|0
|1
|
|-
|'''_GlossMapScale'''
|Smoothness Scale
|float(0, 1)
|1
|1
|Multiplier for smoothness
|-
|'''_MipBias'''
|[https://docs.unity3d.com/ScriptReference/Texture-mipMapBias.html Mip Bias]
|float(0, 1)
|0.8
|0.8
|
|-
|'''_BumpMap'''
|Normal Map
|Texture2D
|bump
|
|Main normal/bump map for the part
|-
|'''_DetailBumpMap'''
|Detail Normal Map
|Texture2D
|bump
|
|tileable extra details
|-
|'''_DetailMask'''
|Detail Mask
|Texture2D
|white
|
|mask for ''_DetailBumpMap''
|-
|'''_DetailBumpScale'''
|Detail Normal Scale
|float(0, 1)
|1
|
|Multiplier for details' bump
|-
|'''_DetailBumpTiling'''
|Detail Normal Tiling
|float(0.01, 10)
|1
|
|
|-
|'''_OcclusionMap'''
|Occlusion Map
|Texture2D
|white
|
|Stock part's dont seem to use this. Occlusion seems to imbeded into ''_MainTex'', ''_MetallicGlossMap'' and ''_PaintMaskGlossMap''
|-
|'''_OcclusionStrength'''
|Strength
|float(0, 1)
|1
|
|Multiplier for ambient occlusion
|-
|'''_EmissionMap'''
|Emission Map
|Texture2D
|white
|
|Map for emission used by engines and generators
|-
|'''_EmissionColor'''
|Emission Color
|Color
|(0, 0, 0, 1)
|white
|
|-
|'''_UseTimeOfDay'''
|Use Time of Day
|Toggle
|0 (false)
|
|
|-
|'''_TimeOfDayDotMin'''
|Min
|float(-1, 1)
| -0.005
|
|
|-
|'''_TimeOfDayDotMax'''
|Max
|float(-1, 1)
|0.005
|
|
|-
|'''_PaintA'''
|Paint Color A
|Color
|white
|
|Base paint for the part (will be overwritten during runtime)
|-
|'''_PaintB'''
|Paint Color B
|Color
|white
|
|Accent paint for the part (will be overwritten during runtime)
|-
|'''_PaintMaskGlossMap'''
|Paint Mask
|Texture2D
|white
|
|This is a special texture where:
'''alpha channel''' dictates the smoothness
'''red channel''' dictates the accent
'''green channel''' dictates the base (this also masks the accent)
'''blue channel''' dictates where it should show the original texture
|-
|'''_PaintGlossMapScale'''
|Paint Smoothness Scale
|float(0, 1)
|1
|1
|Multiplier for smoothness on painted areas
|-
|'''_SmoothnessOverride'''
|Use PaintMask for Paint Smoothness
|Toggle
|0 (false)
|1 (true)
|when true, ''_PaintMaskGlossMap'' will be used for mettalic (on painted areas) instead of ''_MetallicGlossMap''
|-
|'''_RimFalloff'''
|_RimFalloff
|float(0.01, 5)
|0.1
|0.1
|
|-
|'''_RimColor'''
|_RimColor
|Color
|transparent
|
|
|-
|'''_Culling'''
|Cull Mode
|float
|2
|2
|
|-
|'''_Offset'''
|Depth Offset
|float(-1, 1)
|0
|0
|
|}</text>
      <sha1>9rmuxz4tayvlqc19sazelu7igyf76n4</sha1>
    </revision>
    <revision>
      <id>58</id>
      <parentid>57</parentid>
      <timestamp>2023-05-18T19:43:38Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <origin>58</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3003" sha1="jfui7eegxtuf9ugeg4mr0c667c51kju" xml:space="preserve">=== Main shader used for the parts ===
This (KSP2/Scenery/Standard (Opaque)) is the main shader used for parts and the shader that allows for parts to be repainted.
{| class="wikitable sortable mw-collapsible"
|+Properties
!Property
!Name
!Type
!Default Value
!Recommended Value
!Description
|-
|'''_Color'''
|Color
|Color
|(1, 1, 1, 1)
|(1, 1, 1, 1)
|Color multiplier for ''_MainTex''
|-
|'''_MainTex'''
|Albedo Map
|Texture2D
|white
|
|Map used for areas with no color under the _Paint
|-
|'''_MetallicGlossMap'''
|Metallic
|Texture2D
|white
|
|Main map for smoothness/metallic
|-
|'''_Metallic'''
|Metallic/Smoothness Map
|float(0, 1)
|0
|1
|
|-
|'''_GlossMapScale'''
|Smoothness Scale
|float(0, 1)
|1
|1
|Multiplier for smoothness
|-
|'''_MipBias'''
|[https://docs.unity3d.com/ScriptReference/Texture-mipMapBias.html Mip Bias]
|float(0, 1)
|0.8
|0.8
|
|-
|'''_BumpMap'''
|Normal Map
|Texture2D
|bump
|
|Main normal/bump map for the part
|-
|'''_DetailBumpMap'''
|Detail Normal Map
|Texture2D
|bump
|
|tileable extra details
|-
|'''_DetailMask'''
|Detail Mask
|Texture2D
|white
|
|mask for ''_DetailBumpMap''
|-
|'''_DetailBumpScale'''
|Detail Normal Scale
|float(0, 1)
|1
|
|Multiplier for details' bump
|-
|'''_DetailBumpTiling'''
|Detail Normal Tiling
|float(0.01, 10)
|1
|
|
|-
|'''_OcclusionMap'''
|Occlusion Map
|Texture2D
|white
|
|Stock part's dont seem to use this. Occlusion seems to imbeded into ''_MainTex'', ''_MetallicGlossMap'' and ''_PaintMaskGlossMap''
|-
|'''_OcclusionStrength'''
|Strength
|float(0, 1)
|1
|
|Multiplier for ambient occlusion
|-
|'''_EmissionMap'''
|Emission Map
|Texture2D
|white
|
|Map for emission used by engines and generators
|-
|'''_EmissionColor'''
|Emission Color
|Color
|(0, 0, 0, 1)
|white
|
|-
|'''_UseTimeOfDay'''
|Use Time of Day
|Toggle
|0 (false)
|
|
|-
|'''_TimeOfDayDotMin'''
|Min
|float(-1, 1)
| -0.005
|
|
|-
|'''_TimeOfDayDotMax'''
|Max
|float(-1, 1)
|0.005
|
|
|-
|'''_PaintA'''
|Paint Color A
|Color
|white
|
|Base paint for the part (will be overwritten during runtime)
|-
|'''_PaintB'''
|Paint Color B
|Color
|white
|
|Accent paint for the part (will be overwritten during runtime)
|-
|'''_PaintMaskGlossMap'''
|Paint Mask
|Texture2D
|white
|
|This is a special texture where:
'''alpha channel''' dictates the smoothness
'''red channel''' dictates the accent
'''green channel''' dictates the base (this also masks the accent)
'''blue channel''' dictates where it should show the original texture
|-
|'''_PaintGlossMapScale'''
|Paint Smoothness Scale
|float(0, 1)
|1
|1
|Multiplier for smoothness on painted areas
|-
|'''_SmoothnessOverride'''
|Use PaintMask for Paint Smoothness
|Toggle
|0 (false)
|1 (true)
|when true, ''_PaintMaskGlossMap'' will be used for mettalic (on painted areas) instead of ''_MetallicGlossMap''
|-
|'''_RimFalloff'''
|_RimFalloff
|float(0.01, 5)
|0.1
|0.1
|
|-
|'''_RimColor'''
|_RimColor
|Color
|transparent
|
|
|-
|'''_Culling'''
|Cull Mode
|float
|2
|2
|
|-
|'''_Offset'''
|Depth Offset
|float(-1, 1)
|0
|0
|
|}</text>
      <sha1>jfui7eegxtuf9ugeg4mr0c667c51kju</sha1>
    </revision>
    <revision>
      <id>59</id>
      <parentid>58</parentid>
      <timestamp>2023-05-18T19:44:23Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <minor/>
      <comment>bullet list for _PaintMaskGlossMap description</comment>
      <origin>59</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3015" sha1="3hsh17f9kqbuy5t696zkh3tqx1tzm75" xml:space="preserve">=== Main shader used for the parts ===
This (KSP2/Scenery/Standard (Opaque)) is the main shader used for parts and the shader that allows for parts to be repainted.
{| class="wikitable sortable mw-collapsible"
|+Properties
!Property
!Name
!Type
!Default Value
!Recommended Value
!Description
|-
|'''_Color'''
|Color
|Color
|(1, 1, 1, 1)
|(1, 1, 1, 1)
|Color multiplier for ''_MainTex''
|-
|'''_MainTex'''
|Albedo Map
|Texture2D
|white
|
|Map used for areas with no color under the _Paint
|-
|'''_MetallicGlossMap'''
|Metallic
|Texture2D
|white
|
|Main map for smoothness/metallic
|-
|'''_Metallic'''
|Metallic/Smoothness Map
|float(0, 1)
|0
|1
|
|-
|'''_GlossMapScale'''
|Smoothness Scale
|float(0, 1)
|1
|1
|Multiplier for smoothness
|-
|'''_MipBias'''
|[https://docs.unity3d.com/ScriptReference/Texture-mipMapBias.html Mip Bias]
|float(0, 1)
|0.8
|0.8
|
|-
|'''_BumpMap'''
|Normal Map
|Texture2D
|bump
|
|Main normal/bump map for the part
|-
|'''_DetailBumpMap'''
|Detail Normal Map
|Texture2D
|bump
|
|tileable extra details
|-
|'''_DetailMask'''
|Detail Mask
|Texture2D
|white
|
|mask for ''_DetailBumpMap''
|-
|'''_DetailBumpScale'''
|Detail Normal Scale
|float(0, 1)
|1
|
|Multiplier for details' bump
|-
|'''_DetailBumpTiling'''
|Detail Normal Tiling
|float(0.01, 10)
|1
|
|
|-
|'''_OcclusionMap'''
|Occlusion Map
|Texture2D
|white
|
|Stock part's dont seem to use this. Occlusion seems to imbeded into ''_MainTex'', ''_MetallicGlossMap'' and ''_PaintMaskGlossMap''
|-
|'''_OcclusionStrength'''
|Strength
|float(0, 1)
|1
|
|Multiplier for ambient occlusion
|-
|'''_EmissionMap'''
|Emission Map
|Texture2D
|white
|
|Map for emission used by engines and generators
|-
|'''_EmissionColor'''
|Emission Color
|Color
|(0, 0, 0, 1)
|white
|
|-
|'''_UseTimeOfDay'''
|Use Time of Day
|Toggle
|0 (false)
|
|
|-
|'''_TimeOfDayDotMin'''
|Min
|float(-1, 1)
| -0.005
|
|
|-
|'''_TimeOfDayDotMax'''
|Max
|float(-1, 1)
|0.005
|
|
|-
|'''_PaintA'''
|Paint Color A
|Color
|white
|
|Base paint for the part (will be overwritten during runtime)
|-
|'''_PaintB'''
|Paint Color B
|Color
|white
|
|Accent paint for the part (will be overwritten during runtime)
|-
|'''_PaintMaskGlossMap'''
|Paint Mask
|Texture2D
|white
|
|This is a special texture where:

* '''alpha channel''' dictates the smoothness

* '''red channel''' dictates the accent

* '''green channel''' dictates the base (this also masks the accent)

* '''blue channel''' dictates where it should show the original texture
|-
|'''_PaintGlossMapScale'''
|Paint Smoothness Scale
|float(0, 1)
|1
|1
|Multiplier for smoothness on painted areas
|-
|'''_SmoothnessOverride'''
|Use PaintMask for Paint Smoothness
|Toggle
|0 (false)
|1 (true)
|when true, ''_PaintMaskGlossMap'' will be used for mettalic (on painted areas) instead of ''_MetallicGlossMap''
|-
|'''_RimFalloff'''
|_RimFalloff
|float(0.01, 5)
|0.1
|0.1
|
|-
|'''_RimColor'''
|_RimColor
|Color
|transparent
|
|
|-
|'''_Culling'''
|Cull Mode
|float
|2
|2
|
|-
|'''_Offset'''
|Depth Offset
|float(-1, 1)
|0
|0
|
|}</text>
      <sha1>3hsh17f9kqbuy5t696zkh3tqx1tzm75</sha1>
    </revision>
    <revision>
      <id>61</id>
      <parentid>59</parentid>
      <timestamp>2023-05-21T12:42:35Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Added category</comment>
      <origin>61</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3042" sha1="8j2g3ho7xex0la5szufsdh1gw7k35e7" xml:space="preserve">=== Main shader used for the parts ===
This (KSP2/Scenery/Standard (Opaque)) is the main shader used for parts and the shader that allows for parts to be repainted.
{| class="wikitable sortable mw-collapsible"
|+Properties
!Property
!Name
!Type
!Default Value
!Recommended Value
!Description
|-
|'''_Color'''
|Color
|Color
|(1, 1, 1, 1)
|(1, 1, 1, 1)
|Color multiplier for ''_MainTex''
|-
|'''_MainTex'''
|Albedo Map
|Texture2D
|white
|
|Map used for areas with no color under the _Paint
|-
|'''_MetallicGlossMap'''
|Metallic
|Texture2D
|white
|
|Main map for smoothness/metallic
|-
|'''_Metallic'''
|Metallic/Smoothness Map
|float(0, 1)
|0
|1
|
|-
|'''_GlossMapScale'''
|Smoothness Scale
|float(0, 1)
|1
|1
|Multiplier for smoothness
|-
|'''_MipBias'''
|[https://docs.unity3d.com/ScriptReference/Texture-mipMapBias.html Mip Bias]
|float(0, 1)
|0.8
|0.8
|
|-
|'''_BumpMap'''
|Normal Map
|Texture2D
|bump
|
|Main normal/bump map for the part
|-
|'''_DetailBumpMap'''
|Detail Normal Map
|Texture2D
|bump
|
|tileable extra details
|-
|'''_DetailMask'''
|Detail Mask
|Texture2D
|white
|
|mask for ''_DetailBumpMap''
|-
|'''_DetailBumpScale'''
|Detail Normal Scale
|float(0, 1)
|1
|
|Multiplier for details' bump
|-
|'''_DetailBumpTiling'''
|Detail Normal Tiling
|float(0.01, 10)
|1
|
|
|-
|'''_OcclusionMap'''
|Occlusion Map
|Texture2D
|white
|
|Stock part's dont seem to use this. Occlusion seems to imbeded into ''_MainTex'', ''_MetallicGlossMap'' and ''_PaintMaskGlossMap''
|-
|'''_OcclusionStrength'''
|Strength
|float(0, 1)
|1
|
|Multiplier for ambient occlusion
|-
|'''_EmissionMap'''
|Emission Map
|Texture2D
|white
|
|Map for emission used by engines and generators
|-
|'''_EmissionColor'''
|Emission Color
|Color
|(0, 0, 0, 1)
|white
|
|-
|'''_UseTimeOfDay'''
|Use Time of Day
|Toggle
|0 (false)
|
|
|-
|'''_TimeOfDayDotMin'''
|Min
|float(-1, 1)
| -0.005
|
|
|-
|'''_TimeOfDayDotMax'''
|Max
|float(-1, 1)
|0.005
|
|
|-
|'''_PaintA'''
|Paint Color A
|Color
|white
|
|Base paint for the part (will be overwritten during runtime)
|-
|'''_PaintB'''
|Paint Color B
|Color
|white
|
|Accent paint for the part (will be overwritten during runtime)
|-
|'''_PaintMaskGlossMap'''
|Paint Mask
|Texture2D
|white
|
|This is a special texture where:

* '''alpha channel''' dictates the smoothness

* '''red channel''' dictates the accent

* '''green channel''' dictates the base (this also masks the accent)

* '''blue channel''' dictates where it should show the original texture
|-
|'''_PaintGlossMapScale'''
|Paint Smoothness Scale
|float(0, 1)
|1
|1
|Multiplier for smoothness on painted areas
|-
|'''_SmoothnessOverride'''
|Use PaintMask for Paint Smoothness
|Toggle
|0 (false)
|1 (true)
|when true, ''_PaintMaskGlossMap'' will be used for mettalic (on painted areas) instead of ''_MetallicGlossMap''
|-
|'''_RimFalloff'''
|_RimFalloff
|float(0.01, 5)
|0.1
|0.1
|
|-
|'''_RimColor'''
|_RimColor
|Color
|transparent
|
|
|-
|'''_Culling'''
|Cull Mode
|float
|2
|2
|
|-
|'''_Offset'''
|Depth Offset
|float(-1, 1)
|0
|0
|
|}
[[Category:Parts modding]]</text>
      <sha1>8j2g3ho7xex0la5szufsdh1gw7k35e7</sha1>
    </revision>
    <revision>
      <id>136</id>
      <parentid>61</parentid>
      <timestamp>2023-08-03T00:07:10Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <minor/>
      <comment>Munix moved page [[Scenery - Standard (Opaque)]] to [[Scenery - Standard (Opaque) shader]]: Make the name more clear</comment>
      <origin>61</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3042" sha1="8j2g3ho7xex0la5szufsdh1gw7k35e7" xml:space="preserve">=== Main shader used for the parts ===
This (KSP2/Scenery/Standard (Opaque)) is the main shader used for parts and the shader that allows for parts to be repainted.
{| class="wikitable sortable mw-collapsible"
|+Properties
!Property
!Name
!Type
!Default Value
!Recommended Value
!Description
|-
|'''_Color'''
|Color
|Color
|(1, 1, 1, 1)
|(1, 1, 1, 1)
|Color multiplier for ''_MainTex''
|-
|'''_MainTex'''
|Albedo Map
|Texture2D
|white
|
|Map used for areas with no color under the _Paint
|-
|'''_MetallicGlossMap'''
|Metallic
|Texture2D
|white
|
|Main map for smoothness/metallic
|-
|'''_Metallic'''
|Metallic/Smoothness Map
|float(0, 1)
|0
|1
|
|-
|'''_GlossMapScale'''
|Smoothness Scale
|float(0, 1)
|1
|1
|Multiplier for smoothness
|-
|'''_MipBias'''
|[https://docs.unity3d.com/ScriptReference/Texture-mipMapBias.html Mip Bias]
|float(0, 1)
|0.8
|0.8
|
|-
|'''_BumpMap'''
|Normal Map
|Texture2D
|bump
|
|Main normal/bump map for the part
|-
|'''_DetailBumpMap'''
|Detail Normal Map
|Texture2D
|bump
|
|tileable extra details
|-
|'''_DetailMask'''
|Detail Mask
|Texture2D
|white
|
|mask for ''_DetailBumpMap''
|-
|'''_DetailBumpScale'''
|Detail Normal Scale
|float(0, 1)
|1
|
|Multiplier for details' bump
|-
|'''_DetailBumpTiling'''
|Detail Normal Tiling
|float(0.01, 10)
|1
|
|
|-
|'''_OcclusionMap'''
|Occlusion Map
|Texture2D
|white
|
|Stock part's dont seem to use this. Occlusion seems to imbeded into ''_MainTex'', ''_MetallicGlossMap'' and ''_PaintMaskGlossMap''
|-
|'''_OcclusionStrength'''
|Strength
|float(0, 1)
|1
|
|Multiplier for ambient occlusion
|-
|'''_EmissionMap'''
|Emission Map
|Texture2D
|white
|
|Map for emission used by engines and generators
|-
|'''_EmissionColor'''
|Emission Color
|Color
|(0, 0, 0, 1)
|white
|
|-
|'''_UseTimeOfDay'''
|Use Time of Day
|Toggle
|0 (false)
|
|
|-
|'''_TimeOfDayDotMin'''
|Min
|float(-1, 1)
| -0.005
|
|
|-
|'''_TimeOfDayDotMax'''
|Max
|float(-1, 1)
|0.005
|
|
|-
|'''_PaintA'''
|Paint Color A
|Color
|white
|
|Base paint for the part (will be overwritten during runtime)
|-
|'''_PaintB'''
|Paint Color B
|Color
|white
|
|Accent paint for the part (will be overwritten during runtime)
|-
|'''_PaintMaskGlossMap'''
|Paint Mask
|Texture2D
|white
|
|This is a special texture where:

* '''alpha channel''' dictates the smoothness

* '''red channel''' dictates the accent

* '''green channel''' dictates the base (this also masks the accent)

* '''blue channel''' dictates where it should show the original texture
|-
|'''_PaintGlossMapScale'''
|Paint Smoothness Scale
|float(0, 1)
|1
|1
|Multiplier for smoothness on painted areas
|-
|'''_SmoothnessOverride'''
|Use PaintMask for Paint Smoothness
|Toggle
|0 (false)
|1 (true)
|when true, ''_PaintMaskGlossMap'' will be used for mettalic (on painted areas) instead of ''_MetallicGlossMap''
|-
|'''_RimFalloff'''
|_RimFalloff
|float(0.01, 5)
|0.1
|0.1
|
|-
|'''_RimColor'''
|_RimColor
|Color
|transparent
|
|
|-
|'''_Culling'''
|Cull Mode
|float
|2
|2
|
|-
|'''_Offset'''
|Depth Offset
|float(-1, 1)
|0
|0
|
|}
[[Category:Parts modding]]</text>
      <sha1>8j2g3ho7xex0la5szufsdh1gw7k35e7</sha1>
    </revision>
    <revision>
      <id>138</id>
      <parentid>136</parentid>
      <timestamp>2023-08-03T00:07:42Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>138</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3042" sha1="n7360kh91ulj1rxlp56ga2oiae7er6r" xml:space="preserve">[[Category:Part textures]]
=== Main shader used for the parts ===
This (KSP2/Scenery/Standard (Opaque)) is the main shader used for parts and the shader that allows for parts to be repainted.
{| class="wikitable sortable mw-collapsible"
|+Properties
!Property
!Name
!Type
!Default Value
!Recommended Value
!Description
|-
|'''_Color'''
|Color
|Color
|(1, 1, 1, 1)
|(1, 1, 1, 1)
|Color multiplier for ''_MainTex''
|-
|'''_MainTex'''
|Albedo Map
|Texture2D
|white
|
|Map used for areas with no color under the _Paint
|-
|'''_MetallicGlossMap'''
|Metallic
|Texture2D
|white
|
|Main map for smoothness/metallic
|-
|'''_Metallic'''
|Metallic/Smoothness Map
|float(0, 1)
|0
|1
|
|-
|'''_GlossMapScale'''
|Smoothness Scale
|float(0, 1)
|1
|1
|Multiplier for smoothness
|-
|'''_MipBias'''
|[https://docs.unity3d.com/ScriptReference/Texture-mipMapBias.html Mip Bias]
|float(0, 1)
|0.8
|0.8
|
|-
|'''_BumpMap'''
|Normal Map
|Texture2D
|bump
|
|Main normal/bump map for the part
|-
|'''_DetailBumpMap'''
|Detail Normal Map
|Texture2D
|bump
|
|tileable extra details
|-
|'''_DetailMask'''
|Detail Mask
|Texture2D
|white
|
|mask for ''_DetailBumpMap''
|-
|'''_DetailBumpScale'''
|Detail Normal Scale
|float(0, 1)
|1
|
|Multiplier for details' bump
|-
|'''_DetailBumpTiling'''
|Detail Normal Tiling
|float(0.01, 10)
|1
|
|
|-
|'''_OcclusionMap'''
|Occlusion Map
|Texture2D
|white
|
|Stock part's dont seem to use this. Occlusion seems to imbeded into ''_MainTex'', ''_MetallicGlossMap'' and ''_PaintMaskGlossMap''
|-
|'''_OcclusionStrength'''
|Strength
|float(0, 1)
|1
|
|Multiplier for ambient occlusion
|-
|'''_EmissionMap'''
|Emission Map
|Texture2D
|white
|
|Map for emission used by engines and generators
|-
|'''_EmissionColor'''
|Emission Color
|Color
|(0, 0, 0, 1)
|white
|
|-
|'''_UseTimeOfDay'''
|Use Time of Day
|Toggle
|0 (false)
|
|
|-
|'''_TimeOfDayDotMin'''
|Min
|float(-1, 1)
| -0.005
|
|
|-
|'''_TimeOfDayDotMax'''
|Max
|float(-1, 1)
|0.005
|
|
|-
|'''_PaintA'''
|Paint Color A
|Color
|white
|
|Base paint for the part (will be overwritten during runtime)
|-
|'''_PaintB'''
|Paint Color B
|Color
|white
|
|Accent paint for the part (will be overwritten during runtime)
|-
|'''_PaintMaskGlossMap'''
|Paint Mask
|Texture2D
|white
|
|This is a special texture where:

* '''alpha channel''' dictates the smoothness

* '''red channel''' dictates the accent

* '''green channel''' dictates the base (this also masks the accent)

* '''blue channel''' dictates where it should show the original texture
|-
|'''_PaintGlossMapScale'''
|Paint Smoothness Scale
|float(0, 1)
|1
|1
|Multiplier for smoothness on painted areas
|-
|'''_SmoothnessOverride'''
|Use PaintMask for Paint Smoothness
|Toggle
|0 (false)
|1 (true)
|when true, ''_PaintMaskGlossMap'' will be used for mettalic (on painted areas) instead of ''_MetallicGlossMap''
|-
|'''_RimFalloff'''
|_RimFalloff
|float(0.01, 5)
|0.1
|0.1
|
|-
|'''_RimColor'''
|_RimColor
|Color
|transparent
|
|
|-
|'''_Culling'''
|Cull Mode
|float
|2
|2
|
|-
|'''_Offset'''
|Depth Offset
|float(-1, 1)
|0
|0
|
|}</text>
      <sha1>n7360kh91ulj1rxlp56ga2oiae7er6r</sha1>
    </revision>
  </page>
  <page>
    <title>PartsProvider</title>
    <ns>0</ns>
    <id>24</id>
    <revision>
      <id>62</id>
      <timestamp>2023-05-21T22:48:50Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <comment>Created page with "== KSP.Game.'''PartProvider''' ==  === '''GameManager.Instance.Game.Parts''' === This class is the main provider for anything related to parts definitions and data.  ==== AddPartData(''KSP.Sim.Definitions.''PartCore jsonData, System.string rawJson) ==== This method is used to add parts to the '''PartProvider'''. It asks for a PartCore and a raw json (from the same part core provided).  * '''jsonData -''' This argument requires a part core which is a class defining ''almo..."</comment>
      <origin>62</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="941" sha1="crrac1yuonrdcxs7vgqvz2en6mgg3rr" xml:space="preserve">== KSP.Game.'''PartProvider''' ==

=== '''GameManager.Instance.Game.Parts''' ===
This class is the main provider for anything related to parts definitions and data.

==== AddPartData(''KSP.Sim.Definitions.''PartCore jsonData, System.string rawJson) ====
This method is used to add parts to the '''PartProvider'''. It asks for a PartCore and a raw json (from the same part core provided).

* '''jsonData -''' This argument requires a part core which is a class defining ''almost'' all the part's data. Including all modules.
* '''rawJson''' '''-''' This argument requires a json equivalent to the '''jsonData''' provided. It should match exactly what you provide on the first argument.

==== Tips and Tricks: ====

* You can either use '''[https://docs.unity3d.com/ScriptReference/JsonUtility.ToJson.html JsonUtility]''' or '''[https://www.newtonsoft.com/json/help/html/SerializeObject.htm newtonsoft's Json.Net]''' to get your '''rawJson'''.</text>
      <sha1>crrac1yuonrdcxs7vgqvz2en6mgg3rr</sha1>
    </revision>
    <revision>
      <id>63</id>
      <parentid>62</parentid>
      <timestamp>2023-05-21T22:50:16Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <minor/>
      <comment>/* GameManager.Instance.Game.Parts */</comment>
      <origin>63</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="957" sha1="3z50qu8tz4z7mkst10qejky7zn8r5d6" xml:space="preserve">== KSP.Game.'''PartProvider''' ==
This class is the main provider for anything related to parts definitions and data.

==== AddPartData(''KSP.Sim.Definitions.''PartCore jsonData, System.string rawJson) ====
This method is used to add parts to the '''PartProvider'''. It asks for a PartCore and a raw json (from the same part core provided).

* '''jsonData -''' This argument requires a part core which is a class defining ''almost'' all the part's data. Including all modules.
* '''rawJson''' '''-''' This argument requires a json equivalent to the '''jsonData''' provided. It should match exactly what you provide on the first argument.

==== Tips and Tricks: ====

* You can either use '''[https://docs.unity3d.com/ScriptReference/JsonUtility.ToJson.html JsonUtility]''' or '''[https://www.newtonsoft.com/json/help/html/SerializeObject.htm newtonsoft's Json.Net]''' to get your '''rawJson'''.
* You can access it via '''GameManager.Instance.Game.Parts'''.</text>
      <sha1>3z50qu8tz4z7mkst10qejky7zn8r5d6</sha1>
    </revision>
    <revision>
      <id>64</id>
      <parentid>63</parentid>
      <timestamp>2023-05-21T22:51:00Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <minor/>
      <comment>Added category</comment>
      <origin>64</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="984" sha1="a5jysiw5tpim8bxqqibszjafa05xcj3" xml:space="preserve">== KSP.Game.'''PartProvider''' ==
This class is the main provider for anything related to parts definitions and data.

==== AddPartData(''KSP.Sim.Definitions.''PartCore jsonData, System.string rawJson) ====
This method is used to add parts to the '''PartProvider'''. It asks for a PartCore and a raw json (from the same part core provided).

* '''jsonData -''' This argument requires a part core which is a class defining ''almost'' all the part's data. Including all modules.
* '''rawJson''' '''-''' This argument requires a json equivalent to the '''jsonData''' provided. It should match exactly what you provide on the first argument.

==== Tips and Tricks: ====

* You can either use '''[https://docs.unity3d.com/ScriptReference/JsonUtility.ToJson.html JsonUtility]''' or '''[https://www.newtonsoft.com/json/help/html/SerializeObject.htm newtonsoft's Json.Net]''' to get your '''rawJson'''.
* You can access it via '''GameManager.Instance.Game.Parts'''.
[[Category:Parts modding]]</text>
      <sha1>a5jysiw5tpim8bxqqibszjafa05xcj3</sha1>
    </revision>
    <revision>
      <id>144</id>
      <parentid>64</parentid>
      <timestamp>2023-08-03T00:11:49Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>144</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1004" sha1="adeqe7fdo92bt01axt8w4k8fhvfwxqw" xml:space="preserve">[[Category:Parts modding]]
[[Category:Game systems]]
== KSP.Game.PartProvider ==
This class is the main provider for anything related to parts definitions and data.

==== AddPartData(''KSP.Sim.Definitions.''PartCore jsonData, System.string rawJson) ====
This method is used to add parts to the '''PartProvider'''. It asks for a PartCore and a raw json (from the same part core provided).

* '''jsonData -''' This argument requires a part core which is a class defining ''almost'' all the part's data. Including all modules.
* '''rawJson''' '''-''' This argument requires a json equivalent to the '''jsonData''' provided. It should match exactly what you provide on the first argument.

==== Tips and Tricks: ====

* You can either use '''[https://docs.unity3d.com/ScriptReference/JsonUtility.ToJson.html JsonUtility]''' or '''[https://www.newtonsoft.com/json/help/html/SerializeObject.htm newtonsoft's Json.Net]''' to get your '''rawJson'''.
* You can access it via '''GameManager.Instance.Game.Parts'''.</text>
      <sha1>adeqe7fdo92bt01axt8w4k8fhvfwxqw</sha1>
    </revision>
  </page>
  <page>
    <title>File:MK2 RCS Block diffuse texture.png</title>
    <ns>6</ns>
    <id>25</id>
    <revision>
      <id>70</id>
      <timestamp>2023-05-25T00:32:52Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <origin>70</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="56" sha1="rkc7mi5c6gh2qx7gmh4jl11th4xbr8x" xml:space="preserve">Diffusion texture for SORRY's mk2 RCS Block, by LuxStice</text>
      <sha1>rkc7mi5c6gh2qx7gmh4jl11th4xbr8x</sha1>
    </revision>
    <revision>
      <id>76</id>
      <parentid>70</parentid>
      <timestamp>2023-05-25T00:52:41Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <comment>LuxStice uploaded a new version of [[File:MK2 RCS Block diffuse texture.png]]</comment>
      <origin>70</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="56" sha1="rkc7mi5c6gh2qx7gmh4jl11th4xbr8x" xml:space="preserve">Diffusion texture for SORRY's mk2 RCS Block, by LuxStice</text>
      <sha1>rkc7mi5c6gh2qx7gmh4jl11th4xbr8x</sha1>
    </revision>
  </page>
  <page>
    <title>File:MK2 RCS Block m.png</title>
    <ns>6</ns>
    <id>26</id>
    <revision>
      <id>71</id>
      <timestamp>2023-05-25T00:38:50Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <origin>71</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="42" sha1="ddtptdls61ekyus3g2li6hykvr24bj3" xml:space="preserve">Metallic texture for SORRY's MK2 RCS Block</text>
      <sha1>ddtptdls61ekyus3g2li6hykvr24bj3</sha1>
    </revision>
    <revision>
      <id>75</id>
      <parentid>71</parentid>
      <timestamp>2023-05-25T00:52:13Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <comment>LuxStice uploaded a new version of [[File:MK2 RCS Block m.png]]</comment>
      <origin>71</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="42" sha1="ddtptdls61ekyus3g2li6hykvr24bj3" xml:space="preserve">Metallic texture for SORRY's MK2 RCS Block</text>
      <sha1>ddtptdls61ekyus3g2li6hykvr24bj3</sha1>
    </revision>
  </page>
  <page>
    <title>File:MK2 RCS Block normal texture.png</title>
    <ns>6</ns>
    <id>27</id>
    <revision>
      <id>72</id>
      <timestamp>2023-05-25T00:42:54Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <origin>72</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="36" sha1="hso842ukxxos1l0luohh6qgyzy1oxmp" xml:space="preserve">SORRY's MK2 RCS Block normal texture</text>
      <sha1>hso842ukxxos1l0luohh6qgyzy1oxmp</sha1>
    </revision>
    <revision>
      <id>74</id>
      <parentid>72</parentid>
      <timestamp>2023-05-25T00:47:19Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <comment>LuxStice uploaded a new version of [[File:MK2 RCS Block normal texture.png]]</comment>
      <origin>72</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="36" sha1="hso842ukxxos1l0luohh6qgyzy1oxmp" xml:space="preserve">SORRY's MK2 RCS Block normal texture</text>
      <sha1>hso842ukxxos1l0luohh6qgyzy1oxmp</sha1>
    </revision>
  </page>
  <page>
    <title>Texturing</title>
    <ns>0</ns>
    <id>28</id>
    <revision>
      <id>73</id>
      <timestamp>2023-05-25T00:43:43Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <comment>Created page with "KSP2 graphics improved a lot, and for that they used textures, for parts we can use up to 6 textures. Diffusion, Metallic, Occlusion, Normal, Emission and Paint Map, the later being a custom texture used by the [[Scenery - Standard (Opaque)]] shader.  == Diffusion texture == [[File:MK2 RCS Block diffuse texture.png|thumb|Diffusion texture for SORRY's MK2 RCS Block, by LuxStice. Overlayed with the Height Map and Ambient Occlusion to mimic the game's textures]] KSP2's diff..."</comment>
      <origin>73</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1843" sha1="kqvnt82i8ii7hkcz6xl5gmd1sn5n5ne" xml:space="preserve">KSP2 graphics improved a lot, and for that they used textures, for parts we can use up to 6 textures. Diffusion, Metallic, Occlusion, Normal, Emission and Paint Map, the later being a custom texture used by the [[Scenery - Standard (Opaque)]] shader.

== Diffusion texture ==
[[File:MK2 RCS Block diffuse texture.png|thumb|Diffusion texture for SORRY's MK2 RCS Block, by LuxStice. Overlayed with the Height Map and Ambient Occlusion to mimic the game's textures]]
KSP2's diffusion map is pretty simple, it's a simple "mask" telling the shader where each color should be. This texture is used only when no paint is applied, Also, this texture is shown where there's a blue pixel in the Paint Map texture.

====== Tips and Tricks: ======

* The base color used by the game is 0, 0, 0.98 (HSV)
* The game overlays the diffusion texture with the ambient occlusion to be more RAM efficient.








== Metallic texture ==
[[File:MK2 RCS Block m.png|thumb|Metallic texture for SORRY's MK2 RCS Block, this texture features detailing visible only when downloaded]]
This texture tells the shader how reflective a given pixel should be, the higher the alpha on said pixel the more reflective it will be. Every pixel on this texture should be white and you should only change the '''opacity''' of the pixels. This is overwritten by the Paint Map's opacity when a pixel is marked as painted (either a green or red pixel).












== Normal/Bump texture ==
[[File:MK2 RCS Block normal texture.png|thumb|SORRY's MK2 RCS Block normal texture, containing detailing such as metal edges, nails and small elevations]]
A bump texture is used to give or take height on a certain pixel, affecting how shadows are casted by and to it, also affects reflections. This texture should only contain detailing and its prefered over the use of extra meshes or geometry.</text>
      <sha1>kqvnt82i8ii7hkcz6xl5gmd1sn5n5ne</sha1>
    </revision>
    <revision>
      <id>77</id>
      <parentid>73</parentid>
      <timestamp>2023-05-25T00:54:52Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <origin>77</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1734" sha1="jswn436qwjmect48r7sp75h4yydzboc" xml:space="preserve">KSP2 graphics improved a lot, and for that they used textures, for parts we can use up to 6 textures. Diffusion, Metallic, Occlusion, Normal, Emission and Paint Map, the later being a custom texture used by the [[Scenery - Standard (Opaque)]] shader.

== Diffusion texture ==
[[File:MK2_RCS_Block_diffuse_texture.png|thumb|351x351px]]
KSP2's diffusion map is pretty simple, it's a simple "mask" telling the shader where each color should be. This texture is used only when no paint is applied, Also, this texture is shown where there's a blue pixel in the Paint Map texture.

====== Tips and Tricks: ======

* The base color used by the game is 0, 0, 0.98 (HSV)
* The game overlays the diffusion texture with the ambient occlusion to be more RAM efficient.








== Metallic texture ==
[[File:MK2 RCS Block m.png|thumb|Metallic texture for SORRY's MK2 RCS Block, this texture features detailing visible only when downloaded|349x349px]]
This texture tells the shader how reflective a given pixel should be, the higher the alpha on said pixel the more reflective it will be. Every pixel on this texture should be white and you should only change the '''opacity''' of the pixels. This is overwritten by the Paint Map's opacity when a pixel is marked as painted (either a green or red pixel).












== Normal/Bump texture ==
[[File:MK2 RCS Block normal texture.png|thumb|SORRY's MK2 RCS Block normal texture, containing detailing such as metal edges, nails and small elevations|353x353px]]
A bump texture is used to give or take height on a certain pixel, affecting how shadows are casted by and to it, also affects reflections. This texture should only contain detailing and its prefered over the use of extra meshes or geometry.</text>
      <sha1>jswn436qwjmect48r7sp75h4yydzboc</sha1>
    </revision>
    <revision>
      <id>79</id>
      <parentid>77</parentid>
      <timestamp>2023-05-25T01:07:17Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <origin>79</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2317" sha1="ryug0dlm8ycvpfppl0bd3otdueqlhg0" xml:space="preserve">KSP2 graphics improved a lot, and for that they used textures, for parts we can use up to 6 textures. Diffusion, Metallic, Occlusion, Normal, Emission and Paint Map, the later being a custom texture used by the [[Scenery - Standard (Opaque)]] shader.

== Diffusion texture ==
[[File:MK2_RCS_Block_diffuse_texture.png|thumb|351x351px]]
KSP2's diffusion map is pretty simple, it's a simple "mask" telling the shader where each color should be. This texture is used only when no paint is applied, Also, this texture is shown where there's a blue pixel in the Paint Map texture.

====== Tips and Tricks: ======

* The base color used by the game is 0, 0, 0.98 (HSV)
* The game overlays the diffusion texture with the ambient occlusion to be more RAM efficient.








== Metallic texture ==
[[File:MK2 RCS Block m.png|thumb|Metallic texture for SORRY's MK2 RCS Block, this texture features detailing visible only when downloaded|349x349px]]
This texture tells the shader how reflective a given pixel should be, the higher the alpha on said pixel the more reflective it will be. Every pixel on this texture should be white and you should only change the '''opacity''' of the pixels. This is overwritten by the Paint Map's opacity when a pixel is marked as painted (either a green or red pixel).












== Normal/Bump texture ==
[[File:MK2 RCS Block normal texture.png|thumb|SORRY's MK2 RCS Block normal texture, containing detailing such as metal edges, nails and small elevations|353x353px]]
A bump texture is used to give or take height on a certain pixel, affecting how shadows are casted by and to it, also affects reflections. This texture should only contain detailing and its prefered over the use of extra meshes or geometry.














== Paint Map Texture ==
[[File:MK2 RCS Block Paint Map Texture.png|thumb|finished Paint Map for MK2 RCS Block from SORRY. Note that in this image all channels are combined where cyan = Green and Blue and White = Red. Green and Blue]]
This texture is a custom made texture that the shader uses, by reading the RGBA values on each pixel it is able to make the parts paintable! The game uses '''alpha''' for the smoothness, '''blue''' to display the diffusion and metallic textures, '''green''' to display the base color and '''red''' to display the accent color in game.</text>
      <sha1>ryug0dlm8ycvpfppl0bd3otdueqlhg0</sha1>
    </revision>
    <revision>
      <id>80</id>
      <parentid>79</parentid>
      <timestamp>2023-05-26T15:08:16Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <origin>80</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2354" sha1="2ix41tdrj0ajqygsxfnaem4ewfkqgkj" xml:space="preserve">KSP2 graphics improved a lot, and for that they used textures, for parts we can use up to 6 textures. Diffusion, Metallic, Occlusion, Normal, Emission and Paint Map, the later being a custom texture used by the [[Scenery - Standard (Opaque)]] shader.

== Diffusion texture ==
[[File:MK2_RCS_Block_diffuse_texture.png|thumb|351x351px]]
KSP2's diffusion map is pretty simple, it's a simple "mask" telling the shader where each color should be. This texture is used only when no paint is applied, Also, this texture is shown where there's a blue pixel in the Paint Map texture.

====== Tips and Tricks: ======

* The base color used by the game is 0, 0, 0.98 (HSV)
* The game overlays the diffusion texture with the ambient occlusion to be more RAM efficient.








== Metallic texture ==
[[File:MK2 RCS Block m.png|thumb|Metallic texture for SORRY's MK2 RCS Block, this texture features detailing visible only when downloaded|349x349px]]
This texture tells the shader how reflective a given pixel should be, the higher the alpha on said pixel the more reflective it will be. Every pixel on this texture should be white and you should only change the '''opacity''' of the pixels. This is overwritten by the Paint Map's opacity when a pixel is marked as painted (either a green or red pixel).












== Normal/Bump texture ==
[[File:MK2 RCS Block normal texture.png|thumb|SORRY's MK2 RCS Block normal texture, containing detailing such as metal edges, nails and small elevations|353x353px]]
A bump texture is used to give or take height on a certain pixel, affecting how shadows are casted by and to it, also affects reflections. This texture should only contain detailing and its prefered over the use of extra meshes or geometry.














== Paint Map Texture ==
[[File:MK2 RCS Block Paint Map Texture.png|thumb|finished Paint Map for MK2 RCS Block from SORRY. Note that in this image all channels are combined where cyan = Green and Blue and White = Red. Green and Blue|356x356px]]
This texture is a custom made texture that the shader uses, by reading the RGBA values on each pixel it is able to make the parts paintable! The game uses '''alpha''' for the smoothness, '''blue''' to display the diffusion and metallic textures, '''green''' to display the base color and '''red''' to display the accent color in game.
[[Category:Parts modding]]</text>
      <sha1>2ix41tdrj0ajqygsxfnaem4ewfkqgkj</sha1>
    </revision>
    <revision>
      <id>81</id>
      <parentid>80</parentid>
      <timestamp>2023-05-26T15:08:45Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <comment>/* Tips and Tricks: */</comment>
      <origin>81</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2353" sha1="6roupudzl6c5qv1hu0zhwyn5xlf34vx" xml:space="preserve">KSP2 graphics improved a lot, and for that they used textures, for parts we can use up to 6 textures. Diffusion, Metallic, Occlusion, Normal, Emission and Paint Map, the later being a custom texture used by the [[Scenery - Standard (Opaque)]] shader.

== Diffusion texture ==
[[File:MK2_RCS_Block_diffuse_texture.png|thumb|351x351px]]
KSP2's diffusion map is pretty simple, it's a simple "mask" telling the shader where each color should be. This texture is used only when no paint is applied, Also, this texture is shown where there's a blue pixel in the Paint Map texture.

====== Tips and Tricks ======

* The base color used by the game is 0, 0, 0.98 (HSV)
* The game overlays the diffusion texture with the ambient occlusion to be more RAM efficient.








== Metallic texture ==
[[File:MK2 RCS Block m.png|thumb|Metallic texture for SORRY's MK2 RCS Block, this texture features detailing visible only when downloaded|349x349px]]
This texture tells the shader how reflective a given pixel should be, the higher the alpha on said pixel the more reflective it will be. Every pixel on this texture should be white and you should only change the '''opacity''' of the pixels. This is overwritten by the Paint Map's opacity when a pixel is marked as painted (either a green or red pixel).












== Normal/Bump texture ==
[[File:MK2 RCS Block normal texture.png|thumb|SORRY's MK2 RCS Block normal texture, containing detailing such as metal edges, nails and small elevations|353x353px]]
A bump texture is used to give or take height on a certain pixel, affecting how shadows are casted by and to it, also affects reflections. This texture should only contain detailing and its prefered over the use of extra meshes or geometry.














== Paint Map Texture ==
[[File:MK2 RCS Block Paint Map Texture.png|thumb|finished Paint Map for MK2 RCS Block from SORRY. Note that in this image all channels are combined where cyan = Green and Blue and White = Red. Green and Blue|356x356px]]
This texture is a custom made texture that the shader uses, by reading the RGBA values on each pixel it is able to make the parts paintable! The game uses '''alpha''' for the smoothness, '''blue''' to display the diffusion and metallic textures, '''green''' to display the base color and '''red''' to display the accent color in game.
[[Category:Parts modding]]</text>
      <sha1>6roupudzl6c5qv1hu0zhwyn5xlf34vx</sha1>
    </revision>
    <revision>
      <id>82</id>
      <parentid>81</parentid>
      <timestamp>2023-05-26T15:10:36Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <comment>/* Diffusion texture */</comment>
      <origin>82</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2354" sha1="aa03owqv3uzi6d4wd2foo757dilw6je" xml:space="preserve">KSP2 graphics improved a lot, and for that they used textures, for parts we can use up to 6 textures. Diffusion, Metallic, Occlusion, Normal, Emission and Paint Map, the later being a custom texture used by the [[Scenery - Standard (Opaque)]] shader.

== Diffusion texture ==
[[File:MK2_RCS_Block_diffuse_texture.png|thumb|351x351px]]
KSP2's diffusion map is pretty simple, it's a simple "mask" telling the shader where each color should be. This texture is used only when no paint is applied, Also, this texture is shown where there's a blue pixel in the Paint Map texture.

====== Tips and Tricks ======

* The base color used by the game is 0, 0, 0.98 (HSV)
* The game overlays the diffusion texture with the ambient occlusion to be more RAM efficient.









== Metallic texture ==
[[File:MK2 RCS Block m.png|thumb|Metallic texture for SORRY's MK2 RCS Block, this texture features detailing visible only when downloaded|349x349px]]
This texture tells the shader how reflective a given pixel should be, the higher the alpha on said pixel the more reflective it will be. Every pixel on this texture should be white and you should only change the '''opacity''' of the pixels. This is overwritten by the Paint Map's opacity when a pixel is marked as painted (either a green or red pixel).












== Normal/Bump texture ==
[[File:MK2 RCS Block normal texture.png|thumb|SORRY's MK2 RCS Block normal texture, containing detailing such as metal edges, nails and small elevations|353x353px]]
A bump texture is used to give or take height on a certain pixel, affecting how shadows are casted by and to it, also affects reflections. This texture should only contain detailing and its prefered over the use of extra meshes or geometry.














== Paint Map Texture ==
[[File:MK2 RCS Block Paint Map Texture.png|thumb|finished Paint Map for MK2 RCS Block from SORRY. Note that in this image all channels are combined where cyan = Green and Blue and White = Red. Green and Blue|356x356px]]
This texture is a custom made texture that the shader uses, by reading the RGBA values on each pixel it is able to make the parts paintable! The game uses '''alpha''' for the smoothness, '''blue''' to display the diffusion and metallic textures, '''green''' to display the base color and '''red''' to display the accent color in game.
[[Category:Parts modding]]</text>
      <sha1>aa03owqv3uzi6d4wd2foo757dilw6je</sha1>
    </revision>
    <revision>
      <id>83</id>
      <parentid>82</parentid>
      <timestamp>2023-05-26T15:12:07Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <origin>83</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2486" sha1="539ywvh7agl82sfjcmdfkzrvlhxj5j3" xml:space="preserve">KSP2 graphics improved a lot, and for that they used textures, for parts we can use up to 6 textures. Diffusion, Metallic, Occlusion, Normal, Emission and Paint Map, the later being a custom texture used by the [[Scenery - Standard (Opaque)]] shader.

== Diffusion texture ==
[[File:MK2_RCS_Block_diffuse_texture.png|thumb|287x287px|Diffusion texture for SORRY's MK2 RCS Block, this texture is overlayed with normal texture details giving it shadows and highlights]]
KSP2's diffusion map is pretty simple, it's a simple "mask" telling the shader where each color should be. This texture is used only when no paint is applied, Also, this texture is shown where there's a blue pixel in the Paint Map texture.

====== Tips and Tricks ======

* The base color used by the game is 0, 0, 0.98 (HSV)
* The game overlays the diffusion texture with the ambient occlusion to be more RAM efficient.









== Metallic texture ==
[[File:MK2 RCS Block m.png|thumb|Metallic texture for SORRY's MK2 RCS Block, this texture features detailing visible only when downloaded|289x289px]]
This texture tells the shader how reflective a given pixel should be, the higher the alpha on said pixel the more reflective it will be. Every pixel on this texture should be white and you should only change the '''opacity''' of the pixels. This is overwritten by the Paint Map's opacity when a pixel is marked as painted (either a green or red pixel).












== Normal/Bump texture ==
[[File:MK2 RCS Block normal texture.png|thumb|SORRY's MK2 RCS Block normal texture, containing detailing such as metal edges, nails and small elevations|291x291px]]
A bump texture is used to give or take height on a certain pixel, affecting how shadows are casted by and to it, also affects reflections. This texture should only contain detailing and its prefered over the use of extra meshes or geometry.














== Paint Map Texture ==
[[File:MK2 RCS Block Paint Map Texture.png|thumb|finished Paint Map for MK2 RCS Block from SORRY. Note that in this image all channels are combined where cyan = Green and Blue and White = Red. Green and Blue|285x285px]]
This texture is a custom made texture that the shader uses, by reading the RGBA values on each pixel it is able to make the parts paintable! The game uses '''alpha''' for the smoothness, '''blue''' to display the diffusion and metallic textures, '''green''' to display the base color and '''red''' to display the accent color in game.
[[Category:Parts modding]]</text>
      <sha1>539ywvh7agl82sfjcmdfkzrvlhxj5j3</sha1>
    </revision>
    <revision>
      <id>105</id>
      <parentid>83</parentid>
      <timestamp>2023-07-16T16:20:35Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <comment>/* Diffusion texture */</comment>
      <origin>105</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2499" sha1="pdrr55m9gvkejf8jzfufha4eitmtwy8" xml:space="preserve">KSP2 graphics improved a lot, and for that they used textures, for parts we can use up to 6 textures. Diffusion, Metallic, Occlusion, Normal, Emission and Paint Map, the later being a custom texture used by the [[Scenery - Standard (Opaque)]] shader.

== Diffusion texture ==
[[File:MK2_RCS_Block_diffuse_texture.png|thumb|287x287px|Diffusion texture for SORRY's MK2 RCS Block, this texture is overlayed with normal texture details giving it shadows and highlights]]
KSP2's diffusion map is pretty simple, it's a simple "mask" telling the shader where each color should be. This texture is used only when no paint is applied, Also, this texture is shown where there's a blue pixel in the Paint Map texture.

====== Tips and Tricks ======

* The base color used by the game is 0, 0, 0.98 (HSV)
* The game overlays the diffusion texture with the ambient occlusion to be more RAM efficient.









== Metallic texture ==
[[File:MK2 RCS Block m.png|thumb|Metallic texture for SORRY's MK2 RCS Block, this texture features detailing visible only when downloaded|289x289px]]
This texture tells the shader how reflective a given pixel should be, the higher the alpha on said pixel the more reflective it will be. Every pixel on this texture should be white and you should only change the '''opacity''' of the pixels. This is overwritten by the Paint Map's opacity when a pixel is marked as painted (either a green or red pixel).












== Normal/Bump texture ==
[[File:MK2 RCS Block normal texture.png|thumb|SORRY's MK2 RCS Block normal texture, containing detailing such as metal edges, nails and small elevations|291x291px]]
A bump texture is used to give or take height on a certain pixel, affecting how shadows are casted by and to it, also affects reflections. This texture should only contain detailing and its prefered over the use of extra meshes or geometry.














== Paint Map Texture ==
[[File:MK2 RCS Block Paint Map Texture.png|thumb|finished Paint Map for MK2 RCS Block from SORRY. Note that in this image all channels are combined where cyan = Green and Blue and White = Red. Green and Blue|285x285px]]
This texture is a custom made texture that the shader uses, by reading the RGBA values on each pixel it is able to make the parts paintable! The game uses '''alpha''' for the smoothness, '''blue''' to display the diffusion and metallic textures, '''green''' to display the base color and '''red''' to display the accent color in game.
[[Category:Parts modding]]
__FORCETOC__</text>
      <sha1>pdrr55m9gvkejf8jzfufha4eitmtwy8</sha1>
    </revision>
    <revision>
      <id>135</id>
      <parentid>105</parentid>
      <timestamp>2023-08-03T00:06:16Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>135</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2487" sha1="8zscyr4xg9z38tgyluntltnvuvj86g5" xml:space="preserve">[[Category:Part textures]]
KSP2 graphics improved a lot, and for that they use textures, for parts we can use up to 6 textures. Diffusion, Metallic, Occlusion, Normal, Emission and Paint Map, the latter being a custom texture used by the [[Scenery - Standard (Opaque) shader]].

==Diffusion texture==
[[File:MK2_RCS_Block_diffuse_texture.png|thumb|287x287px|Diffusion texture for SORRY's MK2 RCS Block, this texture is overlayed with normal texture details giving it shadows and highlights]]
KSP2's diffusion map is pretty simple, it's a simple "mask" telling the shader where each color should be. This texture is used only when no paint is applied, Also, this texture is shown where there's a blue pixel in the Paint Map texture.

======Tips and Tricks====== 

*The base color used by the game is 0, 0, 0.98 (HSV)
*The game overlays the diffusion texture with the ambient occlusion to be more RAM efficient.








==Metallic texture==
[[File:MK2 RCS Block m.png|thumb|Metallic texture for SORRY's MK2 RCS Block, this texture features detailing visible only when downloaded|289x289px]]
This texture tells the shader how reflective a given pixel should be, the higher the alpha on said pixel the more reflective it will be. Every pixel on this texture should be white and you should only change the '''opacity''' of the pixels. This is overwritten by the Paint Map's opacity when a pixel is marked as painted (either a green or red pixel).












==Normal/Bump texture==
[[File:MK2 RCS Block normal texture.png|thumb|SORRY's MK2 RCS Block normal texture, containing detailing such as metal edges, nails and small elevations|291x291px]]
A bump texture is used to give or take height on a certain pixel, affecting how shadows are casted by and to it, also affects reflections. This texture should only contain detailing and its prefered over the use of extra meshes or geometry.














==Paint Map Texture==
[[File:MK2 RCS Block Paint Map Texture.png|thumb|finished Paint Map for MK2 RCS Block from SORRY. Note that in this image all channels are combined where cyan = Green and Blue and White = Red. Green and Blue|285x285px]]
This texture is a custom made texture that the shader uses, by reading the RGBA values on each pixel it is able to make the parts paintable! The game uses '''alpha''' for the smoothness, '''blue''' to display the diffusion and metallic textures, '''green''' to display the base color and '''red''' to display the accent color in game.
__FORCETOC__</text>
      <sha1>8zscyr4xg9z38tgyluntltnvuvj86g5</sha1>
    </revision>
  </page>
  <page>
    <title>File:MK2 RCS Block Paint Map Texture.png</title>
    <ns>6</ns>
    <id>29</id>
    <revision>
      <id>78</id>
      <timestamp>2023-05-25T00:57:24Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <origin>78</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="21" sha1="n7w0ucfwll50drsfjlhpryawpuxlc8a" xml:space="preserve">PM Texture from SORRY</text>
      <sha1>n7w0ucfwll50drsfjlhpryawpuxlc8a</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Orbits</title>
    <ns>14</ns>
    <id>30</id>
    <revision>
      <id>84</id>
      <timestamp>2023-05-26T15:25:31Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <comment>Information about orbits in KSP2 and the classes and methods that are used to access or modify them</comment>
      <origin>84</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="227" sha1="0tdrkuj470oew6yu7jhhzm1qh032ux6" xml:space="preserve">This category is for tagging information in the Wiki relating to orbits in KSP2. Use this category for pages that document the classes, methods, and other information relating to creating, accessing, or modifiying, orbits, etc.</text>
      <sha1>0tdrkuj470oew6yu7jhhzm1qh032ux6</sha1>
    </revision>
    <revision>
      <id>87</id>
      <parentid>84</parentid>
      <timestamp>2023-05-26T17:13:35Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <minor/>
      <comment>Added category</comment>
      <origin>87</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="253" sha1="0t6dtez0y8hvaq2rb7kda0ukxhiinz6" xml:space="preserve">This category is for tagging information in the Wiki relating to orbits in KSP2. Use this category for pages that document the classes, methods, and other information relating to creating, accessing, or modifiying, orbits, etc.
[[Category:Game systems]]</text>
      <sha1>0t6dtez0y8hvaq2rb7kda0ukxhiinz6</sha1>
    </revision>
    <revision>
      <id>88</id>
      <parentid>87</parentid>
      <timestamp>2023-05-26T17:14:05Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>88</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="254" sha1="5hkx13xjzw4lq4jx62x4ho4iyltlb87" xml:space="preserve">This category is for tagging information in the Wiki relating to orbits in KSP2. Use this category for pages that document the classes, methods, and other information relating to creating, accessing, or modifiying, orbits, etc.

[[Category:Game systems]]</text>
      <sha1>5hkx13xjzw4lq4jx62x4ho4iyltlb87</sha1>
    </revision>
    <revision>
      <id>90</id>
      <parentid>88</parentid>
      <timestamp>2023-05-26T17:17:52Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <minor/>
      <comment>Added Orbits category to TOC</comment>
      <origin>90</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="289" sha1="5prn4df81luj63u9ufrdi3sgfbtje6w" xml:space="preserve">&lt;nowiki&gt;[[Category:TOC]]&lt;/nowiki&gt;

This category is for tagging information in the Wiki relating to orbits in KSP2. Use this category for pages that document the classes, methods, and other information relating to creating, accessing, or modifiying, orbits, etc.

[[Category:Game systems]]</text>
      <sha1>5prn4df81luj63u9ufrdi3sgfbtje6w</sha1>
    </revision>
    <revision>
      <id>91</id>
      <parentid>90</parentid>
      <timestamp>2023-05-26T17:18:34Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <minor/>
      <comment>Corrected typo and formatting for catagroy</comment>
      <origin>91</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="271" sha1="qj3y46kkkdnzl5ualc9wjj5u5z1ej5z" xml:space="preserve">[[Category:TOC]]

This category is for tagging information in the Wiki relating to orbits in KSP2. Use this category for pages that document the classes, methods, and other information relating to creating, accessing, or modifying, orbits, etc.

[[Category:Game systems]]</text>
      <sha1>qj3y46kkkdnzl5ualc9wjj5u5z1ej5z</sha1>
    </revision>
    <revision>
      <id>92</id>
      <parentid>91</parentid>
      <timestamp>2023-05-26T17:19:27Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <minor/>
      <comment>Corrected categroy</comment>
      <origin>92</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="280" sha1="7k9htwfrgddexlt1dqem0gj91ihqzsz" xml:space="preserve">[[Category:Game Systems]]

This category is for tagging information in the Wiki relating to orbits in KSP2. Use this category for pages that document the classes, methods, and other information relating to creating, accessing, or modifying, orbits, etc.

[[Category:Game systems]]</text>
      <sha1>7k9htwfrgddexlt1dqem0gj91ihqzsz</sha1>
    </revision>
    <revision>
      <id>93</id>
      <parentid>92</parentid>
      <timestamp>2023-05-26T17:19:53Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <minor/>
      <comment>corrected typo in category name</comment>
      <origin>93</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="280" sha1="3na1dzg4blhiqpwivifj8tg6qfyg7if" xml:space="preserve">[[Category:Game systems]]

This category is for tagging information in the Wiki relating to orbits in KSP2. Use this category for pages that document the classes, methods, and other information relating to creating, accessing, or modifying, orbits, etc.

[[Category:Game systems]]</text>
      <sha1>3na1dzg4blhiqpwivifj8tg6qfyg7if</sha1>
    </revision>
  </page>
  <page>
    <title>PatchedConicSolver</title>
    <ns>0</ns>
    <id>31</id>
    <revision>
      <id>85</id>
      <timestamp>2023-05-26T16:45:50Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <comment>Initial documentation of the PatchedConicSolver class</comment>
      <origin>85</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4330" sha1="gncopotxnkjn2g56ddv9yyt6o9c6qqk" xml:space="preserve">[[Category: Orbits]]
PatchedConicSolver is a class that is part of Orbiter objects. It is used to capture, generate, update, and provide access to patched conics information relating to the Orbiter object it is associated with. The PatchedConicSolver class has the following '''public''' members.

'''Namespace:''' KSP.Sim.impl

== PatchedConicSolver.MaxTotalPatches ==
'''Type:''' int

 The maximum limit on the number of patches. The default value = 10. This member can be get, but not set.

== PatchedConicSolver.Orbiter ==
'''Type:''' OrbiterComponent

 The ''ObiterComponent'' object this class is associated with. This member can be get, but not set.

== PatchedConicSolver.CurrentTrajectory[index] ==
'''Type:''' List&lt;PatchedConicsOrbit&gt;

 A list of PatchedConicOrbits. May be given an index to obtain a particular trajectory. It’s basically a list of all the trajectories currently associated with this Orbiter object, and you can do things with it like any list. The length of the list will be no longer than MaxTotalPatches, with list members being chronologically organized from the patch that occurs first to the last patch. Unused members are null. This member can be get, but not set.

== PatchedConicSolver.PatchesAhead ==
'''Type: int'''

 The number of patches ahead. This member can be get or set. It is set in the private method PatchedConicSolver.CalculatePatchList()

== PatchedConicSolver.OnDestroy() ==
'''Called by:''' TBD

 The ''PatchedConicSolver.OnDestroy()'' method first tests to see if the Orbiter object is null. If it is, then it returns immediately. Otherwise, it will remove the handler for ''OnReferenceBodyChange'' which was added by the ''OnStart'' method.

== PatchedConicSolver.OnStart() ==
'''Called by:''' TBD

 The ''PatchedConicSolver.OnStart()'' method adds a new handler for the ''Orbiter.OnReferenceBodyChange'' method so that OnReferenceBodyChange will be called when necessary. It then sets the private _patchLimit to be the max of ''PersistentProfileManager.ConicPatchLimit'' and 1, adds this.Orbiter.PatchedConicsOrbit to the ''CurrentTrajectory'' list, and similarly adds any remaining patches from 1 to MaxTotalPatches.

== PatchedConicSolver.OnUpdate() ==
'''Called By:''' TBD

 The ''PatchedConicSolver.OnUpdate()'' method first calls ''PatchedConicSolver.SetPatchesInactive'', then calls private methods for ''InitializeFirstPatch()'' and ''CalculatePatchList()'' to ensure the patches are updated.

== PatchedConicSolver.SetPatchesInactive(List&lt;PatchedConicsOrbit&gt;, int) ==
'''Called By:''' ''OnUpdate''

 The ''PatchedConicSolver.SetPatchesInactive()'' method accepts a list of patches (i.e., ''CurrentTrajectory'') and (optionally) a starting index for the list (defaults to 0). For each list member from the starting index to the end of the list, the member's ActivePatch property is set to ''false''.

== PatchedConicSolver.SetTarget(CelestialBodyComponent) ==
'''Called By:''' TBD

 The ''PatchedConicSolver.SetTarget()'' method accepts a CelestialBodyComponent and uses that to set the private _targetBody property.

== PatchedConicsOrbit.FindPatchContainingUT(double) ==
'''Called By:''' TBD

 The ''PatchedConicsOrbit FindPatchContainingUT()'' method accepts a double (the universal time of interest) and returns the ''PatchedConicOrbit'' for the patch associated with that time.

== PatchedConicsOrbit.DecreasePatchLimit() ==
'''Called By:''' TBD

 The ''PatchedConicsOrbit.DecreasePatchLimit()'' method decreased the current setting of the private _pathcLimit property by 1 to a value that is never less than 1.

== PatchedConicsOrbit.IncreasePatchLimit() ==
'''Called By:''' TBD

 The ''PatchedConicsOrbit.IncreasePatchLimit()'' method increases the current setting of the private _pathcLimit property by 1 to a value that is never more than 5.

== PatchedConicsOrbit.RefreshPatchLimit() ==
'''Called By:''' TBD

 The ''PatchedConicsOrbit.RefreshPatchLimit()'' method clamps the current setting of the private _pathcLimit property to be between 1 and 5 inclusively.

== PatchedConicsOrbit.SolverParameters ==
'''Called By:''' TBD

 The ''PatchedConicsOrbit.SolverParameters'' class defines the parameters needed for the solver with default values assigned to ''maxGeometrySolverIterations'' (25), ''maxTimeSolverIterations'' (50), and ''outerReaches'' (1E+20).</text>
      <sha1>gncopotxnkjn2g56ddv9yyt6o9c6qqk</sha1>
    </revision>
    <revision>
      <id>86</id>
      <parentid>85</parentid>
      <timestamp>2023-05-26T17:10:40Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <comment>Added Called By/Used By details where available</comment>
      <origin>86</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5239" sha1="3e3tc0ud4efc3365xlb8ec9a7hafke8" xml:space="preserve">[[Category: Orbits]]
PatchedConicSolver is a class that is part of Orbiter objects. It is used to capture, generate, update, and provide access to patched conics information relating to the Orbiter object it is associated with. The PatchedConicSolver class has the following '''public''' members.

'''Namespace:''' KSP.Sim.impl

== PatchedConicSolver.MaxTotalPatches ==
'''Type:''' int

 The maximum limit on the number of patches. The default value = 10. This member can be get, but not set.

== PatchedConicSolver.Orbiter ==
'''Type:''' OrbiterComponent

 The ''ObiterComponent'' object this class is associated with. This member can be get, but not set.

== PatchedConicSolver.CurrentTrajectory[index] ==
'''Type:''' List&lt;PatchedConicsOrbit&gt;

 A list of PatchedConicOrbits. May be given an index to obtain a particular trajectory. It’s basically a list of all the trajectories currently associated with this Orbiter object, and you can do things with it like any list. The length of the list will be no longer than MaxTotalPatches, with list members being chronologically organized from the patch that occurs first to the last patch. Unused members are null. This member can be get, but not set.

== PatchedConicSolver.PatchesAhead ==
'''Type: int'''

 The number of patches ahead. This member can be get or set. It is set in the private method PatchedConicSolver.CalculatePatchList()

== PatchedConicSolver.OnDestroy() ==
'''Called by:''' TBD

 The ''PatchedConicSolver.OnDestroy()'' method first tests to see if the Orbiter object is null. If it is, then it returns immediately. Otherwise, it will remove the handler for ''OnReferenceBodyChange'' which was added by the ''OnStart'' method.

== PatchedConicSolver.OnStart() ==
'''Called by:''' ''VesselComponent.OnStart(double)''

 The ''PatchedConicSolver.OnStart()'' method adds a new handler for the ''Orbiter.OnReferenceBodyChange'' method so that OnReferenceBodyChange will be called when necessary. It then sets the private _patchLimit to be the max of ''PersistentProfileManager.ConicPatchLimit'' and 1, adds this.Orbiter.PatchedConicsOrbit to the ''CurrentTrajectory'' list, and similarly adds any remaining patches from 1 to MaxTotalPatches.

== PatchedConicSolver.OnUpdate() ==
'''Called By:''' ''VesselComponent.OnUpdateOrbit()''

 The ''PatchedConicSolver.OnUpdate()'' method first calls ''PatchedConicSolver.SetPatchesInactive'', then calls private methods for ''InitializeFirstPatch()'' and ''CalculatePatchList()'' to ensure the patches are updated.
 '''NOTE:''' When called by ''VesselComponent.OnUpdateOrbit()'', this method is called ''before'' calling ''orbiter.ManeuverPlanSolver.OnUpdate()''.

== PatchedConicSolver.SetPatchesInactive(List&lt;PatchedConicsOrbit&gt;, int) ==
'''Called By:''' ''OnUpdate'', ''ManeuverPlanSolver.UpdateManeuverTrajectory()''

 The ''PatchedConicSolver.SetPatchesInactive()'' method accepts a list of patches (i.e., ''CurrentTrajectory'') and (optionally) a starting index for the list (defaults to 0). For each list member from the starting index to the end of the list, the member's ActivePatch property is set to ''false''.
 '''NOTE:''' When called by ''ManeuverPlanSolver.UpdateManeuverTrajectory()'', this method is called ''after'' calling ''ManeuverPlanSolver.SetPatchesInactive''

== PatchedConicSolver.SetTarget(CelestialBodyComponent) ==
'''Called By:''' ''VesselComponent.TargetObject''

 The ''PatchedConicSolver.SetTarget()'' method accepts a CelestialBodyComponent and uses that to set the private _targetBody property.

== PatchedConicsOrbit.FindPatchContainingUT(double) ==
'''Called By:''' ''OrbitalReadoutInstrumentManager.Update()'', ''ManeuverPlanComponent.IsValidNode()'', ''ManeuverPlanComponent.UpdateNodeDetails()'', ''ManeuverPlanComponent.GetManeuverNodeBurnDirVector()'', and ''ManeuverPlanComponent.SolveManeuver()''

 The ''PatchedConicsOrbit FindPatchContainingUT()'' method accepts a double (the universal time of interest) and returns the ''PatchedConicOrbit'' for the patch associated with that time.

== PatchedConicsOrbit.DecreasePatchLimit() ==
'''Called By:''' TBD

 The ''PatchedConicsOrbit.DecreasePatchLimit()'' method decreased the current setting of the private _pathcLimit property by 1 to a value that is never less than 1.

== PatchedConicsOrbit.IncreasePatchLimit() ==
'''Called By:''' TBD

 The ''PatchedConicsOrbit.IncreasePatchLimit()'' method increases the current setting of the private _pathcLimit property by 1 to a value that is never more than 5.

== PatchedConicsOrbit.RefreshPatchLimit() ==
'''Called By:''' ''GameplaySettingsMenuManager.ApplyConicPatchLimit()''

 The ''PatchedConicsOrbit.RefreshPatchLimit()'' method clamps the current setting of the private _pathcLimit property to be between 1 and 5 inclusively.

== PatchedConicsOrbit.SolverParameters ==
'''Called By:''' ''PatchedConics.GetClosestApproach()'', ''PatchedConics.EncountersBody()'', ''PatchedConics.CheckEncounter()''

'''Used By:''' ''ManeuverPlanSolver'', ''PatchedConicSolver''

 The ''PatchedConicsOrbit.SolverParameters'' class defines the parameters needed for the solver with default values assigned to ''maxGeometrySolverIterations'' (25), ''maxTimeSolverIterations'' (50), and ''outerReaches'' (1E+20).</text>
      <sha1>3e3tc0ud4efc3365xlb8ec9a7hafke8</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Game systems</title>
    <ns>14</ns>
    <id>32</id>
    <revision>
      <id>89</id>
      <timestamp>2023-05-26T17:15:26Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Created new category</comment>
      <origin>89</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="125" sha1="aicgn2jbe0a0zd25i2mktb0iasdayvi" xml:space="preserve">This category contains descriptions of the game systems' overall architecture and their classes and members.
[[Category:TOC]]</text>
      <sha1>aicgn2jbe0a0zd25i2mktb0iasdayvi</sha1>
    </revision>
  </page>
  <page>
    <title>User:Munix</title>
    <ns>2</ns>
    <id>33</id>
    <revision>
      <id>96</id>
      <timestamp>2023-05-31T17:00:52Z</timestamp>
      <contributor>
        <username>Cheese</username>
        <id>7</id>
      </contributor>
      <comment>Munix</comment>
      <origin>96</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="19" sha1="o2j97umg3tr1pupg1ejgmegng0hxn6j" xml:space="preserve">Good twin of muñix</text>
      <sha1>o2j97umg3tr1pupg1ejgmegng0hxn6j</sha1>
    </revision>
  </page>
  <page>
    <title>User:ShadowDev</title>
    <ns>2</ns>
    <id>34</id>
    <revision>
      <id>97</id>
      <timestamp>2023-05-31T17:26:42Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <comment>yes</comment>
      <origin>97</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="25" sha1="8qm9j0ot1wbhdolmenmp28qdxe6ouwe" xml:space="preserve">https://curseforge.co.uk/</text>
      <sha1>8qm9j0ot1wbhdolmenmp28qdxe6ouwe</sha1>
    </revision>
  </page>
  <page>
    <title>VesselComponent</title>
    <ns>0</ns>
    <id>35</id>
    <revision>
      <id>98</id>
      <timestamp>2023-05-31T17:42:15Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <comment>Too lazy to add any real info.</comment>
      <origin>98</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="130" sha1="1xyxqg8prjtbwz75k3u3yo7bue00lxy" xml:space="preserve">The vessel component is used to control a vessel. this is not to be confused with the PartComponent that controls individual parts</text>
      <sha1>1xyxqg8prjtbwz75k3u3yo7bue00lxy</sha1>
    </revision>
    <revision>
      <id>99</id>
      <parentid>98</parentid>
      <timestamp>2023-05-31T17:43:05Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <origin>99</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="156" sha1="61fp7jmcyt8g98o6563rew37wu3c28z" xml:space="preserve">The vessel component is used to control a vessel. this is not to be confused with the PartComponent that controls individual parts
[[Category:Game systems]]</text>
      <sha1>61fp7jmcyt8g98o6563rew37wu3c28z</sha1>
    </revision>
  </page>
  <page>
    <title>UniverseModel</title>
    <ns>0</ns>
    <id>36</id>
    <revision>
      <id>100</id>
      <timestamp>2023-05-31T17:48:47Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <comment>UniverseModel stuff</comment>
      <origin>100</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="273" sha1="0yubsklju4i4w5qditgqf8jl7xpa8dw" xml:space="preserve">the UniverseModel contains everything that the game knows about. 


How to get a Vessel by name using UniverseModel 
VesselComponent vesselMovedComponent = GameManager.Instance.Game.UniverseModel.GetAllVessels().Where((vessel) =&gt; vessel.Name == "Vessel Name Here").First();</text>
      <sha1>0yubsklju4i4w5qditgqf8jl7xpa8dw</sha1>
    </revision>
    <revision>
      <id>101</id>
      <parentid>100</parentid>
      <timestamp>2023-05-31T17:49:39Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <comment>code blocks n stuff</comment>
      <origin>101</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="341" sha1="pypzmids9wblev42ns6kv2va6zh7kdu" xml:space="preserve">the UniverseModel contains everything that the game knows about. 

How to get a Vessel by name using UniverseModel &lt;syntaxhighlight lang="csharp" line="1" start="0"&gt;
VesselComponent vesselMovedComponent = GameManager.Instance.Game.UniverseModel.GetAllVessels().Where((vessel) =&gt; vessel.Name == "Vessel Name Here").First();
&lt;/syntaxhighlight&gt;</text>
      <sha1>pypzmids9wblev42ns6kv2va6zh7kdu</sha1>
    </revision>
    <revision>
      <id>102</id>
      <parentid>101</parentid>
      <timestamp>2023-05-31T17:50:09Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <comment>fiix</comment>
      <origin>102</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="336" sha1="et90u08k4ar2qqohhr890hjcp1gfhvj" xml:space="preserve">the UniverseModel contains everything that the game knows about. 

How to get a Vessel by name using UniverseModel &lt;syntaxhighlight lang="csharp" line="1" start="0"&gt;
VesselComponent vesselComponent = GameManager.Instance.Game.UniverseModel.GetAllVessels().Where((vessel) =&gt; vessel.Name == "Vessel Name Here").First();
&lt;/syntaxhighlight&gt;</text>
      <sha1>et90u08k4ar2qqohhr890hjcp1gfhvj</sha1>
    </revision>
    <revision>
      <id>103</id>
      <parentid>102</parentid>
      <timestamp>2023-05-31T17:50:46Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <origin>103</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="363" sha1="czg9zey6h4b6ndokfwujp9xrrumglqr" xml:space="preserve">the UniverseModel contains everything that the game knows about. 

How to get a Vessel by name using UniverseModel &lt;syntaxhighlight lang="csharp" line="1" start="0"&gt;
VesselComponent vesselComponent = GameManager.Instance.Game.UniverseModel.GetAllVessels().Where((vessel) =&gt; vessel.Name == "Vessel Name Here").First();
&lt;/syntaxhighlight&gt;

[[Category:Game systems]]</text>
      <sha1>czg9zey6h4b6ndokfwujp9xrrumglqr</sha1>
    </revision>
  </page>
  <page>
    <title>Resources</title>
    <ns>0</ns>
    <id>37</id>
    <revision>
      <id>104</id>
      <timestamp>2023-07-16T14:47:20Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <comment>Created page with "Resources are divided into base resources and recipes. Recipes are a collection witn 2 or more resources and their respective unit per recipe. {| class="wikitable sortable" |+ !Resource Name !Display Name Term !Abbreviation Term !Mass(per unit) !Volume(per unit) !Specific Heat (per unit) !Flow mode !Transfer Mode !Cost (per unit) !Icon Address |- |Methane |Resource/DisplayName/Methane |Resource/Abbreviation/LF |1 |0.65 |2010 |STACK_PRIORITY_SEARCH |PUMP |0.8 | |- |Oxidiz..."</comment>
      <origin>104</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2367" sha1="5azhl6wpga804ayrdovi2glcgndmzwb" xml:space="preserve">Resources are divided into base resources and recipes. Recipes are a collection witn 2 or more resources and their respective unit per recipe.
{| class="wikitable sortable"
|+
!Resource Name
!Display Name Term
!Abbreviation Term
!Mass(per unit)
!Volume(per unit)
!Specific Heat (per unit)
!Flow mode
!Transfer Mode
!Cost (per unit)
!Icon Address
|-
|Methane
|Resource/DisplayName/Methane
|Resource/Abbreviation/LF
|1
|0.65
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|Oxidizer
|Resource/DisplayName/Oxidizer
|Resource/Abbreviation/Ox
|1
|1.2
|1551
|STACK_PRIORITY_SEARCH
|PUMP
|0.18
|
|-
|Xenon
|Resource/DisplayName/Xenon Gas
|Resource/Abbreviation/Xe
|1
|0.1
|120
|STAGE_PRIORITY_FLOW
|PUMP
|4
|
|-
|ElectricCharge
|Resource/DisplayName/Electric Charge
|Resource/Abbreviation/EC
|0
|0
|0
|STAGE_PRIORITY_FLOW
|PUMP
|0
|Assets/UI/Sprites/Whitebox/WB-ICO-Battery.png
|-
|SolidFuel
|Resource/DisplayName/Solid Fuel
|Resource/Abbreviation/SF
|1
|5
|900
|NO_FLOW
|NONE
|0.6
|
|-
|Hydrogen
|Resource/DisplayName/Hydrogen
|Resource/Abbreviation/H
|1
|5
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|Ablator
|Resource/DisplayName/Ablator
|Resource/Abbreviation/Ab
|1
|1
|400
|STACK_PRIORITY_SEARCH
|PUMP
|0.5
|
|-
|MonoPropellant
|Resource/DisplayName/MonoPropellant
|Resource/Abbreviation/MP
|1
|5
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1.2
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|Uranium
|Resource/DisplayName/Uranium
|Resource/DisplayName/Uranium
|1
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|-
|EVAPropellant
|Resource/DisplayName/EVAPropellant
|Resource/Abbreviation/EP
|1
|20
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|IntakeAir
|Resource/DisplayName/Intake Air
|Resource/DisplayName/Air
|1
|1
|10
|ALL_VESSEL
|PUMP
|0
|
|-
|TestRocks
|Resource/DisplayName/TestRocks
|Resource/Abbreviation/TR
|0.010
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|}

= Recipes =
Recipes are composed by 2 or more resources.
{| class="wikitable"
|+
!Resource Name
!Display Name Term
!Abbreviation Term
!ingredients
!Unit per recipe unit
|-
|Methalox
|Resource/DisplayName/Methalox
|Resource/Abbreviation/MO
|Methane
Oxidizer
|0.2
0.8
|-
|MethaneAir
|Resource/DisplayName/Methane Air
|Resource/Abbreviation/MA
|Methane
IntakeAir
|1
1
|-
|XenonEC
|Resource/DisplayName/Xenon
|Resource/Abbreviation/Xe
|Xenon
ElectricCharge
|1
1
|}</text>
      <sha1>5azhl6wpga804ayrdovi2glcgndmzwb</sha1>
    </revision>
    <revision>
      <id>106</id>
      <parentid>104</parentid>
      <timestamp>2023-07-16T16:22:09Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <origin>106</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3187" sha1="s2c1oaorcstbyo19j71shnyak4day5h" xml:space="preserve">Resources are divided into base resources and recipes. Recipes are a collection witn 2 or more resources and their respective unit per recipe.
{| class="wikitable sortable"
|+Stock resources
!Resource Name 
!Display Name Term 
!Abbreviation Term
!Mass(per unit)
!Volume(per unit)
!Specific Heat (per unit)
!Flow mode
!Transfer Mode
!Cost (per unit)
!Icon Address
|-
|'''Methane'''
|Resource/DisplayName/Methane
|Resource/Abbreviation/LF
|1
|0.65
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Oxidizer'''
|Resource/DisplayName/Oxidizer
|Resource/Abbreviation/Ox
|1
|1.2
|1551
|STACK_PRIORITY_SEARCH
|PUMP
|0.18
|
|-
|'''Xenon'''
|Resource/DisplayName/Xenon Gas
|Resource/Abbreviation/Xe
|1
|0.1
|120
|STAGE_PRIORITY_FLOW
|PUMP
|4
|
|-
|'''ElectricCharge'''
|Resource/DisplayName/Electric Charge
|Resource/Abbreviation/EC
|0
|0
|0
|STAGE_PRIORITY_FLOW
|PUMP
|0
|Assets/UI/Sprites/Whitebox/WB-ICO-Battery.png
|-
|'''SolidFuel'''
|Resource/DisplayName/Solid Fuel
|Resource/Abbreviation/SF
|1
|5
|900
|NO_FLOW
|NONE
|0.6
|
|-
|'''Hydrogen'''
|Resource/DisplayName/Hydrogen
|Resource/Abbreviation/H
|1
|5
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Ablator'''
|Resource/DisplayName/Ablator
|Resource/Abbreviation/Ab
|1
|1
|400
|STACK_PRIORITY_SEARCH
|PUMP
|0.5
|
|-
|'''MonoPropellant'''
|Resource/DisplayName/MonoPropellant
|Resource/Abbreviation/MP
|1
|5
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1.2
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''Uranium'''
|Resource/DisplayName/Uranium
|Resource/DisplayName/Uranium
|1
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|-
|'''EVAPropellant'''
|Resource/DisplayName/EVAPropellant
|Resource/Abbreviation/EP
|1
|20
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''IntakeAir'''
|Resource/DisplayName/Intake Air
|Resource/DisplayName/Air
|1
|1
|10
|ALL_VESSEL
|PUMP
|0
|
|-
|'''TestRocks'''
|Resource/DisplayName/TestRocks
|Resource/Abbreviation/TR
|0.010
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|}

='''Recipes'''=
Recipes are composed by 2 or more resources.
{| class="wikitable"
|+Stock recipes
!Resource Name
!Display Name Term
!Abbreviation Term
!ingredients
!Unit per recipe unit
|-
|Methalox
|Resource/DisplayName/Methalox
|Resource/Abbreviation/MO
|Methane
Oxidizer
|0.2
0.8
|-
|MethaneAir
|Resource/DisplayName/Methane Air
|Resource/Abbreviation/MA
|Methane
IntakeAir
|1
1
|-
|XenonEC
|Resource/DisplayName/Xenon
|Resource/Abbreviation/Xe
|Xenon
ElectricCharge
|1
1
|}

==Flow mode==
refers to how the fuel should flow on the vessel. On resource definitions this is represented by an '''integer'''. Goes as follows:

*'''0 - NULL''' - invalid flow, shouldn't be used.
*'''1 - NO_FLOW''' - The fuel on said part wont flow to any other tank
*'''2 - ALL_VESSEL''' - The fuel will be evenly distrbuted to all requesters
*'''3 - STAGE_PRIORITY_FLOW'''
*'''4 - STACK_PRIORITY_SEARCH'''
*'''5 - STAGE_STACK_FLOW_BALANCE'''

==Transfer Mode==
refers to if (or not) the fuel should be pumped to other parts. On resource definitions this is represented by an integer. Goes as follows:

*'''0 - NONE''' - fuel isn't transfered to other parts
*'''1 - PUMP''' - fuel is trasnfered to other parts</text>
      <sha1>s2c1oaorcstbyo19j71shnyak4day5h</sha1>
    </revision>
    <revision>
      <id>107</id>
      <parentid>106</parentid>
      <timestamp>2023-07-16T22:09:31Z</timestamp>
      <contributor>
        <username>Sinon</username>
        <id>4</id>
      </contributor>
      <minor/>
      <comment>engrish</comment>
      <origin>107</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3187" sha1="22pyc5k7lqd4jo9z56bjzu1lf3b50g7" xml:space="preserve">Resources are divided into base resources and recipes. Recipes are a collection with 2 or more resources and their respective unit per recipe.
{| class="wikitable sortable"
|+Stock resources
!Resource Name 
!Display Name Term 
!Abbreviation Term
!Mass(per unit)
!Volume(per unit)
!Specific Heat (per unit)
!Flow mode
!Transfer Mode
!Cost (per unit)
!Icon Address
|-
|'''Methane'''
|Resource/DisplayName/Methane
|Resource/Abbreviation/LF
|1
|0.65
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Oxidizer'''
|Resource/DisplayName/Oxidizer
|Resource/Abbreviation/Ox
|1
|1.2
|1551
|STACK_PRIORITY_SEARCH
|PUMP
|0.18
|
|-
|'''Xenon'''
|Resource/DisplayName/Xenon Gas
|Resource/Abbreviation/Xe
|1
|0.1
|120
|STAGE_PRIORITY_FLOW
|PUMP
|4
|
|-
|'''ElectricCharge'''
|Resource/DisplayName/Electric Charge
|Resource/Abbreviation/EC
|0
|0
|0
|STAGE_PRIORITY_FLOW
|PUMP
|0
|Assets/UI/Sprites/Whitebox/WB-ICO-Battery.png
|-
|'''SolidFuel'''
|Resource/DisplayName/Solid Fuel
|Resource/Abbreviation/SF
|1
|5
|900
|NO_FLOW
|NONE
|0.6
|
|-
|'''Hydrogen'''
|Resource/DisplayName/Hydrogen
|Resource/Abbreviation/H
|1
|5
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Ablator'''
|Resource/DisplayName/Ablator
|Resource/Abbreviation/Ab
|1
|1
|400
|STACK_PRIORITY_SEARCH
|PUMP
|0.5
|
|-
|'''MonoPropellant'''
|Resource/DisplayName/MonoPropellant
|Resource/Abbreviation/MP
|1
|5
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1.2
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''Uranium'''
|Resource/DisplayName/Uranium
|Resource/DisplayName/Uranium
|1
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|-
|'''EVAPropellant'''
|Resource/DisplayName/EVAPropellant
|Resource/Abbreviation/EP
|1
|20
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''IntakeAir'''
|Resource/DisplayName/Intake Air
|Resource/DisplayName/Air
|1
|1
|10
|ALL_VESSEL
|PUMP
|0
|
|-
|'''TestRocks'''
|Resource/DisplayName/TestRocks
|Resource/Abbreviation/TR
|0.010
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|}

='''Recipes'''=
Recipes are composed by 2 or more resources.
{| class="wikitable"
|+Stock recipes
!Resource Name
!Display Name Term
!Abbreviation Term
!ingredients
!Unit per recipe unit
|-
|Methalox
|Resource/DisplayName/Methalox
|Resource/Abbreviation/MO
|Methane
Oxidizer
|0.2
0.8
|-
|MethaneAir
|Resource/DisplayName/Methane Air
|Resource/Abbreviation/MA
|Methane
IntakeAir
|1
1
|-
|XenonEC
|Resource/DisplayName/Xenon
|Resource/Abbreviation/Xe
|Xenon
ElectricCharge
|1
1
|}

==Flow mode==
refers to how the fuel should flow on the vessel. On resource definitions this is represented by an '''integer'''. Goes as follows:

*'''0 - NULL''' - invalid flow, shouldn't be used.
*'''1 - NO_FLOW''' - The fuel on said part wont flow to any other tank
*'''2 - ALL_VESSEL''' - The fuel will be evenly distrbuted to all requesters
*'''3 - STAGE_PRIORITY_FLOW'''
*'''4 - STACK_PRIORITY_SEARCH'''
*'''5 - STAGE_STACK_FLOW_BALANCE'''

==Transfer Mode==
refers to if (or not) the fuel should be pumped to other parts. On resource definitions this is represented by an integer. Goes as follows:

*'''0 - NONE''' - fuel isn't transfered to other parts
*'''1 - PUMP''' - fuel is trasnfered to other parts</text>
      <sha1>22pyc5k7lqd4jo9z56bjzu1lf3b50g7</sha1>
    </revision>
    <revision>
      <id>108</id>
      <parentid>107</parentid>
      <timestamp>2023-07-16T22:12:51Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <origin>108</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3200" sha1="ec4y4t7iif7vyj4xshzggy7hayv0emj" xml:space="preserve">Resources are divided into base resources and recipes. Recipes are a collection with 2 or more resources and their respective unit per recipe.
{| class="wikitable sortable"
|+Stock resources
!Resource Name 
!Display Name Term 
!Abbreviation Term
!Mass(per unit)
!Volume(per unit)
!Specific Heat (per unit)
!Flow mode
!Transfer Mode
!Cost (per unit)
!Icon Address
|-
|'''Methane'''
|Resource/DisplayName/Methane
|Resource/Abbreviation/LF
|1
|0.65
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Oxidizer'''
|Resource/DisplayName/Oxidizer
|Resource/Abbreviation/Ox
|1
|1.2
|1551
|STACK_PRIORITY_SEARCH
|PUMP
|0.18
|
|-
|'''Xenon'''
|Resource/DisplayName/Xenon Gas
|Resource/Abbreviation/Xe
|1
|0.1
|120
|STAGE_PRIORITY_FLOW
|PUMP
|4
|
|-
|'''ElectricCharge'''
|Resource/DisplayName/Electric Charge
|Resource/Abbreviation/EC
|0
|0
|0
|STAGE_PRIORITY_FLOW
|PUMP
|0
|Assets/UI/Sprites/Whitebox/WB-ICO-Battery.png
|-
|'''SolidFuel'''
|Resource/DisplayName/Solid Fuel
|Resource/Abbreviation/SF
|1
|5
|900
|NO_FLOW
|NONE
|0.6
|
|-
|'''Hydrogen'''
|Resource/DisplayName/Hydrogen
|Resource/Abbreviation/H
|1
|5
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Ablator'''
|Resource/DisplayName/Ablator
|Resource/Abbreviation/Ab
|1
|1
|400
|STACK_PRIORITY_SEARCH
|PUMP
|0.5
|
|-
|'''MonoPropellant'''
|Resource/DisplayName/MonoPropellant
|Resource/Abbreviation/MP
|1
|5
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1.2
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''Uranium'''
|Resource/DisplayName/Uranium
|Resource/DisplayName/Uranium
|1
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|-
|'''EVAPropellant'''
|Resource/DisplayName/EVAPropellant
|Resource/Abbreviation/EP
|1
|20
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''IntakeAir'''
|Resource/DisplayName/Intake Air
|Resource/DisplayName/Air
|1
|1
|10
|ALL_VESSEL
|PUMP
|0
|
|-
|'''TestRocks'''
|Resource/DisplayName/TestRocks
|Resource/Abbreviation/TR
|0.010
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|}

='''Recipes'''=
Recipes are composed by 2 or more resources.
{| class="wikitable"
|+Stock recipes
!Resource Name
!Display Name Term
!Abbreviation Term
!ingredients
!Unit per recipe unit
|-
|Methalox
|Resource/DisplayName/Methalox
|Resource/Abbreviation/MO
|Methane
Oxidizer
|0.2
0.8
|-
|MethaneAir
|Resource/DisplayName/Methane Air
|Resource/Abbreviation/MA
|Methane
IntakeAir
|1
1
|-
|XenonEC
|Resource/DisplayName/Xenon
|Resource/Abbreviation/Xe
|Xenon
ElectricCharge
|1
1
|}

==Flow mode==
refers to how the fuel should flow on the vessel. On resource definitions this is represented by an '''integer'''. Goes as follows:

*'''0 - NULL''' - invalid flow, shouldn't be used.
*'''1 - NO_FLOW''' - The fuel on said part wont flow to any other tank
*'''2 - ALL_VESSEL''' - The fuel will be evenly distrbuted to all requesters
*'''3 - STAGE_PRIORITY_FLOW'''
*'''4 - STACK_PRIORITY_SEARCH'''
*'''5 - STAGE_STACK_FLOW_BALANCE'''

==Transfer Mode==
refers to if (or not) the fuel should be pumped to other parts. On resource definitions this is represented by an integer. Goes as follows:

*'''0 - NONE''' - fuel isn't transfered to other parts
*'''1 - PUMP''' - fuel is trasnfered to other parts
__FORCETOC__</text>
      <sha1>ec4y4t7iif7vyj4xshzggy7hayv0emj</sha1>
    </revision>
    <revision>
      <id>109</id>
      <parentid>108</parentid>
      <timestamp>2023-07-16T22:13:10Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>109</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3240" sha1="5zoznqcv2rl1ta9bymkwgvrq1gxi8j4" xml:space="preserve">Resources are divided into base resources and recipes. Recipes are a collection with 2 or more resources and their respective unit per recipe.
&lt;div style="overflow-x: scroll"&gt;
{| class="wikitable sortable"
|+Stock resources
!Resource Name 
!Display Name Term 
!Abbreviation Term
!Mass(per unit)
!Volume(per unit)
!Specific Heat (per unit)
!Flow mode
!Transfer Mode
!Cost (per unit)
!Icon Address
|-
|'''Methane'''
|Resource/DisplayName/Methane
|Resource/Abbreviation/LF
|1
|0.65
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Oxidizer'''
|Resource/DisplayName/Oxidizer
|Resource/Abbreviation/Ox
|1
|1.2
|1551
|STACK_PRIORITY_SEARCH
|PUMP
|0.18
|
|-
|'''Xenon'''
|Resource/DisplayName/Xenon Gas
|Resource/Abbreviation/Xe
|1
|0.1
|120
|STAGE_PRIORITY_FLOW
|PUMP
|4
|
|-
|'''ElectricCharge'''
|Resource/DisplayName/Electric Charge
|Resource/Abbreviation/EC
|0
|0
|0
|STAGE_PRIORITY_FLOW
|PUMP
|0
|Assets/UI/Sprites/Whitebox/WB-ICO-Battery.png
|-
|'''SolidFuel'''
|Resource/DisplayName/Solid Fuel
|Resource/Abbreviation/SF
|1
|5
|900
|NO_FLOW
|NONE
|0.6
|
|-
|'''Hydrogen'''
|Resource/DisplayName/Hydrogen
|Resource/Abbreviation/H
|1
|5
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Ablator'''
|Resource/DisplayName/Ablator
|Resource/Abbreviation/Ab
|1
|1
|400
|STACK_PRIORITY_SEARCH
|PUMP
|0.5
|
|-
|'''MonoPropellant'''
|Resource/DisplayName/MonoPropellant
|Resource/Abbreviation/MP
|1
|5
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1.2
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''Uranium'''
|Resource/DisplayName/Uranium
|Resource/DisplayName/Uranium
|1
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|-
|'''EVAPropellant'''
|Resource/DisplayName/EVAPropellant
|Resource/Abbreviation/EP
|1
|20
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''IntakeAir'''
|Resource/DisplayName/Intake Air
|Resource/DisplayName/Air
|1
|1
|10
|ALL_VESSEL
|PUMP
|0
|
|-
|'''TestRocks'''
|Resource/DisplayName/TestRocks
|Resource/Abbreviation/TR
|0.010
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|}
&lt;/div&gt;

='''Recipes'''=
Recipes are composed by 2 or more resources.
{| class="wikitable"
|+Stock recipes
!Resource Name
!Display Name Term
!Abbreviation Term
!ingredients
!Unit per recipe unit
|-
|Methalox
|Resource/DisplayName/Methalox
|Resource/Abbreviation/MO
|Methane
Oxidizer
|0.2
0.8
|-
|MethaneAir
|Resource/DisplayName/Methane Air
|Resource/Abbreviation/MA
|Methane
IntakeAir
|1
1
|-
|XenonEC
|Resource/DisplayName/Xenon
|Resource/Abbreviation/Xe
|Xenon
ElectricCharge
|1
1
|}

==Flow mode==
refers to how the fuel should flow on the vessel. On resource definitions this is represented by an '''integer'''. Goes as follows:

*'''0 - NULL''' - invalid flow, shouldn't be used.
*'''1 - NO_FLOW''' - The fuel on said part wont flow to any other tank
*'''2 - ALL_VESSEL''' - The fuel will be evenly distrbuted to all requesters
*'''3 - STAGE_PRIORITY_FLOW'''
*'''4 - STACK_PRIORITY_SEARCH'''
*'''5 - STAGE_STACK_FLOW_BALANCE'''

==Transfer Mode==
refers to if (or not) the fuel should be pumped to other parts. On resource definitions this is represented by an integer. Goes as follows:

*'''0 - NONE''' - fuel isn't transfered to other parts
*'''1 - PUMP''' - fuel is trasnfered to other parts
__FORCETOC__</text>
      <sha1>5zoznqcv2rl1ta9bymkwgvrq1gxi8j4</sha1>
    </revision>
    <revision>
      <id>110</id>
      <parentid>109</parentid>
      <timestamp>2023-07-16T22:14:07Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>110</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3234" sha1="qork473iombly845108930eruz0s4vr" xml:space="preserve">Resources are divided into base resources and recipes. Recipes are a collection with 2 or more resources and their respective unit per recipe.
&lt;div style="overflow-x: scroll"&gt;
{| class="wikitable sortable"
|+Stock resources
!Resource Name 
!Display Name Term 
!Abbreviation Term
!Mass(per unit)
!Volume(per unit)
!Specific Heat (per unit)
!Flow mode
!Transfer Mode
!Cost (per unit)
!Icon Address
|-
|'''Methane'''
|Resource/DisplayName/Methane
|Resource/Abbreviation/LF
|1
|0.65
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Oxidizer'''
|Resource/DisplayName/Oxidizer
|Resource/Abbreviation/Ox
|1
|1.2
|1551
|STACK_PRIORITY_SEARCH
|PUMP
|0.18
|
|-
|'''Xenon'''
|Resource/DisplayName/Xenon Gas
|Resource/Abbreviation/Xe
|1
|0.1
|120
|STAGE_PRIORITY_FLOW
|PUMP
|4
|
|-
|'''ElectricCharge'''
|Resource/DisplayName/Electric Charge
|Resource/Abbreviation/EC
|0
|0
|0
|STAGE_PRIORITY_FLOW
|PUMP
|0
|Assets/UI/Sprites/Whitebox/WB-ICO-Battery.png
|-
|'''SolidFuel'''
|Resource/DisplayName/Solid Fuel
|Resource/Abbreviation/SF
|1
|5
|900
|NO_FLOW
|NONE
|0.6
|
|-
|'''Hydrogen'''
|Resource/DisplayName/Hydrogen
|Resource/Abbreviation/H
|1
|5
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Ablator'''
|Resource/DisplayName/Ablator
|Resource/Abbreviation/Ab
|1
|1
|400
|STACK_PRIORITY_SEARCH
|PUMP
|0.5
|
|-
|'''MonoPropellant'''
|Resource/DisplayName/MonoPropellant
|Resource/Abbreviation/MP
|1
|5
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1.2
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''Uranium'''
|Resource/DisplayName/Uranium
|Resource/DisplayName/Uranium
|1
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|-
|'''EVAPropellant'''
|Resource/DisplayName/EVAPropellant
|Resource/Abbreviation/EP
|1
|20
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''IntakeAir'''
|Resource/DisplayName/Intake Air
|Resource/DisplayName/Air
|1
|1
|10
|ALL_VESSEL
|PUMP
|0
|
|-
|'''TestRocks'''
|Resource/DisplayName/TestRocks
|Resource/Abbreviation/TR
|0.010
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|}
&lt;/div&gt;

=Recipes=
Recipes are composed by 2 or more resources.
{| class="wikitable"
|+Stock recipes
!Resource Name
!Display Name Term
!Abbreviation Term
!ingredients
!Unit per recipe unit
|-
|Methalox
|Resource/DisplayName/Methalox
|Resource/Abbreviation/MO
|Methane
Oxidizer
|0.2
0.8
|-
|MethaneAir
|Resource/DisplayName/Methane Air
|Resource/Abbreviation/MA
|Methane
IntakeAir
|1
1
|-
|XenonEC
|Resource/DisplayName/Xenon
|Resource/Abbreviation/Xe
|Xenon
ElectricCharge
|1
1
|}

==Flow mode==
refers to how the fuel should flow on the vessel. On resource definitions this is represented by an '''integer'''. Goes as follows:

*'''0 - NULL''' - invalid flow, shouldn't be used.
*'''1 - NO_FLOW''' - The fuel on said part wont flow to any other tank
*'''2 - ALL_VESSEL''' - The fuel will be evenly distrbuted to all requesters
*'''3 - STAGE_PRIORITY_FLOW'''
*'''4 - STACK_PRIORITY_SEARCH'''
*'''5 - STAGE_STACK_FLOW_BALANCE'''

==Transfer Mode==
refers to if (or not) the fuel should be pumped to other parts. On resource definitions this is represented by an integer. Goes as follows:

*'''0 - NONE''' - fuel isn't transfered to other parts
*'''1 - PUMP''' - fuel is trasnfered to other parts
__FORCETOC__</text>
      <sha1>qork473iombly845108930eruz0s4vr</sha1>
    </revision>
    <revision>
      <id>111</id>
      <parentid>110</parentid>
      <timestamp>2023-07-16T22:16:27Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <origin>111</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3346" sha1="l4uafm2o0r8vh9cw2evw1fitc5y4jim" xml:space="preserve">Resources are divided into base resources and recipes. Recipes are a collection with 2 or more resources and their respective unit per recipe.
&lt;div style="overflow-x: scroll"&gt;
{| class="wikitable sortable"
|+Stock resources
!Resource Name 
!Display Name Term 
!Abbreviation Term
!Mass(per unit)
!Volume(per unit)
!Specific Heat (per unit)
![https://wiki.spacewarp.org/wiki/Resources#Flow_mode Flow mode]
![https://wiki.spacewarp.org/wiki/Resources#Transfer_mode Transfer mode]
!Cost (per unit)
!Icon Address
|-
|'''Methane'''
|Resource/DisplayName/Methane
|Resource/Abbreviation/LF
|1
|0.65
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Oxidizer'''
|Resource/DisplayName/Oxidizer
|Resource/Abbreviation/Ox
|1
|1.2
|1551
|STACK_PRIORITY_SEARCH
|PUMP
|0.18
|
|-
|'''Xenon'''
|Resource/DisplayName/Xenon Gas
|Resource/Abbreviation/Xe
|1
|0.1
|120
|STAGE_PRIORITY_FLOW
|PUMP
|4
|
|-
|'''ElectricCharge'''
|Resource/DisplayName/Electric Charge
|Resource/Abbreviation/EC
|0
|0
|0
|STAGE_PRIORITY_FLOW
|PUMP
|0
|Assets/UI/Sprites/Whitebox/WB-ICO-Battery.png
|-
|'''SolidFuel'''
|Resource/DisplayName/Solid Fuel
|Resource/Abbreviation/SF
|1
|5
|900
|NO_FLOW
|NONE
|0.6
|
|-
|'''Hydrogen'''
|Resource/DisplayName/Hydrogen
|Resource/Abbreviation/H
|1
|5
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Ablator'''
|Resource/DisplayName/Ablator
|Resource/Abbreviation/Ab
|1
|1
|400
|STACK_PRIORITY_SEARCH
|PUMP
|0.5
|
|-
|'''MonoPropellant'''
|Resource/DisplayName/MonoPropellant
|Resource/Abbreviation/MP
|1
|5
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1.2
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''Uranium'''
|Resource/DisplayName/Uranium
|Resource/DisplayName/Uranium
|1
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|-
|'''EVAPropellant'''
|Resource/DisplayName/EVAPropellant
|Resource/Abbreviation/EP
|1
|20
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''IntakeAir'''
|Resource/DisplayName/Intake Air
|Resource/DisplayName/Air
|1
|1
|10
|ALL_VESSEL
|PUMP
|0
|
|-
|'''TestRocks'''
|Resource/DisplayName/TestRocks
|Resource/Abbreviation/TR
|0.010
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|}
&lt;/div&gt;

=Recipes=
Recipes are composed by 2 or more resources.
{| class="wikitable"
|+Stock recipes
!Resource Name
!Display Name Term
!Abbreviation Term
!ingredients
!Unit per recipe unit
|-
|Methalox
|Resource/DisplayName/Methalox
|Resource/Abbreviation/MO
|Methane
Oxidizer
|0.2
0.8
|-
|MethaneAir
|Resource/DisplayName/Methane Air
|Resource/Abbreviation/MA
|Methane
IntakeAir
|1
1
|-
|XenonEC
|Resource/DisplayName/Xenon
|Resource/Abbreviation/Xe
|Xenon
ElectricCharge
|1
1
|}

==Flow mode==
refers to how the fuel should flow on the vessel. On resource definitions this is represented by an '''integer'''. Goes as follows:

*'''0 - NULL''' - invalid flow, shouldn't be used.
*'''1 - NO_FLOW''' - The fuel on said part wont flow to any other tank
*'''2 - ALL_VESSEL''' - The fuel will be evenly distrbuted to all requesters
*'''3 - STAGE_PRIORITY_FLOW'''
*'''4 - STACK_PRIORITY_SEARCH'''
*'''5 - STAGE_STACK_FLOW_BALANCE'''

==Transfer Mode==
refers to if (or not) the fuel should be pumped to other parts. On resource definitions this is represented by an integer. Goes as follows:

*'''0 - NONE''' - fuel isn't transfered to other parts
*'''1 - PUMP''' - fuel is trasnfered to other parts
__FORCETOC__</text>
      <sha1>l4uafm2o0r8vh9cw2evw1fitc5y4jim</sha1>
    </revision>
    <revision>
      <id>112</id>
      <parentid>111</parentid>
      <timestamp>2023-07-16T22:17:39Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <comment>/* Flow mode */</comment>
      <origin>112</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3346" sha1="8ebom14l5i4dmgkoy0o4f2grk8gp5uv" xml:space="preserve">Resources are divided into base resources and recipes. Recipes are a collection with 2 or more resources and their respective unit per recipe.
&lt;div style="overflow-x: scroll"&gt;
{| class="wikitable sortable"
|+Stock resources
!Resource Name 
!Display Name Term 
!Abbreviation Term
!Mass(per unit)
!Volume(per unit)
!Specific Heat (per unit)
![https://wiki.spacewarp.org/wiki/Resources#Flow_Mode Flow Mode]
![https://wiki.spacewarp.org/wiki/Resources#Transfer_Mode Transfer Mode]
!Cost (per unit)
!Icon Address
|-
|'''Methane'''
|Resource/DisplayName/Methane
|Resource/Abbreviation/LF
|1
|0.65
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Oxidizer'''
|Resource/DisplayName/Oxidizer
|Resource/Abbreviation/Ox
|1
|1.2
|1551
|STACK_PRIORITY_SEARCH
|PUMP
|0.18
|
|-
|'''Xenon'''
|Resource/DisplayName/Xenon Gas
|Resource/Abbreviation/Xe
|1
|0.1
|120
|STAGE_PRIORITY_FLOW
|PUMP
|4
|
|-
|'''ElectricCharge'''
|Resource/DisplayName/Electric Charge
|Resource/Abbreviation/EC
|0
|0
|0
|STAGE_PRIORITY_FLOW
|PUMP
|0
|Assets/UI/Sprites/Whitebox/WB-ICO-Battery.png
|-
|'''SolidFuel'''
|Resource/DisplayName/Solid Fuel
|Resource/Abbreviation/SF
|1
|5
|900
|NO_FLOW
|NONE
|0.6
|
|-
|'''Hydrogen'''
|Resource/DisplayName/Hydrogen
|Resource/Abbreviation/H
|1
|5
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Ablator'''
|Resource/DisplayName/Ablator
|Resource/Abbreviation/Ab
|1
|1
|400
|STACK_PRIORITY_SEARCH
|PUMP
|0.5
|
|-
|'''MonoPropellant'''
|Resource/DisplayName/MonoPropellant
|Resource/Abbreviation/MP
|1
|5
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1.2
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''Uranium'''
|Resource/DisplayName/Uranium
|Resource/DisplayName/Uranium
|1
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|-
|'''EVAPropellant'''
|Resource/DisplayName/EVAPropellant
|Resource/Abbreviation/EP
|1
|20
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''IntakeAir'''
|Resource/DisplayName/Intake Air
|Resource/DisplayName/Air
|1
|1
|10
|ALL_VESSEL
|PUMP
|0
|
|-
|'''TestRocks'''
|Resource/DisplayName/TestRocks
|Resource/Abbreviation/TR
|0.010
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|}
&lt;/div&gt;

=Recipes=
Recipes are composed by 2 or more resources.
{| class="wikitable"
|+Stock recipes
!Resource Name
!Display Name Term
!Abbreviation Term
!ingredients
!Unit per recipe unit
|-
|Methalox
|Resource/DisplayName/Methalox
|Resource/Abbreviation/MO
|Methane
Oxidizer
|0.2
0.8
|-
|MethaneAir
|Resource/DisplayName/Methane Air
|Resource/Abbreviation/MA
|Methane
IntakeAir
|1
1
|-
|XenonEC
|Resource/DisplayName/Xenon
|Resource/Abbreviation/Xe
|Xenon
ElectricCharge
|1
1
|}

==Flow Mode==
refers to how the fuel should flow on the vessel. On resource definitions this is represented by an '''integer'''. Goes as follows:

*'''0 - NULL''' - invalid flow, shouldn't be used.
*'''1 - NO_FLOW''' - The fuel on said part wont flow to any other tank
*'''2 - ALL_VESSEL''' - The fuel will be evenly distrbuted to all requesters
*'''3 - STAGE_PRIORITY_FLOW'''
*'''4 - STACK_PRIORITY_SEARCH'''
*'''5 - STAGE_STACK_FLOW_BALANCE'''

==Transfer Mode==
refers to if (or not) the fuel should be pumped to other parts. On resource definitions this is represented by an integer. Goes as follows:

*'''0 - NONE''' - fuel isn't transfered to other parts
*'''1 - PUMP''' - fuel is trasnfered to other parts
__FORCETOC__</text>
      <sha1>8ebom14l5i4dmgkoy0o4f2grk8gp5uv</sha1>
    </revision>
    <revision>
      <id>113</id>
      <parentid>112</parentid>
      <timestamp>2023-07-16T22:20:01Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>113</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3268" sha1="7int13vfsbc3uic80kb0v4oznodhjkk" xml:space="preserve">Resources are divided into base resources and recipes. Recipes are a collection with 2 or more resources and their respective unit per recipe.
&lt;div style="overflow-x: scroll"&gt;
{| class="wikitable sortable"
|+Stock resources
!Resource Name 
!Display Name Term 
!Abbreviation Term
!Mass(per unit)
!Volume(per unit)
!Specific Heat (per unit)
![[#Flow Mode|Flow Mode]]
![[#Transfer Mode|Transfer Mode]]
!Cost (per unit)
!Icon Address
|-
|'''Methane'''
|Resource/DisplayName/Methane
|Resource/Abbreviation/LF
|1
|0.65
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Oxidizer'''
|Resource/DisplayName/Oxidizer
|Resource/Abbreviation/Ox
|1
|1.2
|1551
|STACK_PRIORITY_SEARCH
|PUMP
|0.18
|
|-
|'''Xenon'''
|Resource/DisplayName/Xenon Gas
|Resource/Abbreviation/Xe
|1
|0.1
|120
|STAGE_PRIORITY_FLOW
|PUMP
|4
|
|-
|'''ElectricCharge'''
|Resource/DisplayName/Electric Charge
|Resource/Abbreviation/EC
|0
|0
|0
|STAGE_PRIORITY_FLOW
|PUMP
|0
|Assets/UI/Sprites/Whitebox/WB-ICO-Battery.png
|-
|'''SolidFuel'''
|Resource/DisplayName/Solid Fuel
|Resource/Abbreviation/SF
|1
|5
|900
|NO_FLOW
|NONE
|0.6
|
|-
|'''Hydrogen'''
|Resource/DisplayName/Hydrogen
|Resource/Abbreviation/H
|1
|5
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Ablator'''
|Resource/DisplayName/Ablator
|Resource/Abbreviation/Ab
|1
|1
|400
|STACK_PRIORITY_SEARCH
|PUMP
|0.5
|
|-
|'''MonoPropellant'''
|Resource/DisplayName/MonoPropellant
|Resource/Abbreviation/MP
|1
|5
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1.2
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''Uranium'''
|Resource/DisplayName/Uranium
|Resource/DisplayName/Uranium
|1
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|-
|'''EVAPropellant'''
|Resource/DisplayName/EVAPropellant
|Resource/Abbreviation/EP
|1
|20
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''IntakeAir'''
|Resource/DisplayName/Intake Air
|Resource/DisplayName/Air
|1
|1
|10
|ALL_VESSEL
|PUMP
|0
|
|-
|'''TestRocks'''
|Resource/DisplayName/TestRocks
|Resource/Abbreviation/TR
|0.010
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|}
&lt;/div&gt;

=Recipes=
Recipes are composed by 2 or more resources.
{| class="wikitable"
|+Stock recipes
!Resource Name
!Display Name Term
!Abbreviation Term
!ingredients
!Unit per recipe unit
|-
|Methalox
|Resource/DisplayName/Methalox
|Resource/Abbreviation/MO
|Methane
Oxidizer
|0.2
0.8
|-
|MethaneAir
|Resource/DisplayName/Methane Air
|Resource/Abbreviation/MA
|Methane
IntakeAir
|1
1
|-
|XenonEC
|Resource/DisplayName/Xenon
|Resource/Abbreviation/Xe
|Xenon
ElectricCharge
|1
1
|}

==Flow Mode==
refers to how the fuel should flow on the vessel. On resource definitions this is represented by an '''integer'''. Goes as follows:

*'''0 - NULL''' - invalid flow, shouldn't be used.
*'''1 - NO_FLOW''' - The fuel on said part wont flow to any other tank
*'''2 - ALL_VESSEL''' - The fuel will be evenly distrbuted to all requesters
*'''3 - STAGE_PRIORITY_FLOW'''
*'''4 - STACK_PRIORITY_SEARCH'''
*'''5 - STAGE_STACK_FLOW_BALANCE'''

==Transfer Mode==
refers to if (or not) the fuel should be pumped to other parts. On resource definitions this is represented by an integer. Goes as follows:

*'''0 - NONE''' - fuel isn't transfered to other parts
*'''1 - PUMP''' - fuel is trasnfered to other parts
__FORCETOC__</text>
      <sha1>7int13vfsbc3uic80kb0v4oznodhjkk</sha1>
    </revision>
    <revision>
      <id>142</id>
      <parentid>113</parentid>
      <timestamp>2023-08-03T00:09:52Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>142</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3294" sha1="f2zbqyxltqd65uiqqau3sokkkoy62ea" xml:space="preserve">Resources are divided into base resources and recipes. Recipes are a collection with 2 or more resources and their respective unit per recipe.
&lt;div style="overflow-x: scroll"&gt;
{| class="wikitable sortable"
|+Stock resources
!Resource Name 
!Display Name Term 
!Abbreviation Term
!Mass(per unit)
!Volume(per unit)
!Specific Heat (per unit)
![[#Flow Mode|Flow Mode]]
![[#Transfer Mode|Transfer Mode]]
!Cost (per unit)
!Icon Address
|-
|'''Methane'''
|Resource/DisplayName/Methane
|Resource/Abbreviation/LF
|1
|0.65
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Oxidizer'''
|Resource/DisplayName/Oxidizer
|Resource/Abbreviation/Ox
|1
|1.2
|1551
|STACK_PRIORITY_SEARCH
|PUMP
|0.18
|
|-
|'''Xenon'''
|Resource/DisplayName/Xenon Gas
|Resource/Abbreviation/Xe
|1
|0.1
|120
|STAGE_PRIORITY_FLOW
|PUMP
|4
|
|-
|'''ElectricCharge'''
|Resource/DisplayName/Electric Charge
|Resource/Abbreviation/EC
|0
|0
|0
|STAGE_PRIORITY_FLOW
|PUMP
|0
|Assets/UI/Sprites/Whitebox/WB-ICO-Battery.png
|-
|'''SolidFuel'''
|Resource/DisplayName/Solid Fuel
|Resource/Abbreviation/SF
|1
|5
|900
|NO_FLOW
|NONE
|0.6
|
|-
|'''Hydrogen'''
|Resource/DisplayName/Hydrogen
|Resource/Abbreviation/H
|1
|5
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Ablator'''
|Resource/DisplayName/Ablator
|Resource/Abbreviation/Ab
|1
|1
|400
|STACK_PRIORITY_SEARCH
|PUMP
|0.5
|
|-
|'''MonoPropellant'''
|Resource/DisplayName/MonoPropellant
|Resource/Abbreviation/MP
|1
|5
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1.2
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''Uranium'''
|Resource/DisplayName/Uranium
|Resource/DisplayName/Uranium
|1
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|-
|'''EVAPropellant'''
|Resource/DisplayName/EVAPropellant
|Resource/Abbreviation/EP
|1
|20
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''IntakeAir'''
|Resource/DisplayName/Intake Air
|Resource/DisplayName/Air
|1
|1
|10
|ALL_VESSEL
|PUMP
|0
|
|-
|'''TestRocks'''
|Resource/DisplayName/TestRocks
|Resource/Abbreviation/TR
|0.010
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|}
&lt;/div&gt;

=Recipes=
Recipes are composed by 2 or more resources.
{| class="wikitable"
|+Stock recipes
!Resource Name
!Display Name Term
!Abbreviation Term
!ingredients
!Unit per recipe unit
|-
|Methalox
|Resource/DisplayName/Methalox
|Resource/Abbreviation/MO
|Methane
Oxidizer
|0.2
0.8
|-
|MethaneAir
|Resource/DisplayName/Methane Air
|Resource/Abbreviation/MA
|Methane
IntakeAir
|1
1
|-
|XenonEC
|Resource/DisplayName/Xenon
|Resource/Abbreviation/Xe
|Xenon
ElectricCharge
|1
1
|}

==Flow Mode==
refers to how the fuel should flow on the vessel. On resource definitions this is represented by an '''integer'''. Goes as follows:

*'''0 - NULL''' - invalid flow, shouldn't be used.
*'''1 - NO_FLOW''' - The fuel on said part wont flow to any other tank
*'''2 - ALL_VESSEL''' - The fuel will be evenly distrbuted to all requesters
*'''3 - STAGE_PRIORITY_FLOW'''
*'''4 - STACK_PRIORITY_SEARCH'''
*'''5 - STAGE_STACK_FLOW_BALANCE'''

==Transfer Mode==
refers to if (or not) the fuel should be pumped to other parts. On resource definitions this is represented by an integer. Goes as follows:

*'''0 - NONE''' - fuel isn't transfered to other parts
*'''1 - PUMP''' - fuel is trasnfered to other parts
__FORCETOC__
[[Category:Game systems]]</text>
      <sha1>f2zbqyxltqd65uiqqau3sokkkoy62ea</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Core Part Data</title>
    <ns>14</ns>
    <id>38</id>
    <revision>
      <id>115</id>
      <timestamp>2023-08-02T23:07:12Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Created page with "The pages in this category contain the descriptions and possible values of various properties in the Core Part Data module."</comment>
      <origin>115</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="123" sha1="66dzhqcsrti3rajta2fg1ezxp8c317u" xml:space="preserve">The pages in this category contain the descriptions and possible values of various properties in the Core Part Data module.</text>
      <sha1>66dzhqcsrti3rajta2fg1ezxp8c317u</sha1>
    </revision>
    <revision>
      <id>116</id>
      <parentid>115</parentid>
      <timestamp>2023-08-02T23:07:31Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>116</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="140" sha1="li4jhk5e53gozy2ykfioar40f6gy9wj" xml:space="preserve">The pages in this category contain the descriptions and possible values of various properties in the Core Part Data module.
[[Category:TOC]]</text>
      <sha1>li4jhk5e53gozy2ykfioar40f6gy9wj</sha1>
    </revision>
    <revision>
      <id>117</id>
      <parentid>116</parentid>
      <timestamp>2023-08-02T23:07:56Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>117</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="150" sha1="ek1l4amjjxq52o9m0e3mda3q4llo3yq" xml:space="preserve">The pages in this category contain the descriptions and possible values of various properties in the Core Part Data module.
[[Category:Parts modding]]</text>
      <sha1>ek1l4amjjxq52o9m0e3mda3q4llo3yq</sha1>
    </revision>
    <revision>
      <id>128</id>
      <parentid>117</parentid>
      <timestamp>2023-08-02T23:54:42Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>128</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="150" sha1="e0pnhugmt121kw0qeigm3gcqhx6cucs" xml:space="preserve">[[Category:Parts modding]]
The pages in this category contain the descriptions and possible values of various properties in the Core Part Data module.</text>
      <sha1>e0pnhugmt121kw0qeigm3gcqhx6cucs</sha1>
    </revision>
  </page>
  <page>
    <title>Category</title>
    <ns>0</ns>
    <id>39</id>
    <revision>
      <id>120</id>
      <timestamp>2023-08-02T23:27:04Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Created page with "[[Category:Core Part Data]]  Following is the list of possible part categories: {| class="wikitable" |+ !Category !Notes |- |None | |- |Production | |- |Control | |- |Structural | |- |Aero | |- |Utility | |- |Science | |- |Pods | |- |FuelTank | |- |Engine | |- |Communication | |- |Electrical | |- |Ground | |- |Thermal | |- |Payload | |- |Coupling | |- |ColonyEssentials | |- |Favorites | |- |SubAssemblies | |- |Amenities | |- |Storage | |}"</comment>
      <origin>120</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="442" sha1="coldbyzbzbxxclk43rrw89errjdkf3b" xml:space="preserve">[[Category:Core Part Data]]

Following is the list of possible part categories:
{| class="wikitable"
|+
!Category
!Notes
|-
|None
|
|-
|Production
|
|-
|Control
|
|-
|Structural
|
|-
|Aero
|
|-
|Utility
|
|-
|Science
|
|-
|Pods
|
|-
|FuelTank
|
|-
|Engine
|
|-
|Communication
|
|-
|Electrical
|
|-
|Ground
|
|-
|Thermal
|
|-
|Payload
|
|-
|Coupling
|
|-
|ColonyEssentials
|
|-
|Favorites
|
|-
|SubAssemblies
|
|-
|Amenities
|
|-
|Storage
|
|}</text>
      <sha1>coldbyzbzbxxclk43rrw89errjdkf3b</sha1>
    </revision>
    <revision>
      <id>121</id>
      <parentid>120</parentid>
      <timestamp>2023-08-02T23:27:56Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>121</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="441" sha1="csgnzw0f1uvbmeqtrk8w0pnin6rw7p5" xml:space="preserve">[[Category:Core Part Data]]
Following is the list of possible part categories:
{| class="wikitable"
|+
!Category
!Notes
|-
|None
|
|-
|Production
|
|-
|Control
|
|-
|Structural
|
|-
|Aero
|
|-
|Utility
|
|-
|Science
|
|-
|Pods
|
|-
|FuelTank
|
|-
|Engine
|
|-
|Communication
|
|-
|Electrical
|
|-
|Ground
|
|-
|Thermal
|
|-
|Payload
|
|-
|Coupling
|
|-
|ColonyEssentials
|
|-
|Favorites
|
|-
|SubAssemblies
|
|-
|Amenities
|
|-
|Storage
|
|}</text>
      <sha1>csgnzw0f1uvbmeqtrk8w0pnin6rw7p5</sha1>
    </revision>
  </page>
  <page>
    <title>Family</title>
    <ns>0</ns>
    <id>40</id>
    <revision>
      <id>122</id>
      <timestamp>2023-08-02T23:31:09Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Created page with "[[Category:Core Part Data]] Following is the list of all currently used part families: {| class="wikitable" |+ !Family !Note |- |0000-Pod | |- |0010-Probe | |- |0020-Cockpit | |- |0030-Rover | |- |0040-Methalox |Fuel tank family |- |0050-Methane |Fuel tank family |- |0060-Monopropellant |Fuel tank family |- |0070-Xenon |Fuel tank family |- |0080-Hydrogen |Fuel tank family |- |0090-Fuel Line |Fuel tank family |- |0100-Methalox |Engine type family |- |0110-Solid Fuel Boost..."</comment>
      <origin>122</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1488" sha1="3r3qpcvysrn0kf318zq3mi8oz695nz1" xml:space="preserve">[[Category:Core Part Data]]
Following is the list of all currently used part families:
{| class="wikitable"
|+
!Family
!Note
|-
|0000-Pod
|
|-
|0010-Probe
|
|-
|0020-Cockpit
|
|-
|0030-Rover
|
|-
|0040-Methalox
|Fuel tank family
|-
|0050-Methane
|Fuel tank family
|-
|0060-Monopropellant
|Fuel tank family
|-
|0070-Xenon
|Fuel tank family
|-
|0080-Hydrogen
|Fuel tank family
|-
|0090-Fuel Line
|Fuel tank family
|-
|0100-Methalox
|Engine type family
|-
|0110-Solid Fuel Booster
|Engine type family
|-
|0120-Jet Engine
|Engine type family
|-
|0130-Monopropellant
|Engine type family
|-
|0140-Xenon
|Engine type family
|-
|0150-Hydrogen
|Engine type family
|-
|0160-Strut
|
|-
|0170-Clamp
|
|-
|0180-Engine Mount
|
|-
|0190-Adapter
|
|-
|0200-Beam
|
|-
|0210-Body
|
|-
|0220-Panel
|
|-
|0230-Hub
|
|-
|0240-Truss
|
|-
|0250-Truss Adapter
|
|-
|0260-Truss Resizer
|
|-
|0270-Tube
|
|-
|0280-Stack Decoupler
|
|-
|0290-Stack Separator
|
|-
|0300-Radial Decoupler
|
|-
|0310-Docking Port
|
|-
|0320-Fairing
|
|-
|0330-Cargo Bay
|
|-
|0340-Crew Cabin
|
|-
|0350-Truss
|
|-
|0360-Nose Cone
|
|-
|0370-Intake
|
|-
|0380-Wing
|
|-
|0390-Stabilizer
|
|-
|0400-Control Surface
|
|-
|0410-Tail Section
|
|-
|0420-Landing Leg
|
|-
|0430-Landing Gear
|
|-
|0440-Wheel
|
|-
|0450-Heat Shield
|
|-
|0470-Battery
|
|-
|0480-Solar Array
|
|-
|0490-Generator
|
|-
|0500-Antenna
|
|-
|0510-Parachute
|
|-
|0520-RCS
|
|-
|0530-Stabilizer
|
|-
|0540-Light
|
|-
|0550-Ladder
|
|-
|Factory
|
|-
|Service Bay
|
|}</text>
      <sha1>3r3qpcvysrn0kf318zq3mi8oz695nz1</sha1>
    </revision>
    <revision>
      <id>154</id>
      <parentid>122</parentid>
      <timestamp>2023-09-12T16:53:58Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <comment>Custom families</comment>
      <origin>154</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2009" sha1="n7d5vwnu1w2s5gr3mw2akb8blechknk" xml:space="preserve">[[Category:Core Part Data]]

===Custom family===
Creating a custom family for your parts is simple, it just needs to follow the following format:
 xxxx-FamilyName
Where &lt;code&gt;xxxx&lt;/code&gt; is a number that will indicate the position of you part family in the OAB Parts Picker. For example if you use &lt;code&gt;0075&lt;/code&gt; the family will be put between Xenon and Hydrogen fuel tanks.

For your family name to be correctly displayed you will need to add a &lt;code&gt;VAB/PartsPicker/&lt;FamilyName&gt;&lt;/code&gt; entry to your localization files.

===Stock families===
Following is the list of all currently used part families:
{| class="wikitable"
|+
!Family
!Note
|-
|0000-Pod
|
|-
|0010-Probe
|
|-
|0020-Cockpit
|
|-
|0030-Rover
|
|-
|0040-Methalox
|Fuel tank family 
|-
|0050-Methane
|Fuel tank family
|-
|0060-Monopropellant
|Fuel tank family
|-
|0070-Xenon
|Fuel tank family
|-
|0080-Hydrogen
|Fuel tank family
|-
|0090-Fuel Line
|Fuel tank family
|-
|0100-Methalox
|Engine type family 
|-
|0110-Solid Fuel Booster
|Engine type family
|-
|0120-Jet Engine
|Engine type family
|-
|0130-Monopropellant
|Engine type family
|-
|0140-Xenon
|Engine type family
|-
|0150-Hydrogen
|Engine type family
|-
|0160-Strut
|
|-
|0170-Clamp
|
|-
|0180-Engine Mount
|
|-
|0190-Adapter
|
|-
|0200-Beam
|
|-
|0210-Body
|
|-
|0220-Panel
|
|-
|0230-Hub
|
|-
|0240-Truss
|
|-
|0250-Truss Adapter
|
|-
|0260-Truss Resizer
|
|-
|0270-Tube
|
|-
|0280-Stack Decoupler
|
|-
|0290-Stack Separator
|
|-
|0300-Radial Decoupler
|
|-
|0310-Docking Port
|
|-
|0320-Fairing
|
|-
|0330-Cargo Bay
|
|-
|0340-Crew Cabin
|
|-
|0350-Truss
|
|-
|0360-Nose Cone
|
|-
|0370-Intake
|
|-
|0380-Wing
|
|-
|0390-Stabilizer
|
|-
|0400-Control Surface
|
|-
|0410-Tail Section
|
|-
|0420-Landing Leg
|
|-
|0430-Landing Gear
|
|-
|0440-Wheel
|
|-
|0450-Heat Shield
|
|-
|0470-Battery
|
|-
|0480-Solar Array
|
|-
|0490-Generator
|
|-
|0500-Antenna
|
|-
|0510-Parachute
|
|-
|0520-RCS
|
|-
|0530-Stabilizer
|
|-
|0540-Light
|
|-
|0550-Ladder
|
|-
|Factory
|
|-
|Service Bay
|
|}</text>
      <sha1>n7d5vwnu1w2s5gr3mw2akb8blechknk</sha1>
    </revision>
    <revision>
      <id>164</id>
      <parentid>154</parentid>
      <timestamp>2023-10-24T20:23:59Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <comment>/* Custom family */</comment>
      <origin>164</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2012" sha1="kqk94670l9p2ehxi8s0ynvukzrduixo" xml:space="preserve">[[Category:Core Part Data]]

===Custom family===
Creating a custom family for your parts is simple, it just needs to follow the following format:
 xxxx-FamilyName
Where &lt;code&gt;xxxx&lt;/code&gt; is a number that will indicate the position of you part family in the OAB Parts Picker. For example if you use &lt;code&gt;0075&lt;/code&gt; the family will be put between Xenon and Hydrogen fuel tanks.

For your family name to be correctly displayed you will need to add a &lt;code&gt;VAB/PartsPicker/xxxx-FamilyName&lt;/code&gt; entry to your localization files.

===Stock families===
Following is the list of all currently used part families:
{| class="wikitable"
|+
!Family
!Note
|-
|0000-Pod
|
|-
|0010-Probe
|
|-
|0020-Cockpit
|
|-
|0030-Rover
|
|-
|0040-Methalox
|Fuel tank family 
|-
|0050-Methane
|Fuel tank family
|-
|0060-Monopropellant
|Fuel tank family
|-
|0070-Xenon
|Fuel tank family
|-
|0080-Hydrogen
|Fuel tank family
|-
|0090-Fuel Line
|Fuel tank family
|-
|0100-Methalox
|Engine type family 
|-
|0110-Solid Fuel Booster
|Engine type family
|-
|0120-Jet Engine
|Engine type family
|-
|0130-Monopropellant
|Engine type family
|-
|0140-Xenon
|Engine type family
|-
|0150-Hydrogen
|Engine type family
|-
|0160-Strut
|
|-
|0170-Clamp
|
|-
|0180-Engine Mount
|
|-
|0190-Adapter
|
|-
|0200-Beam
|
|-
|0210-Body
|
|-
|0220-Panel
|
|-
|0230-Hub
|
|-
|0240-Truss
|
|-
|0250-Truss Adapter
|
|-
|0260-Truss Resizer
|
|-
|0270-Tube
|
|-
|0280-Stack Decoupler
|
|-
|0290-Stack Separator
|
|-
|0300-Radial Decoupler
|
|-
|0310-Docking Port
|
|-
|0320-Fairing
|
|-
|0330-Cargo Bay
|
|-
|0340-Crew Cabin
|
|-
|0350-Truss
|
|-
|0360-Nose Cone
|
|-
|0370-Intake
|
|-
|0380-Wing
|
|-
|0390-Stabilizer
|
|-
|0400-Control Surface
|
|-
|0410-Tail Section
|
|-
|0420-Landing Leg
|
|-
|0430-Landing Gear
|
|-
|0440-Wheel
|
|-
|0450-Heat Shield
|
|-
|0470-Battery
|
|-
|0480-Solar Array
|
|-
|0490-Generator
|
|-
|0500-Antenna
|
|-
|0510-Parachute
|
|-
|0520-RCS
|
|-
|0530-Stabilizer
|
|-
|0540-Light
|
|-
|0550-Ladder
|
|-
|Factory
|
|-
|Service Bay
|
|}</text>
      <sha1>kqk94670l9p2ehxi8s0ynvukzrduixo</sha1>
    </revision>
    <revision>
      <id>201</id>
      <parentid>164</parentid>
      <timestamp>2023-10-28T19:15:07Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>add modded families</comment>
      <origin>201</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2235" sha1="ephyaual45z8qwmesl2lxmasteksjyd" xml:space="preserve">[[Category:Core Part Data]]

===Custom family===
Creating a custom family for your parts is simple, it just needs to follow the following format:
 xxxx-FamilyName
Where &lt;code&gt;xxxx&lt;/code&gt; is a number that will indicate the position of you part family in the OAB Parts Picker. For example if you use &lt;code&gt;0075&lt;/code&gt; the family will be put between Xenon and Hydrogen fuel tanks.

For your family name to be correctly displayed you will need to add a &lt;code&gt;VAB/PartsPicker/xxxx-FamilyName&lt;/code&gt; entry to your localization files.

===Stock families===
Following is the list of all currently used part families:
{| class="wikitable"
|+
!Family
!Note
|-
|0000-Pod
|
|-
|0010-Probe
|
|-
|0020-Cockpit
|
|-
|0030-Rover
|
|-
|0040-Methalox
|Fuel tank family 
|-
|0050-Methane
|Fuel tank family
|-
|0060-Monopropellant
|Fuel tank family
|-
|0070-Xenon
|Fuel tank family
|-
|0080-Hydrogen
|Fuel tank family
|-
|0090-Fuel Line
|Fuel tank family
|-
|0100-Methalox
|Engine type family 
|-
|0110-Solid Fuel Booster
|Engine type family
|-
|0120-Jet Engine
|Engine type family
|-
|0130-Monopropellant
|Engine type family
|-
|0140-Xenon
|Engine type family
|-
|0150-Hydrogen
|Engine type family
|-
|0160-Strut
|
|-
|0170-Clamp
|
|-
|0180-Engine Mount
|
|-
|0190-Adapter
|
|-
|0200-Beam
|
|-
|0210-Body
|
|-
|0220-Panel
|
|-
|0230-Hub
|
|-
|0240-Truss
|
|-
|0250-Truss Adapter
|
|-
|0260-Truss Resizer
|
|-
|0270-Tube
|
|-
|0280-Stack Decoupler
|
|-
|0290-Stack Separator
|
|-
|0300-Radial Decoupler
|
|-
|0310-Docking Port
|
|-
|0320-Fairing
|
|-
|0330-Cargo Bay
|
|-
|0340-Crew Cabin
|
|-
|0350-Truss
|
|-
|0360-Nose Cone
|
|-
|0370-Intake
|
|-
|0380-Wing
|
|-
|0390-Stabilizer
|
|-
|0400-Control Surface
|
|-
|0410-Tail Section
|
|-
|0420-Landing Leg
|
|-
|0430-Landing Gear
|
|-
|0440-Wheel
|
|-
|0450-Heat Shield
|
|-
|0470-Battery
|
|-
|0480-Solar Array
|
|-
|0490-Generator
|
|-
|0500-Antenna
|
|-
|0510-Parachute
|
|-
|0520-RCS
|
|-
|0530-Stabilizer
|
|-
|0540-Light
|
|-
|0550-Ladder
|
|-
|Factory
|
|-
|Service Bay
|
|}


===Modded families===
Following is the list of common part families added by mods:
{| class="wikitable"
|+
!Family
!Note
|-
|0419-OP
|Optimism + Perspiration Engines (Used in the Engine Workshop/part modding tutorial)
|}</text>
      <sha1>ephyaual45z8qwmesl2lxmasteksjyd</sha1>
    </revision>
  </page>
  <page>
    <title>Size Category</title>
    <ns>0</ns>
    <id>41</id>
    <revision>
      <id>123</id>
      <timestamp>2023-08-02T23:34:12Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Created page with "[[Category:Core Part Data]] Following is the list of possible part size categories: {| class="wikitable" |+ !Size Category !Note |- |Auto | |- |XS |0.625m diameter |- |S |1.25m diameter |- |M |2.5m diameter |- |L |3.75m diameter |- |XL |5m diameter |- |XXL |10m diameter (hydrogen ball tank) |- |XXXL | |- |XXXXL | |- |XXXXXL | |- |XXXXXXL | |}"</comment>
      <origin>123</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="344" sha1="fr7xxp7yey6tj00cdn8bjuckrrp8bwg" xml:space="preserve">[[Category:Core Part Data]]
Following is the list of possible part size categories:
{| class="wikitable"
|+
!Size Category
!Note
|-
|Auto
|
|-
|XS
|0.625m diameter
|-
|S
|1.25m diameter
|-
|M
|2.5m diameter
|-
|L
|3.75m diameter
|-
|XL
|5m diameter
|-
|XXL
|10m diameter (hydrogen ball tank)
|-
|XXXL
|
|-
|XXXXL
|
|-
|XXXXXL
|
|-
|XXXXXXL
|
|}</text>
      <sha1>fr7xxp7yey6tj00cdn8bjuckrrp8bwg</sha1>
    </revision>
  </page>
  <page>
    <title>Stage Type</title>
    <ns>0</ns>
    <id>42</id>
    <revision>
      <id>126</id>
      <timestamp>2023-08-02T23:38:46Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Created page with "[[Category:Core Part Data]] Following is the list of possible part stage types: {| class="wikitable" |+ !Stage Type !Notes |- |None | |- |LiquidEngine | |- |SolidEngine | |- |Parachute | |- |Science | |- |DecouplerHorizontal | |- |DecouplerVertical | |- |Fairing | |}"</comment>
      <origin>126</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="267" sha1="sjtdzj430musvl7mhlchxwp47qwb03d" xml:space="preserve">[[Category:Core Part Data]]
Following is the list of possible part stage types:
{| class="wikitable"
|+
!Stage Type
!Notes
|-
|None
|
|-
|LiquidEngine
|
|-
|SolidEngine
|
|-
|Parachute
|
|-
|Science
|
|-
|DecouplerHorizontal
|
|-
|DecouplerVertical
|
|-
|Fairing
|
|}</text>
      <sha1>sjtdzj430musvl7mhlchxwp47qwb03d</sha1>
    </revision>
    <revision>
      <id>129</id>
      <parentid>126</parentid>
      <timestamp>2023-08-02T23:56:25Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>129</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="307" sha1="1knho55m4089yp56utaj0xrrok8gp1l" xml:space="preserve">[[Category:Core Part Data]]
Following is the list of possible part stage types:
{| class="wikitable"
|+
!Stage Type
!Notes
|-
|None
|
|-
|LiquidEngine
|
|-
|SolidEngine
|
|-
|Parachute
|
|-
|Science
|
|-
|DecouplerHorizontal
|Radial decoupler
|-
|DecouplerVertical
|Stack (inline) decoupler
|-
|Fairing
|
|}</text>
      <sha1>1knho55m4089yp56utaj0xrrok8gp1l</sha1>
    </revision>
  </page>
  <page>
    <title>Staging Icon Asset Address</title>
    <ns>0</ns>
    <id>43</id>
    <revision>
      <id>127</id>
      <timestamp>2023-08-02T23:48:19Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Created page with "[[Category:Core Part Data]] Following is the list of possible staging icon asset addresses: {| class="wikitable" |+ !Staging Icon Asset Address !Notes |- |Staging-Engines/Staging-ICO-Jet-Airs.png |Airbreathing jet engines (does not include dual mode engines like Rapier, those are considered as Methalox engines) |- |Staging-Engines/Staging-ICO-Metallic.png |Nuclear engines |- |Staging-Engines/Staging-ICO-Methalox.png |Methalox liquid fuel engines |- |Staging-Engines/Stagi..."</comment>
      <origin>127</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="950" sha1="cbknkmm3kkrb79u8nqjr1xjhgjpheyw" xml:space="preserve">[[Category:Core Part Data]]
Following is the list of possible staging icon asset addresses:
{| class="wikitable"
|+
!Staging Icon Asset Address
!Notes
|-
|Staging-Engines/Staging-ICO-Jet-Airs.png
|Airbreathing jet engines (does not include dual mode engines like Rapier, those are considered as Methalox engines)
|-
|Staging-Engines/Staging-ICO-Metallic.png
|Nuclear engines
|-
|Staging-Engines/Staging-ICO-Methalox.png
|Methalox liquid fuel engines
|-
|Staging-Engines/Staging-ICO-Monoprop.png
|Monopropellant liquid fuel engines
|-
|Staging-Engines/Staging-ICO-Xenons.png
|Xenon ion engines
|-
|Staging-ICO-Booster.png
|Solid rocket boosters
|-
|Staging-ICO-Chute.png
|Parachutes
|-
|Staging-ICO-Port.png
|Docking ports
|-
|Staging-ICO-Radial.png
|Radial decouplers
|-
|Staging-ICO-Structure01.png
|Structural (for example launch clamps)
|-
|Staging-Icon-Inline.png
|Stack (inline) decouplers
|-
|staging_icons_temp/staging_fairing.png
|Fairings
|}</text>
      <sha1>cbknkmm3kkrb79u8nqjr1xjhgjpheyw</sha1>
    </revision>
    <revision>
      <id>130</id>
      <parentid>127</parentid>
      <timestamp>2023-08-02T23:57:08Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>130</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="947" sha1="gjxrq3z54z6owni4bqwruzshzsjjrbw" xml:space="preserve">[[Category:Core Part Data]]
Following is the list of possible staging icon asset addresses:
{| class="wikitable"
|+
!Staging Icon Asset Address
!Notes
|-
|Staging-Engines/Staging-ICO-Jet-Airs.png
|Airbreathing jet engines (does not include dual mode engines like Rapier, those are considered Methalox engines)
|-
|Staging-Engines/Staging-ICO-Metallic.png
|Nuclear engines
|-
|Staging-Engines/Staging-ICO-Methalox.png
|Methalox liquid fuel engines
|-
|Staging-Engines/Staging-ICO-Monoprop.png
|Monopropellant liquid fuel engines
|-
|Staging-Engines/Staging-ICO-Xenons.png
|Xenon ion engines
|-
|Staging-ICO-Booster.png
|Solid rocket boosters
|-
|Staging-ICO-Chute.png
|Parachutes
|-
|Staging-ICO-Port.png
|Docking ports
|-
|Staging-ICO-Radial.png
|Radial decouplers
|-
|Staging-ICO-Structure01.png
|Structural (for example launch clamps)
|-
|Staging-Icon-Inline.png
|Stack (inline) decouplers
|-
|staging_icons_temp/staging_fairing.png
|Fairings
|}</text>
      <sha1>gjxrq3z54z6owni4bqwruzshzsjjrbw</sha1>
    </revision>
    <revision>
      <id>159</id>
      <parentid>130</parentid>
      <timestamp>2023-10-23T21:49:16Z</timestamp>
      <contributor>
        <username>Cheese</username>
        <id>7</id>
      </contributor>
      <comment>Change it from "possible" to "exist with in the game"</comment>
      <origin>159</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1014" sha1="bxa42auraqx8tmmp1vtku6awmhpcdu7" xml:space="preserve">[[Category:Core Part Data]]
Following is the list of staging icon asset addresses that exist within the game (you should be able to add your own if you wish):
{| class="wikitable"
|+
!Staging Icon Asset Address
!Notes
|-
|Staging-Engines/Staging-ICO-Jet-Airs.png
|Airbreathing jet engines (does not include dual mode engines like Rapier, those are considered Methalox engines)
|-
|Staging-Engines/Staging-ICO-Metallic.png
|Nuclear engines
|-
|Staging-Engines/Staging-ICO-Methalox.png
|Methalox liquid fuel engines
|-
|Staging-Engines/Staging-ICO-Monoprop.png
|Monopropellant liquid fuel engines
|-
|Staging-Engines/Staging-ICO-Xenons.png
|Xenon ion engines
|-
|Staging-ICO-Booster.png
|Solid rocket boosters
|-
|Staging-ICO-Chute.png
|Parachutes
|-
|Staging-ICO-Port.png
|Docking ports
|-
|Staging-ICO-Radial.png
|Radial decouplers
|-
|Staging-ICO-Structure01.png
|Structural (for example launch clamps)
|-
|Staging-Icon-Inline.png
|Stack (inline) decouplers
|-
|staging_icons_temp/staging_fairing.png
|Fairings
|}</text>
      <sha1>bxa42auraqx8tmmp1vtku6awmhpcdu7</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Tutorials</title>
    <ns>14</ns>
    <id>44</id>
    <revision>
      <id>133</id>
      <timestamp>2023-08-03T00:02:46Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Created page with "[[Category:TOC]] This category contains modding tutorials."</comment>
      <origin>133</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="58" sha1="mym1ismcu52dptt1wpjxdm63sao7kgy" xml:space="preserve">[[Category:TOC]]
This category contains modding tutorials.</text>
      <sha1>mym1ismcu52dptt1wpjxdm63sao7kgy</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Part textures</title>
    <ns>14</ns>
    <id>45</id>
    <revision>
      <id>134</id>
      <timestamp>2023-08-03T00:04:13Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Created page with "Pages about part textures and how to create them. [[Category:Parts modding]]"</comment>
      <origin>134</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="76" sha1="lskxtlpg5yze74t7nf37e7b60v4pxu6" xml:space="preserve">Pages about part textures and how to create them.
[[Category:Parts modding]]</text>
      <sha1>lskxtlpg5yze74t7nf37e7b60v4pxu6</sha1>
    </revision>
  </page>
  <page>
    <title>Scenery - Standard (Opaque)</title>
    <ns>0</ns>
    <id>46</id>
    <redirect title="Scenery - Standard (Opaque) shader" />
    <revision>
      <id>137</id>
      <timestamp>2023-08-03T00:07:10Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Munix moved page [[Scenery - Standard (Opaque)]] to [[Scenery - Standard (Opaque) shader]]: Make the name more clear</comment>
      <origin>137</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="48" sha1="2oe4a1rcm3ewzp8wwnnw0254dxledlp" xml:space="preserve">#REDIRECT [[Scenery - Standard (Opaque) shader]]</text>
      <sha1>2oe4a1rcm3ewzp8wwnnw0254dxledlp</sha1>
    </revision>
  </page>
  <page>
    <title>Part modding video tutorials</title>
    <ns>0</ns>
    <id>47</id>
    <redirect title="Part modding videos (tutorials)" />
    <revision>
      <id>141</id>
      <timestamp>2023-08-03T00:08:45Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Munix moved page [[Part modding video tutorials]] to [[Part modding videos (tutorials)]]</comment>
      <origin>141</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="45" sha1="qc7qzbnoixo58amofenu4dexxrbbrhr" xml:space="preserve">#REDIRECT [[Part modding videos (tutorials)]]</text>
      <sha1>qc7qzbnoixo58amofenu4dexxrbbrhr</sha1>
    </revision>
  </page>
  <page>
    <title>Category:UI</title>
    <ns>14</ns>
    <id>48</id>
    <revision>
      <id>145</id>
      <timestamp>2023-08-31T20:52:30Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <comment>Add UI Category</comment>
      <origin>145</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="106" sha1="4qb7emnqx0xx26bjipb47gik0bjlt61" xml:space="preserve">[[Category:TOC]]

This category contains all info on the game UI as well as help on creating UIs for mods.</text>
      <sha1>4qb7emnqx0xx26bjipb47gik0bjlt61</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Game UI</title>
    <ns>14</ns>
    <id>49</id>
    <revision>
      <id>146</id>
      <timestamp>2023-08-31T20:54:13Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <comment>Category Game UI</comment>
      <origin>146</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="72" sha1="g4vuvkvy35qa3xha1vpygsb0qojyo8i" xml:space="preserve">[[Category:UI]]

This category contains information about the game's UI.</text>
      <sha1>g4vuvkvy35qa3xha1vpygsb0qojyo8i</sha1>
    </revision>
  </page>
  <page>
    <title>File:Capture d'écran 2023-08-31 230104.png</title>
    <ns>6</ns>
    <id>50</id>
    <revision>
      <id>147</id>
      <timestamp>2023-08-31T21:03:01Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <origin>147</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="19" sha1="2o026q3y3gzls2rsxqevmlswdkligr2" xml:space="preserve">KSP2 Main Menu Logo</text>
      <sha1>2o026q3y3gzls2rsxqevmlswdkligr2</sha1>
    </revision>
  </page>
  <page>
    <title>Colors</title>
    <ns>0</ns>
    <id>51</id>
    <revision>
      <id>148</id>
      <timestamp>2023-08-31T21:09:06Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <comment>Added Game UI Colors page</comment>
      <origin>148</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="288" sha1="f6ttcgoslgok60r5a2h88s1l4tfhdk3" xml:space="preserve">[[Category:Game UI]]

A list of the colors used in the stock game UI.

=== Logo ===
[[File:Capture d'écran 2023-08-31 230104.png|alt=KSP2 Logo|thumb|Main Menu Logo]]

* White: &lt;code&gt;#ffffff&lt;/code&gt;, &lt;code&gt;rgb(255, 255, 255)&lt;/code&gt;
* Red: &lt;code&gt;#e01500&lt;/code&gt;, &lt;code&gt;rgb(224, 21, 0)&lt;/code&gt;</text>
      <sha1>f6ttcgoslgok60r5a2h88s1l4tfhdk3</sha1>
    </revision>
    <revision>
      <id>150</id>
      <parentid>148</parentid>
      <timestamp>2023-08-31T21:30:23Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <comment>Start flight UI</comment>
      <origin>150</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="951" sha1="tvsx0fhp599m3lbt6s3reow9a4q62on" xml:space="preserve">[[Category:Game UI]]

A list of the colors used in the stock game UI.

=== Logo ===
[[File:Capture d'écran 2023-08-31 230104.png|alt=KSP2 Logo|thumb|Main Menu Logo]]

* White: &lt;code&gt;#ffffff&lt;/code&gt;, &lt;code&gt;rgb(255, 255, 255)&lt;/code&gt;
* Red: &lt;code&gt;#e01500&lt;/code&gt;, &lt;code&gt;rgb(224, 21, 0)&lt;/code&gt;

== Flight UI ==

=== Common ===
[[File:App.bar UI.png|thumb|App Bar]]

* Border Light: &lt;code&gt;#5356cc&lt;/code&gt;, &lt;code&gt;rgb(83, 86, 204)&lt;/code&gt;
* Border Dark: &lt;code&gt;#2a2a66&lt;/code&gt;, &lt;code&gt;rgb(42, 42, 102)&lt;/code&gt;
* Light Green: &lt;code&gt;#00ff66&lt;/code&gt;, &lt;code&gt;rgb(0, 255, 102)&lt;/code&gt;

=== App Bar ===

* Background (Bar): &lt;code&gt;#141616&lt;/code&gt;, &lt;code&gt;rgb(20, 22, 22)&lt;/code&gt;
* Icon / Light Gray: &lt;code&gt;#aab2cc&lt;/code&gt;, &lt;code&gt;rgb(170, 178, 204)&lt;/code&gt;
* Deselected / Dark Gray: &lt;code&gt;#2a2a32&lt;/code&gt;, &lt;code&gt;rgb(42, 42, 50)&lt;/code&gt;
* Border (App list): &lt;code&gt;#0d0f2d&lt;/code&gt;, &lt;code&gt;rgb(13, 15, 47)&lt;/code&gt;
* Background (App list): &lt;code&gt;#262a30&lt;/code&gt;, &lt;code&gt;rgb(38, 42, 48)&lt;/code&gt;</text>
      <sha1>tvsx0fhp599m3lbt6s3reow9a4q62on</sha1>
    </revision>
    <revision>
      <id>155</id>
      <parentid>150</parentid>
      <timestamp>2023-09-13T15:31:54Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <comment>Start OAB colors</comment>
      <origin>155</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1411" sha1="2mij4de952ddeuqkvdiwzgyf64dbdj9" xml:space="preserve">[[Category:Game UI]]

A list of the colors used in the stock game UI.

=== Logo ===
[[File:Capture d'écran 2023-08-31 230104.png|alt=KSP2 Logo|thumb|Main Menu Logo]]

* White: &lt;code&gt;#ffffff&lt;/code&gt;, &lt;code&gt;rgb(255, 255, 255)&lt;/code&gt;
* Red: &lt;code&gt;#e01500&lt;/code&gt;, &lt;code&gt;rgb(224, 21, 0)&lt;/code&gt;

== OAB ==

=== Common ===

* Background (dark): &lt;code&gt;#22262e&lt;/code&gt;, &lt;code&gt;rgb(34, 38, 46)&lt;/code&gt;
* Background (light): &lt;code&gt;#2e3540&lt;/code&gt;, &lt;code&gt;rgb(46, 53, 64)&lt;/code&gt;
* Text (dark): &lt;code&gt;#adb6d0&lt;/code&gt;, &lt;code&gt;rgb(173, 182, 208)&lt;/code&gt;
* Text (light): &lt;code&gt;#d6e0ff&lt;/code&gt;, &lt;code&gt;rgb(214, 224, 255)&lt;/code&gt;
* Border (light blue): &lt;code&gt;#696dff&lt;/code&gt;, &lt;code&gt;rgb(105, 109, 255)&lt;/code&gt;
* Border (dark blue): &lt;code&gt;#00002b&lt;/code&gt;, &lt;code&gt;rgb(0, 0, 43)&lt;/code&gt;

== Flight UI ==

=== Common ===
[[File:App.bar UI.png|thumb|App Bar]]

* Border Light: &lt;code&gt;#5356cc&lt;/code&gt;, &lt;code&gt;rgb(83, 86, 204)&lt;/code&gt;
* Border Dark: &lt;code&gt;#2a2a66&lt;/code&gt;, &lt;code&gt;rgb(42, 42, 102)&lt;/code&gt;
* Light Green: &lt;code&gt;#00ff66&lt;/code&gt;, &lt;code&gt;rgb(0, 255, 102)&lt;/code&gt;

=== App Bar ===

* Background (Bar): &lt;code&gt;#141616&lt;/code&gt;, &lt;code&gt;rgb(20, 22, 22)&lt;/code&gt;
* Icon / Light Gray: &lt;code&gt;#aab2cc&lt;/code&gt;, &lt;code&gt;rgb(170, 178, 204)&lt;/code&gt;
* Deselected / Dark Gray: &lt;code&gt;#2a2a32&lt;/code&gt;, &lt;code&gt;rgb(42, 42, 50)&lt;/code&gt;
* Border (App list): &lt;code&gt;#0d0f2d&lt;/code&gt;, &lt;code&gt;rgb(13, 15, 47)&lt;/code&gt;
* Background (App list): &lt;code&gt;#262a30&lt;/code&gt;, &lt;code&gt;rgb(38, 42, 48)&lt;/code&gt;</text>
      <sha1>2mij4de952ddeuqkvdiwzgyf64dbdj9</sha1>
    </revision>
    <revision>
      <id>161</id>
      <parentid>155</parentid>
      <timestamp>2023-10-23T22:02:09Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>161</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1417" sha1="3pl4pmxx2jh7ku4cilvsqy7nqmc0z2s" xml:space="preserve">[[Category:Game UI]]

A list of the colors used in the stock game UI.

=== Logo ===
[[File:Capture d'écran 2023-08-31 230104.png|alt=KSP2 Logo|thumb|Main Menu Logo]]

* White: &lt;code&gt;#ffffff&lt;/code&gt;, &lt;code&gt;rgb(255, 255, 255)&lt;/code&gt;
* Red: &lt;code&gt;#e01500&lt;/code&gt;, &lt;code&gt;rgb(224, 21, 0)&lt;/code&gt;

== OAB ==

=== Common ===

* Background (dark): &lt;code&gt;#22262e&lt;/code&gt;, &lt;code&gt;rgb(34, 38, 46)&lt;/code&gt;
* Background (light): &lt;code&gt;#2e3540&lt;/code&gt;, &lt;code&gt;rgb(46, 53, 64)&lt;/code&gt;
* Text (dark): &lt;code&gt;#adb6d0&lt;/code&gt;, &lt;code&gt;rgb(173, 182, 208)&lt;/code&gt;
* Text (light): &lt;code&gt;#d6e0ff&lt;/code&gt;, &lt;code&gt;rgb(214, 224, 255)&lt;/code&gt;
* Border (light blue): &lt;code&gt;#696dff&lt;/code&gt;, &lt;code&gt;rgb(105, 109, 255)&lt;/code&gt;
* Border (dark blue): &lt;code&gt;#00002b&lt;/code&gt;, &lt;code&gt;rgb(0, 0, 43)&lt;/code&gt;

== Flight UI ==

=== Common ===
[[File:App.bar UI.png|thumb|App Bar]]

* Border Light: &lt;code&gt;#5356cc&lt;/code&gt;, &lt;code&gt;rgb(83, 86, 204)&lt;/code&gt;
* Border Dark: &lt;code&gt;#2a2a66&lt;/code&gt;, &lt;code&gt;rgb(42, 42, 102)&lt;/code&gt;
* Light Green: &lt;code&gt;#00ff66&lt;/code&gt;, &lt;code&gt;rgb(0, 255, 102)&lt;/code&gt;

=== App Bar ===

* Background (Bar): &lt;code&gt;#141616&lt;/code&gt;, &lt;code&gt;rgb(20, 22, 22)&lt;/code&gt;
* Icon / Light Gray: &lt;code&gt;#aab2cc&lt;/code&gt;, &lt;code&gt;rgb(170, 178, 204)&lt;/code&gt;
* Deselected / Dark Gray: &lt;code&gt;#2a2a32&lt;/code&gt;, &lt;code&gt;rgb(42, 42, 50)&lt;/code&gt;
* Border (App list): &lt;code&gt;#0d0f2d&lt;/code&gt;, &lt;code&gt;rgb(13, 15, 47)&lt;/code&gt;
* Background (App list): &lt;code&gt;#262a30&lt;/code&gt;, &lt;code&gt;rgb(38, 42, 48)&lt;/code&gt;

test</text>
      <sha1>3pl4pmxx2jh7ku4cilvsqy7nqmc0z2s</sha1>
    </revision>
    <revision>
      <id>162</id>
      <parentid>161</parentid>
      <timestamp>2023-10-23T22:02:16Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>162</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1411" sha1="2mij4de952ddeuqkvdiwzgyf64dbdj9" xml:space="preserve">[[Category:Game UI]]

A list of the colors used in the stock game UI.

=== Logo ===
[[File:Capture d'écran 2023-08-31 230104.png|alt=KSP2 Logo|thumb|Main Menu Logo]]

* White: &lt;code&gt;#ffffff&lt;/code&gt;, &lt;code&gt;rgb(255, 255, 255)&lt;/code&gt;
* Red: &lt;code&gt;#e01500&lt;/code&gt;, &lt;code&gt;rgb(224, 21, 0)&lt;/code&gt;

== OAB ==

=== Common ===

* Background (dark): &lt;code&gt;#22262e&lt;/code&gt;, &lt;code&gt;rgb(34, 38, 46)&lt;/code&gt;
* Background (light): &lt;code&gt;#2e3540&lt;/code&gt;, &lt;code&gt;rgb(46, 53, 64)&lt;/code&gt;
* Text (dark): &lt;code&gt;#adb6d0&lt;/code&gt;, &lt;code&gt;rgb(173, 182, 208)&lt;/code&gt;
* Text (light): &lt;code&gt;#d6e0ff&lt;/code&gt;, &lt;code&gt;rgb(214, 224, 255)&lt;/code&gt;
* Border (light blue): &lt;code&gt;#696dff&lt;/code&gt;, &lt;code&gt;rgb(105, 109, 255)&lt;/code&gt;
* Border (dark blue): &lt;code&gt;#00002b&lt;/code&gt;, &lt;code&gt;rgb(0, 0, 43)&lt;/code&gt;

== Flight UI ==

=== Common ===
[[File:App.bar UI.png|thumb|App Bar]]

* Border Light: &lt;code&gt;#5356cc&lt;/code&gt;, &lt;code&gt;rgb(83, 86, 204)&lt;/code&gt;
* Border Dark: &lt;code&gt;#2a2a66&lt;/code&gt;, &lt;code&gt;rgb(42, 42, 102)&lt;/code&gt;
* Light Green: &lt;code&gt;#00ff66&lt;/code&gt;, &lt;code&gt;rgb(0, 255, 102)&lt;/code&gt;

=== App Bar ===

* Background (Bar): &lt;code&gt;#141616&lt;/code&gt;, &lt;code&gt;rgb(20, 22, 22)&lt;/code&gt;
* Icon / Light Gray: &lt;code&gt;#aab2cc&lt;/code&gt;, &lt;code&gt;rgb(170, 178, 204)&lt;/code&gt;
* Deselected / Dark Gray: &lt;code&gt;#2a2a32&lt;/code&gt;, &lt;code&gt;rgb(42, 42, 50)&lt;/code&gt;
* Border (App list): &lt;code&gt;#0d0f2d&lt;/code&gt;, &lt;code&gt;rgb(13, 15, 47)&lt;/code&gt;
* Background (App list): &lt;code&gt;#262a30&lt;/code&gt;, &lt;code&gt;rgb(38, 42, 48)&lt;/code&gt;</text>
      <sha1>2mij4de952ddeuqkvdiwzgyf64dbdj9</sha1>
    </revision>
  </page>
  <page>
    <title>File:App.bar UI.png</title>
    <ns>6</ns>
    <id>52</id>
    <revision>
      <id>149</id>
      <timestamp>2023-08-31T21:19:09Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <origin>149</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="18" sha1="lpwgfbqivjsx315roq9c28d086fgyye" xml:space="preserve">App Bar UI buttons</text>
      <sha1>lpwgfbqivjsx315roq9c28d086fgyye</sha1>
    </revision>
  </page>
  <page>
    <title>File:UnityExplorerForKSP2 4.9.1.png</title>
    <ns>6</ns>
    <id>53</id>
    <revision>
      <id>151</id>
      <timestamp>2023-09-03T20:42:33Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <origin>151</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="26" sha1="4dub12hlrmw6gnkd13aam74vgf1nhh2" xml:space="preserve">UnityExplorerForKSP2 4.9.1</text>
      <sha1>4dub12hlrmw6gnkd13aam74vgf1nhh2</sha1>
    </revision>
  </page>
  <page>
    <title>UnityExplorer</title>
    <ns>0</ns>
    <id>54</id>
    <revision>
      <id>152</id>
      <timestamp>2023-09-03T20:55:53Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Initial edit</comment>
      <origin>152</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1094" sha1="lralf2ub7pl6jsvaokdmy8yflx1v3f8" xml:space="preserve">🔍 Unity Explorer is an in-game UI for exploring, debugging and modifying KSP2 (and other Unity games).

=== Get it here: https://github.com/Falki-git/UnityExplorer/releases ===
Mod is forked from original work by sinai - &lt;nowiki&gt;https://github.com/sinai-dev/UnityExplorer&lt;/nowiki&gt; - version 4.9.0

== Features: ==

=== '''Object Explorer''' ===
Use the Scene Explorer tab to traverse the active scenes, as well as the DontDestroyOnLoad and HideAndDontSave objects.

Use the Object Search tab to search for Unity objects (including GameObjects, Components, etc), C# Singletons or Static Classes.

=== '''Inspector''' ===
Used to see detailed information on objects of any type and manipulate their values, as well as to inspect C# Classes with static reflection.

=== '''C# console''' ===
Uses the &lt;code&gt;Mono.CSharp.Evaluator&lt;/code&gt; to define temporary classes or run immediate REPL code

=== KSP2 addition ===
Press "Lock" to disable game input when you type in stuff, so you don't accidently trigger throttle or time warp:



[[File:UnityExplorerForKSP2 4.9.1.png|thumb]]
[[Category:Tools]]</text>
      <sha1>lralf2ub7pl6jsvaokdmy8yflx1v3f8</sha1>
    </revision>
    <revision>
      <id>153</id>
      <parentid>152</parentid>
      <timestamp>2023-09-03T20:57:41Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Format picture</comment>
      <origin>153</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1103" sha1="c8e8xs10fefhn37v49sr0fbzm4vwmxp" xml:space="preserve">🔍 Unity Explorer is an in-game UI for exploring, debugging and modifying KSP2 (and other Unity games).

=== Get it here: https://github.com/Falki-git/UnityExplorer/releases ===
Mod is forked from original work by sinai - &lt;nowiki&gt;https://github.com/sinai-dev/UnityExplorer&lt;/nowiki&gt; - version 4.9.0

== Features: ==

=== '''Object Explorer''' ===
Use the Scene Explorer tab to traverse the active scenes, as well as the DontDestroyOnLoad and HideAndDontSave objects.

Use the Object Search tab to search for Unity objects (including GameObjects, Components, etc), C# Singletons or Static Classes.

=== '''Inspector''' ===
Used to see detailed information on objects of any type and manipulate their values, as well as to inspect C# Classes with static reflection.

=== '''C# console''' ===
Uses the &lt;code&gt;Mono.CSharp.Evaluator&lt;/code&gt; to define temporary classes or run immediate REPL code

=== KSP2 addition ===
Press "Lock" to disable game input when you type in stuff, so you don't accidently trigger throttle or time warp:



[[File:UnityExplorerForKSP2 4.9.1.png|left|800x800px]]
[[Category:Tools]]</text>
      <sha1>c8e8xs10fefhn37v49sr0fbzm4vwmxp</sha1>
    </revision>
    <revision>
      <id>265</id>
      <parentid>153</parentid>
      <timestamp>2023-12-28T20:43:02Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Moved release link to point to KSP2Community and add that it's available on CKAN also</comment>
      <origin>265</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1132" sha1="10to1cli502j82x12r45rkvj6vwyiso" xml:space="preserve">🔍 Unity Explorer is an in-game UI for exploring, debugging and modifying KSP2 (and other Unity games).

=== Get it here: https://github.com/KSP2Community/UnityExplorer/releases (also available on CKAN) ===
Mod is forked from original work by sinai - &lt;nowiki&gt;https://github.com/sinai-dev/UnityExplorer&lt;/nowiki&gt; - version 4.9.0

== Features: ==

=== '''Object Explorer''' ===
Use the Scene Explorer tab to traverse the active scenes, as well as the DontDestroyOnLoad and HideAndDontSave objects.

Use the Object Search tab to search for Unity objects (including GameObjects, Components, etc), C# Singletons or Static Classes.

=== '''Inspector''' ===
Used to see detailed information on objects of any type and manipulate their values, as well as to inspect C# Classes with static reflection.

=== '''C# console''' ===
Uses the &lt;code&gt;Mono.CSharp.Evaluator&lt;/code&gt; to define temporary classes or run immediate REPL code

=== KSP2 addition ===
Press "Lock" to disable game input when you type in stuff, so you don't accidently trigger throttle or time warp:



[[File:UnityExplorerForKSP2 4.9.1.png|left|800x800px]]
[[Category:Tools]]</text>
      <sha1>10to1cli502j82x12r45rkvj6vwyiso</sha1>
    </revision>
  </page>
  <page>
    <title>MediaWiki:Citizen-footer-desc</title>
    <ns>8</ns>
    <id>55</id>
    <revision>
      <id>156</id>
      <timestamp>2023-10-23T14:04:49Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Created page with "Created by members of the Discord server [https://discord.gg/hHW5gpHxfE KSP 2 Modding Society]"</comment>
      <origin>156</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="94" sha1="du640zfwcvn38r0f7ptk0ha5u1lpn6t" xml:space="preserve">Created by members of the Discord server [https://discord.gg/hHW5gpHxfE KSP 2 Modding Society]</text>
      <sha1>du640zfwcvn38r0f7ptk0ha5u1lpn6t</sha1>
    </revision>
    <revision>
      <id>158</id>
      <parentid>156</parentid>
      <timestamp>2023-10-23T14:06:30Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>158</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="54" sha1="ifbo3ayv6x0v5id5knikwtqp555091h" xml:space="preserve">Community wiki for everything related to KSP 2 modding</text>
      <sha1>ifbo3ayv6x0v5id5knikwtqp555091h</sha1>
    </revision>
  </page>
  <page>
    <title>MediaWiki:Citizen-footer-tagline</title>
    <ns>8</ns>
    <id>56</id>
    <revision>
      <id>157</id>
      <timestamp>2023-10-23T14:05:28Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Created page with "Created by members of the Discord server [https://discord.gg/hHW5gpHxfE KSP 2 Modding Society]"</comment>
      <origin>157</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="94" sha1="du640zfwcvn38r0f7ptk0ha5u1lpn6t" xml:space="preserve">Created by members of the Discord server [https://discord.gg/hHW5gpHxfE KSP 2 Modding Society]</text>
      <sha1>du640zfwcvn38r0f7ptk0ha5u1lpn6t</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Messages</title>
    <ns>14</ns>
    <id>57</id>
    <revision>
      <id>165</id>
      <timestamp>2023-10-24T20:27:15Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <comment>Game Messages system category</comment>
      <origin>165</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="108" sha1="3maxgryc7uxudj3y6i3jxrbm1oshz0l" xml:space="preserve">[[Category:Game systems]]
This category contains information related to the game's Messages / Events system.</text>
      <sha1>3maxgryc7uxudj3y6i3jxrbm1oshz0l</sha1>
    </revision>
  </page>
  <page>
    <title>Tutorials Home Page (to be deleted)</title>
    <ns>0</ns>
    <id>58</id>
    <revision>
      <id>171</id>
      <timestamp>2023-10-28T10:43:48Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added summary</comment>
      <origin>171</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="484" sha1="8f7xc5hcskn1ib0m74uh4uxhk7oq63k" xml:space="preserve">Welcome to the KSP2 mod tutorials home page. Follow the instructions to create your first mod!

== How to make a KSP2 mod? ==

# Getting started
## [[Setting up a Development Environment]]
## Initializing your project (TODO)
# Modeling and texturing a new part (TODO)
# Configuring the part in Unity (TODO)
# Adding a part icon (TODO)
# Building and deploying the mode (TODO)
# Debugging the mod in KSP2 (TODO)

== How to read KSP2 source code? ==
How to read KSP2 source code? (TODO)</text>
      <sha1>8f7xc5hcskn1ib0m74uh4uxhk7oq63k</sha1>
    </revision>
    <revision>
      <id>172</id>
      <parentid>171</parentid>
      <timestamp>2023-10-28T10:45:40Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added category</comment>
      <origin>172</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="525" sha1="e61t42lggfck6zvabxc42e7agc6kk0b" xml:space="preserve">Welcome to the KSP2 mod tutorials home page. Follow the instructions to create your first mod!

== How to make a KSP2 mod? ==

# Getting started
## [[Setting up a Development Environment]]
## Initializing your project (TODO)
# Modeling and texturing a new part (TODO)
# Configuring the part in Unity (TODO)
# Adding a part icon (TODO)
# Building and deploying the mode (TODO)
# Debugging the mod in KSP2 (TODO)

== How to read KSP2 source code? ==
How to read KSP2 source code? (TODO)

&lt;nowiki&gt;[[Category:Tutorials]]&lt;/nowiki&gt;</text>
      <sha1>e61t42lggfck6zvabxc42e7agc6kk0b</sha1>
    </revision>
    <revision>
      <id>173</id>
      <parentid>172</parentid>
      <timestamp>2023-10-28T10:47:26Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Added category</comment>
      <origin>173</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="507" sha1="4krdwi8vfez69y1wz2fnis9hd6tr113" xml:space="preserve">Welcome to the KSP2 mod tutorials home page. Follow the instructions to create your first mod!

== How to make a KSP2 mod? ==

# Getting started
## [[Setting up a Development Environment]]
## Initializing your project (TODO)
# Modeling and texturing a new part (TODO)
# Configuring the part in Unity (TODO)
# Adding a part icon (TODO)
# Building and deploying the mode (TODO)
# Debugging the mod in KSP2 (TODO)

== How to read KSP2 source code? ==
How to read KSP2 source code? (TODO)
[[Category:Tutorials]]</text>
      <sha1>4krdwi8vfez69y1wz2fnis9hd6tr113</sha1>
    </revision>
    <revision>
      <id>174</id>
      <parentid>173</parentid>
      <timestamp>2023-10-28T10:49:40Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Added entry to set up Unity</comment>
      <origin>174</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="531" sha1="aii9cyos1xyha0w2y2bftpy2fzljkb7" xml:space="preserve">Welcome to the KSP2 mod tutorials home page. Follow the instructions to create your first mod!

== How to make a KSP2 mod? ==

# Getting started
## [[Setting up Unity]]
## [[Setting up a Development Environment]]
## Initializing your project (TODO)
# Modeling and texturing a new part (TODO)
# Configuring the part in Unity (TODO)
# Adding a part icon (TODO)
# Building and deploying the mode (TODO)
# Debugging the mod in KSP2 (TODO)

== How to read KSP2 source code? ==
How to read KSP2 source code? (TODO)
[[Category:Tutorials]]</text>
      <sha1>aii9cyos1xyha0w2y2bftpy2fzljkb7</sha1>
    </revision>
    <revision>
      <id>180</id>
      <parentid>174</parentid>
      <timestamp>2023-10-28T11:05:27Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added new entry</comment>
      <origin>180</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="556" sha1="myn45a64eka812m8z8w4pfxjgyusu4i" xml:space="preserve">Welcome to the KSP2 mod tutorials home page. Follow the instructions to create your first mod!

== How to make a KSP2 mod? ==

# Getting started
## [[Setting up Unity]]
## [[Setting up a Development Environment]]
## Initializing your project (TODO)
# Modeling and texturing a new part (TODO)
# [[Configuring the part in Unity]]
## [[Configuring the mesh]]
# Adding a part icon (TODO)
# Building and deploying the mode (TODO)
# Debugging the mod in KSP2 (TODO)

== How to read KSP2 source code? ==
How to read KSP2 source code? (TODO)
[[Category:Tutorials]]</text>
      <sha1>myn45a64eka812m8z8w4pfxjgyusu4i</sha1>
    </revision>
    <revision>
      <id>213</id>
      <parentid>180</parentid>
      <timestamp>2023-10-30T11:11:27Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Polo moved page [[Tutorials Home Page]] to [[Tutorials Home Page (to be deleted)]]: Page no longer useful</comment>
      <origin>180</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="556" sha1="myn45a64eka812m8z8w4pfxjgyusu4i" xml:space="preserve">Welcome to the KSP2 mod tutorials home page. Follow the instructions to create your first mod!

== How to make a KSP2 mod? ==

# Getting started
## [[Setting up Unity]]
## [[Setting up a Development Environment]]
## Initializing your project (TODO)
# Modeling and texturing a new part (TODO)
# [[Configuring the part in Unity]]
## [[Configuring the mesh]]
# Adding a part icon (TODO)
# Building and deploying the mode (TODO)
# Debugging the mod in KSP2 (TODO)

== How to read KSP2 source code? ==
How to read KSP2 source code? (TODO)
[[Category:Tutorials]]</text>
      <sha1>myn45a64eka812m8z8w4pfxjgyusu4i</sha1>
    </revision>
  </page>
  <page>
    <title>Setting up Unity</title>
    <ns>0</ns>
    <id>59</id>
    <revision>
      <id>175</id>
      <timestamp>2023-10-28T10:57:36Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added content</comment>
      <origin>175</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1739" sha1="f6525u4zddxmf8qukjbeixvhmmbsduk" xml:space="preserve">This page will help you install everything you need to work your on Unity.

== Installing Unity ==

# Download Unity Hub. https://unity.com/download
# Download Unity 2022.3.5f1. https://unity.com/releases/editor/whats-new/2022.3.5
# Click on “Install this version with Unity Hub”.

== Initializing the Unity project ==
As the Unity project is very large (~4 GB), we will use it for all our mods.

# Follow the instructions on this page : https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Importing ThunderKit ===

# Follow the instructions on this page : https://luxstice.notion.site/Installing-ThunderKit-7e00f13efe804f12a31a9f31d7f9fd6e.

=== Importing Unity KSP tools ===

# Download the package here : https://github.com/SpaceWarpDev/KSP2UnityTools/releases.
# Click on the download file then click on “Import”.

=== Other configurations ===

# In the project explorer, go to Assets &gt; AddressablesAssetData &gt; AssetGroups &gt; Built In Data.
# In the Inspector window, click on “Inspect Top Level Settings”.
# Set the “Shader Bundle Naming Prefix” field to “Default Group GUID”.

&lt;blockquote&gt;Without this manipulation, Unity generates bundles with an ID calculated from the project name. Since we are using the same project for multiple mods, there will be a name conflict for the standard shader that Unity incorporates into all addressables. Using the GUID of the default group will help avoid collisions (you will need to remember to make the mod group the default group).&lt;/blockquote&gt;</text>
      <sha1>f6525u4zddxmf8qukjbeixvhmmbsduk</sha1>
    </revision>
    <revision>
      <id>183</id>
      <parentid>175</parentid>
      <timestamp>2023-10-28T12:15:44Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added category</comment>
      <origin>183</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1768" sha1="gfm7b51rqzuoqx2b9pn2z4w961ta8pp" xml:space="preserve">This page will help you install everything you need to work your on Unity.

== Installing Unity ==

# Download Unity Hub. https://unity.com/download
# Download Unity 2022.3.5f1. https://unity.com/releases/editor/whats-new/2022.3.5
# Click on “Install this version with Unity Hub”.

== Initializing the Unity project ==
As the Unity project is very large (~4 GB), we will use it for all our mods.

# Follow the instructions on this page : https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Importing ThunderKit ===

# Follow the instructions on this page : https://luxstice.notion.site/Installing-ThunderKit-7e00f13efe804f12a31a9f31d7f9fd6e.

=== Importing Unity KSP tools ===

# Download the package here : https://github.com/SpaceWarpDev/KSP2UnityTools/releases.
# Click on the download file then click on “Import”.

=== Other configurations ===

# In the project explorer, go to Assets &gt; AddressablesAssetData &gt; AssetGroups &gt; Built In Data.
# In the Inspector window, click on “Inspect Top Level Settings”.
# Set the “Shader Bundle Naming Prefix” field to “Default Group GUID”.

&lt;blockquote&gt;Without this manipulation, Unity generates bundles with an ID calculated from the project name. Since we are using the same project for multiple mods, there will be a name conflict for the standard shader that Unity incorporates into all addressables. Using the GUID of the default group will help avoid collisions (you will need to remember to make the mod group the default group).&lt;/blockquote&gt;
[[Category:Getting started]]</text>
      <sha1>gfm7b51rqzuoqx2b9pn2z4w961ta8pp</sha1>
    </revision>
    <revision>
      <id>200</id>
      <parentid>183</parentid>
      <timestamp>2023-10-28T16:57:38Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>/* Importing ThunderKit */  Updated text</comment>
      <origin>200</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3166" sha1="oqqucewshi7zio7n08dyaur0rb9jttd" xml:space="preserve">This page will help you install everything you need to work your on Unity.

== Installing Unity ==

# Download Unity Hub. https://unity.com/download
# Download Unity 2022.3.5f1. https://unity.com/releases/editor/whats-new/2022.3.5
# Click on “Install this version with Unity Hub”.

== Initializing the Unity project ==
As the Unity project is very large (~4 GB), we will use it for all our mods.

# Follow the instructions on this page : https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Importing ThunderKit ===
ThunderKit is a package for unity. but its instalation is a bit different from the usual.

# Download the latest version of ThunderKit here : https://github.com/KSP2Community/ThunderKitInstaller/releases.
# Open the file with Unity Hub. When Unity opens, choose "Import" in the import window.
# The ThunderKit Settings window should open, if it doesn’t just go to '''Tools&gt;Thunderkit&gt;Settings''' on the top part of Unity.
# Go to '''Import Configuration''' and on '''Import Project Settings''' change the dropdown to '''Everything.'''
# Go to '''ThunderKit Settings''' and on '''Locate and load game files for project''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported, if asked click '''I made a backup, Go Ahead'''
# If Unity asks you to restart your project, click '''Restart Project'''
# To check if the game was correctly imported, select any game object and on the inspector click '''Add Component''' then search for '''Core Part Data'''.

 Sometimes, the component wont appear right after the import, if so:
 1. Go to your Project window on unity
 2. Open the Packages tree view and scroll to KSP2_x64
 3. Right click and select "Reimport" (DON’T SELECT REIMPORT ALL, it takes way longer)
 4. Wait for the folder to be reimported, once finished you should be good to go
 
 This also fixes if Unity looses track of KSP2’s components like so. If your components look like this, do the same shown above.

=== Importing Unity KSP tools ===

# Download the package here : https://github.com/SpaceWarpDev/KSP2UnityTools/releases.
# Click on the download file then click on “Import”.

=== Other configurations ===

# In the project explorer, go to Assets &gt; AddressablesAssetData &gt; AssetGroups &gt; Built In Data.
# In the Inspector window, click on “Inspect Top Level Settings”.
# Set the “Shader Bundle Naming Prefix” field to “Default Group GUID”.

&lt;blockquote&gt;Without this manipulation, Unity generates bundles with an ID calculated from the project name. Since we are using the same project for multiple mods, there will be a name conflict for the standard shader that Unity incorporates into all addressables. Using the GUID of the default group will help avoid collisions (you will need to remember to make the mod group the default group).&lt;/blockquote&gt;
[[Category:Getting started]]</text>
      <sha1>oqqucewshi7zio7n08dyaur0rb9jttd</sha1>
    </revision>
    <revision>
      <id>202</id>
      <parentid>200</parentid>
      <timestamp>2023-10-28T21:10:06Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <origin>202</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3163" sha1="pj97lud6k9caux5xvdae3cjctkuw312" xml:space="preserve">This page will help you install everything you need to work your on Unity.

== Installing Unity ==

# Download Unity Hub. https://unity.com/download
# Download Unity 2022.3.5f1. https://unity.com/releases/editor/whats-new/2022.3.5
# Click on “Install this version with Unity Hub”.

== Initializing the Unity project ==
As the Unity project is very large (~4 GB), we will use it for all our mods.

# Follow the instructions on this page : https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Importing ThunderKit ===
ThunderKit is a package for unity. but its instalation is a bit different from the usual.

# Download the latest version of ThunderKit here : https://github.com/KSP2Community/ThunderKitInstaller/releases.
# Open the file with Unity Hub. When Unity opens, choose "Import" in the import window.
# The ThunderKit Settings window should open, if it doesn’t just go to '''Tools&gt;Thunderkit&gt;Settings''' on the top part of Unity.
# Go to '''Import Configuration''' and on '''Import Project Settings''' change the dropdown to '''Nothing.'''
# Go to '''ThunderKit Settings''' and on '''Locate and load game files for project''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported, if asked click '''I made a backup, Go Ahead'''
# If Unity asks you to restart your project, click '''Restart Project'''
# To check if the game was correctly imported, select any game object and on the inspector click '''Add Component''' then search for '''Core Part Data'''.

 Sometimes, the component wont appear right after the import, if so:
 1. Go to your Project window on unity
 2. Open the Packages tree view and scroll to KSP2_x64
 3. Right click and select "Reimport" (DON’T SELECT REIMPORT ALL, it takes way longer)
 4. Wait for the folder to be reimported, once finished you should be good to go
 
 This also fixes if Unity looses track of KSP2’s components like so. If your components look like this, do the same shown above.

=== Importing Unity KSP tools ===

# Download the package here : https://github.com/SpaceWarpDev/KSP2UnityTools/releases.
# Click on the download file then click on “Import”.

=== Other configurations ===

# In the project explorer, go to Assets &gt; AddressablesAssetData &gt; AssetGroups &gt; Built In Data.
# In the Inspector window, click on “Inspect Top Level Settings”.
# Set the “Shader Bundle Naming Prefix” field to “Default Group GUID”.

&lt;blockquote&gt;Without this manipulation, Unity generates bundles with an ID calculated from the project name. Since we are using the same project for multiple mods, there will be a name conflict for the standard shader that Unity incorporates into all addressables. Using the GUID of the default group will help avoid collisions (you will need to remember to make the mod group the default group).&lt;/blockquote&gt;
[[Category:Getting started]]</text>
      <sha1>pj97lud6k9caux5xvdae3cjctkuw312</sha1>
    </revision>
    <revision>
      <id>203</id>
      <parentid>202</parentid>
      <timestamp>2023-10-29T13:49:56Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added Installing the addressables</comment>
      <origin>203</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3766" sha1="4jor0pmmgcjjkmzndyhap9ofxpkuqjs" xml:space="preserve">This page will help you install everything you need to work your on Unity.

== Installing Unity ==

# Download Unity Hub. https://unity.com/download
# Download Unity 2022.3.5f1. https://unity.com/releases/editor/whats-new/2022.3.5
# Click on “Install this version with Unity Hub”.

== Initializing the Unity project ==
As the Unity project is very large (~4 GB), we will use it for all our mods.

# Follow the instructions on this page : https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the addressables package ===
Unity doesn’t come with this package natively, so we need to install it. Its easy!

# You start by going into ''Window&gt;Package Manager'' on the top left area of Unity.
# This will open a new window where you can manage '''''almost''''' all the packages inside Unity.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# On the search bar, look for '''Addressables'''. Select it and click install! It will show a couple pop-ups, and once its finished, it will show a green checkmark next to the Addressables’s version.

=== Importing ThunderKit ===
ThunderKit is a package for unity. but its instalation is a bit different from the usual.

# Download the latest version of ThunderKit here : https://github.com/KSP2Community/ThunderKitInstaller/releases.
# Open the file with Unity Hub. When Unity opens, choose "Import" in the import window.
# The ThunderKit Settings window should open, if it doesn’t just go to '''Tools&gt;Thunderkit&gt;Settings''' on the top part of Unity.
# Go to '''Import Configuration''' and on '''Import Project Settings''' change the dropdown to '''Nothing.'''
# Go to '''ThunderKit Settings''' and on '''Locate and load game files for project''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported, if asked click '''I made a backup, Go Ahead'''
# If Unity asks you to restart your project, click '''Restart Project'''
# To check if the game was correctly imported, select any game object and on the inspector click '''Add Component''' then search for '''Core Part Data'''.

 Sometimes, the component wont appear right after the import, if so:
 1. Go to your Project window on unity
 2. Open the Packages tree view and scroll to KSP2_x64
 3. Right click and select "Reimport" (DON’T SELECT REIMPORT ALL, it takes way longer)
 4. Wait for the folder to be reimported, once finished you should be good to go
 
 This also fixes if Unity looses track of KSP2’s components like so. If your components look like this, do the same shown above.

=== Importing Unity KSP tools ===

# Download the package here : https://github.com/SpaceWarpDev/KSP2UnityTools/releases.
# Click on the download file then click on “Import”.

=== Other configurations ===

# In the project explorer, go to Assets &gt; AddressablesAssetData &gt; AssetGroups &gt; Built In Data.
# In the Inspector window, click on “Inspect Top Level Settings”.
# Set the “Shader Bundle Naming Prefix” field to “Default Group GUID”.

&lt;blockquote&gt;Without this manipulation, Unity generates bundles with an ID calculated from the project name. Since we are using the same project for multiple mods, there will be a name conflict for the standard shader that Unity incorporates into all addressables. Using the GUID of the default group will help avoid collisions (you will need to remember to make the mod group the default group).&lt;/blockquote&gt;
[[Category:Getting started]]</text>
      <sha1>4jor0pmmgcjjkmzndyhap9ofxpkuqjs</sha1>
    </revision>
    <revision>
      <id>204</id>
      <parentid>203</parentid>
      <timestamp>2023-10-29T16:34:50Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Updated ThunderKit install</comment>
      <origin>204</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4083" sha1="n3v3kni4h9288pfjjy0j1hmk5nr7xgy" xml:space="preserve">This page will help you install everything you need to work your on Unity.

== Installing Unity ==

# Download Unity Hub. https://unity.com/download
# Download Unity 2022.3.5f1. https://unity.com/releases/editor/whats-new/2022.3.5
# Click on “Install this version with Unity Hub”.

== Initializing the Unity project ==
As the Unity project is very large (~4 GB), we will use it for all our mods.

# Follow the instructions on this page : https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the addressables package ===
Unity doesn’t come with this package natively, so we need to install it. Its easy!

# You start by going into ''Window&gt;Package Manager'' on the top left area of Unity.
# This will open a new window where you can manage '''''almost''''' all the packages inside Unity.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# On the search bar, look for '''Addressables'''. Select it and click install! It will show a couple pop-ups, and once its finished, it will show a green checkmark next to the Addressables’s version.

=== Importing ThunderKit ===
ThunderKit is a package for unity. but its instalation is a bit different from the usual.

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on Add Package from Git URL and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/PassivePicasso/ThunderKit.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
# Download the latest version of ThunderKit Installer here : https://github.com/KSP2Community/ThunderKitInstaller/releases.
# Open the file with Unity Hub. When Unity opens, choose "Import" in the import window.
# Go to '''Tools&gt;Thunderkit&gt;Reinstall'''.
# The ThunderKit Settings window should open, if it doesn’t just go to '''Tools&gt;Thunderkit&gt;Settings''' on the top part of Unity.
# Go to '''Import Configuration''' and on '''Import Project Settings''' change the dropdown to '''Nothing.'''
# Go to '''ThunderKit Settings''' and on '''Locate and load game files for project''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported, if asked click '''I made a backup, Go Ahead'''
# If Unity asks you to restart your project, click '''Restart Project'''
# To check if the game was correctly imported, select any game object and on the inspector click '''Add Component''' then search for '''Core Part Data'''.

 Sometimes, the component wont appear right after the import, if so:
 1. Go to your Project window on unity
 2. Open the Packages tree view and scroll to KSP2_x64
 3. Right click and select "Reimport" (DON’T SELECT REIMPORT ALL, it takes way longer)
 4. Wait for the folder to be reimported, once finished you should be good to go
 
 This also fixes if Unity looses track of KSP2’s components like so. If your components look like this, do the same shown above.

=== Importing Unity KSP tools ===

# Download the package here : https://github.com/SpaceWarpDev/KSP2UnityTools/releases.
# Click on the download file then click on “Import”.

=== Other configurations ===

# In the project explorer, go to Assets &gt; AddressablesAssetData &gt; AssetGroups &gt; Built In Data.
# In the Inspector window, click on “Inspect Top Level Settings”.
# Set the “Shader Bundle Naming Prefix” field to “Default Group GUID”.

&lt;blockquote&gt;Without this manipulation, Unity generates bundles with an ID calculated from the project name. Since we are using the same project for multiple mods, there will be a name conflict for the standard shader that Unity incorporates into all addressables. Using the GUID of the default group will help avoid collisions (you will need to remember to make the mod group the default group).&lt;/blockquote&gt;
[[Category:Getting started]]</text>
      <sha1>n3v3kni4h9288pfjjy0j1hmk5nr7xgy</sha1>
    </revision>
    <revision>
      <id>205</id>
      <parentid>204</parentid>
      <timestamp>2023-10-29T16:40:49Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Updated KSP2UT install</comment>
      <origin>205</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4213" sha1="byi8lizm1i9b7hep4cywqv8r7q9yiar" xml:space="preserve">This page will help you install everything you need to work your on Unity.

== Installing Unity ==

# Download Unity Hub. https://unity.com/download
# Download Unity 2022.3.5f1. https://unity.com/releases/editor/whats-new/2022.3.5
# Click on “Install this version with Unity Hub”.

== Initializing the Unity project ==
As the Unity project is very large (~4 GB), we will use it for all our mods.

# Follow the instructions on this page : https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the addressables package ===
Unity doesn’t come with this package natively, so we need to install it. Its easy!

# You start by going into ''Window&gt;Package Manager'' on the top left area of Unity.
# This will open a new window where you can manage '''''almost''''' all the packages inside Unity.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# On the search bar, look for '''Addressables'''. Select it and click install! It will show a couple pop-ups, and once its finished, it will show a green checkmark next to the Addressables’s version.

=== Importing ThunderKit ===
ThunderKit is a package for unity. but its instalation is a bit different from the usual.

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on Add Package from Git URL and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/PassivePicasso/ThunderKit.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
# Download the latest version of ThunderKit Installer here : https://github.com/KSP2Community/ThunderKitInstaller/releases.
# Open the file with Unity Hub. When Unity opens, choose "Import" in the import window.
# Go to '''Tools&gt;Thunderkit&gt;Reinstall'''.
# The ThunderKit Settings window should open, if it doesn’t just go to '''Tools&gt;Thunderkit&gt;Settings''' on the top part of Unity.
# Go to '''Import Configuration''' and on '''Import Project Settings''' change the dropdown to '''Nothing.'''
# Go to '''ThunderKit Settings''' and on '''Locate and load game files for project''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported, if asked click '''I made a backup, Go Ahead'''
# If Unity asks you to restart your project, click '''Restart Project'''
# To check if the game was correctly imported, select any game object and on the inspector click '''Add Component''' then search for '''Core Part Data'''.

 Sometimes, the component wont appear right after the import, if so:
 1. Go to your Project window on unity
 2. Open the Packages tree view and scroll to KSP2_x64
 3. Right click and select "Reimport" (DON’T SELECT REIMPORT ALL, it takes way longer)
 4. Wait for the folder to be reimported, once finished you should be good to go
 
 This also fixes if Unity looses track of KSP2’s components like so. If your components look like this, do the same shown above.

=== Importing Unity KSP tools ===

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on '''Add Package from Git URL''' and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/KSP2Community/KSP2UnityTools.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.

=== Other configurations ===

# In the project explorer, go to Assets &gt; AddressablesAssetData &gt; AssetGroups &gt; Built In Data.
# In the Inspector window, click on “Inspect Top Level Settings”.
# Set the “Shader Bundle Naming Prefix” field to “Default Group GUID”.

&lt;blockquote&gt;Without this manipulation, Unity generates bundles with an ID calculated from the project name. Since we are using the same project for multiple mods, there will be a name conflict for the standard shader that Unity incorporates into all addressables. Using the GUID of the default group will help avoid collisions (you will need to remember to make the mod group the default group).&lt;/blockquote&gt;
[[Category:Getting started]]</text>
      <sha1>byi8lizm1i9b7hep4cywqv8r7q9yiar</sha1>
    </revision>
    <revision>
      <id>206</id>
      <parentid>205</parentid>
      <timestamp>2023-10-29T16:46:23Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Removed advice to only have one Unity project per mod.</comment>
      <origin>206</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3587" sha1="cli6oic3osskfizz5v7eaaia1cdvru9" xml:space="preserve">This page will help you install everything you need to work your on Unity.

== Installing Unity ==

# Download Unity Hub. https://unity.com/download
# Download Unity 2022.3.5f1. https://unity.com/releases/editor/whats-new/2022.3.5
# Click on “Install this version with Unity Hub”.

== Initializing the Unity project ==
# Follow the instructions on this page: https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the addressables package ===
Unity doesn’t come with this package natively, so we need to install it. Its easy!

# You start by going into ''Window&gt;Package Manager'' on the top left area of Unity.
# This will open a new window where you can manage '''''almost''''' all the packages inside Unity.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# On the search bar, look for '''Addressables'''. Select it and click install! It will show a couple pop-ups, and once its finished, it will show a green checkmark next to the Addressables’s version.

=== Importing ThunderKit ===
ThunderKit is a package for unity. but its instalation is a bit different from the usual.

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on Add Package from Git URL and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/PassivePicasso/ThunderKit.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
# Download the latest version of ThunderKit Installer here : https://github.com/KSP2Community/ThunderKitInstaller/releases.
# Open the file with Unity Hub. When Unity opens, choose "Import" in the import window.
# Go to '''Tools&gt;Thunderkit&gt;Reinstall'''.
# The ThunderKit Settings window should open, if it doesn’t just go to '''Tools&gt;Thunderkit&gt;Settings''' on the top part of Unity.
# Go to '''Import Configuration''' and on '''Import Project Settings''' change the dropdown to '''Nothing.'''
# Go to '''ThunderKit Settings''' and on '''Locate and load game files for project''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported, if asked click '''I made a backup, Go Ahead'''
# If Unity asks you to restart your project, click '''Restart Project'''
# To check if the game was correctly imported, select any game object and on the inspector click '''Add Component''' then search for '''Core Part Data'''.

 Sometimes, the component wont appear right after the import, if so:
 1. Go to your Project window on unity
 2. Open the Packages tree view and scroll to KSP2_x64
 3. Right click and select "Reimport" (DON’T SELECT REIMPORT ALL, it takes way longer)
 4. Wait for the folder to be reimported, once finished you should be good to go
 
 This also fixes if Unity looses track of KSP2’s components like so. If your components look like this, do the same shown above.

=== Importing Unity KSP tools ===

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on '''Add Package from Git URL''' and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/KSP2Community/KSP2UnityTools.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
 If it's already installed, you'll need to delete the whole "KSP2UnityTools" folder from your Assets folder and then do the installation.
[[Category:Getting started]]</text>
      <sha1>cli6oic3osskfizz5v7eaaia1cdvru9</sha1>
    </revision>
    <revision>
      <id>207</id>
      <parentid>206</parentid>
      <timestamp>2023-10-30T10:37:56Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added Setting up swinfo.json and addressables section</comment>
      <origin>207</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4683" sha1="krsulgqk13rwooqhd67jo25qxcldgwl" xml:space="preserve">This page will help you install everything you need to work your on Unity.

== Installing Unity ==

# Download Unity Hub. https://unity.com/download
# Download Unity 2022.3.5f1. https://unity.com/releases/editor/whats-new/2022.3.5
# Click on “Install this version with Unity Hub”.

== Initializing the Unity project ==
# Follow the instructions on this page: https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the addressables package ===
Unity doesn’t come with this package natively, so we need to install it. Its easy!

# You start by going into ''Window&gt;Package Manager'' on the top left area of Unity.
# This will open a new window where you can manage '''''almost''''' all the packages inside Unity.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# On the search bar, look for '''Addressables'''. Select it and click install! It will show a couple pop-ups, and once its finished, it will show a green checkmark next to the Addressables’s version.

=== Importing ThunderKit ===
ThunderKit is a package for unity. but its instalation is a bit different from the usual.

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on Add Package from Git URL and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/PassivePicasso/ThunderKit.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
# Download the latest version of ThunderKit Installer here : https://github.com/KSP2Community/ThunderKitInstaller/releases.
# Open the file with Unity Hub. When Unity opens, choose "Import" in the import window.
# Go to '''Tools&gt;Thunderkit&gt;Reinstall'''.
# The ThunderKit Settings window should open, if it doesn’t just go to '''Tools&gt;Thunderkit&gt;Settings''' on the top part of Unity.
# Go to '''Import Configuration''' and on '''Import Project Settings''' change the dropdown to '''Nothing.'''
# Go to '''ThunderKit Settings''' and on '''Locate and load game files for project''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported, if asked click '''I made a backup, Go Ahead'''
# If Unity asks you to restart your project, click '''Restart Project'''
# To check if the game was correctly imported, select any game object and on the inspector click '''Add Component''' then search for '''Core Part Data'''.

 Sometimes, the component wont appear right after the import, if so:
 1. Go to your Project window on unity
 2. Open the Packages tree view and scroll to KSP2_x64
 3. Right click and select "Reimport" (DON’T SELECT REIMPORT ALL, it takes way longer)
 4. Wait for the folder to be reimported, once finished you should be good to go
 
 This also fixes if Unity looses track of KSP2’s components like so. If your components look like this, do the same shown above.

=== Importing Unity KSP tools ===

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on '''Add Package from Git URL''' and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/KSP2Community/KSP2UnityTools.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
 If it's already installed, you'll need to delete the whole "KSP2UnityTools" folder from your Assets folder and then do the installation.

=== Setting up swinfo.json and addressables ===

# After installing KSP2UnityTools, go to '''Tools&gt;KSP2 Unity Tools.'''
# Do either one of two following steps.
# '''If you have a mod you want to copy addressables into''':
## Select "Copy Addressables Only" as the '''Build Mode'''.
## In the build path select the addressables for your mod.
## At the bottom of the window, press '''Import swinfo.json''' and select your mods swinfo.json.
# '''If you want to build a full mod from Unity''':
## Set '''Build Mode''' to "Everything".
## Set build path to where you want to output your packaged mod (you can set this later, just set it before build).
## If you already have a swinfo, you can skip the next steps using the import swinfo.json as described in the previous section.
## Input your mods ID (this is critically important).
## Setup the rest of your mods info (these correspond to the swinfo).
# After doing one of the previous two processes, press '''Set Up Addressables From Mod Info''', and it should automatically set up everything needed in addressables so you dont need to touch it.

[[Category:Getting started]]</text>
      <sha1>krsulgqk13rwooqhd67jo25qxcldgwl</sha1>
    </revision>
    <revision>
      <id>222</id>
      <parentid>207</parentid>
      <timestamp>2023-10-30T11:33:54Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Added warning about the new Unity version</comment>
      <origin>222</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4716" sha1="sdlq7yyyusqdi8b6e2qzgfh7twz3mwh" xml:space="preserve">This page will help you install everything you need to work your on Unity.

== Installing Unity ==

# Download Unity Hub. https://unity.com/download
# Download Unity 2022.3.5f1. https://unity.com/releases/editor/whats-new/2022.3.5
# Click on “Install this version with Unity Hub”.

== Initializing the Unity project ==
# Follow the instructions on this page: https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3 but use Unity 2022.3.5f1 instead.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the addressables package ===
Unity doesn’t come with this package natively, so we need to install it. Its easy!

# You start by going into ''Window&gt;Package Manager'' on the top left area of Unity.
# This will open a new window where you can manage '''''almost''''' all the packages inside Unity.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# On the search bar, look for '''Addressables'''. Select it and click install! It will show a couple pop-ups, and once its finished, it will show a green checkmark next to the Addressables’s version.

=== Importing ThunderKit ===
ThunderKit is a package for unity. but its instalation is a bit different from the usual.

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on Add Package from Git URL and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/PassivePicasso/ThunderKit.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
# Download the latest version of ThunderKit Installer here : https://github.com/KSP2Community/ThunderKitInstaller/releases.
# Open the file with Unity Hub. When Unity opens, choose "Import" in the import window.
# Go to '''Tools&gt;Thunderkit&gt;Reinstall'''.
# The ThunderKit Settings window should open, if it doesn’t just go to '''Tools&gt;Thunderkit&gt;Settings''' on the top part of Unity.
# Go to '''Import Configuration''' and on '''Import Project Settings''' change the dropdown to '''Nothing.'''
# Go to '''ThunderKit Settings''' and on '''Locate and load game files for project''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported, if asked click '''I made a backup, Go Ahead'''
# If Unity asks you to restart your project, click '''Restart Project'''
# To check if the game was correctly imported, select any game object and on the inspector click '''Add Component''' then search for '''Core Part Data'''.

 Sometimes, the component wont appear right after the import, if so:
 1. Go to your Project window on unity
 2. Open the Packages tree view and scroll to KSP2_x64
 3. Right click and select "Reimport" (DON’T SELECT REIMPORT ALL, it takes way longer)
 4. Wait for the folder to be reimported, once finished you should be good to go
 
 This also fixes if Unity looses track of KSP2’s components like so. If your components look like this, do the same shown above.

=== Importing Unity KSP tools ===

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on '''Add Package from Git URL''' and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/KSP2Community/KSP2UnityTools.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
 If it's already installed, you'll need to delete the whole "KSP2UnityTools" folder from your Assets folder and then do the installation.

=== Setting up swinfo.json and addressables ===

# After installing KSP2UnityTools, go to '''Tools&gt;KSP2 Unity Tools.'''
# Do either one of two following steps.
# '''If you have a mod you want to copy addressables into''':
## Select "Copy Addressables Only" as the '''Build Mode'''.
## In the build path select the addressables for your mod.
## At the bottom of the window, press '''Import swinfo.json''' and select your mods swinfo.json.
# '''If you want to build a full mod from Unity''':
## Set '''Build Mode''' to "Everything".
## Set build path to where you want to output your packaged mod (you can set this later, just set it before build).
## If you already have a swinfo, you can skip the next steps using the import swinfo.json as described in the previous section.
## Input your mods ID (this is critically important).
## Setup the rest of your mods info (these correspond to the swinfo).
# After doing one of the previous two processes, press '''Set Up Addressables From Mod Info''', and it should automatically set up everything needed in addressables so you dont need to touch it.

[[Category:Getting started]]</text>
      <sha1>sdlq7yyyusqdi8b6e2qzgfh7twz3mwh</sha1>
    </revision>
    <revision>
      <id>239</id>
      <parentid>222</parentid>
      <timestamp>2023-11-05T11:43:23Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Fix typo</comment>
      <origin>239</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4710" sha1="phl9wnbrhhjm83ysd9hhe3ehfy5o25a" xml:space="preserve">This page will help you install everything you need to work your on Unity.

== Installing Unity ==

# Download Unity Hub. https://unity.com/download
# Download Unity 2022.3.5f1. https://unity.com/releases/editor/whats-new/2022.3.5
# Click on “Install this version with Unity Hub”.

== Initializing the Unity project ==
# Follow the instructions on this page: https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3 but use Unity 2022.3.5f1 instead.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the addressables package ===
Unity doesn’t come with this package natively, so we need to install it. Its easy!

# You start by going into ''Window&gt;Package Manager'' on the top left area of Unity.
# This will open a new window where you can manage '''''almost''''' all the packages inside Unity.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# On the search bar, look for '''Addressables'''. Select it and click install! It will show a couple pop-ups, and once its finished, it will show a green checkmark next to the Addressables’s version.

=== Importing ThunderKit ===
ThunderKit is a package for unity. but its instalation is a bit different from the usual.

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on Add Package from Git URL and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/PassivePicasso/ThunderKit.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
# Download the latest version of ThunderKit Installer here : https://github.com/KSP2Community/ThunderKitInstaller/releases.
# Open the file with Unity Hub. When Unity opens, choose "Import" in the import window.
# Go to '''Tools&gt;Thunderkit&gt;Reinstall'''.
# The ThunderKit Settings window should open, if it doesn’t just go to '''Tools&gt;Thunderkit&gt;Settings''' on the top part of Unity.
# Go to '''Import Configuration''' and on '''Import Project Settings''' change the dropdown to '''Nothing.'''
# Go to '''ThunderKit Settings''' and on '''Locate and load game files for project''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported, if asked click '''I made a backup, Go Ahead'''
# If Unity asks you to restart your project, click '''Restart Project'''
# To check if the game was correctly imported, select any game object and on the inspector click '''Add Component''' then search for '''Core Part Data'''.

 Sometimes, the component wont appear right after the import, if so:
 1. Go to your Project window on unity
 2. Open the Packages tree view and scroll to KSP2_x64
 3. Right click and select "Reimport" (DON’T SELECT REIMPORT ALL, it takes way longer)
 4. Wait for the folder to be reimported, once finished you should be good to go
 
 This also fixes if Unity looses track of KSP2’s components like so. If your components look like this, do the same shown above.

=== Importing Unity KSP tools ===

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on '''Add Package from Git URL''' and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/KSP2Community/KSP2UnityTools.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
 If it's already installed, you'll need to delete the whole "KSP2UnityTools" folder from your Assets folder and then do the installation.

=== Setting up swinfo.json and addressables ===

# After installing KSP2UnityTools, go to '''Tools&gt;KSP2 Unity Tools.'''
# Do either one of two following steps.
# '''If you have a mod you want to copy addressables into''':
## Select "Copy Assets Only" as the '''Build Mode'''.
## In the build path select the addressables for your mod.
## At the bottom of the window, press '''Import swinfo.json''' and select your mods swinfo.json.
# '''If you want to build a full mod from Unity''':
## Set '''Build Mode''' to "Everything".
## Set build path to where you want to output your packaged mod (you can set this later, just set it before build).
## If you already have a swinfo, you can skip the next steps using the import swinfo.json as described in the previous section.
## Input your mods ID (this is critically important).
## Setup the rest of your mods info (these correspond to the swinfo).
# After doing one of the previous two processes, press '''Set Up Addressables From Mod Info''', and it should automatically set up everything needed in addressables so you dont need to touch it.

[[Category:Getting started]]</text>
      <sha1>phl9wnbrhhjm83ysd9hhe3ehfy5o25a</sha1>
    </revision>
    <revision>
      <id>254</id>
      <parentid>239</parentid>
      <timestamp>2023-12-04T20:41:04Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Made Installing Unity clearer</comment>
      <origin>254</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4741" sha1="98gnikin4ube7x3jv8mmdcuc843ojot" xml:space="preserve">This page will help you install everything you need to work your on Unity.

== Installing Unity ==

# Download Unity Hub from https://unity.com/download.
# Download Unity 2022.3.5f1 by clicking on the “Install this version with Unity Hub” link on this page: https://unity.com/releases/editor/whats-new/2022.3.5.

== Initializing the Unity project ==
# Follow the instructions on this page: https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3 but use Unity 2022.3.5f1 instead.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the addressables package ===
Unity doesn’t come with this package natively, so we need to install it. Its easy!

# You start by going into ''Window&gt;Package Manager'' on the top left area of Unity.
# This will open a new window where you can manage '''''almost''''' all the packages inside Unity.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# On the search bar, look for '''Addressables'''. Select it and click install! It will show a couple pop-ups, and once its finished, it will show a green checkmark next to the Addressables’s version.

=== Importing ThunderKit ===
ThunderKit is a package for unity. but its instalation is a bit different from the usual.

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on Add Package from Git URL and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/PassivePicasso/ThunderKit.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
# Download the latest version of ThunderKit Installer here : https://github.com/KSP2Community/ThunderKitInstaller/releases.
# Open the file with Unity Hub. When Unity opens, choose "Import" in the import window.
# Go to '''Tools&gt;Thunderkit&gt;Reinstall'''.
# The ThunderKit Settings window should open, if it doesn’t just go to '''Tools&gt;Thunderkit&gt;Settings''' on the top part of Unity.
# Go to '''Import Configuration''' and on '''Import Project Settings''' change the dropdown to '''Nothing.'''
# Go to '''ThunderKit Settings''' and on '''Locate and load game files for project''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported, if asked click '''I made a backup, Go Ahead'''
# If Unity asks you to restart your project, click '''Restart Project'''
# To check if the game was correctly imported, select any game object and on the inspector click '''Add Component''' then search for '''Core Part Data'''.

 Sometimes, the component wont appear right after the import, if so:
 1. Go to your Project window on unity
 2. Open the Packages tree view and scroll to KSP2_x64
 3. Right click and select "Reimport" (DON’T SELECT REIMPORT ALL, it takes way longer)
 4. Wait for the folder to be reimported, once finished you should be good to go
 
 This also fixes if Unity looses track of KSP2’s components like so. If your components look like this, do the same shown above.

=== Importing Unity KSP tools ===

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on '''Add Package from Git URL''' and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/KSP2Community/KSP2UnityTools.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
 If it's already installed, you'll need to delete the whole "KSP2UnityTools" folder from your Assets folder and then do the installation.

=== Setting up swinfo.json and addressables ===

# After installing KSP2UnityTools, go to '''Tools&gt;KSP2 Unity Tools.'''
# Do either one of two following steps.
# '''If you have a mod you want to copy addressables into''':
## Select "Copy Assets Only" as the '''Build Mode'''.
## In the build path select the addressables for your mod.
## At the bottom of the window, press '''Import swinfo.json''' and select your mods swinfo.json.
# '''If you want to build a full mod from Unity''':
## Set '''Build Mode''' to "Everything".
## Set build path to where you want to output your packaged mod (you can set this later, just set it before build).
## If you already have a swinfo, you can skip the next steps using the import swinfo.json as described in the previous section.
## Input your mods ID (this is critically important).
## Setup the rest of your mods info (these correspond to the swinfo).
# After doing one of the previous two processes, press '''Set Up Addressables From Mod Info''', and it should automatically set up everything needed in addressables so you dont need to touch it.

[[Category:Getting started]]</text>
      <sha1>98gnikin4ube7x3jv8mmdcuc843ojot</sha1>
    </revision>
    <revision>
      <id>274</id>
      <parentid>254</parentid>
      <timestamp>2023-12-29T18:37:25Z</timestamp>
      <contributor>
        <username>Cheese</username>
        <id>7</id>
      </contributor>
      <comment>Tell people to use KSP2UT to fix unity</comment>
      <origin>274</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4565" sha1="op0xb9ine0qz9ldmdddj1gxoowmjno6" xml:space="preserve">This page will help you install everything you need to work your on Unity.

== Installing Unity ==

# Download Unity Hub from https://unity.com/download.
# Download Unity 2022.3.5f1 by clicking on the “Install this version with Unity Hub” link on this page: https://unity.com/releases/editor/whats-new/2022.3.5.

== Initializing the Unity project ==
# Follow the instructions on this page: https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3 but use Unity 2022.3.5f1 instead.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the addressables package ===
Unity doesn’t come with this package natively, so we need to install it. Its easy!

# You start by going into ''Window&gt;Package Manager'' on the top left area of Unity.
# This will open a new window where you can manage '''''almost''''' all the packages inside Unity.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# On the search bar, look for '''Addressables'''. Select it and click install! It will show a couple pop-ups, and once its finished, it will show a green checkmark next to the Addressables’s version.

=== Importing ThunderKit ===
ThunderKit is a package for unity. but its instalation is a bit different from the usual.

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on Add Package from Git URL and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/PassivePicasso/ThunderKit.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
# Download the latest version of ThunderKit Installer here : https://github.com/KSP2Community/ThunderKitInstaller/releases.
# Open the file with Unity Hub. When Unity opens, choose "Import" in the import window.
# Go to '''Tools&gt;Thunderkit&gt;Reinstall'''.
# The ThunderKit Settings window should open, if it doesn’t just go to '''Tools&gt;Thunderkit&gt;Settings''' on the top part of Unity.
# Go to '''Import Configuration''' and on '''Import Project Settings''' change the dropdown to '''Nothing.'''
# Go to '''ThunderKit Settings''' and on '''Locate and load game files for project''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported, if asked click '''I made a backup, Go Ahead'''
# If Unity asks you to restart your project, click '''Restart Project'''
# To check if the game was correctly imported, select any game object and on the inspector click '''Add Component''' then search for '''Core Part Data'''.

 Sometimes, the component wont appear right after the import, if so:
 1. Skip to the step for Importing KSP2 Unity Tools, and use the Tools/Fix Unity button
 
 This also fixes if Unity looses track of KSP2’s components like so. If your components look like this, do the same shown above.

=== Importing Unity KSP tools ===

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on '''Add Package from Git URL''' and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/KSP2Community/KSP2UnityTools.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
 If it's already installed, you'll need to delete the whole "KSP2UnityTools" folder from your Assets folder and then do the installation.

=== Setting up swinfo.json and addressables ===

# After installing KSP2UnityTools, go to '''Tools&gt;KSP2 Unity Tools.'''
# Do either one of two following steps.
# '''If you have a mod you want to copy addressables into''':
## Select "Copy Assets Only" as the '''Build Mode'''.
## In the build path select the addressables for your mod.
## At the bottom of the window, press '''Import swinfo.json''' and select your mods swinfo.json.
# '''If you want to build a full mod from Unity''':
## Set '''Build Mode''' to "Everything".
## Set build path to where you want to output your packaged mod (you can set this later, just set it before build).
## If you already have a swinfo, you can skip the next steps using the import swinfo.json as described in the previous section.
## Input your mods ID (this is critically important).
## Setup the rest of your mods info (these correspond to the swinfo).
# After doing one of the previous two processes, press '''Set Up Addressables From Mod Info''', and it should automatically set up everything needed in addressables so you dont need to touch it.

[[Category:Getting started]]</text>
      <sha1>op0xb9ine0qz9ldmdddj1gxoowmjno6</sha1>
    </revision>
    <revision>
      <id>275</id>
      <parentid>274</parentid>
      <timestamp>2023-12-31T02:05:55Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Updated Importing ThunderKit</comment>
      <origin>275</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4455" sha1="cwdcyx9xw99k0l0nbp9bjl344kxcryc" xml:space="preserve">This page will help you install everything you need to work your on Unity.

== Installing Unity ==

# Download Unity Hub from https://unity.com/download.
# Download Unity 2022.3.5f1 by clicking on the “Install this version with Unity Hub” link on this page: https://unity.com/releases/editor/whats-new/2022.3.5.

== Initializing the Unity project ==
# Follow the instructions on this page: https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3 but use Unity 2022.3.5f1 instead.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the addressables package ===
Unity doesn’t come with this package natively, so we need to install it. Its easy!

# You start by going into ''Window&gt;Package Manager'' on the top left area of Unity.
# This will open a new window where you can manage '''''almost''''' all the packages inside Unity.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# On the search bar, look for '''Addressables'''. Select it and click install! It will show a couple pop-ups, and once its finished, it will show a green checkmark next to the Addressables’s version.

=== Importing ThunderKit ===
ThunderKit is a package for unity. but its instalation is a bit different from the usual.

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on Add Package from Git URL and paste &lt;code&gt;https://github.com/PassivePicasso/ThunderKit.git#at3-update&lt;/code&gt; and click Add.
#
# The ThunderKit Settings window should open, if it doesn’t just go to '''Tools&gt;Thunderkit&gt;Settings''' on the top part of Unity.
# Go to '''Import Configuration''' and on '''Import Project Settings''' change the dropdown to '''Everything.'''
# Go to '''ThunderKit Settings''' and in '''Locate and load game files for project,''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported, if asked, click '''I made a backup, Go Ahead'''
# If Unity asks you to restart your project to disable the assembly importer, click '''Restart Project'''. It may ask you a second time after the import is finished, this time do not restart.
# To check if the game was correctly imported, select any game object and on the inspector click '''Add Component''' then search for '''Core Part Data'''.

 Sometimes, the component wont appear right after the import, if so:
 1. Skip to the step for Importing KSP2 Unity Tools, and use the Tools/Fix Unity button
 
 This also fixes if Unity looses track of KSP2’s components like so. If your components look like this, do the same shown above.

=== Importing Unity KSP tools ===

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on '''Add Package from Git URL''' and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/KSP2Community/KSP2UnityTools.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
 If you already had an earlier version installed, you will need to delete the whole "KSP2UnityTools" folder from your Assets folder and then do the installation.

=== Setting up swinfo.json and addressables ===

# After installing KSP2UnityTools, go to '''Tools&gt;KSP2 Unity Tools.'''
# Do either one of two following steps.
# '''If you have a mod you want to copy addressables into''':
## Select "Copy Assets Only" as the '''Build Mode'''.
## In the build path select the addressables for your mod.
## At the bottom of the window, press '''Import swinfo.json''' and select your mods swinfo.json.
# '''If you want to build a full mod from Unity''':
## Set '''Build Mode''' to "Everything".
## Set build path to where you want to output your packaged mod (you can set this later, just set it before build).
## If you already have a swinfo, you can skip the next steps using the import swinfo.json as described in the previous section.
## Input your mods ID (this is critically important).
## Setup the rest of your mods info (these correspond to the swinfo).
# After doing one of the previous two processes, press '''Set Up Addressables From Mod Info''', and it should automatically set up everything needed in addressables so you dont need to touch it.

[[Category:Getting started]]</text>
      <sha1>cwdcyx9xw99k0l0nbp9bjl344kxcryc</sha1>
    </revision>
    <revision>
      <id>276</id>
      <parentid>275</parentid>
      <timestamp>2023-12-31T02:16:33Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Minor grammar/wording edits</comment>
      <origin>276</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4647" sha1="h7c5os1h14xbyy5tvx313spt1qgw28s" xml:space="preserve">This page will help you install everything you need to use Unity for KSP2 modding.

== Installing Unity ==

# Download Unity Hub from https://unity.com/download.
# Download Unity 2022.3.5f1 by clicking on the “Install this version with Unity Hub” link on this page: https://unity.com/releases/editor/whats-new/2022.3.5.

== Initializing the Unity project ==
# Follow the instructions on this page: https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3 but use Unity 2022.3.5f1 instead.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the addressables package ===
Unity doesn’t come with this package natively, so we need to install it. It's easy!

# You start by going into ''Window&gt;Package Manager'' on the top left area of Unity.
# This will open a new window where you can manage '''''almost''''' all the packages inside Unity.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# In the search bar, look for '''Addressables'''. Select it and click install! It will show a couple pop-ups, and once it is finished, it will show a green checkmark next to the Addressables package version.

=== Importing ThunderKit ===
ThunderKit is a package for Unity, however it is not hosted in the official Unity package repository, so it needs to be installed directly from its GitHub repository.

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign in the top left corner of the window that opens, after that click on Add Package from Git URL and paste &lt;code&gt;https://github.com/PassivePicasso/ThunderKit.git#at3-update&lt;/code&gt; and click Add.
#
# The ThunderKit Settings window should open, if it doesn’t, just go to '''Tools&gt;Thunderkit&gt;Settings''' in the toolbar at the top of Unity.
# Go to '''Import Configuration''' and in '''Import Project Settings,''' change the dropdown to '''Everything.'''
# Go to '''ThunderKit Settings''' and in '''Locate and load game files for project,''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported. If asked, click '''I made a backup, Go Ahead.'''
# If Unity asks you to restart your project to disable the assembly updater, click '''Restart Project'''. It may ask you a second time after the import is finished, this time do not restart.
# To check if the game was correctly imported, select or create any game object, and in the inspector click '''Add Component''' and search for '''Core Part Data'''.

 Sometimes, the component wont appear right after the import, if so:
 Skip to the step for Importing KSP2 Unity Tools, and use the Tools/Fix Unity button.
 You will also need to use this button if the KSP2 components on your objects break, displaying a yellow warning triangle. With Unity 2022, this seems to happen on almost every Unity restart.

=== Importing Unity KSP tools ===

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign in the top left corner of the window that opens, after that click on '''Add Package from Git URL''' and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/KSP2Community/KSP2UnityTools.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
 If you already had an earlier version installed, you will need to delete the whole "KSP2UnityTools" folder from your Assets folder and then do the installation.

=== Setting up swinfo.json and addressables ===

# After installing KSP2UnityTools, go to '''Tools&gt;KSP2 Unity Tools.'''
# Follow one of two following steps, depending on which applies for you:
# '''If you have a mod you want to copy addressables into''':
## Select "Copy Assets Only" as the '''Build Mode'''.
## In the build path select the addressables for your mod.
## At the bottom of the window, press '''Import swinfo.json''' and select your mods swinfo.json.
# '''If you want to build a full mod from Unity''':
## Set '''Build Mode''' to "Everything".
## Set build path to where you want to output your packaged mod (you can set this later, just set it before build).
## If you already have a swinfo.json file, you can skip the next steps using the import swinfo.json button as described in the previous section.
## Input your mod's ID (this is critically important).
## Setup the rest of your mod's info (these correspond to the swinfo).
# After doing one of the previous two processes, press '''Set Up Addressables From Mod Info''', and it should automatically set up the addressables groups for you.

[[Category:Getting started]]</text>
      <sha1>h7c5os1h14xbyy5tvx313spt1qgw28s</sha1>
    </revision>
    <revision>
      <id>277</id>
      <parentid>276</parentid>
      <timestamp>2023-12-31T02:21:53Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>/* Installing the addressables package */</comment>
      <origin>277</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4652" sha1="c6y9x2df0f9ieo71b4pmld7foyr95so" xml:space="preserve">This page will help you install everything you need to use Unity for KSP2 modding.

== Installing Unity ==

# Download Unity Hub from https://unity.com/download.
# Download Unity 2022.3.5f1 by clicking on the “Install this version with Unity Hub” link on this page: https://unity.com/releases/editor/whats-new/2022.3.5.

== Initializing the Unity project ==
# Follow the instructions on this page: https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3 but use Unity 2022.3.5f1 instead.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the addressables package ===
Unity doesn’t come with this package natively, so we need to install it first:

# Open the Package Manager by clicking '''Window&gt;Package Manager''' in the toolbar at the top of Unity.
# This will open a new window where you can manage most of the packages in your project.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# In the search bar, look for '''Addressables'''. Select it and click Install. It will show a couple pop-ups, and once it is finished, it will show a green checkmark next to the Addressables package version.

=== Importing ThunderKit ===
ThunderKit is a package for Unity, however it is not hosted in the official Unity package repository, so it needs to be installed directly from its GitHub repository.

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign in the top left corner of the window that opens, after that click on Add Package from Git URL and paste &lt;code&gt;https://github.com/PassivePicasso/ThunderKit.git#at3-update&lt;/code&gt; and click Add.
#
# The ThunderKit Settings window should open, if it doesn’t, just go to '''Tools&gt;Thunderkit&gt;Settings''' in the toolbar at the top of Unity.
# Go to '''Import Configuration''' and in '''Import Project Settings,''' change the dropdown to '''Everything.'''
# Go to '''ThunderKit Settings''' and in '''Locate and load game files for project,''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported. If asked, click '''I made a backup, Go Ahead.'''
# If Unity asks you to restart your project to disable the assembly updater, click '''Restart Project'''. It may ask you a second time after the import is finished, this time do not restart.
# To check if the game was correctly imported, select or create any game object, and in the inspector click '''Add Component''' and search for '''Core Part Data'''.

 Sometimes, the component wont appear right after the import, if so:
 Skip to the step for Importing KSP2 Unity Tools, and use the Tools/Fix Unity button.
 You will also need to use this button if the KSP2 components on your objects break, displaying a yellow warning triangle. With Unity 2022, this seems to happen on almost every Unity restart.

=== Importing Unity KSP tools ===

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign in the top left corner of the window that opens, after that click on '''Add Package from Git URL''' and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/KSP2Community/KSP2UnityTools.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
 If you already had an earlier version installed, you will need to delete the whole "KSP2UnityTools" folder from your Assets folder and then do the installation.

=== Setting up swinfo.json and addressables ===

# After installing KSP2UnityTools, go to '''Tools&gt;KSP2 Unity Tools.'''
# Follow one of two following steps, depending on which applies for you:
# '''If you have a mod you want to copy addressables into''':
## Select "Copy Assets Only" as the '''Build Mode'''.
## In the build path select the addressables for your mod.
## At the bottom of the window, press '''Import swinfo.json''' and select your mods swinfo.json.
# '''If you want to build a full mod from Unity''':
## Set '''Build Mode''' to "Everything".
## Set build path to where you want to output your packaged mod (you can set this later, just set it before build).
## If you already have a swinfo.json file, you can skip the next steps using the import swinfo.json button as described in the previous section.
## Input your mod's ID (this is critically important).
## Setup the rest of your mod's info (these correspond to the swinfo).
# After doing one of the previous two processes, press '''Set Up Addressables From Mod Info''', and it should automatically set up the addressables groups for you.

[[Category:Getting started]]</text>
      <sha1>c6y9x2df0f9ieo71b4pmld7foyr95so</sha1>
    </revision>
    <revision>
      <id>278</id>
      <parentid>277</parentid>
      <timestamp>2023-12-31T02:23:29Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>/* Importing ThunderKit */</comment>
      <origin>278</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4653" sha1="2aekjihzoiruy6p3iaps6gy6qecni9t" xml:space="preserve">This page will help you install everything you need to use Unity for KSP2 modding.

== Installing Unity ==

# Download Unity Hub from https://unity.com/download.
# Download Unity 2022.3.5f1 by clicking on the “Install this version with Unity Hub” link on this page: https://unity.com/releases/editor/whats-new/2022.3.5.

== Initializing the Unity project ==
# Follow the instructions on this page: https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3 but use Unity 2022.3.5f1 instead.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the addressables package ===
Unity doesn’t come with this package natively, so we need to install it first:

# Open the Package Manager by clicking '''Window&gt;Package Manager''' in the toolbar at the top of Unity.
# This will open a new window where you can manage most of the packages in your project.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# In the search bar, look for '''Addressables'''. Select it and click Install. It will show a couple pop-ups, and once it is finished, it will show a green checkmark next to the Addressables package version.

=== Importing ThunderKit ===
ThunderKit is a package for Unity, however it is not hosted in the official Unity package repository, so it needs to be installed directly from its GitHub repository.

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign in the top left corner of the window that opens, after that click on Add Package from Git URL and paste &lt;code&gt;https://github.com/PassivePicasso/ThunderKit.git#at3-update&lt;/code&gt; and click Add.
#
# The ThunderKit Settings window should open, if it doesn’t, just go to '''Tools&gt;Thunderkit&gt;Settings''' in the toolbar at the top of Unity.
# Go to '''Import Configuration''' and in '''Import Project Settings,''' change the dropdown to '''Everything.'''
# Go to '''ThunderKit Settings''' and in '''Locate and load game files for project,''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported. If asked, click '''I made a backup, Go Ahead.'''
# If Unity asks you to restart your project to disable the assembly updater, click '''Restart Project'''. It may ask you a second time after the import is finished, this time do not restart.
# To check if the game was correctly imported, select or create any game object, and in the inspector click '''Add Component''' and search for '''Core Part Data'''.

 Sometimes, the component won't appear right after the import, if so:
 Skip to the step for Importing KSP2 Unity Tools, and use the Tools/Fix Unity button.
 You will also need to use this button if the KSP2 components on your objects break, displaying a yellow warning triangle. With Unity 2022, this seems to happen on almost every Unity restart.

=== Importing Unity KSP tools ===

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign in the top left corner of the window that opens, after that click on '''Add Package from Git URL''' and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/KSP2Community/KSP2UnityTools.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
 If you already had an earlier version installed, you will need to delete the whole "KSP2UnityTools" folder from your Assets folder and then do the installation.

=== Setting up swinfo.json and addressables ===

# After installing KSP2UnityTools, go to '''Tools&gt;KSP2 Unity Tools.'''
# Follow one of two following steps, depending on which applies for you:
# '''If you have a mod you want to copy addressables into''':
## Select "Copy Assets Only" as the '''Build Mode'''.
## In the build path select the addressables for your mod.
## At the bottom of the window, press '''Import swinfo.json''' and select your mods swinfo.json.
# '''If you want to build a full mod from Unity''':
## Set '''Build Mode''' to "Everything".
## Set build path to where you want to output your packaged mod (you can set this later, just set it before build).
## If you already have a swinfo.json file, you can skip the next steps using the import swinfo.json button as described in the previous section.
## Input your mod's ID (this is critically important).
## Setup the rest of your mod's info (these correspond to the swinfo).
# After doing one of the previous two processes, press '''Set Up Addressables From Mod Info''', and it should automatically set up the addressables groups for you.

[[Category:Getting started]]</text>
      <sha1>2aekjihzoiruy6p3iaps6gy6qecni9t</sha1>
    </revision>
    <revision>
      <id>284</id>
      <parentid>278</parentid>
      <timestamp>2024-01-11T12:49:10Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Updated for ThunderKit 8.0.5</comment>
      <origin>284</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4309" sha1="gmuvwagbsbwg6vy0xnr932z9p15sxzj" xml:space="preserve">This page will help you install everything you need to use Unity for KSP2 modding.

== Installing Unity ==

# Download Unity Hub from https://unity.com/download.
# Download Unity 2022.3.5f1 by clicking on the '''Install this version with Unity Hub''' link on this page: https://unity.com/releases/editor/whats-new/2022.3.5.

== Initializing the Unity project ==
# Follow the instructions on this page: https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3 but use Unity 2022.3.5f1 instead.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the addressables package ===
Unity doesn’t come with this package natively, so we need to install it first:

# Open the Package Manager by clicking '''Window&gt;Package Manager''' in the toolbar at the top of Unity.
# This will open a new window where you can manage most of the packages in your project.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# In the search bar, look for '''Addressables'''. Select it and click '''Install'''. It will show a couple pop-ups, and once it is finished, it will show a green checkmark next to the Addressables package version.

=== Importing ThunderKit ===
ThunderKit is a package for Unity, however it is not hosted in the official Unity package repository, so it needs to be installed directly from its GitHub repository.

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign in the top left corner of the window that opens, after that click on '''Add Package from Git URL''' and paste &lt;code&gt;https://github.com/PassivePicasso/ThunderKit.git&lt;/code&gt; and click '''Add'''.
#
# The ThunderKit Settings window should open, if it doesn’t, just go to '''Tools&gt;ThunderKit&gt;Settings''' in the toolbar at the top of Unity.
# Go to '''Import Configuration''' and in '''Import Project Settings,''' change the dropdown value to '''Everything.'''
# Go to '''ThunderKit Settings''' and in '''Locate and load game files for project,''' click on '''Browse''' and select your main Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported. If asked, click '''I made a backup, Go Ahead.'''
# If Unity asks you to restart your project, confirm it by clicking on '''Restart Project'''.
# After the process is finished, to check if the game was correctly imported, select or create any game object, and in the inspector click '''Add Component''' and search for '''Core Part Data'''.

=== Importing Unity KSP tools ===

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign in the top left corner of the window that opens, after that click on '''Add Package from Git URL''', paste &lt;code&gt;&lt;nowiki&gt;https://github.com/KSP2Community/KSP2UnityTools.git&lt;/nowiki&gt;&lt;/code&gt; and click '''Add'''.
 If you have previously installed an older version of KSP2 Unity Tools manually from a .unitypackage file, you will need to delete the whole "KSP2UnityTools" folder from your Assets folder and then do the installation.

=== Setting up swinfo.json and addressables ===

# After installing KSP2UnityTools, go to '''Tools&gt;KSP2 Unity Tools.'''
# Follow one of two following steps, depending on which applies for you:
# '''If you have a mod you want to copy addressables into''':
## Select "Copy Assets Only" as the '''Build Mode'''.
## In the build path select the addressables for your mod.
## At the bottom of the window, press '''Import swinfo.json''' and select your mods swinfo.json.
# '''If you want to build a full mod from Unity''':
## Set '''Build Mode''' to "Everything".
## Set build path to where you want to output your packaged mod (you can set this later, just set it before build).
## If you already have a swinfo.json file, you can skip the next steps using the import swinfo.json button as described in the previous section.
## Input your mod's ID (this is critically important).
## Setup the rest of your mod's info (these correspond to the swinfo).
# After following one of the previous two processes, press '''Set Up Addressables From Mod Info''', and it should automatically set up the addressables groups for you.

[[Category:Getting started]]</text>
      <sha1>gmuvwagbsbwg6vy0xnr932z9p15sxzj</sha1>
    </revision>
  </page>
  <page>
    <title>Configuring the part in Unity</title>
    <ns>0</ns>
    <id>60</id>
    <revision>
      <id>176</id>
      <timestamp>2023-10-28T11:01:12Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Page creation</comment>
      <origin>176</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3863" sha1="3x195ea6vpfrkhtsawfg0vaaee40q03" xml:space="preserve">This page is only for part mod. If your mod don't include parts, you can skip what follows.

= Configuring the part in Unity =
&lt;blockquote&gt;Prerequisites

* Having installed Unity
* Having initialized the Unity project
&lt;/blockquote&gt;&lt;blockquote&gt;More resources

* Tutorial for creating a part in Unity : Tutorial: My First Part
* Tutorial for configuring a part in Unity : How to create parts for KSP2
&lt;/blockquote&gt;

== Setting up the scene ==

# Open Unity Hub.
# Open the Unity project.
# Click on the three dots in the Hierarchy menu then “Add a new scene”.
# Right-click on the scene &gt; Save Scene.
# Save the scene in the Asset folder of the Unity project.
# In the Asset folder, create a folder for the mod.
# In this folder, create the “Materials” and “Parts” folders. This is just to keep the folder well organized.
# Delete the camera and light and import the meshes and textures into the corresponding folders.

== Associating textures to the meshes ==

# Create a material in Unity for each material in Substance Painter (right-click on the project window &gt; Create &gt; Material)
# Select all materials. In the Inspector window, in Shader, select KSP &gt; Parts &gt; Paintable.
# For each material, assign the textures to the Albedo, Metallic, Normal, Emissive and Paintable channels.
# For Normal channels, click the “Fix Now” button.
# For each mesh, assign the materials to the corresponding locations. Click on “Apply”.

== Adding meshes to the scene ==

# Create an Empty GameObject. Let's name it &lt;code&gt;myMod_myPart&lt;/code&gt;. The name must be unique to any part in KSP2, including other mods.
# Set its position to 0;0;0.
# Create another empty object as a child of this object and call it &lt;code&gt;model&lt;/code&gt;.
# Drop the mesh as a child of &lt;code&gt;model&lt;/code&gt;.
# Use the “Transform” panel to optionally modify the position, rotation and size of the mesh.
# Right click on the mesh &gt; Prefab &gt; Unpack completely.
# Select all colliders.
# In the Inspector window:
#* Delete the “Mesh Renderer” component.
#* Click on “Add Component” &gt; “Mesh Collider”.
#* Check “Convex”.
# Repeat the operation for all meshes.

&lt;blockquote&gt;Note

Materials should not have shaders.&lt;/blockquote&gt;

== Configuring the mesh ==
Follow this instructions: [[Configuring the mesh]].

== Configuring the addressables ==

=== Creating the addressables ===

# Select all prefabs in the Asset folder and check “Addressable” in the Inspector window.
# Select all JSON in the Asset folder and check “Addressable” in the Inspector window.
# Select all icon images in the Asset folder and check “Addressable” in the Inspector window.

=== Creating a group of addressables ===

# Go to Window &gt; Asset Management &gt; Addressables &gt; Groups.
# Click Create &gt; Group &gt; Packed Asset.
# Rename the group and move the mod elements into it.
# Rename each addressable name to remove the path. The final name must be the same as the part name + extension.
# Add the &lt;code&gt;parts_data&lt;/code&gt; label to the JSON. If it does not exist, create it with “Manage labels” &gt; “+”.

== Creating a build profile ==

# Go to Window &gt; Asset Management &gt; Addressables &gt; Groups.
# Click on Profile &gt; Manage Profiles.
# Click on Create &gt; Profile.
# Rename the new profile.
# For a mod with code, enter the values as follows, where XXX = the namespace of the .NET project previously configured.

{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{XXX.XXXPlugin.Path}/addressables/StandaloneWindows64
|}
For a codeless mod, enter the values as follows, where XXX = the mod's name.
{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{SpaceWarpPaths.XXX}/addressables/StandaloneWindows64
|}</text>
      <sha1>3x195ea6vpfrkhtsawfg0vaaee40q03</sha1>
    </revision>
    <revision>
      <id>177</id>
      <parentid>176</parentid>
      <timestamp>2023-10-28T11:02:12Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Typos</comment>
      <origin>177</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3861" sha1="qttxf6u0qeubv7kj8mxgirfke5ihxfg" xml:space="preserve">This page is only for part mod. If your mod don't include parts, you can skip what follows.

= Configuring the part in Unity =
&lt;blockquote&gt;Prerequisites

* Having installed Unity
* Having initialized the Unity project
&lt;/blockquote&gt;&lt;blockquote&gt;More resources

* Tutorial for creating a part in Unity: Tutorial: My First Part
* Tutorial for configuring a part in Unity: How to create parts for KSP2
&lt;/blockquote&gt;

== Setting up the scene ==

# Open Unity Hub.
# Open the Unity project.
# Click on the three dots in the Hierarchy menu then “Add a new scene”.
# Right-click on the scene &gt; Save Scene.
# Save the scene in the Asset folder of the Unity project.
# In the Asset folder, create a folder for the mod.
# In this folder, create the “Materials” and “Parts” folders. This is just to keep the folder well organized.
# Delete the camera and light and import the meshes and textures into the corresponding folders.

== Associating textures to the meshes ==

# Create a material in Unity for each material in Substance Painter (right-click on the project window &gt; Create &gt; Material)
# Select all materials. In the Inspector window, in Shader, select KSP &gt; Parts &gt; Paintable.
# For each material, assign the textures to the Albedo, Metallic, Normal, Emissive and Paintable channels.
# For Normal channels, click the “Fix Now” button.
# For each mesh, assign the materials to the corresponding locations. Click on “Apply”.

== Adding meshes to the scene ==

# Create an Empty GameObject. Let's name it &lt;code&gt;myMod_myPart&lt;/code&gt;. The name must be unique to any part in KSP2, including other mods.
# Set its position to 0;0;0.
# Create another empty object as a child of this object and call it &lt;code&gt;model&lt;/code&gt;.
# Drop the mesh as a child of &lt;code&gt;model&lt;/code&gt;.
# Use the “Transform” panel to optionally modify the position, rotation and size of the mesh.
# Right click on the mesh &gt; Prefab &gt; Unpack completely.
# Select all colliders.
# In the Inspector window:
#* Delete the “Mesh Renderer” component.
#* Click on “Add Component” &gt; “Mesh Collider”.
#* Check “Convex”.
# Repeat the operation for all meshes.

&lt;blockquote&gt;Note

Materials should not have shaders.&lt;/blockquote&gt;

== Configuring the mesh ==
Follow this instructions: [[Configuring the mesh]].

== Configuring the addressables ==

=== Creating the addressables ===

# Select all prefabs in the Asset folder and check “Addressable” in the Inspector window.
# Select all JSON in the Asset folder and check “Addressable” in the Inspector window.
# Select all icon images in the Asset folder and check “Addressable” in the Inspector window.

=== Creating a group of addressables ===

# Go to Window &gt; Asset Management &gt; Addressables &gt; Groups.
# Click Create &gt; Group &gt; Packed Asset.
# Rename the group and move the mod elements into it.
# Rename each addressable name to remove the path. The final name must be the same as the part name + extension.
# Add the &lt;code&gt;parts_data&lt;/code&gt; label to the JSON. If it does not exist, create it with “Manage labels” &gt; “+”.

== Creating a build profile ==

# Go to Window &gt; Asset Management &gt; Addressables &gt; Groups.
# Click on Profile &gt; Manage Profiles.
# Click on Create &gt; Profile.
# Rename the new profile.
# For a mod with code, enter the values as follows, where XXX = the namespace of the .NET project previously configured.

{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{XXX.XXXPlugin.Path}/addressables/StandaloneWindows64
|}
For a codeless mod, enter the values as follows, where XXX = the mod's name.
{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{SpaceWarpPaths.XXX}/addressables/StandaloneWindows64
|}</text>
      <sha1>qttxf6u0qeubv7kj8mxgirfke5ihxfg</sha1>
    </revision>
    <revision>
      <id>184</id>
      <parentid>177</parentid>
      <timestamp>2023-10-28T12:16:59Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added categories</comment>
      <origin>184</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3911" sha1="b7jeacfk4mmkfr1f4t3oy9dpy730iea" xml:space="preserve">This page is only for part mod. If your mod don't include parts, you can skip what follows.

= Configuring the part in Unity =
&lt;blockquote&gt;Prerequisites

* Having installed Unity
* Having initialized the Unity project
&lt;/blockquote&gt;&lt;blockquote&gt;More resources

* Tutorial for creating a part in Unity: Tutorial: My First Part
* Tutorial for configuring a part in Unity: How to create parts for KSP2
&lt;/blockquote&gt;

== Setting up the scene ==

# Open Unity Hub.
# Open the Unity project.
# Click on the three dots in the Hierarchy menu then “Add a new scene”.
# Right-click on the scene &gt; Save Scene.
# Save the scene in the Asset folder of the Unity project.
# In the Asset folder, create a folder for the mod.
# In this folder, create the “Materials” and “Parts” folders. This is just to keep the folder well organized.
# Delete the camera and light and import the meshes and textures into the corresponding folders.

== Associating textures to the meshes ==

# Create a material in Unity for each material in Substance Painter (right-click on the project window &gt; Create &gt; Material)
# Select all materials. In the Inspector window, in Shader, select KSP &gt; Parts &gt; Paintable.
# For each material, assign the textures to the Albedo, Metallic, Normal, Emissive and Paintable channels.
# For Normal channels, click the “Fix Now” button.
# For each mesh, assign the materials to the corresponding locations. Click on “Apply”.

== Adding meshes to the scene ==

# Create an Empty GameObject. Let's name it &lt;code&gt;myMod_myPart&lt;/code&gt;. The name must be unique to any part in KSP2, including other mods.
# Set its position to 0;0;0.
# Create another empty object as a child of this object and call it &lt;code&gt;model&lt;/code&gt;.
# Drop the mesh as a child of &lt;code&gt;model&lt;/code&gt;.
# Use the “Transform” panel to optionally modify the position, rotation and size of the mesh.
# Right click on the mesh &gt; Prefab &gt; Unpack completely.
# Select all colliders.
# In the Inspector window:
#* Delete the “Mesh Renderer” component.
#* Click on “Add Component” &gt; “Mesh Collider”.
#* Check “Convex”.
# Repeat the operation for all meshes.

&lt;blockquote&gt;Note

Materials should not have shaders.&lt;/blockquote&gt;

== Configuring the mesh ==
Follow this instructions: [[Configuring the mesh]].

== Configuring the addressables ==

=== Creating the addressables ===

# Select all prefabs in the Asset folder and check “Addressable” in the Inspector window.
# Select all JSON in the Asset folder and check “Addressable” in the Inspector window.
# Select all icon images in the Asset folder and check “Addressable” in the Inspector window.

=== Creating a group of addressables ===

# Go to Window &gt; Asset Management &gt; Addressables &gt; Groups.
# Click Create &gt; Group &gt; Packed Asset.
# Rename the group and move the mod elements into it.
# Rename each addressable name to remove the path. The final name must be the same as the part name + extension.
# Add the &lt;code&gt;parts_data&lt;/code&gt; label to the JSON. If it does not exist, create it with “Manage labels” &gt; “+”.

== Creating a build profile ==

# Go to Window &gt; Asset Management &gt; Addressables &gt; Groups.
# Click on Profile &gt; Manage Profiles.
# Click on Create &gt; Profile.
# Rename the new profile.
# For a mod with code, enter the values as follows, where XXX = the namespace of the .NET project previously configured.

{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{XXX.XXXPlugin.Path}/addressables/StandaloneWindows64
|}
For a codeless mod, enter the values as follows, where XXX = the mod's name.
{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{SpaceWarpPaths.XXX}/addressables/StandaloneWindows64
|}
[[Category:Parts modding]]
[[Category:Tutorials]]</text>
      <sha1>b7jeacfk4mmkfr1f4t3oy9dpy730iea</sha1>
    </revision>
    <revision>
      <id>194</id>
      <parentid>184</parentid>
      <timestamp>2023-10-28T12:34:44Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Removed "Tutorials" category</comment>
      <origin>194</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3888" sha1="qfpk9e0jiiweah7zt7tg9d320g6ftli" xml:space="preserve">This page is only for part mod. If your mod don't include parts, you can skip what follows.

= Configuring the part in Unity =
&lt;blockquote&gt;Prerequisites

* Having installed Unity
* Having initialized the Unity project
&lt;/blockquote&gt;&lt;blockquote&gt;More resources

* Tutorial for creating a part in Unity: Tutorial: My First Part
* Tutorial for configuring a part in Unity: How to create parts for KSP2
&lt;/blockquote&gt;

== Setting up the scene ==

# Open Unity Hub.
# Open the Unity project.
# Click on the three dots in the Hierarchy menu then “Add a new scene”.
# Right-click on the scene &gt; Save Scene.
# Save the scene in the Asset folder of the Unity project.
# In the Asset folder, create a folder for the mod.
# In this folder, create the “Materials” and “Parts” folders. This is just to keep the folder well organized.
# Delete the camera and light and import the meshes and textures into the corresponding folders.

== Associating textures to the meshes ==

# Create a material in Unity for each material in Substance Painter (right-click on the project window &gt; Create &gt; Material)
# Select all materials. In the Inspector window, in Shader, select KSP &gt; Parts &gt; Paintable.
# For each material, assign the textures to the Albedo, Metallic, Normal, Emissive and Paintable channels.
# For Normal channels, click the “Fix Now” button.
# For each mesh, assign the materials to the corresponding locations. Click on “Apply”.

== Adding meshes to the scene ==

# Create an Empty GameObject. Let's name it &lt;code&gt;myMod_myPart&lt;/code&gt;. The name must be unique to any part in KSP2, including other mods.
# Set its position to 0;0;0.
# Create another empty object as a child of this object and call it &lt;code&gt;model&lt;/code&gt;.
# Drop the mesh as a child of &lt;code&gt;model&lt;/code&gt;.
# Use the “Transform” panel to optionally modify the position, rotation and size of the mesh.
# Right click on the mesh &gt; Prefab &gt; Unpack completely.
# Select all colliders.
# In the Inspector window:
#* Delete the “Mesh Renderer” component.
#* Click on “Add Component” &gt; “Mesh Collider”.
#* Check “Convex”.
# Repeat the operation for all meshes.

&lt;blockquote&gt;Note

Materials should not have shaders.&lt;/blockquote&gt;

== Configuring the mesh ==
Follow this instructions: [[Configuring the mesh]].

== Configuring the addressables ==

=== Creating the addressables ===

# Select all prefabs in the Asset folder and check “Addressable” in the Inspector window.
# Select all JSON in the Asset folder and check “Addressable” in the Inspector window.
# Select all icon images in the Asset folder and check “Addressable” in the Inspector window.

=== Creating a group of addressables ===

# Go to Window &gt; Asset Management &gt; Addressables &gt; Groups.
# Click Create &gt; Group &gt; Packed Asset.
# Rename the group and move the mod elements into it.
# Rename each addressable name to remove the path. The final name must be the same as the part name + extension.
# Add the &lt;code&gt;parts_data&lt;/code&gt; label to the JSON. If it does not exist, create it with “Manage labels” &gt; “+”.

== Creating a build profile ==

# Go to Window &gt; Asset Management &gt; Addressables &gt; Groups.
# Click on Profile &gt; Manage Profiles.
# Click on Create &gt; Profile.
# Rename the new profile.
# For a mod with code, enter the values as follows, where XXX = the namespace of the .NET project previously configured.

{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{XXX.XXXPlugin.Path}/addressables/StandaloneWindows64
|}
For a codeless mod, enter the values as follows, where XXX = the mod's name.
{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{SpaceWarpPaths.XXX}/addressables/StandaloneWindows64
|}
[[Category:Parts modding]]</text>
      <sha1>qfpk9e0jiiweah7zt7tg9d320g6ftli</sha1>
    </revision>
    <revision>
      <id>195</id>
      <parentid>194</parentid>
      <timestamp>2023-10-28T12:35:50Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Changed category</comment>
      <origin>195</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3889" sha1="49gt44bdxunl5ho2x0d9q54chrbf3t7" xml:space="preserve">This page is only for part mod. If your mod don't include parts, you can skip what follows.

= Configuring the part in Unity =
&lt;blockquote&gt;Prerequisites

* Having installed Unity
* Having initialized the Unity project
&lt;/blockquote&gt;&lt;blockquote&gt;More resources

* Tutorial for creating a part in Unity: Tutorial: My First Part
* Tutorial for configuring a part in Unity: How to create parts for KSP2
&lt;/blockquote&gt;

== Setting up the scene ==

# Open Unity Hub.
# Open the Unity project.
# Click on the three dots in the Hierarchy menu then “Add a new scene”.
# Right-click on the scene &gt; Save Scene.
# Save the scene in the Asset folder of the Unity project.
# In the Asset folder, create a folder for the mod.
# In this folder, create the “Materials” and “Parts” folders. This is just to keep the folder well organized.
# Delete the camera and light and import the meshes and textures into the corresponding folders.

== Associating textures to the meshes ==

# Create a material in Unity for each material in Substance Painter (right-click on the project window &gt; Create &gt; Material)
# Select all materials. In the Inspector window, in Shader, select KSP &gt; Parts &gt; Paintable.
# For each material, assign the textures to the Albedo, Metallic, Normal, Emissive and Paintable channels.
# For Normal channels, click the “Fix Now” button.
# For each mesh, assign the materials to the corresponding locations. Click on “Apply”.

== Adding meshes to the scene ==

# Create an Empty GameObject. Let's name it &lt;code&gt;myMod_myPart&lt;/code&gt;. The name must be unique to any part in KSP2, including other mods.
# Set its position to 0;0;0.
# Create another empty object as a child of this object and call it &lt;code&gt;model&lt;/code&gt;.
# Drop the mesh as a child of &lt;code&gt;model&lt;/code&gt;.
# Use the “Transform” panel to optionally modify the position, rotation and size of the mesh.
# Right click on the mesh &gt; Prefab &gt; Unpack completely.
# Select all colliders.
# In the Inspector window:
#* Delete the “Mesh Renderer” component.
#* Click on “Add Component” &gt; “Mesh Collider”.
#* Check “Convex”.
# Repeat the operation for all meshes.

&lt;blockquote&gt;Note

Materials should not have shaders.&lt;/blockquote&gt;

== Configuring the mesh ==
Follow this instructions: [[Configuring the mesh]].

== Configuring the addressables ==

=== Creating the addressables ===

# Select all prefabs in the Asset folder and check “Addressable” in the Inspector window.
# Select all JSON in the Asset folder and check “Addressable” in the Inspector window.
# Select all icon images in the Asset folder and check “Addressable” in the Inspector window.

=== Creating a group of addressables ===

# Go to Window &gt; Asset Management &gt; Addressables &gt; Groups.
# Click Create &gt; Group &gt; Packed Asset.
# Rename the group and move the mod elements into it.
# Rename each addressable name to remove the path. The final name must be the same as the part name + extension.
# Add the &lt;code&gt;parts_data&lt;/code&gt; label to the JSON. If it does not exist, create it with “Manage labels” &gt; “+”.

== Creating a build profile ==

# Go to Window &gt; Asset Management &gt; Addressables &gt; Groups.
# Click on Profile &gt; Manage Profiles.
# Click on Create &gt; Profile.
# Rename the new profile.
# For a mod with code, enter the values as follows, where XXX = the namespace of the .NET project previously configured.

{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{XXX.XXXPlugin.Path}/addressables/StandaloneWindows64
|}
For a codeless mod, enter the values as follows, where XXX = the mod's name.
{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{SpaceWarpPaths.XXX}/addressables/StandaloneWindows64
|}
[[Category:Creating parts]]</text>
      <sha1>49gt44bdxunl5ho2x0d9q54chrbf3t7</sha1>
    </revision>
    <revision>
      <id>220</id>
      <parentid>195</parentid>
      <timestamp>2023-10-30T11:29:46Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>/* Setting up the scene */ Reformatted content</comment>
      <origin>220</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3871" sha1="ikwv80ht5p32ppgvckive3w9ec2qt5y" xml:space="preserve">This page is only for part mod. If your mod don't include parts, you can skip what follows.

= Configuring the part in Unity =
 Prerequisites
 [[Setting up Unity]]

 Useful links
 
 Tutorial for creating a part in Unity: https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314
 Tutorial for configuring a part in Unity: https://www.youtube.com/watch?v=9fQg-oMqcH8

== Setting up the scene ==

# Open Unity Hub.
# Open the Unity project.
# Click on the three dots in the Hierarchy menu then “Add a new scene”.
# Right-click on the scene &gt; Save Scene.
# Save the scene in the Asset folder of the Unity project.
# In the Asset folder, create a folder for the mod.
# In this folder, create the “Materials” and “Parts” folders. This is just to keep the folder well organized.
# Delete the camera and light and import the meshes and textures into the corresponding folders.

== Associating textures to the meshes ==

# Create a material in Unity for each material in Substance Painter (right-click on the project window &gt; Create &gt; Material)
# Select all materials. In the Inspector window, in Shader, select KSP &gt; Parts &gt; Paintable.
# For each material, assign the textures to the Albedo, Metallic, Normal, Emissive and Paintable channels.
# For Normal channels, click the “Fix Now” button.
# For each mesh, assign the materials to the corresponding locations. Click on “Apply”.

== Adding meshes to the scene ==

# Create an Empty GameObject. Let's name it &lt;code&gt;myMod_myPart&lt;/code&gt;. The name must be unique to any part in KSP2, including other mods.
# Set its position to 0;0;0.
# Create another empty object as a child of this object and call it &lt;code&gt;model&lt;/code&gt;.
# Drop the mesh as a child of &lt;code&gt;model&lt;/code&gt;.
# Use the “Transform” panel to optionally modify the position, rotation and size of the mesh.
# Right click on the mesh &gt; Prefab &gt; Unpack completely.
# Select all colliders.
# In the Inspector window:
#* Delete the “Mesh Renderer” component.
#* Click on “Add Component” &gt; “Mesh Collider”.
#* Check “Convex”.
# Repeat the operation for all meshes.

&lt;blockquote&gt;Note

Materials should not have shaders.&lt;/blockquote&gt;

== Configuring the mesh ==
Follow this instructions: [[Configuring the mesh]].

== Configuring the addressables ==

=== Creating the addressables ===

# Select all prefabs in the Asset folder and check “Addressable” in the Inspector window.
# Select all JSON in the Asset folder and check “Addressable” in the Inspector window.
# Select all icon images in the Asset folder and check “Addressable” in the Inspector window.

=== Creating a group of addressables ===

# Go to Window &gt; Asset Management &gt; Addressables &gt; Groups.
# Click Create &gt; Group &gt; Packed Asset.
# Rename the group and move the mod elements into it.
# Rename each addressable name to remove the path. The final name must be the same as the part name + extension.
# Add the &lt;code&gt;parts_data&lt;/code&gt; label to the JSON. If it does not exist, create it with “Manage labels” &gt; “+”.

== Creating a build profile ==

# Go to Window &gt; Asset Management &gt; Addressables &gt; Groups.
# Click on Profile &gt; Manage Profiles.
# Click on Create &gt; Profile.
# Rename the new profile.
# For a mod with code, enter the values as follows, where XXX = the namespace of the .NET project previously configured.

{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{XXX.XXXPlugin.Path}/addressables/StandaloneWindows64
|}
For a codeless mod, enter the values as follows, where XXX = the mod's name.
{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{SpaceWarpPaths.XXX}/addressables/StandaloneWindows64
|}
[[Category:Creating parts]]</text>
      <sha1>ikwv80ht5p32ppgvckive3w9ec2qt5y</sha1>
    </revision>
    <revision>
      <id>225</id>
      <parentid>220</parentid>
      <timestamp>2023-11-01T10:51:17Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Improved formatting + added good practice</comment>
      <origin>225</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4163" sha1="7m5h44aid32o21xti8jyhiixd0mwrl4" xml:space="preserve">This page is only for part mod. If your mod don't include parts, you can skip what follows.

= Configuring the part in Unity =
 '''Prerequisites'''
 [[Setting up Unity]]
 [[Preparing the mesh for Unity]]

 '''Useful links'''
 Tutorial for creating a part in Unity: https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314
 Tutorial for configuring a part in Unity: https://www.youtube.com/watch?v=9fQg-oMqcH8

== Setting up the scene ==

# Open Unity Hub.
# Open the Unity project.
# Click on the three dots in the Hierarchy menu then “Add a new scene”.
# Right-click on the scene &gt; '''Save Scene'''.
# Save the scene in the Asset folder of the Unity project.
# In the Asset folder, create a folder for the mod.
# In this folder, create the “Materials” and “Parts” folders. This is just to keep the folder well organized.
# Delete the camera and light and import the meshes and textures into the corresponding folders.
 '''Good practice for organizing the Assets folder'''
 Assets
 |
 \-Modname
   |
   \-Parts
     |
     \-(separate folders for the type of parts)
       |
       \-Folder for each part
   |
   \-Materials

== Associating textures to the meshes ==

# Create a material in Unity for each material in Substance Painter (right-click on the project window &gt; '''Create &gt; Material''')
# Select all materials. In the Inspector window, in Shader, select '''KSP &gt; Parts &gt; Paintable'''.
# For each material, assign the textures to the Albedo, Metallic, Normal, Emissive and Paintable channels.
# For Normal channels, click the “Fix Now” button.
# For each mesh, assign the materials to the corresponding locations. Click on “Apply”.

== Adding meshes to the scene ==

# Create an Empty GameObject. Let's name it &lt;code&gt;myMod_myPart&lt;/code&gt;. The name must be unique to any part in KSP2, including other mods.
# Set its position to 0;0;0.
# Create another empty object as a child of this object and call it &lt;code&gt;model&lt;/code&gt;.
# Drop the mesh as a child of &lt;code&gt;model&lt;/code&gt;.
# Use the “Transform” panel to optionally modify the position, rotation and size of the mesh.
# Right click on the mesh &gt; Prefab &gt; Unpack completely.
# Select all colliders.
# In the Inspector window:
#* Delete the “Mesh Renderer” component.
#* Click on '''Add Component &gt; Mesh Collider'''.
#* Check “Convex”.
# Repeat the operation for all meshes.

&lt;blockquote&gt;Note: Materials should not have shaders.&lt;/blockquote&gt;

== Configuring the mesh ==
Follow this instructions: [[Configuring the mesh]].

== Configuring the addressables ==

=== Creating the addressables ===

# Select all prefabs in the Asset folder and check “Addressable” in the Inspector window.
# Select all JSON in the Asset folder and check “Addressable” in the Inspector window.
# Select all icon images in the Asset folder and check “Addressable” in the Inspector window.

=== Creating a group of addressables ===

# Go to '''Window &gt; Asset Management &gt; Addressables &gt; Groups'''.
# Click '''Create &gt; Group &gt; Packed Asset'''.
# Rename the group and move the mod elements into it.
# Rename each addressable name to remove the path. The final name must be the same as the part name + extension.
# Add the &lt;code&gt;parts_data&lt;/code&gt; label to the JSON. If it does not exist, create it with “Manage labels” &gt; “+”.

== Creating a build profile ==

# Go to '''Window &gt; Asset Management &gt; Addressables &gt; Groups'''.
# Click on '''Profile &gt; Manage Profiles'''.
# Click on '''Create &gt; Profile'''.
# Rename the new profile.
# For a mod with code, enter the values as follows, where XXX = the namespace of the .NET project previously configured.

{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{XXX.XXXPlugin.Path}/addressables/StandaloneWindows64
|}
For a codeless mod, enter the values as follows, where XXX = the mod's name.
{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{SpaceWarpPaths.XXX}/addressables/StandaloneWindows64
|}
[[Category:Creating parts]]</text>
      <sha1>7m5h44aid32o21xti8jyhiixd0mwrl4</sha1>
    </revision>
    <revision>
      <id>305</id>
      <parentid>225</parentid>
      <timestamp>2024-01-13T03:16:36Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>/* Configuring the mesh */</comment>
      <origin>305</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4179" sha1="0i6amm4v7mrqidgq2vpq9o6kimfwfhl" xml:space="preserve">This page is only for part mod. If your mod don't include parts, you can skip what follows.

= Configuring the part in Unity =
 '''Prerequisites'''
 [[Setting up Unity]]
 [[Preparing the mesh for Unity]]

 '''Useful links'''
 Tutorial for creating a part in Unity: https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314
 Tutorial for configuring a part in Unity: https://www.youtube.com/watch?v=9fQg-oMqcH8

== Setting up the scene ==

# Open Unity Hub.
# Open the Unity project.
# Click on the three dots in the Hierarchy menu then “Add a new scene”.
# Right-click on the scene &gt; '''Save Scene'''.
# Save the scene in the Asset folder of the Unity project.
# In the Asset folder, create a folder for the mod.
# In this folder, create the “Materials” and “Parts” folders. This is just to keep the folder well organized.
# Delete the camera and light and import the meshes and textures into the corresponding folders.
 '''Good practice for organizing the Assets folder'''
 Assets
 |
 \-Modname
   |
   \-Parts
     |
     \-(separate folders for the type of parts)
       |
       \-Folder for each part
   |
   \-Materials

== Associating textures to the meshes ==

# Create a material in Unity for each material in Substance Painter (right-click on the project window &gt; '''Create &gt; Material''')
# Select all materials. In the Inspector window, in Shader, select '''KSP &gt; Parts &gt; Paintable'''.
# For each material, assign the textures to the Albedo, Metallic, Normal, Emissive and Paintable channels.
# For Normal channels, click the “Fix Now” button.
# For each mesh, assign the materials to the corresponding locations. Click on “Apply”.

== Adding meshes to the scene ==

# Create an Empty GameObject. Let's name it &lt;code&gt;myMod_myPart&lt;/code&gt;. The name must be unique to any part in KSP2, including other mods.
# Set its position to 0;0;0.
# Create another empty object as a child of this object and call it &lt;code&gt;model&lt;/code&gt;.
# Drop the mesh as a child of &lt;code&gt;model&lt;/code&gt;.
# Use the “Transform” panel to optionally modify the position, rotation and size of the mesh.
# Right click on the mesh &gt; Prefab &gt; Unpack completely.
# Select all colliders.
# In the Inspector window:
#* Delete the “Mesh Renderer” component.
#* Click on '''Add Component &gt; Mesh Collider'''.
#* Check “Convex”.
# Repeat the operation for all meshes.

&lt;blockquote&gt;Note: Materials should not have shaders.&lt;/blockquote&gt;

== Configuring the part data ==
Follow these instructions: [[Configuring the core part data]].

== Configuring the addressables ==

=== Creating the addressables ===

# Select all prefabs in the Asset folder and check “Addressable” in the Inspector window.
# Select all JSON in the Asset folder and check “Addressable” in the Inspector window.
# Select all icon images in the Asset folder and check “Addressable” in the Inspector window.

=== Creating a group of addressables ===

# Go to '''Window &gt; Asset Management &gt; Addressables &gt; Groups'''.
# Click '''Create &gt; Group &gt; Packed Asset'''.
# Rename the group and move the mod elements into it.
# Rename each addressable name to remove the path. The final name must be the same as the part name + extension.
# Add the &lt;code&gt;parts_data&lt;/code&gt; label to the JSON. If it does not exist, create it with “Manage labels” &gt; “+”.

== Creating a build profile ==

# Go to '''Window &gt; Asset Management &gt; Addressables &gt; Groups'''.
# Click on '''Profile &gt; Manage Profiles'''.
# Click on '''Create &gt; Profile'''.
# Rename the new profile.
# For a mod with code, enter the values as follows, where XXX = the namespace of the .NET project previously configured.

{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{XXX.XXXPlugin.Path}/addressables/StandaloneWindows64
|}
For a codeless mod, enter the values as follows, where XXX = the mod's name.
{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{SpaceWarpPaths.XXX}/addressables/StandaloneWindows64
|}
[[Category:Creating parts]]</text>
      <sha1>0i6amm4v7mrqidgq2vpq9o6kimfwfhl</sha1>
    </revision>
    <revision>
      <id>306</id>
      <parentid>305</parentid>
      <timestamp>2024-01-13T03:17:52Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>/* Configuring the part in Unity */</comment>
      <origin>306</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4261" sha1="ouaaoee4onyu2es2gnvxm9l4nxui7gu" xml:space="preserve">This page is only for part mod. If your mod don't include parts, you can skip what follows.

= Configuring the part in Unity =
 '''Prerequisites'''
 [[Setting up Unity]]
 [[Modeling the mesh in Blender]]
 [[Texturing the mesh in Substance 3D Painter]]
 [[Preparing the mesh for Unity]]

 '''Useful links'''
 Tutorial for creating a part in Unity: https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314
 Tutorial for configuring a part in Unity: https://www.youtube.com/watch?v=9fQg-oMqcH8

== Setting up the scene ==

# Open Unity Hub.
# Open the Unity project.
# Click on the three dots in the Hierarchy menu then “Add a new scene”.
# Right-click on the scene &gt; '''Save Scene'''.
# Save the scene in the Asset folder of the Unity project.
# In the Asset folder, create a folder for the mod.
# In this folder, create the “Materials” and “Parts” folders. This is just to keep the folder well organized.
# Delete the camera and light and import the meshes and textures into the corresponding folders.
 '''Good practice for organizing the Assets folder'''
 Assets
 |
 \-Modname
   |
   \-Parts
     |
     \-(separate folders for the type of parts)
       |
       \-Folder for each part
   |
   \-Materials

== Associating textures to the meshes ==

# Create a material in Unity for each material in Substance Painter (right-click on the project window &gt; '''Create &gt; Material''')
# Select all materials. In the Inspector window, in Shader, select '''KSP &gt; Parts &gt; Paintable'''.
# For each material, assign the textures to the Albedo, Metallic, Normal, Emissive and Paintable channels.
# For Normal channels, click the “Fix Now” button.
# For each mesh, assign the materials to the corresponding locations. Click on “Apply”.

== Adding meshes to the scene ==

# Create an Empty GameObject. Let's name it &lt;code&gt;myMod_myPart&lt;/code&gt;. The name must be unique to any part in KSP2, including other mods.
# Set its position to 0;0;0.
# Create another empty object as a child of this object and call it &lt;code&gt;model&lt;/code&gt;.
# Drop the mesh as a child of &lt;code&gt;model&lt;/code&gt;.
# Use the “Transform” panel to optionally modify the position, rotation and size of the mesh.
# Right click on the mesh &gt; Prefab &gt; Unpack completely.
# Select all colliders.
# In the Inspector window:
#* Delete the “Mesh Renderer” component.
#* Click on '''Add Component &gt; Mesh Collider'''.
#* Check “Convex”.
# Repeat the operation for all meshes.

&lt;blockquote&gt;Note: Materials should not have shaders.&lt;/blockquote&gt;

== Configuring the part data ==
Follow these instructions: [[Configuring the core part data]].

== Configuring the addressables ==

=== Creating the addressables ===

# Select all prefabs in the Asset folder and check “Addressable” in the Inspector window.
# Select all JSON in the Asset folder and check “Addressable” in the Inspector window.
# Select all icon images in the Asset folder and check “Addressable” in the Inspector window.

=== Creating a group of addressables ===

# Go to '''Window &gt; Asset Management &gt; Addressables &gt; Groups'''.
# Click '''Create &gt; Group &gt; Packed Asset'''.
# Rename the group and move the mod elements into it.
# Rename each addressable name to remove the path. The final name must be the same as the part name + extension.
# Add the &lt;code&gt;parts_data&lt;/code&gt; label to the JSON. If it does not exist, create it with “Manage labels” &gt; “+”.

== Creating a build profile ==

# Go to '''Window &gt; Asset Management &gt; Addressables &gt; Groups'''.
# Click on '''Profile &gt; Manage Profiles'''.
# Click on '''Create &gt; Profile'''.
# Rename the new profile.
# For a mod with code, enter the values as follows, where XXX = the namespace of the .NET project previously configured.

{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{XXX.XXXPlugin.Path}/addressables/StandaloneWindows64
|}
For a codeless mod, enter the values as follows, where XXX = the mod's name.
{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{SpaceWarpPaths.XXX}/addressables/StandaloneWindows64
|}
[[Category:Creating parts]]</text>
      <sha1>ouaaoee4onyu2es2gnvxm9l4nxui7gu</sha1>
    </revision>
    <revision>
      <id>307</id>
      <parentid>306</parentid>
      <timestamp>2024-01-13T03:18:14Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>/* Configuring the part in Unity */</comment>
      <origin>307</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4296" sha1="ex1eh08z24x85wicd8ikupxn8intyo6" xml:space="preserve">This page is only for part mod. If your mod don't include parts, you can skip what follows.

= Configuring the part in Unity =
 '''Prerequisites'''
 [[Setting up Unity]]
 [[Modeling the mesh in Blender]]
 [[Texturing the mesh in Substance 3D Painter]]
 [[Preparing the mesh for Unity]]

 '''Useful links (may contain outdated information)'''
 Tutorial for creating a part in Unity: https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314
 Tutorial for configuring a part in Unity: https://www.youtube.com/watch?v=9fQg-oMqcH8

== Setting up the scene ==

# Open Unity Hub.
# Open the Unity project.
# Click on the three dots in the Hierarchy menu then “Add a new scene”.
# Right-click on the scene &gt; '''Save Scene'''.
# Save the scene in the Asset folder of the Unity project.
# In the Asset folder, create a folder for the mod.
# In this folder, create the “Materials” and “Parts” folders. This is just to keep the folder well organized.
# Delete the camera and light and import the meshes and textures into the corresponding folders.
 '''Good practice for organizing the Assets folder'''
 Assets
 |
 \-Modname
   |
   \-Parts
     |
     \-(separate folders for the type of parts)
       |
       \-Folder for each part
   |
   \-Materials

== Associating textures to the meshes ==

# Create a material in Unity for each material in Substance Painter (right-click on the project window &gt; '''Create &gt; Material''')
# Select all materials. In the Inspector window, in Shader, select '''KSP &gt; Parts &gt; Paintable'''.
# For each material, assign the textures to the Albedo, Metallic, Normal, Emissive and Paintable channels.
# For Normal channels, click the “Fix Now” button.
# For each mesh, assign the materials to the corresponding locations. Click on “Apply”.

== Adding meshes to the scene ==

# Create an Empty GameObject. Let's name it &lt;code&gt;myMod_myPart&lt;/code&gt;. The name must be unique to any part in KSP2, including other mods.
# Set its position to 0;0;0.
# Create another empty object as a child of this object and call it &lt;code&gt;model&lt;/code&gt;.
# Drop the mesh as a child of &lt;code&gt;model&lt;/code&gt;.
# Use the “Transform” panel to optionally modify the position, rotation and size of the mesh.
# Right click on the mesh &gt; Prefab &gt; Unpack completely.
# Select all colliders.
# In the Inspector window:
#* Delete the “Mesh Renderer” component.
#* Click on '''Add Component &gt; Mesh Collider'''.
#* Check “Convex”.
# Repeat the operation for all meshes.

&lt;blockquote&gt;Note: Materials should not have shaders.&lt;/blockquote&gt;

== Configuring the part data ==
Follow these instructions: [[Configuring the core part data]].

== Configuring the addressables ==

=== Creating the addressables ===

# Select all prefabs in the Asset folder and check “Addressable” in the Inspector window.
# Select all JSON in the Asset folder and check “Addressable” in the Inspector window.
# Select all icon images in the Asset folder and check “Addressable” in the Inspector window.

=== Creating a group of addressables ===

# Go to '''Window &gt; Asset Management &gt; Addressables &gt; Groups'''.
# Click '''Create &gt; Group &gt; Packed Asset'''.
# Rename the group and move the mod elements into it.
# Rename each addressable name to remove the path. The final name must be the same as the part name + extension.
# Add the &lt;code&gt;parts_data&lt;/code&gt; label to the JSON. If it does not exist, create it with “Manage labels” &gt; “+”.

== Creating a build profile ==

# Go to '''Window &gt; Asset Management &gt; Addressables &gt; Groups'''.
# Click on '''Profile &gt; Manage Profiles'''.
# Click on '''Create &gt; Profile'''.
# Rename the new profile.
# For a mod with code, enter the values as follows, where XXX = the namespace of the .NET project previously configured.

{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{XXX.XXXPlugin.Path}/addressables/StandaloneWindows64
|}
For a codeless mod, enter the values as follows, where XXX = the mod's name.
{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{SpaceWarpPaths.XXX}/addressables/StandaloneWindows64
|}
[[Category:Creating parts]]</text>
      <sha1>ex1eh08z24x85wicd8ikupxn8intyo6</sha1>
    </revision>
    <revision>
      <id>312</id>
      <parentid>307</parentid>
      <timestamp>2024-01-13T14:24:45Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>312</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3043" sha1="r9n8jwurgmnerzgr7wcf117pwx05bq4" xml:space="preserve">The following page will guide you through setting up a new part inside Unity.

= Configuring the part in Unity =
 '''Prerequisites'''
 [[Setting up Unity]]
 [[Modeling the mesh in Blender]]
 [[Texturing the mesh in Substance 3D Painter]]
 [[Preparing the mesh for Unity]]

 '''Useful links (may contain outdated information)'''
 Tutorial for creating a part in Unity: https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314
 Tutorial for configuring a part in Unity: https://www.youtube.com/watch?v=9fQg-oMqcH8

== Setting up the scene ==

# Open Unity Hub.
# Open the Unity project.
# Click on the three dots in the Hierarchy menu then “Add a new scene”.
# Right-click on the scene &gt; '''Save Scene'''.
# Save the scene in the Asset folder of the Unity project.
# In the Asset folder, create a folder for the mod.
# In this folder, create the “Materials” and “Parts” folders. This is just to keep the folder well organized.
# Delete the camera and light and import the meshes and textures into the corresponding folders.
 '''Good practice for organizing the Assets folder'''
 Assets
 |
 \-Modname
   |
   \-Parts
     |
     \-(separate folders for the type of parts)
       |
       \-Folder for each part
   |
   \-Materials

== Associating textures to the meshes ==

# Create a material in Unity for each material in Substance Painter (right-click on the project window &gt; '''Create &gt; Material''')
# Select all materials. In the Inspector window, in Shader, select '''KSP &gt; Parts &gt; Paintable'''.
# For each material, assign the textures to the Albedo, Metallic, Normal, Emissive and Paintable channels.
# For Normal channels, click the “Fix Now” button.
# For each mesh, assign the materials to the corresponding locations. Click on “Apply”.

== Adding meshes to the scene ==

# Create an Empty GameObject. Let's name it &lt;code&gt;myMod_myPart&lt;/code&gt;. The name must be unique to any part in KSP2, including other mods.
# Set its position to 0;0;0.
# Create another empty object as a child of this object and call it &lt;code&gt;model&lt;/code&gt;.
# Drop the mesh as a child of &lt;code&gt;model&lt;/code&gt;.
# Use the “Transform” panel to optionally modify the position, rotation and size of the mesh.
# Right click on the mesh &gt; Prefab &gt; Unpack completely.
# Select all colliders.
# In the Inspector window:
#* Delete the “Mesh Renderer” component.
#* Click on '''Add Component &gt; Mesh Collider'''.
#* Check “Convex”.
# Repeat the operation for all meshes.

&lt;blockquote&gt;Note: Materials should not have shaders.&lt;/blockquote&gt;

== Configuring the part data ==
Follow these instructions: [[Configuring the core part data]].

== Configuring the addressables ==

=== Creating the addressables ===

# If you followed the "Configuring the core part data" instructions linked above, you should have an addressables group set up for your mod with your prefab and JSON files already added.
# Next, select all icon images in the Asset folder and check "Addressable" in the Inspector window.
[[Category:Creating parts]]</text>
      <sha1>r9n8jwurgmnerzgr7wcf117pwx05bq4</sha1>
    </revision>
    <revision>
      <id>325</id>
      <parentid>312</parentid>
      <timestamp>2024-01-15T02:09:31Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>325</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3046" sha1="as5gfd0576xbvmqvn05lii845s6t9ca" xml:space="preserve">The following page will guide you through setting up a new part inside Unity.

= Configuring the part in Unity =
 '''Prerequisites'''
 [[Setting up Unity]]
 [[Modeling the mesh in Blender]]
 [[Texturing the mesh in Substance 3D Painter]]
 [[Preparing the mesh for Unity]]

 '''Useful links (may contain outdated information)'''
 Tutorial for creating a part in Unity: https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314
 Tutorial for configuring a part in Unity: https://www.youtube.com/watch?v=9fQg-oMqcH8

== Setting up the scene ==

# Open Unity Hub.
# Open the Unity project.
# Click on the three dots in the Hierarchy menu then “Add a new scene”.
# Right-click on the scene &gt; '''Save Scene'''.
# Save the scene in the Asset folder of the Unity project.
# In the Asset folder, create a folder for the mod.
# In this folder, create the “Materials” and “Parts” folders. This is just to keep the folder well organized.
# Delete the camera and light and import the meshes and textures into the corresponding folders.
 '''Good practice for organizing the Assets folder'''
 Assets
 |
 \-Modname
   |
   \-Parts
     |
     \-(separate folders for the type of parts)
       |
       \-Folder for each part
   |
   \-Materials

== Associating textures to the meshes ==

# Create a material in Unity for each material in Substance Painter (right-click on the project window &gt; '''Create &gt; Material''')
# Select all materials. In the Inspector window, in Shader, select '''KSP &gt; Parts &gt; Paintable'''.
# For each material, assign the textures to the Albedo, Metallic, Normal, Emissive and Paintable channels.
# For Normal channels, click the “Fix Now” button.
# For each mesh, assign the materials to the corresponding locations. Click on “Apply”.

== Adding meshes to the scene ==

# Create an Empty GameObject. Let's name it &lt;code&gt;myMod_myPart&lt;/code&gt;. The name must be unique to any part in KSP2, including other mods.
# Set its position to 0;0;0.
# Create another empty object as a child of this object and call it &lt;code&gt;model&lt;/code&gt;.
# Drop the mesh as a child of &lt;code&gt;model&lt;/code&gt;.
# Use the “Transform” panel to optionally modify the position, rotation and size of the mesh.
# Right click on the mesh &gt; Prefab &gt; Unpack completely.
# Select all colliders.
# In the Inspector window:
#* Delete the “Mesh Renderer” component.
#* Click on '''Add Component &gt; Mesh Collider'''.
#* Check “Convex”.
# Repeat the operation for all meshes.

&lt;blockquote&gt;Note: Materials should not have shaders.&lt;/blockquote&gt;

== Configuring the part data ==
Follow these instructions: [[Configuring the core part data]].

== Configuring the addressables ==

=== Creating the addressables ===

# If you followed the "Configuring the core part data" instructions linked above, you should have an addressables group set up for your mod with your prefab and JSON files already added.
# Next, select all icon images in the Asset folder and check "Addressable" in the Inspector window.
[[Category:Parts and modules]]</text>
      <sha1>as5gfd0576xbvmqvn05lii845s6t9ca</sha1>
    </revision>
  </page>
  <page>
    <title>Configuring the core part data</title>
    <ns>0</ns>
    <id>61</id>
    <revision>
      <id>178</id>
      <timestamp>2023-10-28T11:04:05Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Page creation</comment>
      <origin>178</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3637" sha1="cyxh5ebxrp582rabyaqegwz5grlmqfl" xml:space="preserve">= Configuring the mesh =
This part will have to be repeated for each mesh of your mod.&lt;blockquote&gt;Important

The prefab must be updated after adding a component.

In the Inspector panel: Prefab &gt; Overrides &gt; Apply all.

You also have to re-generate the JSON.&lt;/blockquote&gt;

== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Code Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}
sfdgfdgf&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* Decoupler configuration (TODO)
#* Electric Charge Generator configuration (TODO)
#* Crewed part configuration (TODO)
#* Command part configuration (TODO)
#* Reaction Wheel part configuration (TODO)
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”.
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.</text>
      <sha1>cyxh5ebxrp582rabyaqegwz5grlmqfl</sha1>
    </revision>
    <revision>
      <id>179</id>
      <parentid>178</parentid>
      <timestamp>2023-10-28T11:04:30Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Removed unnecessary text</comment>
      <origin>179</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3628" sha1="7spf5obfnbn79xdu2y0de4hxnte5l9y" xml:space="preserve">= Configuring the mesh =
This part will have to be repeated for each mesh of your mod.&lt;blockquote&gt;Important

The prefab must be updated after adding a component.

In the Inspector panel: Prefab &gt; Overrides &gt; Apply all.

You also have to re-generate the JSON.&lt;/blockquote&gt;

== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Code Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* Decoupler configuration (TODO)
#* Electric Charge Generator configuration (TODO)
#* Crewed part configuration (TODO)
#* Command part configuration (TODO)
#* Reaction Wheel part configuration (TODO)
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”.
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.</text>
      <sha1>7spf5obfnbn79xdu2y0de4hxnte5l9y</sha1>
    </revision>
    <revision>
      <id>185</id>
      <parentid>179</parentid>
      <timestamp>2023-10-28T12:18:51Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added categories</comment>
      <origin>185</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3687" sha1="q7nkgf1vp6tb1sg9gi2h6gj5lcznk9m" xml:space="preserve">= Configuring the mesh in Unity =
This part will have to be repeated for each mesh of your mod.&lt;blockquote&gt;Important

The prefab must be updated after adding a component.

In the Inspector panel: Prefab &gt; Overrides &gt; Apply all.

You also have to re-generate the JSON.&lt;/blockquote&gt;

== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Code Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* Decoupler configuration (TODO)
#* Electric Charge Generator configuration (TODO)
#* Crewed part configuration (TODO)
#* Command part configuration (TODO)
#* Reaction Wheel part configuration (TODO)
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”.
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
[[Category:Parts modding]]
[[Category:Tutorials]]</text>
      <sha1>q7nkgf1vp6tb1sg9gi2h6gj5lcznk9m</sha1>
    </revision>
    <revision>
      <id>186</id>
      <parentid>185</parentid>
      <timestamp>2023-10-28T12:28:53Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Changed category</comment>
      <origin>186</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3660" sha1="6nsvwhdqx0twocs2sfxhs0rte5k8lqm" xml:space="preserve">= Configuring the mesh in Unity =
This part will have to be repeated for each mesh of your mod.&lt;blockquote&gt;Important

The prefab must be updated after adding a component.

In the Inspector panel: Prefab &gt; Overrides &gt; Apply all.

You also have to re-generate the JSON.&lt;/blockquote&gt;

== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Code Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* Decoupler configuration (TODO)
#* Electric Charge Generator configuration (TODO)
#* Crewed part configuration (TODO)
#* Command part configuration (TODO)
#* Reaction Wheel part configuration (TODO)
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”.
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
[[Category:Tutorials]]</text>
      <sha1>6nsvwhdqx0twocs2sfxhs0rte5k8lqm</sha1>
    </revision>
    <revision>
      <id>187</id>
      <parentid>186</parentid>
      <timestamp>2023-10-28T12:29:24Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Changed category</comment>
      <origin>187</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3688" sha1="6vanp51sx4sv6jx5z8l5evkpp3fls8z" xml:space="preserve">= Configuring the mesh in Unity =
This part will have to be repeated for each mesh of your mod.&lt;blockquote&gt;Important

The prefab must be updated after adding a component.

In the Inspector panel: Prefab &gt; Overrides &gt; Apply all.

You also have to re-generate the JSON.&lt;/blockquote&gt;

== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Code Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* Decoupler configuration (TODO)
#* Electric Charge Generator configuration (TODO)
#* Crewed part configuration (TODO)
#* Command part configuration (TODO)
#* Reaction Wheel part configuration (TODO)
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”.
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
[[Category:Tutorials]]
[[Category:Creating parts]]</text>
      <sha1>6vanp51sx4sv6jx5z8l5evkpp3fls8z</sha1>
    </revision>
    <revision>
      <id>188</id>
      <parentid>187</parentid>
      <timestamp>2023-10-28T12:30:18Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <origin>188</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3728" sha1="83q01xvvm1c03ezlu18qxc3suub6usq" xml:space="preserve">= Configuring the mesh in Unity =
This part will have to be repeated for each mesh of your mod.&lt;blockquote&gt;Important

The prefab must be updated after adding a component.

In the Inspector panel: Prefab &gt; Overrides &gt; Apply all.

You also have to re-generate the JSON.&lt;/blockquote&gt;

== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Code Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* Decoupler configuration (TODO)
#* Electric Charge Generator configuration (TODO)
#* Crewed part configuration (TODO)
#* Command part configuration (TODO)
#* Reaction Wheel part configuration (TODO)
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”.
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
[[Category:Tutorials]]
[[Category:Creating parts|&lt;nowiki&gt;[[Category:Tutorials]]&lt;/nowiki&gt;]]</text>
      <sha1>83q01xvvm1c03ezlu18qxc3suub6usq</sha1>
    </revision>
    <revision>
      <id>193</id>
      <parentid>188</parentid>
      <timestamp>2023-10-28T12:34:19Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Changed category</comment>
      <origin>193</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3733" sha1="291h20q0vukzbf6siswsa5hf5wtpz1a" xml:space="preserve">= Configuring the mesh in Unity =
This part will have to be repeated for each mesh of your mod.&lt;blockquote&gt;Important

The prefab must be updated after adding a component.

In the Inspector panel: Prefab &gt; Overrides &gt; Apply all.

You also have to re-generate the JSON.&lt;/blockquote&gt;

== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Code Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* Decoupler configuration (TODO)
#* Electric Charge Generator configuration (TODO)
#* Crewed part configuration (TODO)
#* Command part configuration (TODO)
#* Reaction Wheel part configuration (TODO)
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”.
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
[[Category:Creating parts|&lt;nowiki&gt;[[Category:Tutorials]]&lt;/nowiki&gt;]]
[[Category:Creating parts]]</text>
      <sha1>291h20q0vukzbf6siswsa5hf5wtpz1a</sha1>
    </revision>
    <revision>
      <id>226</id>
      <parentid>193</parentid>
      <timestamp>2023-11-01T10:57:53Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Improved formatting</comment>
      <origin>226</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3723" sha1="bzepymwofl8rcnf4n2datd7a8pmqbu2" xml:space="preserve">= Configuring the mesh in Unity =

This part will have to be repeated for each mesh of your mod.
 '''Important'''
 The prefab must be updated after adding a component.
 In the Inspector panel: '''Prefab &gt; Overrides &gt; Apply all'''.
 You also have to re-generate the JSON.

== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Code Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* Decoupler configuration (TODO)
#* Electric Charge Generator configuration (TODO)
#* Crewed part configuration (TODO)
#* Command part configuration (TODO)
#* Reaction Wheel part configuration (TODO)
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”.
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
[[Category:Creating parts|&lt;nowiki&gt;[[Category:Tutorials]]&lt;/nowiki&gt;]]
[[Category:Creating parts]]</text>
      <sha1>bzepymwofl8rcnf4n2datd7a8pmqbu2</sha1>
    </revision>
    <revision>
      <id>228</id>
      <parentid>226</parentid>
      <timestamp>2023-11-01T11:04:32Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Added link to decoupler configuration</comment>
      <origin>228</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3744" sha1="l1b3o2odchoi2ki3kc5gyrjcpvtll12" xml:space="preserve">= Configuring the mesh in Unity =

This part will have to be repeated for each mesh of your mod.
 '''Important'''
 The prefab must be updated after adding a component.
 In the Inspector panel: '''Prefab &gt; Overrides &gt; Apply all'''.
 You also have to re-generate the JSON.

== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Code Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* [[Configuring a decoupler|Decoupler configuration]]
#* Electric Charge Generator configuration (TODO)
#* Crewed part configuration (TODO)
#* Command part configuration (TODO)
#* Reaction Wheel part configuration (TODO)
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”.
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
[[Category:Creating parts|&lt;nowiki&gt;[[Category:Tutorials]]&lt;/nowiki&gt;]]
[[Category:Creating parts]]</text>
      <sha1>l1b3o2odchoi2ki3kc5gyrjcpvtll12</sha1>
    </revision>
    <revision>
      <id>236</id>
      <parentid>228</parentid>
      <timestamp>2023-11-02T22:06:18Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added links to new pages</comment>
      <origin>236</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3837" sha1="5y5lxit3jtokxq8aqk6dkoka3h74vd2" xml:space="preserve">= Configuring the mesh in Unity =

This part will have to be repeated for each mesh of your mod.
 '''Important'''
 The prefab must be updated after adding a component.
 In the Inspector panel: '''Prefab &gt; Overrides &gt; Apply all'''.
 You also have to re-generate the JSON.

== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Code Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* [[Configuring a decoupler|Decoupler configuration]]
#* [[Configuring an Electric Charge Generator|Electric Charge Generator configuration]]
#* Crewed part configuration (TODO)
#* [[Configuring a command part|Command part configuration]]
#* [[Configuring a Reaction Wheel part|Reaction Wheel part configuration]]
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”.
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
[[Category:Creating parts|&lt;nowiki&gt;[[Category:Tutorials]]&lt;/nowiki&gt;]]
[[Category:Creating parts]]</text>
      <sha1>5y5lxit3jtokxq8aqk6dkoka3h74vd2</sha1>
    </revision>
    <revision>
      <id>250</id>
      <parentid>236</parentid>
      <timestamp>2023-11-20T23:39:06Z</timestamp>
      <contributor>
        <username>Coldrifting</username>
        <id>16</id>
      </contributor>
      <comment>Added link to docking port configuration</comment>
      <origin>250</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3898" sha1="k62pc5rrk7xcoxa128b2ijgj5htx49r" xml:space="preserve">= Configuring the mesh in Unity =

This part will have to be repeated for each mesh of your mod.
 '''Important'''
 The prefab must be updated after adding a component.
 In the Inspector panel: '''Prefab &gt; Overrides &gt; Apply all'''.
 You also have to re-generate the JSON.

== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Code Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* [[Configuring a decoupler|Decoupler configuration]]
#* [[Configuring an Electric Charge Generator|Electric Charge Generator configuration]]
#* Crewed part configuration (TODO)
#* [[Configuring a command part|Command part configuration]]
#* [[Configuring a Reaction Wheel part|Reaction Wheel part configuration]]
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
#* [[Configuring a docking port|Docking Port configuration]]
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”.
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
[[Category:Creating parts|&lt;nowiki&gt;[[Category:Tutorials]]&lt;/nowiki&gt;]]
[[Category:Creating parts]]</text>
      <sha1>k62pc5rrk7xcoxa128b2ijgj5htx49r</sha1>
    </revision>
    <revision>
      <id>302</id>
      <parentid>250</parentid>
      <timestamp>2024-01-13T03:15:13Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>302</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3908" sha1="cldo21vqftsguhpncbvy4q6o9nfj4m8" xml:space="preserve">= Configuring the core part data in Unity =

This part will have to be repeated for each mesh of your mod.
 '''Important'''
 The prefab must be updated after adding a component.
 In the Inspector panel: '''Prefab &gt; Overrides &gt; Apply all'''.
 You also have to re-generate the JSON.

== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Code Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* [[Configuring a decoupler|Decoupler configuration]]
#* [[Configuring an Electric Charge Generator|Electric Charge Generator configuration]]
#* Crewed part configuration (TODO)
#* [[Configuring a command part|Command part configuration]]
#* [[Configuring a Reaction Wheel part|Reaction Wheel part configuration]]
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
#* [[Configuring a docking port|Docking Port configuration]]
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”.
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
[[Category:Creating parts|&lt;nowiki&gt;[[Category:Tutorials]]&lt;/nowiki&gt;]]
[[Category:Creating parts]]</text>
      <sha1>cldo21vqftsguhpncbvy4q6o9nfj4m8</sha1>
    </revision>
    <revision>
      <id>303</id>
      <parentid>302</parentid>
      <timestamp>2024-01-13T03:15:54Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <minor/>
      <comment>Munix moved page [[Configuring the mesh]] to [[Configuring the core part data]]: misleading title</comment>
      <origin>302</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3908" sha1="cldo21vqftsguhpncbvy4q6o9nfj4m8" xml:space="preserve">= Configuring the core part data in Unity =

This part will have to be repeated for each mesh of your mod.
 '''Important'''
 The prefab must be updated after adding a component.
 In the Inspector panel: '''Prefab &gt; Overrides &gt; Apply all'''.
 You also have to re-generate the JSON.

== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Code Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* [[Configuring a decoupler|Decoupler configuration]]
#* [[Configuring an Electric Charge Generator|Electric Charge Generator configuration]]
#* Crewed part configuration (TODO)
#* [[Configuring a command part|Command part configuration]]
#* [[Configuring a Reaction Wheel part|Reaction Wheel part configuration]]
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
#* [[Configuring a docking port|Docking Port configuration]]
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”.
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
[[Category:Creating parts|&lt;nowiki&gt;[[Category:Tutorials]]&lt;/nowiki&gt;]]
[[Category:Creating parts]]</text>
      <sha1>cldo21vqftsguhpncbvy4q6o9nfj4m8</sha1>
    </revision>
    <revision>
      <id>310</id>
      <parentid>303</parentid>
      <timestamp>2024-01-13T14:19:00Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>/* Additional configuration */</comment>
      <origin>310</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4111" sha1="roqjtprzmsyknfnm4xmwbx9ggamsmmf" xml:space="preserve">= Configuring the core part data in Unity =

This part will have to be repeated for each mesh of your mod.
 '''Important'''
 The prefab must be updated after adding a component.
 In the Inspector panel: '''Prefab &gt; Overrides &gt; Apply all'''.
 You also have to re-generate the JSON.

== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Code Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* [[Configuring a decoupler|Decoupler configuration]]
#* [[Configuring an Electric Charge Generator|Electric Charge Generator configuration]]
#* Crewed part configuration (TODO)
#* [[Configuring a command part|Command part configuration]]
#* [[Configuring a Reaction Wheel part|Reaction Wheel part configuration]]
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
#* [[Configuring a docking port|Docking Port configuration]]
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”. Note
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
'''Note: It is important to remember that whenever you make any changes to the prefab or its components, you will need to re-apply the overrides (step 3) and save the updated JSON file (step 4).'''
[[Category:Creating parts|&lt;nowiki&gt;[[Category:Tutorials]]&lt;/nowiki&gt;]]
[[Category:Creating parts]]</text>
      <sha1>roqjtprzmsyknfnm4xmwbx9ggamsmmf</sha1>
    </revision>
    <revision>
      <id>311</id>
      <parentid>310</parentid>
      <timestamp>2024-01-13T14:20:47Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>/* Configuring the core part data in Unity */</comment>
      <origin>311</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3939" sha1="9k8yi44fljwxckc5nhm1shdg9urtpen" xml:space="preserve">= Configuring the core part data in Unity =

This process will have to be repeated for each part of your mod.
== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Core Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* [[Configuring a decoupler|Decoupler configuration]]
#* [[Configuring an Electric Charge Generator|Electric Charge Generator configuration]]
#* Crewed part configuration (TODO)
#* [[Configuring a command part|Command part configuration]]
#* [[Configuring a Reaction Wheel part|Reaction Wheel part configuration]]
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
#* [[Configuring a docking port|Docking Port configuration]]
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”. Note
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
'''Note: It is important to remember that whenever you make any changes to the prefab or its components, you will need to re-apply the overrides (step 3) and save the updated JSON file (step 4).'''
[[Category:Creating parts|&lt;nowiki&gt;[[Category:Tutorials]]&lt;/nowiki&gt;]]
[[Category:Creating parts]]</text>
      <sha1>9k8yi44fljwxckc5nhm1shdg9urtpen</sha1>
    </revision>
    <revision>
      <id>324</id>
      <parentid>311</parentid>
      <timestamp>2024-01-15T02:09:18Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>324</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3874" sha1="t00b6zg14mccjui9dhcl6nblhxqshxq" xml:space="preserve">= Configuring the core part data in Unity =

This process will have to be repeated for each part of your mod.
== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Core Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* [[Configuring a decoupler|Decoupler configuration]]
#* [[Configuring an Electric Charge Generator|Electric Charge Generator configuration]]
#* Crewed part configuration (TODO)
#* [[Configuring a command part|Command part configuration]]
#* [[Configuring a Reaction Wheel part|Reaction Wheel part configuration]]
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
#* [[Configuring a docking port|Docking Port configuration]]
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”. Note
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
'''Note: It is important to remember that whenever you make any changes to the prefab or its components, you will need to re-apply the overrides (step 3) and save the updated JSON file (step 4).'''
[[Category:Parts and modules]]</text>
      <sha1>t00b6zg14mccjui9dhcl6nblhxqshxq</sha1>
    </revision>
  </page>
  <page>
    <title>Configuring Substance Painter</title>
    <ns>0</ns>
    <id>62</id>
    <revision>
      <id>181</id>
      <timestamp>2023-10-28T12:13:59Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Created page</comment>
      <origin>181</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1078" sha1="c9tfm19ql1puprxh5s51b6hdtpbfejr" xml:space="preserve"># Download all files at this location : https://github.com/KSP2Community/CommunityPartsPack/tree/main/Textures/Lux's%20stock-alike%20textures
# Make sure the &lt;code&gt;Kerbal_Space_Program_2_Parts_Paintable.spt&lt;/code&gt; file is in your “Documents&gt;Adobe&gt;Substance Painter&gt;Assets&gt;templates” folder. If the templates folder doesn’t exist yet, then create one under Assets and drop that file in it.
# Use the File &gt; Import resources… menu to bring up the Import Resources dialog and click on the Add Resource button to bring in the &lt;code&gt;KSP2_Part.spsm&lt;/code&gt; file. Repeat this step for the &lt;code&gt;Kerbal Space Program 2 - Standard Damaged.spexp&lt;/code&gt; file. Both of these should go into your library as you’re going to need them with every part you make.
## Use the Add Resources button to find the resource you want to import
## b. Select the file and click the Open button
## c. Repeat steps (a) and (b) above for as many things as you would like to import
## Select the destination to Import your resources to (hint: library ‘your_assests’ for these!)
## e. Click Import.</text>
      <sha1>c9tfm19ql1puprxh5s51b6hdtpbfejr</sha1>
    </revision>
    <revision>
      <id>182</id>
      <parentid>181</parentid>
      <timestamp>2023-10-28T12:14:48Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added category</comment>
      <origin>182</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1107" sha1="5prk1766s2bf81y9ehg74xi1wi96pvm" xml:space="preserve"># Download all files at this location : https://github.com/KSP2Community/CommunityPartsPack/tree/main/Textures/Lux's%20stock-alike%20textures
# Make sure the &lt;code&gt;Kerbal_Space_Program_2_Parts_Paintable.spt&lt;/code&gt; file is in your “Documents&gt;Adobe&gt;Substance Painter&gt;Assets&gt;templates” folder. If the templates folder doesn’t exist yet, then create one under Assets and drop that file in it.
# Use the File &gt; Import resources… menu to bring up the Import Resources dialog and click on the Add Resource button to bring in the &lt;code&gt;KSP2_Part.spsm&lt;/code&gt; file. Repeat this step for the &lt;code&gt;Kerbal Space Program 2 - Standard Damaged.spexp&lt;/code&gt; file. Both of these should go into your library as you’re going to need them with every part you make.
## Use the Add Resources button to find the resource you want to import
## b. Select the file and click the Open button
## c. Repeat steps (a) and (b) above for as many things as you would like to import
## Select the destination to Import your resources to (hint: library ‘your_assests’ for these!)
## e. Click Import.
[[Category:Getting started]]</text>
      <sha1>5prk1766s2bf81y9ehg74xi1wi96pvm</sha1>
    </revision>
    <revision>
      <id>196</id>
      <parentid>182</parentid>
      <timestamp>2023-10-28T13:26:18Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Changed url</comment>
      <origin>196</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1118" sha1="r5t15jbv4o6y7qrk7t5811q1iayvgoe" xml:space="preserve"># Download all files at this location : https://github.com/KSP2Community/CommunityPartsPack/tree/main/Textures/Community%20Substance%20Painter%20presets
# Make sure the &lt;code&gt;Kerbal_Space_Program_2_Parts_Paintable.spt&lt;/code&gt; file is in your “Documents&gt;Adobe&gt;Substance Painter&gt;Assets&gt;templates” folder. If the templates folder doesn’t exist yet, then create one under Assets and drop that file in it.
# Use the File &gt; Import resources… menu to bring up the Import Resources dialog and click on the Add Resource button to bring in the &lt;code&gt;KSP2_Part.spsm&lt;/code&gt; file. Repeat this step for the &lt;code&gt;Kerbal Space Program 2 - Standard Damaged.spexp&lt;/code&gt; file. Both of these should go into your library as you’re going to need them with every part you make.
## Use the Add Resources button to find the resource you want to import
## b. Select the file and click the Open button
## c. Repeat steps (a) and (b) above for as many things as you would like to import
## Select the destination to Import your resources to (hint: library ‘your_assests’ for these!)
## e. Click Import.
[[Category:Getting started]]</text>
      <sha1>r5t15jbv4o6y7qrk7t5811q1iayvgoe</sha1>
    </revision>
    <revision>
      <id>208</id>
      <parentid>196</parentid>
      <timestamp>2023-10-30T10:52:58Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added partial description of SP preset files</comment>
      <origin>208</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1686" sha1="nrpzn8536sl0ukaqw9hs0tyisl9k1ey" xml:space="preserve"># Download all files at this location : https://github.com/KSP2Community/CommunityPartsPack/tree/main/Textures/Community%20Substance%20Painter%20presets
# Make sure the &lt;code&gt;Kerbal_Space_Program_2_Parts_Paintable.spt&lt;/code&gt; file is in your “Documents&gt;Adobe&gt;Substance Painter&gt;Assets&gt;templates” folder. If the templates folder doesn’t exist yet, then create one under Assets and drop that file in it.
# Use the File &gt; Import resources… menu to bring up the Import Resources dialog and click on the Add Resource button to bring in the &lt;code&gt;KSP2_Part.spsm&lt;/code&gt; file. Repeat this step for the &lt;code&gt;Kerbal Space Program 2 - Standard Damaged.spexp&lt;/code&gt; file. Both of these should go into your library as you’re going to need them with every part you make.
## Use the Add Resources button to find the resource you want to import
## b. Select the file and click the Open button
## c. Repeat steps (a) and (b) above for as many things as you would like to import
## Select the destination to Import your resources to (hint: library ‘your_assests’ for these!)
## e. Click Import.
 What are those files for?
 
 KSP2_DarkSteel.sppr: TODO
 
 KSP2_Part.spsm: TODO
 
 KSP2_Steel.sppr: TODO
 
 KSP2_Tank.sppr: TODO
 
 KSP_Gray_Steel.sppr: TODO
 
 Kerbal_Space_Program_2_-_Standard_Damaged.spexp: the project export model, which will generate all the necessary texture layers (albedo, normal, paint map, emissive and ambiant occlusion).
 
 Kerbal_Space_Program_2_Parts_Paintable.spt: that one you need so that in SP you can create a new project using the template. This sets things up so that when you bake and export textures they'll be all set for KSP.
[[Category:Getting started]]</text>
      <sha1>nrpzn8536sl0ukaqw9hs0tyisl9k1ey</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Parts and modules</title>
    <ns>14</ns>
    <id>63</id>
    <revision>
      <id>189</id>
      <timestamp>2023-10-28T12:30:49Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Made subcategory of "Tutorials"</comment>
      <origin>189</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="39" sha1="hmvd9r6b7edy722r9lrgsmdc7xvd4w8" xml:space="preserve">&lt;nowiki&gt;[[Category:Tutorials]]&lt;/nowiki&gt;</text>
      <sha1>hmvd9r6b7edy722r9lrgsmdc7xvd4w8</sha1>
    </revision>
    <revision>
      <id>190</id>
      <parentid>189</parentid>
      <timestamp>2023-10-28T12:32:10Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Made subcategory of "Tutorials"</comment>
      <origin>190</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="22" sha1="jt4mo6t18f2g3ya2mtbqtvf0rbsqqi9" xml:space="preserve">[[Category:Tutorials]]</text>
      <sha1>jt4mo6t18f2g3ya2mtbqtvf0rbsqqi9</sha1>
    </revision>
    <revision>
      <id>315</id>
      <parentid>190</parentid>
      <timestamp>2024-01-15T02:05:15Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <minor/>
      <comment>Munix moved page [[Category:Creating parts]] to [[Category:Parts and modules]]</comment>
      <origin>190</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="22" sha1="jt4mo6t18f2g3ya2mtbqtvf0rbsqqi9" xml:space="preserve">[[Category:Tutorials]]</text>
      <sha1>jt4mo6t18f2g3ya2mtbqtvf0rbsqqi9</sha1>
    </revision>
  </page>
  <page>
    <title>Creating a part icon</title>
    <ns>0</ns>
    <id>64</id>
    <revision>
      <id>197</id>
      <timestamp>2023-10-28T14:14:00Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Formatted page</comment>
      <origin>197</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1180" sha1="q82dg165jjb3e8rfh022i94vmare1e0" xml:space="preserve">== In Blender ==

# Download the &lt;code&gt;KSP2_IconGenerator.blend&lt;/code&gt; file from this location: https://github.com/KSP2Community/CommunityPartsPack/tree/main/Parts.
# Copy then open the &lt;code&gt;KSP2_IconGenerator.blend&lt;/code&gt; file.
# Click File &gt; Import &gt; FBX and import the part.
# In “Scene Collection” on the right, drag and drop the “KSP2 Paintable material” (present in “ADD YOUR MODEL HERE!”) onto the model.
# In the shader editor, import the part textures.
## Diffuse = Albedo
## Set the “Color Space” field to “Non-Color” for Metallic, Normal, and Ambient Occlusion
## If no occlusion, set the “Occlusion Strength” value to 0.
# Select the camera (press 0 to preview the rendering)
# Resize and move the model if necessary.
# Remove the “ADD MODEL HERE!” item.
# Press F12.
# Save the image (Alt + S) as &lt;part name&gt;_icon.png.

== In Unity ==

# Open the mod's Unity project.
# Move the file to the Asset folder in Unity.
# Make the file addressable. The name of the addressable must be &lt;part name&gt;_icon.png.
# Select the picture in Unity. In the Inspector window, set the value “Sprite” to the “Texture Type” field. Click on “Apply”.</text>
      <sha1>q82dg165jjb3e8rfh022i94vmare1e0</sha1>
    </revision>
    <revision>
      <id>198</id>
      <parentid>197</parentid>
      <timestamp>2023-10-28T14:14:20Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added category</comment>
      <origin>198</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1208" sha1="o1orzebr3winc74kz0a6vpn91udn2e6" xml:space="preserve">== In Blender ==

# Download the &lt;code&gt;KSP2_IconGenerator.blend&lt;/code&gt; file from this location: https://github.com/KSP2Community/CommunityPartsPack/tree/main/Parts.
# Copy then open the &lt;code&gt;KSP2_IconGenerator.blend&lt;/code&gt; file.
# Click File &gt; Import &gt; FBX and import the part.
# In “Scene Collection” on the right, drag and drop the “KSP2 Paintable material” (present in “ADD YOUR MODEL HERE!”) onto the model.
# In the shader editor, import the part textures.
## Diffuse = Albedo
## Set the “Color Space” field to “Non-Color” for Metallic, Normal, and Ambient Occlusion
## If no occlusion, set the “Occlusion Strength” value to 0.
# Select the camera (press 0 to preview the rendering)
# Resize and move the model if necessary.
# Remove the “ADD MODEL HERE!” item.
# Press F12.
# Save the image (Alt + S) as &lt;part name&gt;_icon.png.

== In Unity ==

# Open the mod's Unity project.
# Move the file to the Asset folder in Unity.
# Make the file addressable. The name of the addressable must be &lt;part name&gt;_icon.png.
# Select the picture in Unity. In the Inspector window, set the value “Sprite” to the “Texture Type” field. Click on “Apply”.
[[Category:Creating parts]]</text>
      <sha1>o1orzebr3winc74kz0a6vpn91udn2e6</sha1>
    </revision>
    <revision>
      <id>199</id>
      <parentid>198</parentid>
      <timestamp>2023-10-28T14:24:45Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added instructions to assign a material to several objets</comment>
      <origin>199</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1562" sha1="ls2rzh1llc5187y1ne42n434nen3ahj" xml:space="preserve">== In Blender ==

# Download the &lt;code&gt;KSP2_IconGenerator.blend&lt;/code&gt; file from this location: https://github.com/KSP2Community/CommunityPartsPack/tree/main/Parts.
# Copy then open the &lt;code&gt;KSP2_IconGenerator.blend&lt;/code&gt; file.
# Click File &gt; Import &gt; FBX and import the part.
# In “Scene Collection” on the right, drag and drop the “KSP2 Paintable material” (present in “ADD YOUR MODEL HERE!”) onto the model.
# In the shader editor, import the part textures.
## Diffuse = Albedo
## Set the “Color Space” field to “Non-Color” for Metallic, Normal, and Ambient Occlusion
## If no occlusion, set the “Occlusion Strength” value to 0.
# Select the camera (press 0 to preview the rendering)
# Resize and move the model if necessary.
# Remove the “ADD MODEL HERE!” item.
# Press F12.
# Save the image (Alt + S) as &lt;part name&gt;_icon.png.
 '''How to assign materials to multiple objects in Blender?'''
 1. Go to object mode.
 2. Prepare one object with the materials you want assigned to multiple objects.
 3. Select all objects you want to copy the materials to.
 4. Hold shift and click the object you prepared last to make it the active object.
 5. Press Ctrl+L.
 6. Choose link materials.

== In Unity ==

# Open the mod's Unity project.
# Move the file to the Asset folder in Unity.
# Make the file addressable. The name of the addressable must be &lt;part name&gt;_icon.png.
# Select the picture in Unity. In the Inspector window, set the value “Sprite” to the “Texture Type” field. Click on “Apply”.
[[Category:Creating parts]]</text>
      <sha1>ls2rzh1llc5187y1ne42n434nen3ahj</sha1>
    </revision>
    <revision>
      <id>215</id>
      <parentid>199</parentid>
      <timestamp>2023-10-30T11:12:26Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Polo moved page [[Part icon creation]] to [[Creating a part icon]]: Page title does not begin with a verb</comment>
      <origin>199</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1562" sha1="ls2rzh1llc5187y1ne42n434nen3ahj" xml:space="preserve">== In Blender ==

# Download the &lt;code&gt;KSP2_IconGenerator.blend&lt;/code&gt; file from this location: https://github.com/KSP2Community/CommunityPartsPack/tree/main/Parts.
# Copy then open the &lt;code&gt;KSP2_IconGenerator.blend&lt;/code&gt; file.
# Click File &gt; Import &gt; FBX and import the part.
# In “Scene Collection” on the right, drag and drop the “KSP2 Paintable material” (present in “ADD YOUR MODEL HERE!”) onto the model.
# In the shader editor, import the part textures.
## Diffuse = Albedo
## Set the “Color Space” field to “Non-Color” for Metallic, Normal, and Ambient Occlusion
## If no occlusion, set the “Occlusion Strength” value to 0.
# Select the camera (press 0 to preview the rendering)
# Resize and move the model if necessary.
# Remove the “ADD MODEL HERE!” item.
# Press F12.
# Save the image (Alt + S) as &lt;part name&gt;_icon.png.
 '''How to assign materials to multiple objects in Blender?'''
 1. Go to object mode.
 2. Prepare one object with the materials you want assigned to multiple objects.
 3. Select all objects you want to copy the materials to.
 4. Hold shift and click the object you prepared last to make it the active object.
 5. Press Ctrl+L.
 6. Choose link materials.

== In Unity ==

# Open the mod's Unity project.
# Move the file to the Asset folder in Unity.
# Make the file addressable. The name of the addressable must be &lt;part name&gt;_icon.png.
# Select the picture in Unity. In the Inspector window, set the value “Sprite” to the “Texture Type” field. Click on “Apply”.
[[Category:Creating parts]]</text>
      <sha1>ls2rzh1llc5187y1ne42n434nen3ahj</sha1>
    </revision>
    <revision>
      <id>326</id>
      <parentid>215</parentid>
      <timestamp>2024-01-15T02:09:36Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>326</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1565" sha1="rbjr3bve1j297khoapqcz40vfk0uvaj" xml:space="preserve">== In Blender ==

# Download the &lt;code&gt;KSP2_IconGenerator.blend&lt;/code&gt; file from this location: https://github.com/KSP2Community/CommunityPartsPack/tree/main/Parts.
# Copy then open the &lt;code&gt;KSP2_IconGenerator.blend&lt;/code&gt; file.
# Click File &gt; Import &gt; FBX and import the part.
# In “Scene Collection” on the right, drag and drop the “KSP2 Paintable material” (present in “ADD YOUR MODEL HERE!”) onto the model.
# In the shader editor, import the part textures.
## Diffuse = Albedo
## Set the “Color Space” field to “Non-Color” for Metallic, Normal, and Ambient Occlusion
## If no occlusion, set the “Occlusion Strength” value to 0.
# Select the camera (press 0 to preview the rendering)
# Resize and move the model if necessary.
# Remove the “ADD MODEL HERE!” item.
# Press F12.
# Save the image (Alt + S) as &lt;part name&gt;_icon.png.
 '''How to assign materials to multiple objects in Blender?'''
 1. Go to object mode.
 2. Prepare one object with the materials you want assigned to multiple objects.
 3. Select all objects you want to copy the materials to.
 4. Hold shift and click the object you prepared last to make it the active object.
 5. Press Ctrl+L.
 6. Choose link materials.

== In Unity ==

# Open the mod's Unity project.
# Move the file to the Asset folder in Unity.
# Make the file addressable. The name of the addressable must be &lt;part name&gt;_icon.png.
# Select the picture in Unity. In the Inspector window, set the value “Sprite” to the “Texture Type” field. Click on “Apply”.
[[Category:Parts and modules]]</text>
      <sha1>rbjr3bve1j297khoapqcz40vfk0uvaj</sha1>
    </revision>
  </page>
  <page>
    <title>Modeling the mesh in Blender</title>
    <ns>0</ns>
    <id>65</id>
    <revision>
      <id>209</id>
      <timestamp>2023-10-30T11:03:08Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added instructions</comment>
      <origin>209</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1158" sha1="2a2o3zmxez8lr5hyb3m3qg61zzh0z2o" xml:space="preserve">This page is not going to teach you how to use Blender. There are plenty of resources on the internet to help you in this area.

This page will describe the rules you have to follow in order to mod for KSP2.

# Model the mesh.
# Position the mesh as if it's sitting on the ground. This will help you set up the attach nodes later.
# Create a new material named &lt;code&gt;myMod_myPart&lt;/code&gt; and assign it to the part.
# The following steps might help you generate seams in order to set up the UV map. You can do differently. The important thing is to have a only one UV map for the entire mesh. The less empty space in the map, the better.
## Press '''Tab''' to enter Edit Mode.
## Click '''Select &gt; Select Sharp Edges''' (the angle should be 30°).
## Press '''Ctrl + E &gt; Mark Seams'''.
## Manually remove excess seams, trying to have only one seam for each series of continuous faces: '''Ctrl + E &gt; Clear Seams'''.
# Press '''A''' to select the entire mesh.
# Click '''UV''' (on the right menu) &gt; '''Smart UV project''', with a margin of 0.003.
# Click '''UV''' (on the left menu) '''&gt; Pack islands''', with a margin of 0.003.
# Export the model in FBX format.</text>
      <sha1>2a2o3zmxez8lr5hyb3m3qg61zzh0z2o</sha1>
    </revision>
    <revision>
      <id>210</id>
      <parentid>209</parentid>
      <timestamp>2023-10-30T11:03:51Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added category</comment>
      <origin>210</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1186" sha1="m6pzfz2qxar9n5soa3fjzjf28d08qi4" xml:space="preserve">This page is not going to teach you how to use Blender. There are plenty of resources on the internet to help you in this area.

This page will describe the rules you have to follow in order to mod for KSP2.

# Model the mesh.
# Position the mesh as if it's sitting on the ground. This will help you set up the attach nodes later.
# Create a new material named &lt;code&gt;myMod_myPart&lt;/code&gt; and assign it to the part.
# The following steps might help you generate seams in order to set up the UV map. You can do differently. The important thing is to have a only one UV map for the entire mesh. The less empty space in the map, the better.
## Press '''Tab''' to enter Edit Mode.
## Click '''Select &gt; Select Sharp Edges''' (the angle should be 30°).
## Press '''Ctrl + E &gt; Mark Seams'''.
## Manually remove excess seams, trying to have only one seam for each series of continuous faces: '''Ctrl + E &gt; Clear Seams'''.
# Press '''A''' to select the entire mesh.
# Click '''UV''' (on the right menu) &gt; '''Smart UV project''', with a margin of 0.003.
# Click '''UV''' (on the left menu) '''&gt; Pack islands''', with a margin of 0.003.
# Export the model in FBX format.
[[Category:Creating parts]]</text>
      <sha1>m6pzfz2qxar9n5soa3fjzjf28d08qi4</sha1>
    </revision>
    <revision>
      <id>211</id>
      <parentid>210</parentid>
      <timestamp>2023-10-30T11:07:26Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Added useful links</comment>
      <origin>211</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1659" sha1="qimhjpkla6grud5u3cu0qa0qqe6ost9" xml:space="preserve">This page is not going to teach you how to use Blender. There are plenty of resources on the internet to help you in this area.

This page will describe the rules you have to follow in order to mod for KSP2.

# Model the mesh.
# Position the mesh as if it's sitting on the ground. This will help you set up the attach nodes later.
# Create a new material named &lt;code&gt;myMod_myPart&lt;/code&gt; and assign it to the part.
# The following steps might help you generate seams in order to set up the UV map. You can do differently. The important thing is to have a only one UV map for the entire mesh. The less empty space in the map, the better.
## Press '''Tab''' to enter Edit Mode.
## Click '''Select &gt; Select Sharp Edges''' (the angle should be 30°).
## Press '''Ctrl + E &gt; Mark Seams'''.
## Manually remove excess seams, trying to have only one seam for each series of continuous faces: '''Ctrl + E &gt; Clear Seams'''.
# Press '''A''' to select the entire mesh.
# Click '''UV''' (on the right menu) &gt; '''Smart UV project''', with a margin of 0.003.
# Click '''UV''' (on the left menu) '''&gt; Pack islands''', with a margin of 0.003.
# Export the model in FBX format.
 Useful links
 Blender tutorial fuel tank KSP1 : https://www.youtube.com/watch?v=VJy5cXd04uk
 Blender tutorial for modeling a pod for KSP1 (series): https://www.youtube.com/watch?v=rUXDb8mcW-A
 Setting up seams and UV unwrap: https://www.youtube.com/watch?v=Fr2SX1rZZM0

* Tutoriel Blender fuel tank KSP1 : Kerbal Space Program Modding Tutorial | Using Blender only!
* Série de tutoriels CST-100 KSP1 : Blender - Modeling a Pod-like Spacecraft (CST-100 Starliner) Part 1

[[Category:Creating parts]]</text>
      <sha1>qimhjpkla6grud5u3cu0qa0qqe6ost9</sha1>
    </revision>
    <revision>
      <id>212</id>
      <parentid>211</parentid>
      <timestamp>2023-10-30T11:07:39Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Fix</comment>
      <origin>212</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1457" sha1="11tutg8zsn8n260hx5tj5ttenloecj9" xml:space="preserve">This page is not going to teach you how to use Blender. There are plenty of resources on the internet to help you in this area.

This page will describe the rules you have to follow in order to mod for KSP2.

# Model the mesh.
# Position the mesh as if it's sitting on the ground. This will help you set up the attach nodes later.
# Create a new material named &lt;code&gt;myMod_myPart&lt;/code&gt; and assign it to the part.
# The following steps might help you generate seams in order to set up the UV map. You can do differently. The important thing is to have a only one UV map for the entire mesh. The less empty space in the map, the better.
## Press '''Tab''' to enter Edit Mode.
## Click '''Select &gt; Select Sharp Edges''' (the angle should be 30°).
## Press '''Ctrl + E &gt; Mark Seams'''.
## Manually remove excess seams, trying to have only one seam for each series of continuous faces: '''Ctrl + E &gt; Clear Seams'''.
# Press '''A''' to select the entire mesh.
# Click '''UV''' (on the right menu) &gt; '''Smart UV project''', with a margin of 0.003.
# Click '''UV''' (on the left menu) '''&gt; Pack islands''', with a margin of 0.003.
# Export the model in FBX format.
 Useful links
 Blender tutorial fuel tank KSP1 : https://www.youtube.com/watch?v=VJy5cXd04uk
 Blender tutorial for modeling a pod for KSP1 (series): https://www.youtube.com/watch?v=rUXDb8mcW-A
 Setting up seams and UV unwrap: https://www.youtube.com/watch?v=Fr2SX1rZZM0

[[Category:Creating parts]]</text>
      <sha1>11tutg8zsn8n260hx5tj5ttenloecj9</sha1>
    </revision>
    <revision>
      <id>313</id>
      <parentid>212</parentid>
      <timestamp>2024-01-13T14:26:57Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>313</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1513" sha1="m1ft3cf8aatk0wkr9zn7108vnwj1ueb" xml:space="preserve">This page is not going to teach you how to use Blender. There are plenty of resources on the internet to help you in this area.

This page will describe the rules you have to follow in order to mod for KSP2.

# Model the mesh.
# Position the mesh as if it's sitting on the ground. This will help you set up the attach nodes later.
# When the mesh is finished, apply all transformations.
# Create a new material named &lt;code&gt;myMod_myPart&lt;/code&gt; and assign it to the part.
# The following steps might help you generate seams in order to set up the UV map. You can do differently. The important thing is to have a only one UV map for the entire mesh. The less empty space in the map, the better.
## Press '''Tab''' to enter Edit Mode.
## Click '''Select &gt; Select Sharp Edges''' (the angle should be 30°).
## Press '''Ctrl + E &gt; Mark Seams'''.
## Manually remove excess seams, trying to have only one seam for each series of continuous faces: '''Ctrl + E &gt; Clear Seams'''.
# Press '''A''' to select the entire mesh.
# Click '''UV''' (on the right menu) &gt; '''Smart UV project''', with a margin of 0.003.
# Click '''UV''' (on the left menu) '''&gt; Pack islands''', with a margin of 0.003.
# Export the model in FBX format.
 Useful links
 Blender tutorial fuel tank KSP1 : https://www.youtube.com/watch?v=VJy5cXd04uk
 Blender tutorial for modeling a pod for KSP1 (series): https://www.youtube.com/watch?v=rUXDb8mcW-A
 Setting up seams and UV unwrap: https://www.youtube.com/watch?v=Fr2SX1rZZM0

[[Category:Creating parts]]</text>
      <sha1>m1ft3cf8aatk0wkr9zn7108vnwj1ueb</sha1>
    </revision>
    <revision>
      <id>327</id>
      <parentid>313</parentid>
      <timestamp>2024-01-15T02:10:05Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>327</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1516" sha1="3ak14pg8bxhjrkyt3rh60gvyvw0x109" xml:space="preserve">This page is not going to teach you how to use Blender. There are plenty of resources on the internet to help you in this area.

This page will describe the rules you have to follow in order to mod for KSP2.

# Model the mesh.
# Position the mesh as if it's sitting on the ground. This will help you set up the attach nodes later.
# When the mesh is finished, apply all transformations.
# Create a new material named &lt;code&gt;myMod_myPart&lt;/code&gt; and assign it to the part.
# The following steps might help you generate seams in order to set up the UV map. You can do differently. The important thing is to have a only one UV map for the entire mesh. The less empty space in the map, the better.
## Press '''Tab''' to enter Edit Mode.
## Click '''Select &gt; Select Sharp Edges''' (the angle should be 30°).
## Press '''Ctrl + E &gt; Mark Seams'''.
## Manually remove excess seams, trying to have only one seam for each series of continuous faces: '''Ctrl + E &gt; Clear Seams'''.
# Press '''A''' to select the entire mesh.
# Click '''UV''' (on the right menu) &gt; '''Smart UV project''', with a margin of 0.003.
# Click '''UV''' (on the left menu) '''&gt; Pack islands''', with a margin of 0.003.
# Export the model in FBX format.
 Useful links
 Blender tutorial fuel tank KSP1 : https://www.youtube.com/watch?v=VJy5cXd04uk
 Blender tutorial for modeling a pod for KSP1 (series): https://www.youtube.com/watch?v=rUXDb8mcW-A
 Setting up seams and UV unwrap: https://www.youtube.com/watch?v=Fr2SX1rZZM0

[[Category:Parts and modules]]</text>
      <sha1>3ak14pg8bxhjrkyt3rh60gvyvw0x109</sha1>
    </revision>
  </page>
  <page>
    <title>Tutorials Home Page</title>
    <ns>0</ns>
    <id>66</id>
    <redirect title="Tutorials Home Page (to be deleted)" />
    <revision>
      <id>214</id>
      <timestamp>2023-10-30T11:11:27Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Polo moved page [[Tutorials Home Page]] to [[Tutorials Home Page (to be deleted)]]: Page no longer useful</comment>
      <origin>214</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="49" sha1="hty1tjf9le6qlfty6mhdep132y1uf9w" xml:space="preserve">#REDIRECT [[Tutorials Home Page (to be deleted)]]</text>
      <sha1>hty1tjf9le6qlfty6mhdep132y1uf9w</sha1>
    </revision>
  </page>
  <page>
    <title>Part icon creation</title>
    <ns>0</ns>
    <id>67</id>
    <redirect title="Creating a part icon" />
    <revision>
      <id>216</id>
      <timestamp>2023-10-30T11:12:26Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Polo moved page [[Part icon creation]] to [[Creating a part icon]]: Page title does not begin with a verb</comment>
      <origin>216</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="34" sha1="cxo1gxrc1dhk4u294x507bs6hseidei" xml:space="preserve">#REDIRECT [[Creating a part icon]]</text>
      <sha1>cxo1gxrc1dhk4u294x507bs6hseidei</sha1>
    </revision>
  </page>
  <page>
    <title>Texturing the mesh in Substance 3D Painter</title>
    <ns>0</ns>
    <id>68</id>
    <revision>
      <id>217</id>
      <timestamp>2023-10-30T11:23:02Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added content</comment>
      <origin>217</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4943" sha1="4tl9p9i7zt2j0b4nfi2u6aeu9ivrjej" xml:space="preserve"> Prerequisites
 [[Configuring Substance Painter]]
 [[Modeling the mesh in Blender]]

== General texturing ==

# Open a new project
## Select 4K textures
## Select the &lt;code&gt;Kerbal_Space_Program_2_Parts_Paintable&lt;/code&gt; template.
## Import the FBX
# Find the &lt;code&gt;KSP2_Part&lt;/code&gt; Smart Material and apply it to the mesh.
# For some reason doing this will bring in some stuff already on the Edges layer that applies to the Heightmap (thus the orange bar under it). You should clear the black mask on Edges to get rid of those. Just right click on the black mask and select Clear Mask.
# You can drop any materials (smart or otherwise) into the Base Material folder inside the KSP2_Part folder. These are what you use for most details, with the exceptions being some things you'll do on Nails, or Edges, or Emissivity. Since applying the KSP2 smart material to the whole thing includes applying a KSP2 Steel material without a mask inside the Base Material folder, everything will start out as a shiny steel. I leave this as the last layer in that stack to catch anything I don't otherwise paint, and put other painting layers above it with masks.
# For paint map, just open up the PaintMap folder and apply whatever strength you need to the black masks for Base and Accent. This works just like painting on any other black mask. Mostly, you'll just apply full strength to indicate (yes, please apply the player's base or accent paint color here). Using anything less would result in the player's attempt to paint the part being diluted. You need to paint Base everywhere you want any color (accent or base), and then also paint Accent where you want the accent paint to be applied. If there is no base paint somewhere, then whatever you paint in Substance Painter will be what the player gets and they can't change it.

 Did you know?
 
 The height channel induces a real deformation of the mesh (works well with a lot of polygons) while the normal channel is a bumb map.
 
 Substance 3D Painter converts Roughness to Glossiness automatically. The export template uses the Glossiness channel.

== Creating gradients ==

# You must bake at some point before this, and your bake must include Position as we'll need that. If you've already baked your model in SP, you don't need to do it again.
# Starting with an Emissive layer (you can have more than one if you need more than one color - just duplicate and customize), paint at full strength (1.0) on the black mask everywhere you want the gradient to be.
# Right Click the black mask and pick the &lt;code&gt;add generator&lt;/code&gt; option.
# Click on the resulting &lt;code&gt;Generator (no generator selected)&lt;/code&gt; button, and pick the second option from the left for &lt;code&gt;3D Linear Gradient&lt;/code&gt;.
# The Image inputs should default to Position, so just switch your display from Material or whatever to Position and orient your part so you can see the point where you want the 0 for the gradient to be like this (the display picker is in the upper right corner of the panel with your 3D view).
# Take the eye dropper from the &lt;code&gt;3D Position End&lt;/code&gt; and click on the place you want the End to be. This assumes that the &lt;code&gt;Start&lt;/code&gt; is already where you want one endpoint of the gradiant to be, as it is in the view above. If you oriented your model so that the &lt;code&gt;End&lt;/code&gt; is already where you want it, then use the other eye dropper and set the start. The objective is that you've got the Position mapped colors pinning down the range across which you want the gradient to go. Don't worry if &lt;code&gt;Start&lt;/code&gt; and &lt;code&gt;End&lt;/code&gt; are reversed from what you want because...
# Set Invert to be &lt;code&gt;True&lt;/code&gt; if the gradient is going the wrong way! (as it is in the example above).
# ''Most Important!'' Set the generator to apply as &lt;code&gt;Multiply&lt;/code&gt; (it will default to &lt;code&gt;Normal&lt;/code&gt;). This is the part where the work done on Step 2 will help you as it will then correctly constrain where the gradient is applied.
# When you're all done, you can set your display to &lt;code&gt;Mask&lt;/code&gt; so you can see how the gradient will be applied to whatever color you set for your Emissive. BTW, there's nothing magical or special about the name for the layer. If you chance it to &lt;code&gt;Engine Glow&lt;/code&gt; or &lt;code&gt;Emissive 1&lt;/code&gt; or whatever it will still add to the emissive &lt;code&gt;*_e.png&lt;/code&gt; texture as that is how the Emissive layer was setup when you applied the KSP2 Smart Material.

== Exporting the textures ==

# Press '''Ctrl+Shift+E''' to open the export window.
# Select the &lt;code&gt;Kerbal_Space_program_2_Parts_Paintable&lt;/code&gt; output template.

 Uneful links
 Substance 3D Painter tutorial: https://www.youtube.com/watch?v=_j27AS0VQOw
 Free materials: https://substance3d.adobe.com/community-assets/
 Paid materials: https://www.artstation.com/
 Lux's notes on Paint Map: https://luxstice.notion.site/How-to-create-a-paintmap-texture-59c51441f4d048a5803c0b2b108cd041</text>
      <sha1>4tl9p9i7zt2j0b4nfi2u6aeu9ivrjej</sha1>
    </revision>
    <revision>
      <id>218</id>
      <parentid>217</parentid>
      <timestamp>2023-10-30T11:23:25Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added category</comment>
      <origin>218</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4971" sha1="iq1db8nkuahaiurzv7jfh6bse2r1vy4" xml:space="preserve"> Prerequisites
 [[Configuring Substance Painter]]
 [[Modeling the mesh in Blender]]

== General texturing ==

# Open a new project
## Select 4K textures
## Select the &lt;code&gt;Kerbal_Space_Program_2_Parts_Paintable&lt;/code&gt; template.
## Import the FBX
# Find the &lt;code&gt;KSP2_Part&lt;/code&gt; Smart Material and apply it to the mesh.
# For some reason doing this will bring in some stuff already on the Edges layer that applies to the Heightmap (thus the orange bar under it). You should clear the black mask on Edges to get rid of those. Just right click on the black mask and select Clear Mask.
# You can drop any materials (smart or otherwise) into the Base Material folder inside the KSP2_Part folder. These are what you use for most details, with the exceptions being some things you'll do on Nails, or Edges, or Emissivity. Since applying the KSP2 smart material to the whole thing includes applying a KSP2 Steel material without a mask inside the Base Material folder, everything will start out as a shiny steel. I leave this as the last layer in that stack to catch anything I don't otherwise paint, and put other painting layers above it with masks.
# For paint map, just open up the PaintMap folder and apply whatever strength you need to the black masks for Base and Accent. This works just like painting on any other black mask. Mostly, you'll just apply full strength to indicate (yes, please apply the player's base or accent paint color here). Using anything less would result in the player's attempt to paint the part being diluted. You need to paint Base everywhere you want any color (accent or base), and then also paint Accent where you want the accent paint to be applied. If there is no base paint somewhere, then whatever you paint in Substance Painter will be what the player gets and they can't change it.

 Did you know?
 
 The height channel induces a real deformation of the mesh (works well with a lot of polygons) while the normal channel is a bumb map.
 
 Substance 3D Painter converts Roughness to Glossiness automatically. The export template uses the Glossiness channel.

== Creating gradients ==

# You must bake at some point before this, and your bake must include Position as we'll need that. If you've already baked your model in SP, you don't need to do it again.
# Starting with an Emissive layer (you can have more than one if you need more than one color - just duplicate and customize), paint at full strength (1.0) on the black mask everywhere you want the gradient to be.
# Right Click the black mask and pick the &lt;code&gt;add generator&lt;/code&gt; option.
# Click on the resulting &lt;code&gt;Generator (no generator selected)&lt;/code&gt; button, and pick the second option from the left for &lt;code&gt;3D Linear Gradient&lt;/code&gt;.
# The Image inputs should default to Position, so just switch your display from Material or whatever to Position and orient your part so you can see the point where you want the 0 for the gradient to be like this (the display picker is in the upper right corner of the panel with your 3D view).
# Take the eye dropper from the &lt;code&gt;3D Position End&lt;/code&gt; and click on the place you want the End to be. This assumes that the &lt;code&gt;Start&lt;/code&gt; is already where you want one endpoint of the gradiant to be, as it is in the view above. If you oriented your model so that the &lt;code&gt;End&lt;/code&gt; is already where you want it, then use the other eye dropper and set the start. The objective is that you've got the Position mapped colors pinning down the range across which you want the gradient to go. Don't worry if &lt;code&gt;Start&lt;/code&gt; and &lt;code&gt;End&lt;/code&gt; are reversed from what you want because...
# Set Invert to be &lt;code&gt;True&lt;/code&gt; if the gradient is going the wrong way! (as it is in the example above).
# ''Most Important!'' Set the generator to apply as &lt;code&gt;Multiply&lt;/code&gt; (it will default to &lt;code&gt;Normal&lt;/code&gt;). This is the part where the work done on Step 2 will help you as it will then correctly constrain where the gradient is applied.
# When you're all done, you can set your display to &lt;code&gt;Mask&lt;/code&gt; so you can see how the gradient will be applied to whatever color you set for your Emissive. BTW, there's nothing magical or special about the name for the layer. If you chance it to &lt;code&gt;Engine Glow&lt;/code&gt; or &lt;code&gt;Emissive 1&lt;/code&gt; or whatever it will still add to the emissive &lt;code&gt;*_e.png&lt;/code&gt; texture as that is how the Emissive layer was setup when you applied the KSP2 Smart Material.

== Exporting the textures ==

# Press '''Ctrl+Shift+E''' to open the export window.
# Select the &lt;code&gt;Kerbal_Space_program_2_Parts_Paintable&lt;/code&gt; output template.

 Uneful links
 Substance 3D Painter tutorial: https://www.youtube.com/watch?v=_j27AS0VQOw
 Free materials: https://substance3d.adobe.com/community-assets/
 Paid materials: https://www.artstation.com/
 Lux's notes on Paint Map: https://luxstice.notion.site/How-to-create-a-paintmap-texture-59c51441f4d048a5803c0b2b108cd041
[[Category:Creating parts]]</text>
      <sha1>iq1db8nkuahaiurzv7jfh6bse2r1vy4</sha1>
    </revision>
    <revision>
      <id>219</id>
      <parentid>218</parentid>
      <timestamp>2023-10-30T11:26:28Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Corrected typo</comment>
      <origin>219</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4971" sha1="azo6qlmeskowgbe1qdynxj1xt6j5lzj" xml:space="preserve"> Prerequisites
 [[Configuring Substance Painter]]
 [[Modeling the mesh in Blender]]

== General texturing ==

# Open a new project
## Select 4K textures
## Select the &lt;code&gt;Kerbal_Space_Program_2_Parts_Paintable&lt;/code&gt; template.
## Import the FBX
# Find the &lt;code&gt;KSP2_Part&lt;/code&gt; Smart Material and apply it to the mesh.
# For some reason doing this will bring in some stuff already on the Edges layer that applies to the Heightmap (thus the orange bar under it). You should clear the black mask on Edges to get rid of those. Just right click on the black mask and select Clear Mask.
# You can drop any materials (smart or otherwise) into the Base Material folder inside the KSP2_Part folder. These are what you use for most details, with the exceptions being some things you'll do on Nails, or Edges, or Emissivity. Since applying the KSP2 smart material to the whole thing includes applying a KSP2 Steel material without a mask inside the Base Material folder, everything will start out as a shiny steel. I leave this as the last layer in that stack to catch anything I don't otherwise paint, and put other painting layers above it with masks.
# For paint map, just open up the PaintMap folder and apply whatever strength you need to the black masks for Base and Accent. This works just like painting on any other black mask. Mostly, you'll just apply full strength to indicate (yes, please apply the player's base or accent paint color here). Using anything less would result in the player's attempt to paint the part being diluted. You need to paint Base everywhere you want any color (accent or base), and then also paint Accent where you want the accent paint to be applied. If there is no base paint somewhere, then whatever you paint in Substance Painter will be what the player gets and they can't change it.

 Did you know?
 
 The height channel induces a real deformation of the mesh (works well with a lot of polygons) while the normal channel is a bumb map.
 
 Substance 3D Painter converts Roughness to Glossiness automatically. The export template uses the Glossiness channel.

== Creating gradients ==

# You must bake at some point before this, and your bake must include Position as we'll need that. If you've already baked your model in SP, you don't need to do it again.
# Starting with an Emissive layer (you can have more than one if you need more than one color - just duplicate and customize), paint at full strength (1.0) on the black mask everywhere you want the gradient to be.
# Right Click the black mask and pick the &lt;code&gt;add generator&lt;/code&gt; option.
# Click on the resulting &lt;code&gt;Generator (no generator selected)&lt;/code&gt; button, and pick the second option from the left for &lt;code&gt;3D Linear Gradient&lt;/code&gt;.
# The Image inputs should default to Position, so just switch your display from Material or whatever to Position and orient your part so you can see the point where you want the 0 for the gradient to be like this (the display picker is in the upper right corner of the panel with your 3D view).
# Take the eye dropper from the &lt;code&gt;3D Position End&lt;/code&gt; and click on the place you want the End to be. This assumes that the &lt;code&gt;Start&lt;/code&gt; is already where you want one endpoint of the gradiant to be, as it is in the view above. If you oriented your model so that the &lt;code&gt;End&lt;/code&gt; is already where you want it, then use the other eye dropper and set the start. The objective is that you've got the Position mapped colors pinning down the range across which you want the gradient to go. Don't worry if &lt;code&gt;Start&lt;/code&gt; and &lt;code&gt;End&lt;/code&gt; are reversed from what you want because...
# Set Invert to be &lt;code&gt;True&lt;/code&gt; if the gradient is going the wrong way! (as it is in the example above).
# ''Most Important!'' Set the generator to apply as &lt;code&gt;Multiply&lt;/code&gt; (it will default to &lt;code&gt;Normal&lt;/code&gt;). This is the part where the work done on Step 2 will help you as it will then correctly constrain where the gradient is applied.
# When you're all done, you can set your display to &lt;code&gt;Mask&lt;/code&gt; so you can see how the gradient will be applied to whatever color you set for your Emissive. BTW, there's nothing magical or special about the name for the layer. If you chance it to &lt;code&gt;Engine Glow&lt;/code&gt; or &lt;code&gt;Emissive 1&lt;/code&gt; or whatever it will still add to the emissive &lt;code&gt;*_e.png&lt;/code&gt; texture as that is how the Emissive layer was setup when you applied the KSP2 Smart Material.

== Exporting the textures ==

# Press '''Ctrl+Shift+E''' to open the export window.
# Select the &lt;code&gt;Kerbal_Space_program_2_Parts_Paintable&lt;/code&gt; output template.

 Useful links
 Substance 3D Painter tutorial: https://www.youtube.com/watch?v=_j27AS0VQOw
 Free materials: https://substance3d.adobe.com/community-assets/
 Paid materials: https://www.artstation.com/
 Lux's notes on Paint Map: https://luxstice.notion.site/How-to-create-a-paintmap-texture-59c51441f4d048a5803c0b2b108cd041
[[Category:Creating parts]]</text>
      <sha1>azo6qlmeskowgbe1qdynxj1xt6j5lzj</sha1>
    </revision>
    <revision>
      <id>330</id>
      <parentid>219</parentid>
      <timestamp>2024-01-15T02:10:55Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>330</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4974" sha1="bddx6su5xptl52ob03bpz2qwmakp513" xml:space="preserve"> Prerequisites
 [[Configuring Substance Painter]]
 [[Modeling the mesh in Blender]]

== General texturing ==

# Open a new project
## Select 4K textures
## Select the &lt;code&gt;Kerbal_Space_Program_2_Parts_Paintable&lt;/code&gt; template.
## Import the FBX
# Find the &lt;code&gt;KSP2_Part&lt;/code&gt; Smart Material and apply it to the mesh.
# For some reason doing this will bring in some stuff already on the Edges layer that applies to the Heightmap (thus the orange bar under it). You should clear the black mask on Edges to get rid of those. Just right click on the black mask and select Clear Mask.
# You can drop any materials (smart or otherwise) into the Base Material folder inside the KSP2_Part folder. These are what you use for most details, with the exceptions being some things you'll do on Nails, or Edges, or Emissivity. Since applying the KSP2 smart material to the whole thing includes applying a KSP2 Steel material without a mask inside the Base Material folder, everything will start out as a shiny steel. I leave this as the last layer in that stack to catch anything I don't otherwise paint, and put other painting layers above it with masks.
# For paint map, just open up the PaintMap folder and apply whatever strength you need to the black masks for Base and Accent. This works just like painting on any other black mask. Mostly, you'll just apply full strength to indicate (yes, please apply the player's base or accent paint color here). Using anything less would result in the player's attempt to paint the part being diluted. You need to paint Base everywhere you want any color (accent or base), and then also paint Accent where you want the accent paint to be applied. If there is no base paint somewhere, then whatever you paint in Substance Painter will be what the player gets and they can't change it.

 Did you know?
 
 The height channel induces a real deformation of the mesh (works well with a lot of polygons) while the normal channel is a bumb map.
 
 Substance 3D Painter converts Roughness to Glossiness automatically. The export template uses the Glossiness channel.

== Creating gradients ==

# You must bake at some point before this, and your bake must include Position as we'll need that. If you've already baked your model in SP, you don't need to do it again.
# Starting with an Emissive layer (you can have more than one if you need more than one color - just duplicate and customize), paint at full strength (1.0) on the black mask everywhere you want the gradient to be.
# Right Click the black mask and pick the &lt;code&gt;add generator&lt;/code&gt; option.
# Click on the resulting &lt;code&gt;Generator (no generator selected)&lt;/code&gt; button, and pick the second option from the left for &lt;code&gt;3D Linear Gradient&lt;/code&gt;.
# The Image inputs should default to Position, so just switch your display from Material or whatever to Position and orient your part so you can see the point where you want the 0 for the gradient to be like this (the display picker is in the upper right corner of the panel with your 3D view).
# Take the eye dropper from the &lt;code&gt;3D Position End&lt;/code&gt; and click on the place you want the End to be. This assumes that the &lt;code&gt;Start&lt;/code&gt; is already where you want one endpoint of the gradiant to be, as it is in the view above. If you oriented your model so that the &lt;code&gt;End&lt;/code&gt; is already where you want it, then use the other eye dropper and set the start. The objective is that you've got the Position mapped colors pinning down the range across which you want the gradient to go. Don't worry if &lt;code&gt;Start&lt;/code&gt; and &lt;code&gt;End&lt;/code&gt; are reversed from what you want because...
# Set Invert to be &lt;code&gt;True&lt;/code&gt; if the gradient is going the wrong way! (as it is in the example above).
# ''Most Important!'' Set the generator to apply as &lt;code&gt;Multiply&lt;/code&gt; (it will default to &lt;code&gt;Normal&lt;/code&gt;). This is the part where the work done on Step 2 will help you as it will then correctly constrain where the gradient is applied.
# When you're all done, you can set your display to &lt;code&gt;Mask&lt;/code&gt; so you can see how the gradient will be applied to whatever color you set for your Emissive. BTW, there's nothing magical or special about the name for the layer. If you chance it to &lt;code&gt;Engine Glow&lt;/code&gt; or &lt;code&gt;Emissive 1&lt;/code&gt; or whatever it will still add to the emissive &lt;code&gt;*_e.png&lt;/code&gt; texture as that is how the Emissive layer was setup when you applied the KSP2 Smart Material.

== Exporting the textures ==

# Press '''Ctrl+Shift+E''' to open the export window.
# Select the &lt;code&gt;Kerbal_Space_program_2_Parts_Paintable&lt;/code&gt; output template.

 Useful links
 Substance 3D Painter tutorial: https://www.youtube.com/watch?v=_j27AS0VQOw
 Free materials: https://substance3d.adobe.com/community-assets/
 Paid materials: https://www.artstation.com/
 Lux's notes on Paint Map: https://luxstice.notion.site/How-to-create-a-paintmap-texture-59c51441f4d048a5803c0b2b108cd041
[[Category:Parts and modules]]</text>
      <sha1>bddx6su5xptl52ob03bpz2qwmakp513</sha1>
    </revision>
  </page>
  <page>
    <title>Preparing the mesh for Unity</title>
    <ns>0</ns>
    <id>71</id>
    <revision>
      <id>224</id>
      <timestamp>2023-11-01T10:44:21Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Created page</comment>
      <origin>224</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="759" sha1="5lsm2yenzf4lgvnne9z654cojjaoktw" xml:space="preserve"> Prerequisites
 [[Setting up Unity]]
 [[Modeling the mesh in Blender]]
 [[Texturing the mesh in Substance 3D Painter]]

# In Blender, make sure that the origin of the object is where its center of mass would be.
# Move the object along the vertical axis so that it rests at 0;0.
# Rhe object must be at scale 1 (otherwise the shape will not be preserved in Unity). If not: '''Ctrl+A &gt; Apply Scale'''.
# You might as well apply rotation while you're at it.
# Right click on the object name &gt; '''Select hierarchy'''.
# Click on '''File &gt; Export &gt; FBX'''. Give a specific name to the file (eg: my_mod_engine.fbx).
# Check “Selected objects”.
# Uncheck “Precalculate animation” (“Bake animation”).
# Click on “Export”.

[[Category:Creating parts]]</text>
      <sha1>5lsm2yenzf4lgvnne9z654cojjaoktw</sha1>
    </revision>
    <revision>
      <id>314</id>
      <parentid>224</parentid>
      <timestamp>2024-01-13T14:30:06Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>314</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="772" sha1="74hwepskoa9ofwyq30bvn2ayh0l2j2o" xml:space="preserve"> Prerequisites
 [[Setting up Unity]]
 [[Modeling the mesh in Blender]]
 [[Texturing the mesh in Substance 3D Painter]]

# In Blender, make sure that the origin of the object is where its center of mass would be.
# Move the object along the vertical axis so that it rests at 0;0.
# The object must be at scale 1 (otherwise the shape will not be preserved in Unity). If not: '''Ctrl+A &gt; Apply Scale'''.
# Also '''Apply Rotation''' in order to prevent issues in the game.
# Right click on the object name &gt; '''Select hierarchy'''.
# Click on '''File &gt; Export &gt; FBX'''. Give a specific name to the file (eg: my_mod_engine.fbx).
# Check '''Selected objects'''.
# Uncheck '''Precalculate animation''' (“Bake animation”).
# Click on '''Export'''.

[[Category:Creating parts]]</text>
      <sha1>74hwepskoa9ofwyq30bvn2ayh0l2j2o</sha1>
    </revision>
    <revision>
      <id>329</id>
      <parentid>314</parentid>
      <timestamp>2024-01-15T02:10:32Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>329</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="775" sha1="appat0u1gmmhi9d08yghwumc7jaiyra" xml:space="preserve"> Prerequisites
 [[Setting up Unity]]
 [[Modeling the mesh in Blender]]
 [[Texturing the mesh in Substance 3D Painter]]

# In Blender, make sure that the origin of the object is where its center of mass would be.
# Move the object along the vertical axis so that it rests at 0;0.
# The object must be at scale 1 (otherwise the shape will not be preserved in Unity). If not: '''Ctrl+A &gt; Apply Scale'''.
# Also '''Apply Rotation''' in order to prevent issues in the game.
# Right click on the object name &gt; '''Select hierarchy'''.
# Click on '''File &gt; Export &gt; FBX'''. Give a specific name to the file (eg: my_mod_engine.fbx).
# Check '''Selected objects'''.
# Uncheck '''Precalculate animation''' (“Bake animation”).
# Click on '''Export'''.

[[Category:Parts and modules]]</text>
      <sha1>appat0u1gmmhi9d08yghwumc7jaiyra</sha1>
    </revision>
  </page>
  <page>
    <title>Configuring a decoupler</title>
    <ns>0</ns>
    <id>72</id>
    <revision>
      <id>227</id>
      <timestamp>2023-11-01T11:03:31Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Created page</comment>
      <origin>227</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="903" sha1="9qhhbl7vs421qz2xyx1pzm3zutxxjr5" xml:space="preserve"># Click on '''Add Component &gt; Module_Decouple'''.
# Fill in the fields.

{| class="wikitable"
! colspan="1" rowspan="1" |'''Field'''
! colspan="1" rowspan="1" |'''Value/Comment'''
|-
| colspan="2" rowspan="1" |'''Core Part Data'''
|-
| colspan="1" rowspan="1" |Stage Type
| colspan="1" rowspan="1" |Decoupler Horizontal

Decoupler Vertical
|-
| colspan="1" rowspan="1" |Staging Icon Asset Address
| colspan="1" rowspan="1" |“Staging-Icon-Inline.png”
|-
| colspan="1" rowspan="1" |Tags
| colspan="1" rowspan="1" |Ex : “break decouple separat split stag”
|-
| colspan="2" rowspan="1" |'''Module_Decouple'''
|-
| colspan="1" rowspan="1" |Explosive Node ID
| colspan="1" rowspan="1" |“top” or “bottom”
|-
| colspan="1" rowspan="1" |Explosive Dir
| colspan="1" rowspan="1" |0;-1;0 so that the decoupler goes downwards

0;1;0 so that the decoupler goes upwards
|}


[[Category:Creating parts]]</text>
      <sha1>9qhhbl7vs421qz2xyx1pzm3zutxxjr5</sha1>
    </revision>
    <revision>
      <id>229</id>
      <parentid>227</parentid>
      <timestamp>2023-11-01T11:05:07Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added prerequisites</comment>
      <origin>229</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="950" sha1="7uoyn5g88e4jrcgxs8b3nu8u955w2ey" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]
# Click on '''Add Component &gt; Module_Decouple'''.
# Fill in the fields.

{| class="wikitable"
! colspan="1" rowspan="1" |'''Field'''
! colspan="1" rowspan="1" |'''Value/Comment'''
|-
| colspan="2" rowspan="1" |'''Core Part Data'''
|-
| colspan="1" rowspan="1" |Stage Type
| colspan="1" rowspan="1" |Decoupler Horizontal

Decoupler Vertical
|-
| colspan="1" rowspan="1" |Staging Icon Asset Address
| colspan="1" rowspan="1" |“Staging-Icon-Inline.png”
|-
| colspan="1" rowspan="1" |Tags
| colspan="1" rowspan="1" |Ex : “break decouple separat split stag”
|-
| colspan="2" rowspan="1" |'''Module_Decouple'''
|-
| colspan="1" rowspan="1" |Explosive Node ID
| colspan="1" rowspan="1" |“top” or “bottom”
|-
| colspan="1" rowspan="1" |Explosive Dir
| colspan="1" rowspan="1" |0;-1;0 so that the decoupler goes downwards

0;1;0 so that the decoupler goes upwards
|}


[[Category:Creating parts]]</text>
      <sha1>7uoyn5g88e4jrcgxs8b3nu8u955w2ey</sha1>
    </revision>
    <revision>
      <id>320</id>
      <parentid>229</parentid>
      <timestamp>2024-01-15T02:08:23Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>320</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="953" sha1="3c6jtdomvxb7ipufmvnwudryu9cxnx8" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]
# Click on '''Add Component &gt; Module_Decouple'''.
# Fill in the fields.

{| class="wikitable"
! colspan="1" rowspan="1" |'''Field'''
! colspan="1" rowspan="1" |'''Value/Comment'''
|-
| colspan="2" rowspan="1" |'''Core Part Data'''
|-
| colspan="1" rowspan="1" |Stage Type
| colspan="1" rowspan="1" |Decoupler Horizontal

Decoupler Vertical
|-
| colspan="1" rowspan="1" |Staging Icon Asset Address
| colspan="1" rowspan="1" |“Staging-Icon-Inline.png”
|-
| colspan="1" rowspan="1" |Tags
| colspan="1" rowspan="1" |Ex : “break decouple separat split stag”
|-
| colspan="2" rowspan="1" |'''Module_Decouple'''
|-
| colspan="1" rowspan="1" |Explosive Node ID
| colspan="1" rowspan="1" |“top” or “bottom”
|-
| colspan="1" rowspan="1" |Explosive Dir
| colspan="1" rowspan="1" |0;-1;0 so that the decoupler goes downwards

0;1;0 so that the decoupler goes upwards
|}


[[Category:Parts and modules]]</text>
      <sha1>3c6jtdomvxb7ipufmvnwudryu9cxnx8</sha1>
    </revision>
  </page>
  <page>
    <title>Configuring an Electric Charge Generator</title>
    <ns>0</ns>
    <id>73</id>
    <revision>
      <id>230</id>
      <timestamp>2023-11-02T21:55:55Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Created page</comment>
      <origin>230</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="522" sha1="6f44cd7r2rb130h7av9s88h3y6rmuik" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Generator'''.
# Fill in the fields.

{| class="wikitable"
! colspan="1" rowspan="1" |'''Field'''
! colspan="1" rowspan="1" |'''Value/Comment'''
|-
| colspan="2" rowspan="1" |'''Core Part Data'''
|-
| colspan="1" rowspan="1" |Rate
| colspan="1" rowspan="1" |Ex: 5.5
|-
| colspan="1" rowspan="1" |Resource
| colspan="1" rowspan="1" |"Electric Charge"
|-
| colspan="1" rowspan="1" |Acceptance Threshold
| colspan="1" rowspan="1" |Ex: 5.5
|}</text>
      <sha1>6f44cd7r2rb130h7av9s88h3y6rmuik</sha1>
    </revision>
    <revision>
      <id>237</id>
      <parentid>230</parentid>
      <timestamp>2023-11-02T22:06:43Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added category</comment>
      <origin>237</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="550" sha1="cvwhn94265q0pal1k0iptt6q54yu7yy" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Generator'''.
# Fill in the fields.

{| class="wikitable"
! colspan="1" rowspan="1" |'''Field'''
! colspan="1" rowspan="1" |'''Value/Comment'''
|-
| colspan="2" rowspan="1" |'''Core Part Data'''
|-
| colspan="1" rowspan="1" |Rate
| colspan="1" rowspan="1" |Ex: 5.5
|-
| colspan="1" rowspan="1" |Resource
| colspan="1" rowspan="1" |"Electric Charge"
|-
| colspan="1" rowspan="1" |Acceptance Threshold
| colspan="1" rowspan="1" |Ex: 5.5
|}
[[Category:Creating parts]]</text>
      <sha1>cvwhn94265q0pal1k0iptt6q54yu7yy</sha1>
    </revision>
    <revision>
      <id>323</id>
      <parentid>237</parentid>
      <timestamp>2024-01-15T02:09:08Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>323</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="553" sha1="1p7oeve7au6l0rsdep031j8lrz4v5o9" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Generator'''.
# Fill in the fields.

{| class="wikitable"
! colspan="1" rowspan="1" |'''Field'''
! colspan="1" rowspan="1" |'''Value/Comment'''
|-
| colspan="2" rowspan="1" |'''Core Part Data'''
|-
| colspan="1" rowspan="1" |Rate
| colspan="1" rowspan="1" |Ex: 5.5
|-
| colspan="1" rowspan="1" |Resource
| colspan="1" rowspan="1" |"Electric Charge"
|-
| colspan="1" rowspan="1" |Acceptance Threshold
| colspan="1" rowspan="1" |Ex: 5.5
|}
[[Category:Parts and modules]]</text>
      <sha1>1p7oeve7au6l0rsdep031j8lrz4v5o9</sha1>
    </revision>
  </page>
  <page>
    <title>Configuring a command part</title>
    <ns>0</ns>
    <id>74</id>
    <revision>
      <id>231</id>
      <timestamp>2023-11-02T22:00:17Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Created page</comment>
      <origin>231</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="689" sha1="e8qrrmonezrghp65imtf0ur257odeyv" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Command'''.
# Fill in the fields.

{| class="wikitable"
! colspan="1" rowspan="1" |'''Field'''
! colspan="1" rowspan="1" |'''Value/Comment'''
|-
| colspan="2" rowspan="1" |'''Module_Command'''
|-
| colspan="1" rowspan="1" |Minimum Crew
| colspan="1" rowspan="1" |1 for pods
0 for probes
|-
| colspan="1" rowspan="1" |Has Hibernation
| colspan="1" rowspan="1" |False for pods
True for probes
|-
| colspan="1" rowspan="1" |Requires Comm Net
| colspan="1" rowspan="1" |False for pods
True for probes
|-
| rowspan="1" |Alternate Control Orientations
|Id : "Reversed"
Orientation : 0;0;180
Position : 0;0;0
|}</text>
      <sha1>e8qrrmonezrghp65imtf0ur257odeyv</sha1>
    </revision>
    <revision>
      <id>232</id>
      <parentid>231</parentid>
      <timestamp>2023-11-02T22:01:00Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Fix</comment>
      <origin>232</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="687" sha1="h75fzdv9wh88zkgfhhn5a2vuznvfiog" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Command'''.
# Fill in the fields.

{| class="wikitable"
! colspan="1" rowspan="1" |'''Field'''
! colspan="1" rowspan="1" |'''Value/Comment'''
|-
| colspan="2" rowspan="1" |'''Module_Command'''
|-
| colspan="1" rowspan="1" |Minimum Crew
| colspan="1" rowspan="1" |1 for pods
0 for probes
|-
| colspan="1" rowspan="1" |Has Hibernation
| colspan="1" rowspan="1" |False for pods
True for probes
|-
| colspan="1" rowspan="1" |Requires Comm Net
| colspan="1" rowspan="1" |False for pods
True for probes
|-
| rowspan="1" |Alternate Control Orientations
|Id: "Reversed"
Orientation: 0;0;180

Position: 0;0;0
|}</text>
      <sha1>h75fzdv9wh88zkgfhhn5a2vuznvfiog</sha1>
    </revision>
    <revision>
      <id>233</id>
      <parentid>232</parentid>
      <timestamp>2023-11-02T22:01:18Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Fix</comment>
      <origin>233</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="686" sha1="j753hp3knq9o364okrhpa0pp08k9ixt" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Command'''.
# Fill in the fields.

{| class="wikitable"
! colspan="1" rowspan="1" |'''Field'''
! colspan="1" rowspan="1" |'''Value/Comment'''
|-
| colspan="2" rowspan="1" |'''Module_Command'''
|-
| colspan="1" rowspan="1" |Minimum Crew
| colspan="1" rowspan="1" |1 for pods
0 for probes
|-
| colspan="1" rowspan="1" |Has Hibernation
| colspan="1" rowspan="1" |False for pods
True for probes
|-
| colspan="1" rowspan="1" |Requires Comm Net
| colspan="1" rowspan="1" |False for pods
True for probes
|-
| rowspan="1" |Alternate Control Orientations
|Id: "Reversed"
Orientation: 0;0;180
Position: 0;0;0
|}</text>
      <sha1>j753hp3knq9o364okrhpa0pp08k9ixt</sha1>
    </revision>
    <revision>
      <id>234</id>
      <parentid>233</parentid>
      <timestamp>2023-11-02T22:01:36Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Fix</comment>
      <origin>234</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="691" sha1="t39mdrluybx7p7kb7t4can86o0jcabn" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Command'''.
# Fill in the fields.

{| class="wikitable"
! colspan="1" rowspan="1" |'''Field'''
! colspan="1" rowspan="1" |'''Value/Comment'''
|-
| colspan="2" rowspan="1" |'''Module_Command'''
|-
| colspan="1" rowspan="1" |Minimum Crew
| colspan="1" rowspan="1" |1 for pods
0 for probes
|-
| colspan="1" rowspan="1" |Has Hibernation
| colspan="1" rowspan="1" |False for pods
True for probes
|-
| colspan="1" rowspan="1" |Requires Comm Net
| colspan="1" rowspan="1" |False for pods
True for probes
|-
| rowspan="1" |Alternate Control Orientations
|Id: "Reversed"  
Orientation: 0;0;180  

Position: 0;0;0
|}</text>
      <sha1>t39mdrluybx7p7kb7t4can86o0jcabn</sha1>
    </revision>
    <revision>
      <id>238</id>
      <parentid>234</parentid>
      <timestamp>2023-11-02T22:06:59Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added category</comment>
      <origin>238</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="719" sha1="tt11va669m83jnxnuzqzdids0smyy1o" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Command'''.
# Fill in the fields.

{| class="wikitable"
! colspan="1" rowspan="1" |'''Field'''
! colspan="1" rowspan="1" |'''Value/Comment'''
|-
| colspan="2" rowspan="1" |'''Module_Command'''
|-
| colspan="1" rowspan="1" |Minimum Crew
| colspan="1" rowspan="1" |1 for pods
0 for probes
|-
| colspan="1" rowspan="1" |Has Hibernation
| colspan="1" rowspan="1" |False for pods
True for probes
|-
| colspan="1" rowspan="1" |Requires Comm Net
| colspan="1" rowspan="1" |False for pods
True for probes
|-
| rowspan="1" |Alternate Control Orientations
|Id: "Reversed"  
Orientation: 0;0;180  

Position: 0;0;0
|}
[[Category:Creating parts]]</text>
      <sha1>tt11va669m83jnxnuzqzdids0smyy1o</sha1>
    </revision>
    <revision>
      <id>319</id>
      <parentid>238</parentid>
      <timestamp>2024-01-15T02:08:14Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>319</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="722" sha1="8gblq7a3q76p63pazosx311gnrdahmp" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Command'''.
# Fill in the fields.

{| class="wikitable"
! colspan="1" rowspan="1" |'''Field'''
! colspan="1" rowspan="1" |'''Value/Comment'''
|-
| colspan="2" rowspan="1" |'''Module_Command'''
|-
| colspan="1" rowspan="1" |Minimum Crew
| colspan="1" rowspan="1" |1 for pods
0 for probes
|-
| colspan="1" rowspan="1" |Has Hibernation
| colspan="1" rowspan="1" |False for pods
True for probes
|-
| colspan="1" rowspan="1" |Requires Comm Net
| colspan="1" rowspan="1" |False for pods
True for probes
|-
| rowspan="1" |Alternate Control Orientations
|Id: "Reversed"  
Orientation: 0;0;180  

Position: 0;0;0
|}
[[Category:Parts and modules]]</text>
      <sha1>8gblq7a3q76p63pazosx311gnrdahmp</sha1>
    </revision>
  </page>
  <page>
    <title>Configuring a Reaction Wheel part</title>
    <ns>0</ns>
    <id>75</id>
    <revision>
      <id>235</id>
      <timestamp>2023-11-02T22:05:12Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Created page</comment>
      <origin>235</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="738" sha1="9opc3pmap4qk1v3f8rfkf1w3o2xjua0" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_ReactionWheel'''.
# Fill in the fields.

{| class="wikitable"
! colspan="1" rowspan="1" |'''Field'''
! colspan="1" rowspan="1" |'''Value/Comment'''
|-
| colspan="2" rowspan="1" |'''Module_ReactionWheel'''
|-
| colspan="1" rowspan="1" |Pitch Torque
| colspan="1" rowspan="1" |Ex: 5
|-
| colspan="1" rowspan="1" |Yaw Torque
| colspan="1" rowspan="1" |Ex: 5
|-
| colspan="1" rowspan="1" |Roll Torque
| colspan="1" rowspan="1" |Ex: 5
|-
| rowspan="1" |Torque Response Speed
|Ex: 30
|-
| colspan="1" rowspan="1" |RequiredResources
| colspan="1" rowspan="1" |Rate: 0.025
ResourceName: "ElectricCharge"

AcceptanceThreshold: 0.01
|}
[[Category:Creating parts]]</text>
      <sha1>9opc3pmap4qk1v3f8rfkf1w3o2xjua0</sha1>
    </revision>
    <revision>
      <id>318</id>
      <parentid>235</parentid>
      <timestamp>2024-01-15T02:08:07Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>318</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="741" sha1="oo4wzo9893fitqetv4sv0x6eugyhvhu" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_ReactionWheel'''.
# Fill in the fields.

{| class="wikitable"
! colspan="1" rowspan="1" |'''Field'''
! colspan="1" rowspan="1" |'''Value/Comment'''
|-
| colspan="2" rowspan="1" |'''Module_ReactionWheel'''
|-
| colspan="1" rowspan="1" |Pitch Torque
| colspan="1" rowspan="1" |Ex: 5
|-
| colspan="1" rowspan="1" |Yaw Torque
| colspan="1" rowspan="1" |Ex: 5
|-
| colspan="1" rowspan="1" |Roll Torque
| colspan="1" rowspan="1" |Ex: 5
|-
| rowspan="1" |Torque Response Speed
|Ex: 30
|-
| colspan="1" rowspan="1" |RequiredResources
| colspan="1" rowspan="1" |Rate: 0.025
ResourceName: "ElectricCharge"

AcceptanceThreshold: 0.01
|}
[[Category:Parts and modules]]</text>
      <sha1>oo4wzo9893fitqetv4sv0x6eugyhvhu</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Developing basics</title>
    <ns>14</ns>
    <id>77</id>
    <revision>
      <id>242</id>
      <timestamp>2023-11-06T20:37:07Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added category</comment>
      <origin>242</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="22" sha1="jt4mo6t18f2g3ya2mtbqtvf0rbsqqi9" xml:space="preserve">[[Category:Tutorials]]</text>
      <sha1>jt4mo6t18f2g3ya2mtbqtvf0rbsqqi9</sha1>
    </revision>
    <revision>
      <id>244</id>
      <parentid>242</parentid>
      <timestamp>2023-11-06T20:47:05Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <minor/>
      <comment>Munix moved page [[Category:Developping basics]] to [[Category:Developing basics]] without leaving a redirect: Misspelled title: Typo: DevelopPing</comment>
      <origin>242</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="22" sha1="jt4mo6t18f2g3ya2mtbqtvf0rbsqqi9" xml:space="preserve">[[Category:Tutorials]]</text>
      <sha1>jt4mo6t18f2g3ya2mtbqtvf0rbsqqi9</sha1>
    </revision>
  </page>
  <page>
    <title>Configuring a docking port</title>
    <ns>0</ns>
    <id>78</id>
    <revision>
      <id>249</id>
      <timestamp>2023-11-20T23:37:20Z</timestamp>
      <contributor>
        <username>Coldrifting</username>
        <id>16</id>
      </contributor>
      <comment>Added module docking port details</comment>
      <origin>249</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2695" sha1="n7yypt82a725v4n1mxnswd4zfhvp3cc" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Docking Node'''.
# Fill in the fields.

{| class="wikitable"
|+
!Field
!Value/Comment
|-
| colspan="2" |'''Module_Docking Node'''
|-
|Docking Transform Name
|The name of your game object that defines where the docking port should attach to other docking ports.
Remember that foward in Unity is along the blue axis, so point the game object (usually a Empty object) along that direction
|-
|Control Transform Name
|The direction to change to when clicking on Control from Here in the Parts action menu in game. 
Again, point the blue axis in the direction you want
|-
|Attachment Node id
|The node to connect to when docking (I think)
|-
|'''Node Types'''
|Any array of node sizes that determines which types of docking ports yours can dock to. 
For example, size0 is stock 0.625m diameter docking ports, size1 is 1.25m, and so on.
Since this is an array, you can list multiple different types that the port can dock to
|-
|Undock Ejection Force
|How much force to use when undocking. The default 10 is probably too much for smaller ports.
The stock 1.25m port uses a value of 0.4
|-
|Min Distance To Reengage
|How far away the ship should get before the docking port will dock again
|-
|Acquire Range
|How close the docking port needs to get to 
|-
|Acquire Torque
|How much torque the docking port can apply to align the connection in the non-roll axis?
|-
|Acquire TorqueRoll
|How much torque the docking port can apply to align the connection in the roll axis?
|-
|Capture Range
|How far away the two docking ports need to be before they will lock together
|-
|Capture Min Fwd 
|This value determines how much of a difference there can be in the dot product of the two docking transforms 
of both docking ports that are currently attempting to dock.
|-
|Capture Min Roll Dot
|Not sure
|-
|Capture Max Rvel
|Not sure
|-
|fx Dock Prefab Name
|The effect to use when docking
|-
|fx Undock Prefab Name
|The effect to use when undocking
|-
|Is Gendered
|Se to true to make this docking port gendered, which means that you need a male and female port to dock.
This could be useful for recreating soviet style drogue and probe docking ports, for example
|-
|Is Gender Female
|If using gendered docking ports, marking this true creates a female docking port
|-
|Snap Rotation
|Set to true if the docking port should snap to angles
|-
|Snap Offset
|The angle to snap to when using Snap Rotation
|-
|Current State
|The default state of the port. You probably want to leave this at Ready
|-
|Is Deployable Docking Port
|Set to true if this is a deployable docking port, like the stock MK1/2 deployable docking ports
|}</text>
      <sha1>n7yypt82a725v4n1mxnswd4zfhvp3cc</sha1>
    </revision>
    <revision>
      <id>251</id>
      <parentid>249</parentid>
      <timestamp>2023-11-20T23:40:54Z</timestamp>
      <contributor>
        <username>Cheese</username>
        <id>7</id>
      </contributor>
      <comment>Mention custom docking port sizes</comment>
      <origin>251</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2808" sha1="fhbpwntrx8yrtubjjwudu60vhypunq1" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Docking Node'''.
# Fill in the fields.

{| class="wikitable"
|+
!Field
!Value/Comment
|-
| colspan="2" |'''Module_Docking Node'''
|-
|Docking Transform Name
|The name of your game object that defines where the docking port should attach to other docking ports.
Remember that foward in Unity is along the blue axis, so point the game object (usually a Empty object) along that direction
|-
|Control Transform Name
|The direction to change to when clicking on Control from Here in the Parts action menu in game. 
Again, point the blue axis in the direction you want
|-
|Attachment Node id
|The node to connect to when docking (I think)
|-
|'''Node Types'''
|Any array of node sizes that determines which types of docking ports yours can dock to. 
For example, size0 is stock 0.625m diameter docking ports, size1 is 1.25m, and so on.

Since this is an array, you can list multiple different types that the port can dock to.

You can also use this to create custom docking port sizes, since it is an array of strings rather than enums.
|-
|Undock Ejection Force
|How much force to use when undocking. The default 10 is probably too much for smaller ports.
The stock 1.25m port uses a value of 0.4
|-
|Min Distance To Reengage
|How far away the ship should get before the docking port will dock again
|-
|Acquire Range
|How close the docking port needs to get to 
|-
|Acquire Torque
|How much torque the docking port can apply to align the connection in the non-roll axis?
|-
|Acquire TorqueRoll
|How much torque the docking port can apply to align the connection in the roll axis?
|-
|Capture Range
|How far away the two docking ports need to be before they will lock together
|-
|Capture Min Fwd 
|This value determines how much of a difference there can be in the dot product of the two docking transforms 
of both docking ports that are currently attempting to dock.
|-
|Capture Min Roll Dot
|Not sure
|-
|Capture Max Rvel
|Not sure
|-
|fx Dock Prefab Name
|The effect to use when docking
|-
|fx Undock Prefab Name
|The effect to use when undocking
|-
|Is Gendered
|Se to true to make this docking port gendered, which means that you need a male and female port to dock.
This could be useful for recreating soviet style drogue and probe docking ports, for example
|-
|Is Gender Female
|If using gendered docking ports, marking this true creates a female docking port
|-
|Snap Rotation
|Set to true if the docking port should snap to angles
|-
|Snap Offset
|The angle to snap to when using Snap Rotation
|-
|Current State
|The default state of the port. You probably want to leave this at Ready
|-
|Is Deployable Docking Port
|Set to true if this is a deployable docking port, like the stock MK1/2 deployable docking ports
|}</text>
      <sha1>fhbpwntrx8yrtubjjwudu60vhypunq1</sha1>
    </revision>
    <revision>
      <id>252</id>
      <parentid>251</parentid>
      <timestamp>2023-11-20T23:41:36Z</timestamp>
      <contributor>
        <username>Coldrifting</username>
        <id>16</id>
      </contributor>
      <minor/>
      <origin>252</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2861" sha1="kgqxx4fps5jaerqf9sp5vvohow9gobx" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Docking Node'''.
# Fill in the fields.

{| class="wikitable"
|+
!Field
!Value/Comment
|-
| colspan="2" |'''Module_Docking Node'''
|-
|Docking Transform Name
|The name of your game object that defines where the docking port should attach to other docking ports.
Remember that foward in Unity is along the blue axis, so point the game object (usually a Empty object) along that direction
|-
|Control Transform Name
|The direction to change to when clicking on Control from Here in the Parts action menu in game. 
Again, point the blue axis in the direction you want
|-
|Attachment Node id
|The node to connect to when docking (I think)
|-
|'''Node Types'''
|Any array of node sizes that determines which types of docking ports yours can dock to. 
For example, size0 is stock 0.625m diameter docking ports, size1 is 1.25m, and so on.

Since this is an array, you can list multiple different types that the port can dock to.

You can also use this to create custom docking port sizes, since it is an array of strings rather than enums.
|-
|Undock Ejection Force
|How much force to use when undocking. The default 10 is probably too much for smaller ports.
The stock 1.25m port uses a value of 0.4
|-
|Min Distance To Reengage
|How far away the ship should get before the docking port will dock again
|-
|Acquire Range
|How close the docking port needs to get to the other port before they will magnetically attract 
|-
|Acquire Torque
|How much torque the docking port can apply to align the connection in the non-roll axis?
|-
|Acquire TorqueRoll
|How much torque the docking port can apply to align the connection in the roll axis?
|-
|Capture Range
|How far away the two docking ports need to be before they will lock together
|-
|Capture Min Fwd 
|This value determines how much of a difference there can be in the dot product of the two docking transforms 
of both docking ports that are currently attempting to dock.
|-
|Capture Min Roll Dot
|Not sure
|-
|Capture Max Rvel
|Not sure
|-
|fx Dock Prefab Name
|The effect to use when docking
|-
|fx Undock Prefab Name
|The effect to use when undocking
|-
|Is Gendered
|Se to true to make this docking port gendered, which means that you need a male and female port to dock.
This could be useful for recreating soviet style drogue and probe docking ports, for example
|-
|Is Gender Female
|If using gendered docking ports, marking this true creates a female docking port
|-
|Snap Rotation
|Set to true if the docking port should snap to angles
|-
|Snap Offset
|The angle to snap to when using Snap Rotation
|-
|Current State
|The default state of the port. You probably want to leave this at Ready
|-
|Is Deployable Docking Port
|Set to true if this is a deployable docking port, like the stock MK1/2 deployable docking ports
|}</text>
      <sha1>kgqxx4fps5jaerqf9sp5vvohow9gobx</sha1>
    </revision>
    <revision>
      <id>253</id>
      <parentid>252</parentid>
      <timestamp>2023-11-20T23:41:40Z</timestamp>
      <contributor>
        <username>Cheese</username>
        <id>7</id>
      </contributor>
      <comment>Add category</comment>
      <origin>253</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2958" sha1="rzvkh6rm5fvasuhoa6pp7aufktnzrsy" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Docking Node'''.
# Fill in the fields.

{| class="wikitable"
|+
!Field
!Value/Comment
|-
| colspan="2" |'''Module_Docking Node'''
|-
|Docking Transform Name
|The name of your game object that defines where the docking port should attach to other docking ports.
Remember that foward in Unity is along the blue axis, so point the game object (usually a Empty object) along that direction
|-
|Control Transform Name
|The direction to change to when clicking on Control from Here in the Parts action menu in game. 
Again, point the blue axis in the direction you want
|-
|Attachment Node id
|The node to connect to when docking (I think)
|-
|'''Node Types'''
|Any array of node sizes that determines which types of docking ports yours can dock to. 
For example, size0 is stock 0.625m diameter docking ports, size1 is 1.25m, and so on.

Since this is an array, you can list multiple different types that the port can dock to.

You can also use this to create custom docking port sizes, since it is an array of strings rather than enums.
|-
|Undock Ejection Force
|How much force to use when undocking. The default 10 is probably too much for smaller ports.
The stock 1.25m port uses a value of 0.4
|-
|Min Distance To Reengage
|How far away the ship should get before the docking port will dock again
|-
|Acquire Range
|How close the docking port needs to get to the other port before they will magnetically attract 
|-
|Acquire Torque
|How much torque the docking port can apply to align the connection in the non-roll axis?
|-
|Acquire TorqueRoll
|How much torque the docking port can apply to align the connection in the roll axis?
|-
|Capture Range
|How far away the two docking ports need to be before they will lock together
|-
|Capture Min Fwd 
|This value determines how much of a difference there can be in the dot product of the two docking transforms 
of both docking ports that are currently attempting to dock.
|-
|Capture Min Roll Dot
|Not sure
|-
|Capture Max Rvel
|Not sure
|-
|fx Dock Prefab Name
|The effect to use when docking
|-
|fx Undock Prefab Name
|The effect to use when undocking
|-
|Is Gendered
|Se to true to make this docking port gendered, which means that you need a male and female port to dock.
This could be useful for recreating soviet style drogue and probe docking ports, for example
|-
|Is Gender Female
|If using gendered docking ports, marking this true creates a female docking port
|-
|Snap Rotation
|Set to true if the docking port should snap to angles
|-
|Snap Offset
|The angle to snap to when using Snap Rotation
|-
|Current State
|The default state of the port. You probably want to leave this at Ready
|-
|Is Deployable Docking Port
|Set to true if this is a deployable docking port, like the stock MK1/2 deployable docking ports
|}

[[Category:Creating parts|&lt;nowiki&gt;[[Category:Tutorials]]&lt;/nowiki&gt;]]
[[Category:Creating parts]]</text>
      <sha1>rzvkh6rm5fvasuhoa6pp7aufktnzrsy</sha1>
    </revision>
    <revision>
      <id>321</id>
      <parentid>253</parentid>
      <timestamp>2024-01-15T02:08:49Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>321</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2961" sha1="jkafdhfhxpxsyvlex27fxda3z4v49hv" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Docking Node'''.
# Fill in the fields.

{| class="wikitable"
|+
!Field
!Value/Comment
|-
| colspan="2" |'''Module_Docking Node'''
|-
|Docking Transform Name
|The name of your game object that defines where the docking port should attach to other docking ports.
Remember that foward in Unity is along the blue axis, so point the game object (usually a Empty object) along that direction
|-
|Control Transform Name
|The direction to change to when clicking on Control from Here in the Parts action menu in game. 
Again, point the blue axis in the direction you want
|-
|Attachment Node id
|The node to connect to when docking (I think)
|-
|'''Node Types'''
|Any array of node sizes that determines which types of docking ports yours can dock to. 
For example, size0 is stock 0.625m diameter docking ports, size1 is 1.25m, and so on.

Since this is an array, you can list multiple different types that the port can dock to.

You can also use this to create custom docking port sizes, since it is an array of strings rather than enums.
|-
|Undock Ejection Force
|How much force to use when undocking. The default 10 is probably too much for smaller ports.
The stock 1.25m port uses a value of 0.4
|-
|Min Distance To Reengage
|How far away the ship should get before the docking port will dock again
|-
|Acquire Range
|How close the docking port needs to get to the other port before they will magnetically attract 
|-
|Acquire Torque
|How much torque the docking port can apply to align the connection in the non-roll axis?
|-
|Acquire TorqueRoll
|How much torque the docking port can apply to align the connection in the roll axis?
|-
|Capture Range
|How far away the two docking ports need to be before they will lock together
|-
|Capture Min Fwd 
|This value determines how much of a difference there can be in the dot product of the two docking transforms 
of both docking ports that are currently attempting to dock.
|-
|Capture Min Roll Dot
|Not sure
|-
|Capture Max Rvel
|Not sure
|-
|fx Dock Prefab Name
|The effect to use when docking
|-
|fx Undock Prefab Name
|The effect to use when undocking
|-
|Is Gendered
|Se to true to make this docking port gendered, which means that you need a male and female port to dock.
This could be useful for recreating soviet style drogue and probe docking ports, for example
|-
|Is Gender Female
|If using gendered docking ports, marking this true creates a female docking port
|-
|Snap Rotation
|Set to true if the docking port should snap to angles
|-
|Snap Offset
|The angle to snap to when using Snap Rotation
|-
|Current State
|The default state of the port. You probably want to leave this at Ready
|-
|Is Deployable Docking Port
|Set to true if this is a deployable docking port, like the stock MK1/2 deployable docking ports
|}

[[Category:Creating parts|&lt;nowiki&gt;[[Category:Tutorials]]&lt;/nowiki&gt;]]
[[Category:Parts and modules]]</text>
      <sha1>jkafdhfhxpxsyvlex27fxda3z4v49hv</sha1>
    </revision>
    <revision>
      <id>322</id>
      <parentid>321</parentid>
      <timestamp>2024-01-15T02:09:02Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>322</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2893" sha1="6etvohpa1it8ciae3h473x8gbouhwm2" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Docking Node'''.
# Fill in the fields.

{| class="wikitable"
|+
!Field
!Value/Comment
|-
| colspan="2" |'''Module_Docking Node'''
|-
|Docking Transform Name
|The name of your game object that defines where the docking port should attach to other docking ports.
Remember that foward in Unity is along the blue axis, so point the game object (usually a Empty object) along that direction
|-
|Control Transform Name
|The direction to change to when clicking on Control from Here in the Parts action menu in game. 
Again, point the blue axis in the direction you want
|-
|Attachment Node id
|The node to connect to when docking (I think)
|-
|'''Node Types'''
|Any array of node sizes that determines which types of docking ports yours can dock to. 
For example, size0 is stock 0.625m diameter docking ports, size1 is 1.25m, and so on.

Since this is an array, you can list multiple different types that the port can dock to.

You can also use this to create custom docking port sizes, since it is an array of strings rather than enums.
|-
|Undock Ejection Force
|How much force to use when undocking. The default 10 is probably too much for smaller ports.
The stock 1.25m port uses a value of 0.4
|-
|Min Distance To Reengage
|How far away the ship should get before the docking port will dock again
|-
|Acquire Range
|How close the docking port needs to get to the other port before they will magnetically attract 
|-
|Acquire Torque
|How much torque the docking port can apply to align the connection in the non-roll axis?
|-
|Acquire TorqueRoll
|How much torque the docking port can apply to align the connection in the roll axis?
|-
|Capture Range
|How far away the two docking ports need to be before they will lock together
|-
|Capture Min Fwd 
|This value determines how much of a difference there can be in the dot product of the two docking transforms 
of both docking ports that are currently attempting to dock.
|-
|Capture Min Roll Dot
|Not sure
|-
|Capture Max Rvel
|Not sure
|-
|fx Dock Prefab Name
|The effect to use when docking
|-
|fx Undock Prefab Name
|The effect to use when undocking
|-
|Is Gendered
|Se to true to make this docking port gendered, which means that you need a male and female port to dock.
This could be useful for recreating soviet style drogue and probe docking ports, for example
|-
|Is Gender Female
|If using gendered docking ports, marking this true creates a female docking port
|-
|Snap Rotation
|Set to true if the docking port should snap to angles
|-
|Snap Offset
|The angle to snap to when using Snap Rotation
|-
|Current State
|The default state of the port. You probably want to leave this at Ready
|-
|Is Deployable Docking Port
|Set to true if this is a deployable docking port, like the stock MK1/2 deployable docking ports
|}

[[Category:Parts and modules]]</text>
      <sha1>6etvohpa1it8ciae3h473x8gbouhwm2</sha1>
    </revision>
  </page>
  <page>
    <title>File:Example Fake and real height.png</title>
    <ns>6</ns>
    <id>79</id>
    <revision>
      <id>257</id>
      <timestamp>2023-12-25T14:25:28Z</timestamp>
      <contributor>
        <username>StanWildin</username>
        <id>17</id>
      </contributor>
      <origin>257</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="28" sha1="l2n4oxlgfgjgmsj847ej3zueyozzdwb" xml:space="preserve">Example Fake and real height</text>
      <sha1>l2n4oxlgfgjgmsj847ej3zueyozzdwb</sha1>
    </revision>
  </page>
  <page>
    <title>File:Pasted image 1.png</title>
    <ns>6</ns>
    <id>80</id>
    <revision>
      <id>258</id>
      <timestamp>2023-12-25T14:28:56Z</timestamp>
      <contributor>
        <username>StanWildin</username>
        <id>17</id>
      </contributor>
      <origin>258</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7" sha1="mt81m2lgi9h5hcuhn42ft0o9f7gg68f" xml:space="preserve">example</text>
      <sha1>mt81m2lgi9h5hcuhn42ft0o9f7gg68f</sha1>
    </revision>
  </page>
  <page>
    <title>File:Pasted image 0.png</title>
    <ns>6</ns>
    <id>81</id>
    <revision>
      <id>259</id>
      <timestamp>2023-12-25T14:29:58Z</timestamp>
      <contributor>
        <username>StanWildin</username>
        <id>17</id>
      </contributor>
      <origin>259</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7" sha1="mt81m2lgi9h5hcuhn42ft0o9f7gg68f" xml:space="preserve">example</text>
      <sha1>mt81m2lgi9h5hcuhn42ft0o9f7gg68f</sha1>
    </revision>
  </page>
  <page>
    <title>File:UE menu.png</title>
    <ns>6</ns>
    <id>82</id>
    <revision>
      <id>266</id>
      <timestamp>2023-12-29T16:27:50Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <origin>266</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="22" sha1="537fwxwbbdejevli41zonytnlqg8mu3" xml:space="preserve">Menu of Unity Explorer</text>
      <sha1>537fwxwbbdejevli41zonytnlqg8mu3</sha1>
    </revision>
  </page>
  <page>
    <title>File:UE inspector blank.png</title>
    <ns>6</ns>
    <id>83</id>
    <revision>
      <id>267</id>
      <timestamp>2023-12-29T16:30:35Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <origin>267</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="18" sha1="rxc7l1gls8elbf75kddkjw5mh6k3hzz" xml:space="preserve">UE inspector blank</text>
      <sha1>rxc7l1gls8elbf75kddkjw5mh6k3hzz</sha1>
    </revision>
  </page>
  <page>
    <title>File:UE inspector blank dropdown.png</title>
    <ns>6</ns>
    <id>84</id>
    <revision>
      <id>268</id>
      <timestamp>2023-12-29T16:32:15Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <origin>268</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="27" sha1="t56yzl3gkq539xr1xvqc6pxto5f9if2" xml:space="preserve">UE inspector blank dropdown</text>
      <sha1>t56yzl3gkq539xr1xvqc6pxto5f9if2</sha1>
    </revision>
  </page>
  <page>
    <title>File:Box following cursor .png</title>
    <ns>6</ns>
    <id>85</id>
    <revision>
      <id>269</id>
      <timestamp>2023-12-29T16:34:05Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <origin>269</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="20" sha1="ppv13ya3tutvmr1ve9kwjm7lx2sf23x" xml:space="preserve">box following cursor</text>
      <sha1>ppv13ya3tutvmr1ve9kwjm7lx2sf23x</sha1>
    </revision>
  </page>
  <page>
    <title>File:What to look for.png</title>
    <ns>6</ns>
    <id>86</id>
    <revision>
      <id>270</id>
      <timestamp>2023-12-29T16:36:43Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <origin>270</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="16" sha1="bg261p9zookrsx8q589aic8b40jv3uh" xml:space="preserve">what to look for</text>
      <sha1>bg261p9zookrsx8q589aic8b40jv3uh</sha1>
    </revision>
  </page>
  <page>
    <title>File:Inspector filled.png</title>
    <ns>6</ns>
    <id>87</id>
    <revision>
      <id>271</id>
      <timestamp>2023-12-29T16:39:37Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <origin>271</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="16" sha1="61ls3233s34rvh69drtpa7eo00py6nk" xml:space="preserve">inspector filled</text>
      <sha1>61ls3233s34rvh69drtpa7eo00py6nk</sha1>
    </revision>
  </page>
  <page>
    <title>File:KSCbutton.png</title>
    <ns>6</ns>
    <id>88</id>
    <revision>
      <id>272</id>
      <timestamp>2023-12-29T16:43:50Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <origin>272</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="9" sha1="bzu8ls2b31m9h5qjyu7nop9w83a1aer" xml:space="preserve">KSCbutton</text>
      <sha1>bzu8ls2b31m9h5qjyu7nop9w83a1aer</sha1>
    </revision>
  </page>
  <page>
    <title>How to use Unity Explorer and Object Browser</title>
    <ns>0</ns>
    <id>89</id>
    <revision>
      <id>273</id>
      <timestamp>2023-12-29T18:34:49Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <comment>Tutorial on how to use Unity Explorer and Object Browser</comment>
      <origin>273</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1775" sha1="leliw5vbekr7eomjau1vga0lozkizji" xml:space="preserve">In this tutorial you will be shown how to use unity explorer and the visual studio 2022 object browser.

The example that is used will be finding out where the KSC menu selects the vab from. 

# Make sure you have unity explorer mod installed
# Make sure you have visual studio 2022 installed
# Have a mod project setup



First step is to open the game and start a new save. you should see the Unity Explorer menu at the top of the game, if not press F7
[[File:UE menu.png|center|frame|Unity Explorer Menu]]
Click on the button that says Inspector. This should pop up with a blank page.
[[File:UE inspector blank.png|center|thumb]]
At the top of the page you should see a drop down button with the words mouse inspect. click that button

that should drop down into 3 options. Click the UI option 
[[File:UE inspector blank dropdown.png|center|thumb]]
you should have a box following your mouse cursor, click on the KSC menu VAB 
[[File:Box following cursor .png|center|thumb]]
after clicking that you should have another menu popup. on that menu we are looking for 3 main things

The buttons name (Vehicle Assembly Building)

The main canvas

The KSC menu
[[File:What to look for.png|center|frame]]
once you have found the menu item click on it and that should open it up in the inspector

with the inspector we can see what makes up the game object.

the left menu has the objects children and the right menu has the components
[[File:Inspector filled.png|center|frame]]
when looking at the components you will see 2 items that stand out. UIAction_Void_Button and KSP.UI.KSCButton

we will take a look at the component KSP.UI.KSCButton by clicking on that component

after clicking on that it will open it up in the inspector
[[File:KSCbutton.png|center|thumb|1000x1000px]]</text>
      <sha1>leliw5vbekr7eomjau1vga0lozkizji</sha1>
    </revision>
  </page>
  <page>
    <title>File:HarmonyImage.png</title>
    <ns>6</ns>
    <id>90</id>
    <revision>
      <id>280</id>
      <timestamp>2024-01-07T23:50:29Z</timestamp>
      <contributor>
        <username>Meckryl</username>
        <id>18</id>
      </contributor>
      <origin>280</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
  </page>
  <page>
    <title>Custom Launch Locations</title>
    <ns>0</ns>
    <id>91</id>
    <revision>
      <id>281</id>
      <timestamp>2024-01-08T00:30:04Z</timestamp>
      <contributor>
        <username>Meckryl</username>
        <id>18</id>
      </contributor>
      <comment>Created Page</comment>
      <origin>281</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="10250" sha1="g7kzuaf59tk113kjycywruhxoal5pba" xml:space="preserve">
== Goal ==
In this tutorial I will show how to change the location of Launch Pad 1 to be anywhere you want

== Setup ==

===== Required Mods: =====

* SpaceWarp Template
* SpaceWarp
* Patch Manager
* Text Asset Dumper (technically not needed but I recommend installing this and doing the one time setup described below)

===== Required tools: =====

* dnSpy (or any other decompiler)

===== Steps: =====

# Install SpaceWarp, Patch Manager, and Text Asset Dumper.
# Launch KSP2.
# Open Settings &gt; Mods, then scroll down to Patch manager and make sure "Always Invalidated Cache" is on.
# Go back to the title screen, and click the "Dump" button
# If you haven't already done so, make a project for your mod using the SpaceWarp Template

== Creating a custom launch site ==
Throughout this guide, I will be using Laythe as an example, just because that's where I was trying to make my mod launch rockets.

===== Creating a location =====
Open your project folder on your system explorer. Navigate to plugin_template/patches, and in that folder create a text file with a name that ends in .patch. In that file, put the following: &lt;syntaxhighlight&gt;
@use "builtin:dictionary";
@use "builtin:list";

@patch celestial_bodies;

:json #Laythe {
    data: $value:set("LocalSimObjectsData", [
        {
            "Name": "LaunchPad_spawn_01",
            "RelativeTo": "",
            "ReferenceFrame": 1,
            "LocalPosition": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
            },
            "LocalRotation": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0,
                "w": 0.0
            },
            "FixedGuid": true
        }
            ]);
}
&lt;/syntaxhighlight&gt;Replace "Laythe" with whatever celestial body you want your object to appear on, and change the x, y, and z coordinates under LocalPosition to whatever local coordinates you'd like. An easy way to get a specific location on the surface is to land something there, save the game with your craft active, and then read the save file to see the position of your craft. 

'''''NOTE:''' If you want to make a custom location on Kerbin, you need to use $value:add rather than $value:set.''

== Patching KSP.Game.OABProvider ==
The OABProvider class is an interface for generating and using ObjectAssemblyBuilder objects (environments like the VAB that allow for construction). Eventually, the developers plan to implement many OABs through colonies and orbital assembly environments, and once they do this tutorial will probably be a LOT shorter. Unfortunately, at the moment the OABProvider class is hardcoded in many places to only generate one specific type of OAB: the VAB on Kerbin, with its predetermined launch sites.

In your project, make a new class and add the following harmony patches to it:&lt;syntaxhighlight lang="c#"&gt;
[HarmonyPrefix]
[HarmonyPatch(typeof(OABProvider), nameof(OABProvider.GetSurfaceLaunchPosition))]
public static bool GetSurfaceLaunchPosition(OABProvider __instance, string celestialBodyName, string launchPadName, ref Position __result)
{
    GameInstance game = GameManager.Instance.Game;
    CelestialBodyComponent celestialBodyComponent = game.UniverseModel.FindCelestialBodyByName(celestialBodyName);
    FramePositionState framePositionState;
    TransformModel transformModel = (TransformModel)game.UniverseModel.FindSimObjectByNameKey(launchPadName).transform;
    __result = new Position(celestialBodyComponent.transform.GetTransformFrame(TransformFrameType.Body), transformModel.localPosition);
    return false;
}

[HarmonyPrefix]
[HarmonyPatch(typeof(OABProvider), nameof(OABProvider.GetSurfaceLaunchLocation))]
public static bool GetSurfaceLaunchLocation(OABProvider __instance, string launchLocationName, ref SerializedLocation __result)
{
    string celestialBodyName = "Laythe";
    SerializedLocation serializedLocation = default(SerializedLocation);
    serializedLocation.surfaceLocation = new SerializedSurfaceLocation?(new SerializedSurfaceLocation
    {
        parentGuid = celestialBodyName,
        objectName = launchLocationName
    });
    serializedLocation.LocationType = LocationType.SurfaceLocation;
    CelestialBodyComponent celestialBodyComponent = GameManager.Instance.Game.UniverseModel.FindCelestialBodyByName(celestialBodyName);
    serializedLocation.originatingSimObject = celestialBodyComponent.SimulationObject.GlobalId;
    serializedLocation.launchSituationUnknown = launchLocationName == "Dock_spawn_01";
    __result = serializedLocation;
    return false;
}

&lt;/syntaxhighlight&gt;In the second method, change the value of celestialBodyName to be whatever celestial body you plan to be launching rockets from.

These patches exist to tell the game to not only look for our launchpad on Kerbin, and in the case of the second function, to tell it to set the reference frame to be whatever world we actually put the launchpad on.

NOTE: If you've never used harmony patches before, this is a good time to look into the basics of how they work and the basic pattern we're using here to patch code copied in from the decompiler.
[[File:HarmonyImage.png|center|Courtesy of @evil.dana on discord]]

===== About positions in KSP2: =====
Trying to store positions at a planetary (let alone interstellar) scale with a standard XYZ coordinate system would be a surefire way to encounter constant game breaking rounding issues. To get around this, the developers have created a system where everything takes place in different reference frames. If you're in the SOI of a planet or moon, then your reference frame will be a coordinate system originating from that celestial body. This coordinate system rotates with the celestial body, so an object at rest on the surface doesn't need to have its position updated at all.

Basically, the main takeaway here is that whenever we set the position of something, we usually need to also tell the game what reference frame we're working in.

== Patching UniverseObserver ==
UniverseObserver contains a method called ApplyLaunchSiteCameraGimbalState, which is set to load specifically Kerbin when we go to launch a rocket. Just like with the methods from OABProvider, we need to patch that method and replace the hardcoded string "Kerbin" with our desired celestial body.&lt;syntaxhighlight lang="c#"&gt;
if (!string.IsNullOrEmpty(text) &amp;&amp; game.SpaceSimulation.GetSurfaceObjectPosition("Kerbin", text, out framePositionState))
&lt;/syntaxhighlight&gt;...becomes...&lt;syntaxhighlight lang="c#"&gt;
if (!string.IsNullOrEmpty(text) &amp;&amp; game.SpaceSimulation.GetSurfaceObjectPosition("Laythe", text, out framePositionState))
&lt;/syntaxhighlight&gt;

== Patching SpaceSimulation ==
At this point, the game has completed the creation of your rocket and is attempting to spawn it into the world. The method SyncVesselToLocation is the final step where the game puts it on the launch pad and turns physics on. Sadly, the game is looking for our launchpad the wrong way, and will not find it unless we tell it to look the correct way. At this point there's a LOT of stuff going on, so this patch is a bit messy. Copy the decompiled source code into a harmony patch just like we've done for all the others, make sure to put a "return false" at the very end of the method so the compiler is happy, and then look at the very end of the method. Find this block of code at the bottom:&lt;syntaxhighlight lang="c#"&gt;
__instance.GetSurfaceObjectPosition(parentGuid, objectName, out simulationObjectState.position);
if (simulationObjectState.position.referenceTransformGuid != null)
{
    GeographicPositionState geographicPositionState;
    __instance.GetGeographicPosition(simulationObjectState.position.referenceTransformGuid, simulationObjectState.position, out geographicPositionState);
    geographicPositionState.altitudeFromRadius += (double)vesselComponent.OffsetToGround;
    geographicPositionState.heading = __instance.GetLaunchSiteHeading(geographicPositionState, simulationObjectState.position.localRotation);
    __instance.GetBodyRelativePosition(geographicPositionState, out simulationObjectState.position);
    RigidbodyState rigidbodyState3 = new RigidbodyState
    {
        referenceTransformGuid = simulationObjectState.position.referenceTransformGuid,
        referenceFrameType = simulationObjectState.position.referenceFrameType,
        localPosition = simulationObjectState.position.localPosition,
        localRotation = simulationObjectState.position.localRotation,
        localVelocity = Vector3d.zero,
        localAngularVelocity = Vector3d.zero
    };
    simulationObject.SetState(new SimulationObjectState?(simulationObjectState), __instance._universeModel);
    vesselComponent.SetState(vesselState, __instance._universeModel);
    simulationObject.FindComponent&lt;RigidbodyComponent&gt;().SetState(rigidbodyState3, __instance._universeModel);
    return false;
}

&lt;/syntaxhighlight&gt;And replace it with this:&lt;syntaxhighlight lang="c#"&gt;
TransformModel transformModel = (TransformModel)GameManager.Instance.Game.UniverseModel.FindSimObjectByNameKey(objectName).transform;
ITransformFrame transformFrame = (ITransformFrame)transformModel.bodyFrame;
SimulationObjectState simulationObjectState = new SimulationObjectState
{
    position = new FramePositionState
    {
        referenceTransformGuid = transformFrame.transform.Guid,
        referenceFrameType = transformFrame.type,
        localPosition = transformFrame.transform.localPosition,
        localRotation = transformFrame.transform.localRotation
    }
};

RigidbodyState rigidbodyState3 = new RigidbodyState
{
    referenceTransformGuid = transformFrame.transform.Guid,
    referenceFrameType = transformFrame.type,
    localPosition = transformFrame.transform.localPosition,
    localRotation = transformFrame.transform.localRotation,
    localVelocity = Vector3d.zero,
    localAngularVelocity = Vector3d.zero
};
simulationObject.SetState(new SimulationObjectState?(simulationObjectState), __instance._universeModel);
vesselComponent.SetState(vesselState, __instance._universeModel);
simulationObject.FindComponent&lt;RigidbodyComponent&gt;().SetState(rigidbodyState3, __instance._universeModel);
return false;

&lt;/syntaxhighlight&gt;And with this, you should be done!</text>
      <sha1>g7kzuaf59tk113kjycywruhxoal5pba</sha1>
    </revision>
    <revision>
      <id>282</id>
      <parentid>281</parentid>
      <timestamp>2024-01-08T00:42:24Z</timestamp>
      <contributor>
        <username>Meckryl</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Change topic to tutorials</comment>
      <origin>282</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="10273" sha1="g3c0xwzdifwpja754dyj3lf8gpa4yxm" xml:space="preserve">
== Goal ==
In this tutorial I will show how to change the location of Launch Pad 1 to be anywhere you want

== Setup ==

===== Required Mods: =====

* SpaceWarp Template
* SpaceWarp
* Patch Manager
* Text Asset Dumper (technically not needed but I recommend installing this and doing the one time setup described below)

===== Required tools: =====

* dnSpy (or any other decompiler)

===== Steps: =====

# Install SpaceWarp, Patch Manager, and Text Asset Dumper.
# Launch KSP2.
# Open Settings &gt; Mods, then scroll down to Patch manager and make sure "Always Invalidated Cache" is on.
# Go back to the title screen, and click the "Dump" button
# If you haven't already done so, make a project for your mod using the SpaceWarp Template

== Creating a custom launch site ==
Throughout this guide, I will be using Laythe as an example, just because that's where I was trying to make my mod launch rockets.

===== Creating a location =====
Open your project folder on your system explorer. Navigate to plugin_template/patches, and in that folder create a text file with a name that ends in .patch. In that file, put the following: &lt;syntaxhighlight&gt;
@use "builtin:dictionary";
@use "builtin:list";

@patch celestial_bodies;

:json #Laythe {
    data: $value:set("LocalSimObjectsData", [
        {
            "Name": "LaunchPad_spawn_01",
            "RelativeTo": "",
            "ReferenceFrame": 1,
            "LocalPosition": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
            },
            "LocalRotation": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0,
                "w": 0.0
            },
            "FixedGuid": true
        }
            ]);
}
&lt;/syntaxhighlight&gt;Replace "Laythe" with whatever celestial body you want your object to appear on, and change the x, y, and z coordinates under LocalPosition to whatever local coordinates you'd like. An easy way to get a specific location on the surface is to land something there, save the game with your craft active, and then read the save file to see the position of your craft. 

'''''NOTE:''' If you want to make a custom location on Kerbin, you need to use $value:add rather than $value:set.''

== Patching KSP.Game.OABProvider ==
The OABProvider class is an interface for generating and using ObjectAssemblyBuilder objects (environments like the VAB that allow for construction). Eventually, the developers plan to implement many OABs through colonies and orbital assembly environments, and once they do this tutorial will probably be a LOT shorter. Unfortunately, at the moment the OABProvider class is hardcoded in many places to only generate one specific type of OAB: the VAB on Kerbin, with its predetermined launch sites.

In your project, make a new class and add the following harmony patches to it:&lt;syntaxhighlight lang="c#"&gt;
[HarmonyPrefix]
[HarmonyPatch(typeof(OABProvider), nameof(OABProvider.GetSurfaceLaunchPosition))]
public static bool GetSurfaceLaunchPosition(OABProvider __instance, string celestialBodyName, string launchPadName, ref Position __result)
{
    GameInstance game = GameManager.Instance.Game;
    CelestialBodyComponent celestialBodyComponent = game.UniverseModel.FindCelestialBodyByName(celestialBodyName);
    FramePositionState framePositionState;
    TransformModel transformModel = (TransformModel)game.UniverseModel.FindSimObjectByNameKey(launchPadName).transform;
    __result = new Position(celestialBodyComponent.transform.GetTransformFrame(TransformFrameType.Body), transformModel.localPosition);
    return false;
}

[HarmonyPrefix]
[HarmonyPatch(typeof(OABProvider), nameof(OABProvider.GetSurfaceLaunchLocation))]
public static bool GetSurfaceLaunchLocation(OABProvider __instance, string launchLocationName, ref SerializedLocation __result)
{
    string celestialBodyName = "Laythe";
    SerializedLocation serializedLocation = default(SerializedLocation);
    serializedLocation.surfaceLocation = new SerializedSurfaceLocation?(new SerializedSurfaceLocation
    {
        parentGuid = celestialBodyName,
        objectName = launchLocationName
    });
    serializedLocation.LocationType = LocationType.SurfaceLocation;
    CelestialBodyComponent celestialBodyComponent = GameManager.Instance.Game.UniverseModel.FindCelestialBodyByName(celestialBodyName);
    serializedLocation.originatingSimObject = celestialBodyComponent.SimulationObject.GlobalId;
    serializedLocation.launchSituationUnknown = launchLocationName == "Dock_spawn_01";
    __result = serializedLocation;
    return false;
}

&lt;/syntaxhighlight&gt;In the second method, change the value of celestialBodyName to be whatever celestial body you plan to be launching rockets from.

These patches exist to tell the game to not only look for our launchpad on Kerbin, and in the case of the second function, to tell it to set the reference frame to be whatever world we actually put the launchpad on.

NOTE: If you've never used harmony patches before, this is a good time to look into the basics of how they work and the basic pattern we're using here to patch code copied in from the decompiler.
[[File:HarmonyImage.png|center|Courtesy of @evil.dana on discord]]

===== About positions in KSP2: =====
Trying to store positions at a planetary (let alone interstellar) scale with a standard XYZ coordinate system would be a surefire way to encounter constant game breaking rounding issues. To get around this, the developers have created a system where everything takes place in different reference frames. If you're in the SOI of a planet or moon, then your reference frame will be a coordinate system originating from that celestial body. This coordinate system rotates with the celestial body, so an object at rest on the surface doesn't need to have its position updated at all.

Basically, the main takeaway here is that whenever we set the position of something, we usually need to also tell the game what reference frame we're working in.

== Patching UniverseObserver ==
UniverseObserver contains a method called ApplyLaunchSiteCameraGimbalState, which is set to load specifically Kerbin when we go to launch a rocket. Just like with the methods from OABProvider, we need to patch that method and replace the hardcoded string "Kerbin" with our desired celestial body.&lt;syntaxhighlight lang="c#"&gt;
if (!string.IsNullOrEmpty(text) &amp;&amp; game.SpaceSimulation.GetSurfaceObjectPosition("Kerbin", text, out framePositionState))
&lt;/syntaxhighlight&gt;...becomes...&lt;syntaxhighlight lang="c#"&gt;
if (!string.IsNullOrEmpty(text) &amp;&amp; game.SpaceSimulation.GetSurfaceObjectPosition("Laythe", text, out framePositionState))
&lt;/syntaxhighlight&gt;

== Patching SpaceSimulation ==
At this point, the game has completed the creation of your rocket and is attempting to spawn it into the world. The method SyncVesselToLocation is the final step where the game puts it on the launch pad and turns physics on. Sadly, the game is looking for our launchpad the wrong way, and will not find it unless we tell it to look the correct way. At this point there's a LOT of stuff going on, so this patch is a bit messy. Copy the decompiled source code into a harmony patch just like we've done for all the others, make sure to put a "return false" at the very end of the method so the compiler is happy, and then look at the very end of the method. Find this block of code at the bottom:&lt;syntaxhighlight lang="c#"&gt;
__instance.GetSurfaceObjectPosition(parentGuid, objectName, out simulationObjectState.position);
if (simulationObjectState.position.referenceTransformGuid != null)
{
    GeographicPositionState geographicPositionState;
    __instance.GetGeographicPosition(simulationObjectState.position.referenceTransformGuid, simulationObjectState.position, out geographicPositionState);
    geographicPositionState.altitudeFromRadius += (double)vesselComponent.OffsetToGround;
    geographicPositionState.heading = __instance.GetLaunchSiteHeading(geographicPositionState, simulationObjectState.position.localRotation);
    __instance.GetBodyRelativePosition(geographicPositionState, out simulationObjectState.position);
    RigidbodyState rigidbodyState3 = new RigidbodyState
    {
        referenceTransformGuid = simulationObjectState.position.referenceTransformGuid,
        referenceFrameType = simulationObjectState.position.referenceFrameType,
        localPosition = simulationObjectState.position.localPosition,
        localRotation = simulationObjectState.position.localRotation,
        localVelocity = Vector3d.zero,
        localAngularVelocity = Vector3d.zero
    };
    simulationObject.SetState(new SimulationObjectState?(simulationObjectState), __instance._universeModel);
    vesselComponent.SetState(vesselState, __instance._universeModel);
    simulationObject.FindComponent&lt;RigidbodyComponent&gt;().SetState(rigidbodyState3, __instance._universeModel);
    return false;
}

&lt;/syntaxhighlight&gt;And replace it with this:&lt;syntaxhighlight lang="c#"&gt;
TransformModel transformModel = (TransformModel)GameManager.Instance.Game.UniverseModel.FindSimObjectByNameKey(objectName).transform;
ITransformFrame transformFrame = (ITransformFrame)transformModel.bodyFrame;
SimulationObjectState simulationObjectState = new SimulationObjectState
{
    position = new FramePositionState
    {
        referenceTransformGuid = transformFrame.transform.Guid,
        referenceFrameType = transformFrame.type,
        localPosition = transformFrame.transform.localPosition,
        localRotation = transformFrame.transform.localRotation
    }
};

RigidbodyState rigidbodyState3 = new RigidbodyState
{
    referenceTransformGuid = transformFrame.transform.Guid,
    referenceFrameType = transformFrame.type,
    localPosition = transformFrame.transform.localPosition,
    localRotation = transformFrame.transform.localRotation,
    localVelocity = Vector3d.zero,
    localAngularVelocity = Vector3d.zero
};
simulationObject.SetState(new SimulationObjectState?(simulationObjectState), __instance._universeModel);
vesselComponent.SetState(vesselState, __instance._universeModel);
simulationObject.FindComponent&lt;RigidbodyComponent&gt;().SetState(rigidbodyState3, __instance._universeModel);
return false;

&lt;/syntaxhighlight&gt;And with this, you should be done!
[[Category:Tutorials]]</text>
      <sha1>g3c0xwzdifwpja754dyj3lf8gpa4yxm</sha1>
    </revision>
    <revision>
      <id>283</id>
      <parentid>282</parentid>
      <timestamp>2024-01-08T14:30:40Z</timestamp>
      <contributor>
        <username>Meckryl</username>
        <id>18</id>
      </contributor>
      <comment>Changed the patch for SpaceSimulation.syncVesselToLocation to respect the height of the vessel so that it adjusts height automatically, and also just generally made it function more like the original which I imagine will help prevent bugs and quirky behavior</comment>
      <origin>283</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="11739" sha1="060y74e63vxij5irparm2nyny5x4mh3" xml:space="preserve">
== Goal ==
In this tutorial I will show how to change the location of Launch Pad 1 to be anywhere you want

== Setup ==

===== Required Mods: =====

* SpaceWarp Template
* SpaceWarp
* Patch Manager
* Text Asset Dumper (technically not needed but I recommend installing this and doing the one time setup described below)

===== Required tools: =====

* dnSpy (or any other decompiler)

===== Steps: =====

# Install SpaceWarp, Patch Manager, and Text Asset Dumper.
# Launch KSP2.
# Open Settings &gt; Mods, then scroll down to Patch manager and make sure "Always Invalidated Cache" is on.
# Go back to the title screen, and click the "Dump" button
# If you haven't already done so, make a project for your mod using the SpaceWarp Template

== Creating a custom launch site ==
Throughout this guide, I will be using Laythe as an example, just because that's where I was trying to make my mod launch rockets.

===== Creating a location =====
Open your project folder on your system explorer. Navigate to plugin_template/patches, and in that folder create a text file with a name that ends in .patch. In that file, put the following: &lt;syntaxhighlight&gt;
@use "builtin:dictionary";
@use "builtin:list";

@patch celestial_bodies;

:json #Laythe {
    data: $value:set("LocalSimObjectsData", [
        {
            "Name": "LaunchPad_spawn_01",
            "RelativeTo": "",
            "ReferenceFrame": 1,
            "LocalPosition": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
            },
            "LocalRotation": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0,
                "w": 0.0
            },
            "FixedGuid": true
        }
            ]);
}
&lt;/syntaxhighlight&gt;Replace "Laythe" with whatever celestial body you want your object to appear on, and change the x, y, and z coordinates under LocalPosition to whatever local coordinates you'd like. An easy way to get a specific location on the surface is to land something there, save the game with your craft active, and then read the save file to see the position of your craft. 

'''''NOTE:''' If you want to make a custom location on Kerbin, you need to use $value:add rather than $value:set.''

== Patching KSP.Game.OABProvider ==
The OABProvider class is an interface for generating and using ObjectAssemblyBuilder objects (environments like the VAB that allow for construction). Eventually, the developers plan to implement many OABs through colonies and orbital assembly environments, and once they do this tutorial will probably be a LOT shorter. Unfortunately, at the moment the OABProvider class is hardcoded in many places to only generate one specific type of OAB: the VAB on Kerbin, with its predetermined launch sites.

In your project, make a new class and add the following harmony patches to it:&lt;syntaxhighlight lang="c#"&gt;
[HarmonyPrefix]
[HarmonyPatch(typeof(OABProvider), nameof(OABProvider.GetSurfaceLaunchPosition))]
public static bool GetSurfaceLaunchPosition(OABProvider __instance, string celestialBodyName, string launchPadName, ref Position __result)
{
    GameInstance game = GameManager.Instance.Game;
    CelestialBodyComponent celestialBodyComponent = game.UniverseModel.FindCelestialBodyByName(celestialBodyName);
    FramePositionState framePositionState;
    TransformModel transformModel = (TransformModel)game.UniverseModel.FindSimObjectByNameKey(launchPadName).transform;
    __result = new Position(celestialBodyComponent.transform.GetTransformFrame(TransformFrameType.Body), transformModel.localPosition);
    return false;
}

[HarmonyPrefix]
[HarmonyPatch(typeof(OABProvider), nameof(OABProvider.GetSurfaceLaunchLocation))]
public static bool GetSurfaceLaunchLocation(OABProvider __instance, string launchLocationName, ref SerializedLocation __result)
{
    string celestialBodyName = "Laythe";
    SerializedLocation serializedLocation = default(SerializedLocation);
    serializedLocation.surfaceLocation = new SerializedSurfaceLocation?(new SerializedSurfaceLocation
    {
        parentGuid = celestialBodyName,
        objectName = launchLocationName
    });
    serializedLocation.LocationType = LocationType.SurfaceLocation;
    CelestialBodyComponent celestialBodyComponent = GameManager.Instance.Game.UniverseModel.FindCelestialBodyByName(celestialBodyName);
    serializedLocation.originatingSimObject = celestialBodyComponent.SimulationObject.GlobalId;
    serializedLocation.launchSituationUnknown = launchLocationName == "Dock_spawn_01";
    __result = serializedLocation;
    return false;
}

&lt;/syntaxhighlight&gt;In the second method, change the value of celestialBodyName to be whatever celestial body you plan to be launching rockets from.

These patches exist to tell the game to not only look for our launchpad on Kerbin, and in the case of the second function, to tell it to set the reference frame to be whatever world we actually put the launchpad on.

NOTE: If you've never used harmony patches before, this is a good time to look into the basics of how they work and the basic pattern we're using here to patch code copied in from the decompiler.
[[File:HarmonyImage.png|center|Courtesy of @evil.dana on discord]]

===== About positions in KSP2: =====
Trying to store positions at a planetary (let alone interstellar) scale with a standard XYZ coordinate system would be a surefire way to encounter constant game breaking rounding issues. To get around this, the developers have created a system where everything takes place in different reference frames. If you're in the SOI of a planet or moon, then your reference frame will be a coordinate system originating from that celestial body. This coordinate system rotates with the celestial body, so an object at rest on the surface doesn't need to have its position updated at all.

Basically, the main takeaway here is that whenever we set the position of something, we usually need to also tell the game what reference frame we're working in.

== Patching UniverseObserver ==
UniverseObserver contains a method called ApplyLaunchSiteCameraGimbalState, which is set to load specifically Kerbin when we go to launch a rocket. Just like with the methods from OABProvider, we need to patch that method and replace the hardcoded string "Kerbin" with our desired celestial body.&lt;syntaxhighlight lang="c#"&gt;
if (!string.IsNullOrEmpty(text) &amp;&amp; game.SpaceSimulation.GetSurfaceObjectPosition("Kerbin", text, out framePositionState))
&lt;/syntaxhighlight&gt;...becomes...&lt;syntaxhighlight lang="c#"&gt;
if (!string.IsNullOrEmpty(text) &amp;&amp; game.SpaceSimulation.GetSurfaceObjectPosition("Laythe", text, out framePositionState))
&lt;/syntaxhighlight&gt;

== Patching SpaceSimulation ==
At this point, the game has completed the creation of your rocket and is attempting to spawn it into the world. The method SyncVesselToLocation is the final step where the game puts it on the launch pad and turns physics on. Sadly, the game is looking for our launchpad the wrong way, and will not find it unless we tell it to look the correct way. At this point there's a LOT of stuff going on, so this patch is a bit messy. Copy the decompiled source code into a harmony patch just like we've done for all the others, make sure to put a "return false" at the very end of the method so the compiler is happy, and then look at the very end of the method. Find this block of code at the bottom:&lt;syntaxhighlight lang="c#"&gt;
__instance.GetSurfaceObjectPosition(parentGuid, objectName, out simulationObjectState.position);
if (simulationObjectState.position.referenceTransformGuid != null)
{
    GeographicPositionState geographicPositionState;
    __instance.GetGeographicPosition(simulationObjectState.position.referenceTransformGuid, simulationObjectState.position, out geographicPositionState);
    geographicPositionState.altitudeFromRadius += (double)vesselComponent.OffsetToGround;
    geographicPositionState.heading = __instance.GetLaunchSiteHeading(geographicPositionState, simulationObjectState.position.localRotation);
    __instance.GetBodyRelativePosition(geographicPositionState, out simulationObjectState.position);
    RigidbodyState rigidbodyState3 = new RigidbodyState
    {
        referenceTransformGuid = simulationObjectState.position.referenceTransformGuid,
        referenceFrameType = simulationObjectState.position.referenceFrameType,
        localPosition = simulationObjectState.position.localPosition,
        localRotation = simulationObjectState.position.localRotation,
        localVelocity = Vector3d.zero,
        localAngularVelocity = Vector3d.zero
    };
    simulationObject.SetState(new SimulationObjectState?(simulationObjectState), __instance._universeModel);
    vesselComponent.SetState(vesselState, __instance._universeModel);
    simulationObject.FindComponent&lt;RigidbodyComponent&gt;().SetState(rigidbodyState3, __instance._universeModel);
    return false;
}

&lt;/syntaxhighlight&gt;And replace it with this:&lt;syntaxhighlight lang="c#"&gt;
TransformModel transform = (TransformModel)GameManager.Instance.Game.UniverseModel.FindSimObjectByNameKey(objectName).transform;
SimulationObjectState state = new SimulationObjectState();
state.position = FramePositionState.FromTransform(transform);
GeographicPositionState geographicPositionState;
__instance.GetGeographicPosition(state.position.referenceTransformGuid, state.position, out geographicPositionState);
//geographicPositionState.heading = __instance.GetLaunchSiteHeading(geographicPositionState, position.localRotation);
Vector3d relSurfaceNVector = GameManager.Instance.Game.UniverseModel.FindCelestialBodyByName(location.surfaceLocation?.parentGuid).GetRelSurfaceNVector(geographicPositionState.latitude, geographicPositionState.longitude);
Vector3d vector3d = Vector3d.Cross(relSurfaceNVector, Vector3d.up);
QuaternionD quaternionD = QuaternionD.AngleAxis(Vector3d.SignedAngle(relSurfaceNVector, Vector3d.up, vector3d), Vector3d.right);
QuaternionD quaternionD2 = QuaternionD.identity;
Vector3d vector3d2 = new Vector3d(relSurfaceNVector.x, 0.0, relSurfaceNVector.z);
if (vector3d2.sqrMagnitude &gt; 5E-324)
{
    quaternionD2 = QuaternionD.AngleAxis(Math.Atan2(vector3d2.x, vector3d2.z) * 57.29577951308232, Vector3d.up);
}
QuaternionD geographicPositionHeading = quaternionD2 * quaternionD;

Vector3d vector3d3 = state.position.localRotation * Vector3.forward;
geographicPositionState.heading =  Vector3d.SignedAngle(geographicPositionHeading * Vector3.forward, vector3d3, relSurfaceNVector);
__instance.GetBodyRelativePosition(geographicPositionState, out state.position);

state.position.localPosition.y += vesselComponent.OffsetToGround;
state.position.localRotation.w = 1.0;

SimulationObjectState simulationObjectState = new SimulationObjectState
{
    position = new FramePositionState
    {
        referenceTransformGuid = transform.bodyFrame.transform.Guid,
        referenceFrameType = transform.bodyFrame.type,
        localPosition = state.position.localPosition,
        localRotation = state.position.localRotation
    }
};

RigidbodyState rigidbodyState3 = new RigidbodyState
{
    referenceTransformGuid = transform.bodyFrame.transform.Guid,
    referenceFrameType = transform.bodyFrame.type,
    localPosition = state.position.localPosition,
    localRotation = state.position.localRotation,
    localVelocity = Vector3d.zero,
    localAngularVelocity = Vector3d.zero
};
simulationObject.SetState(new SimulationObjectState?(simulationObjectState), __instance._universeModel);
vesselComponent.SetState(vesselState, __instance._universeModel);
simulationObject.FindComponent&lt;RigidbodyComponent&gt;().SetState(rigidbodyState3, __instance._universeModel);
return false;

&lt;/syntaxhighlight&gt;And with this, you should be done!
[[Category:Tutorials]]</text>
      <sha1>060y74e63vxij5irparm2nyny5x4mh3</sha1>
    </revision>
  </page>
  <page>
    <title>General overview of custom modules</title>
    <ns>0</ns>
    <id>93</id>
    <revision>
      <id>287</id>
      <timestamp>2024-01-11T17:06:52Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>What's a module, what's a custom module, what does it consist of</comment>
      <origin>287</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <revision>
      <id>291</id>
      <parentid>287</parentid>
      <timestamp>2024-01-11T17:26:02Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>291</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="27" sha1="c5wqrzvmgu4df6h10q9bxp5lfnr2eut" xml:space="preserve">[[Category:Custom Modules]]</text>
      <sha1>c5wqrzvmgu4df6h10q9bxp5lfnr2eut</sha1>
    </revision>
    <revision>
      <id>292</id>
      <parentid>291</parentid>
      <timestamp>2024-01-11T17:43:16Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Add page contents</comment>
      <origin>292</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4392" sha1="tjiy2hg7t11cvgnavpfgu6pvjbiwsdj" xml:space="preserve">[[Category:Custom Modules]]

== What are Modules? ==
Each part in the game has one or more Modules attached to it. Purpose of a Module is to provide a functionality to a part.

Some examples are:

* &lt;code&gt;Module_Deployable&lt;/code&gt; - adds deploy functionality (landing legs, antennae...)
* &lt;code&gt;Module_DataTransmitter&lt;/code&gt; - adds connection and data transmittance functionality (capsules, antennae...)
* &lt;code&gt;Module_Color&lt;/code&gt; - adds ability to color a part (base color, accent color)
* &lt;code&gt;Module_Engine&lt;/code&gt; - adds engine functionality (thrust, throttle, ISP, propellant requests...)

All stock Module definitions can be found inside the game's &lt;code&gt;Assembly-CSharp.dll&lt;/code&gt; under namespaces: &lt;code&gt;KSP.Modules&lt;/code&gt; (ModuleData and PartBehaviourModule) and &lt;code&gt;KSP.Sim.impl&lt;/code&gt; (PartComponentModule)

== What are Custom Modules? ==
Custom Modules are Modules that we modders can create and attach to a part to give it some custom functionality.

Some examples are:

* &lt;code&gt;Module_LifeSupportConsumer&lt;/code&gt; - mod: KerbalLifeSupportSystem - provides life support consumption (oxygen, water, food) to parts with crew capacity
* &lt;code&gt;Module_OrbitalSurvey&lt;/code&gt; - mod: Orbital Survey - provides scanning functionality to parts with a Module_DataTransmitter module (antennae)

== Anatomy of a Module ==
Modules have 3 basic components, C# classes that inherit from a base class.

&lt;code&gt;ModuleData&lt;/code&gt;

* base class whose function is to define and maintain data used by the Module
* data is stored either in save game files ([KSPState] attribute) or in part definition json ([KSPDefinition] attribute) or persists only during runtime
* some examples of data stored in ModuleData: CurrentDeployState (state of deployment for the part), IsTransmitting (is part currently transmitting or not), thrustPercentage (at what percentage is the thrust currently at for this engine)
* use it to store data that other components will use or that will be displayed in PAM or OAB/R&amp;D

&lt;code&gt;PartBehaviourModule&lt;/code&gt;

* base class that's responsible for how a part behaves, what happens when a button is pushed, what is displayed in PAM (in Flight and OAB), what happens on a game tick update
* use it for immediate frontend logic - player enables the module, engines change their modes, entries in PAM need to be shown/hidden, etc.

&lt;code&gt;PartComponentModule&lt;/code&gt;

* base class used mostly for background/backend Module logic, things that aren't directly connected to PAM
* example of backend logic: Orbital Survey initiates scans if the conditions are right
* use it also for things that continually need to run in background - e.g. life support consumption on game ticks, continuous scanning while the vessel is unloaded, EC collection for solar panels, etc.

You're free to define your own logic inside these classes, of course, but it's always good to follow established conventions as much as possible.

== Attaching a Custom Module to a part ==
To define and add your Custom Module to parts there are 2 things you need to do.

# In your C# plugin define your classes that derive from &lt;code&gt;ModuleData&lt;/code&gt;, &lt;code&gt;PartBehaviourModule&lt;/code&gt;  and &lt;code&gt;PartComponentModule&lt;/code&gt; classes
# Use the '''Patch Manager''' mod to inject your Custom Module to parts you want.

== Patch Manager ==
Think of Patch Manager as a successor to Module Manager from KSP1. You define patches in a text file with a &lt;code&gt;.patch&lt;/code&gt; extension that you place somewhere in your plugin folder structure.

Here's a rudimentary example of a Custom Module being injected to all parts.

&lt;code&gt;MyCustomModule.patch&lt;/code&gt;:
 :parts {
     +Module_MyCustomModule {
         +Data_MyCustomModule {
         }
     }
 }
With Patch Manager installed this patch will add your &lt;code&gt;MyCustomModule&lt;/code&gt; to all parts in the game (don't do this :)).

You can get Patch Manager either with CKAN or download it from here: https://spacedock.info/mod/3482/Patch%20Manager 

For an in-depth walkthrough of Patch Manager functionalities, syntax, best practices and more sensible examples of Custom Module patches refer to Patch Manager documentation: https://pm.kerbal.wiki/

Some examples for custom module patches:

* KLSS: https://github.com/Safarte/KerbalLifeSupportSystem/tree/main/plugin_template/patches
* Orbital Survey: https://github.com/Falki-git/OrbitalSurvey/tree/master/plugin_template/patches</text>
      <sha1>tjiy2hg7t11cvgnavpfgu6pvjbiwsdj</sha1>
    </revision>
    <revision>
      <id>296</id>
      <parentid>292</parentid>
      <timestamp>2024-01-11T17:47:49Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>set sorting</comment>
      <origin>296</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4445" sha1="tt6qdh2xhp5fkyc0o8647el2pyl5n2p" xml:space="preserve">[[Category:Custom Modules]]

== What are Modules? ==
Each part in the game has one or more Modules attached to it. Purpose of a Module is to provide a functionality to a part.

Some examples are:

* &lt;code&gt;Module_Deployable&lt;/code&gt; - adds deploy functionality (landing legs, antennae...)
* &lt;code&gt;Module_DataTransmitter&lt;/code&gt; - adds connection and data transmittance functionality (capsules, antennae...)
* &lt;code&gt;Module_Color&lt;/code&gt; - adds ability to color a part (base color, accent color)
* &lt;code&gt;Module_Engine&lt;/code&gt; - adds engine functionality (thrust, throttle, ISP, propellant requests...)

All stock Module definitions can be found inside the game's &lt;code&gt;Assembly-CSharp.dll&lt;/code&gt; under namespaces: &lt;code&gt;KSP.Modules&lt;/code&gt; (ModuleData and PartBehaviourModule) and &lt;code&gt;KSP.Sim.impl&lt;/code&gt; (PartComponentModule)

== What are Custom Modules? ==
Custom Modules are Modules that we modders can create and attach to a part to give it some custom functionality.

Some examples are:

* &lt;code&gt;Module_LifeSupportConsumer&lt;/code&gt; - mod: KerbalLifeSupportSystem - provides life support consumption (oxygen, water, food) to parts with crew capacity
* &lt;code&gt;Module_OrbitalSurvey&lt;/code&gt; - mod: Orbital Survey - provides scanning functionality to parts with a Module_DataTransmitter module (antennae)

== Anatomy of a Module ==
Modules have 3 basic components, C# classes that inherit from a base class.

&lt;code&gt;ModuleData&lt;/code&gt;

* base class whose function is to define and maintain data used by the Module
* data is stored either in save game files ([KSPState] attribute) or in part definition json ([KSPDefinition] attribute) or persists only during runtime
* some examples of data stored in ModuleData: CurrentDeployState (state of deployment for the part), IsTransmitting (is part currently transmitting or not), thrustPercentage (at what percentage is the thrust currently at for this engine)
* use it to store data that other components will use or that will be displayed in PAM or OAB/R&amp;D

&lt;code&gt;PartBehaviourModule&lt;/code&gt;

* base class that's responsible for how a part behaves, what happens when a button is pushed, what is displayed in PAM (in Flight and OAB), what happens on a game tick update
* use it for immediate frontend logic - player enables the module, engines change their modes, entries in PAM need to be shown/hidden, etc.

&lt;code&gt;PartComponentModule&lt;/code&gt;

* base class used mostly for background/backend Module logic, things that aren't directly connected to PAM
* example of backend logic: Orbital Survey initiates scans if the conditions are right
* use it also for things that continually need to run in background - e.g. life support consumption on game ticks, continuous scanning while the vessel is unloaded, EC collection for solar panels, etc.

You're free to define your own logic inside these classes, of course, but it's always good to follow established conventions as much as possible.

== Attaching a Custom Module to a part ==
To define and add your Custom Module to parts there are 2 things you need to do.

# In your C# plugin define your classes that derive from &lt;code&gt;ModuleData&lt;/code&gt;, &lt;code&gt;PartBehaviourModule&lt;/code&gt;  and &lt;code&gt;PartComponentModule&lt;/code&gt; classes
# Use the '''Patch Manager''' mod to inject your Custom Module to parts you want.

== Patch Manager ==
Think of Patch Manager as a successor to Module Manager from KSP1. You define patches in a text file with a &lt;code&gt;.patch&lt;/code&gt; extension that you place somewhere in your plugin folder structure.

Here's a rudimentary example of a Custom Module being injected to all parts.

&lt;code&gt;MyCustomModule.patch&lt;/code&gt;:
 :parts {
     +Module_MyCustomModule {
         +Data_MyCustomModule {
         }
     }
 }
With Patch Manager installed this patch will add your &lt;code&gt;MyCustomModule&lt;/code&gt; to all parts in the game (don't do this :)).

You can get Patch Manager either with CKAN or download it from here: https://spacedock.info/mod/3482/Patch%20Manager 

For an in-depth walkthrough of Patch Manager functionalities, syntax, best practices and more sensible examples of Custom Module patches refer to Patch Manager documentation: https://pm.kerbal.wiki/

Some examples for custom module patches:

* KLSS: https://github.com/Safarte/KerbalLifeSupportSystem/tree/main/plugin_template/patches
* Orbital Survey: https://github.com/Falki-git/OrbitalSurvey/tree/master/plugin_template/patches
{{DEFAULTSORT:1_General_overview_of_custom_modules}}</text>
      <sha1>tt6qdh2xhp5fkyc0o8647el2pyl5n2p</sha1>
    </revision>
    <revision>
      <id>331</id>
      <parentid>296</parentid>
      <timestamp>2024-01-26T15:46:21Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Clarified the distinction between PartBehaviourModule and PartComponentModule</comment>
      <origin>331</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4717" sha1="nqzcue575w5zbut9nfb5hbnl2dgchzl" xml:space="preserve">[[Category:Custom Modules]]

== What are Modules? ==
Each part in the game has one or more Modules attached to it. Purpose of a Module is to provide a functionality to a part.

Some examples are:

* &lt;code&gt;Module_Deployable&lt;/code&gt; - adds deploy functionality (landing legs, antennae...)
* &lt;code&gt;Module_DataTransmitter&lt;/code&gt; - adds connection and data transmittance functionality (capsules, antennae...)
* &lt;code&gt;Module_Color&lt;/code&gt; - adds ability to color a part (base color, accent color)
* &lt;code&gt;Module_Engine&lt;/code&gt; - adds engine functionality (thrust, throttle, ISP, propellant requests...)

All stock Module definitions can be found inside the game's &lt;code&gt;Assembly-CSharp.dll&lt;/code&gt; under namespaces: &lt;code&gt;KSP.Modules&lt;/code&gt; (ModuleData and PartBehaviourModule) and &lt;code&gt;KSP.Sim.impl&lt;/code&gt; (PartComponentModule)

== What are Custom Modules? ==
Custom Modules are Modules that we modders can create and attach to a part to give it some custom functionality.

Some examples are:

* &lt;code&gt;Module_LifeSupportConsumer&lt;/code&gt; - mod: KerbalLifeSupportSystem - provides life support consumption (oxygen, water, food) to parts with crew capacity
* &lt;code&gt;Module_OrbitalSurvey&lt;/code&gt; - mod: Orbital Survey - provides scanning functionality to parts with a Module_DataTransmitter module (antennae)

== Anatomy of a Module ==
Modules have 3 basic components, C# classes that inherit from a base class.

&lt;code&gt;ModuleData&lt;/code&gt;

* base class whose function is to define and maintain data used by the Module
* data is stored either in save game files ([KSPState] attribute) or in part definition json ([KSPDefinition] attribute) or persists only during runtime
* some examples of data stored in ModuleData: CurrentDeployState (state of deployment for the part), IsTransmitting (is part currently transmitting or not), thrustPercentage (at what percentage is the thrust currently at for this engine)
* use it to store data that other components will use or that will be displayed in PAM or OAB/R&amp;D

&lt;code&gt;PartBehaviourModule&lt;/code&gt;

* base class that's responsible for how a part behaves, what happens when a button is pushed, what is displayed in PAM (in Flight and OAB), what happens on a game tick update
* this class exists only when the vessel is loaded (i.e. player is directly controlling the vessel)
* use it for immediate frontend logic - player enables the module, engines change their modes, entries in PAM need to be shown/hidden, etc.

&lt;code&gt;PartComponentModule&lt;/code&gt;

* base class used mostly for background/backend Module logic, things that aren't directly connected to PAM
* example of backend logic: Orbital Survey initiates scans if the conditions are right
* class is instantiated when the part is first placed in the OAB and it continues to exist until the part is destroyed. Update loops are being executed even on unloaded vessels
* use it for things that continually need to run in background - e.g. life support consumption on game ticks, continuous scanning while the vessel is unloaded, EC collection for solar panels, etc.

You're free to define your own logic inside these classes, of course, but it's always good to follow established conventions as much as possible.

== Attaching a Custom Module to a part ==
To define and add your Custom Module to parts there are 2 things you need to do.

# In your C# plugin define your classes that derive from &lt;code&gt;ModuleData&lt;/code&gt;, &lt;code&gt;PartBehaviourModule&lt;/code&gt;  and &lt;code&gt;PartComponentModule&lt;/code&gt; classes
# Use the '''Patch Manager''' mod to inject your Custom Module to parts you want.

== Patch Manager ==
Think of Patch Manager as a successor to Module Manager from KSP1. You define patches in a text file with a &lt;code&gt;.patch&lt;/code&gt; extension that you place somewhere in your plugin folder structure.

Here's a rudimentary example of a Custom Module being injected to all parts.

&lt;code&gt;MyCustomModule.patch&lt;/code&gt;:
 :parts {
     +Module_MyCustomModule {
         +Data_MyCustomModule {
         }
     }
 }
With Patch Manager installed this patch will add your &lt;code&gt;MyCustomModule&lt;/code&gt; to all parts in the game (don't do this :)).

You can get Patch Manager either with CKAN or download it from here: https://spacedock.info/mod/3482/Patch%20Manager 

For an in-depth walkthrough of Patch Manager functionalities, syntax, best practices and more sensible examples of Custom Module patches refer to Patch Manager documentation: https://pm.kerbal.wiki/

Some examples for custom module patches:

* KLSS: https://github.com/Safarte/KerbalLifeSupportSystem/tree/main/plugin_template/patches
* Orbital Survey: https://github.com/Falki-git/OrbitalSurvey/tree/master/plugin_template/patches
{{DEFAULTSORT:1_General_overview_of_custom_modules}}</text>
      <sha1>nqzcue575w5zbut9nfb5hbnl2dgchzl</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Custom Modules</title>
    <ns>14</ns>
    <id>94</id>
    <revision>
      <id>289</id>
      <timestamp>2024-01-11T17:15:03Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>What are custom modules, how to create them, how do they work</comment>
      <origin>289</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <revision>
      <id>290</id>
      <parentid>289</parentid>
      <timestamp>2024-01-11T17:19:51Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Add category to this category</comment>
      <origin>290</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="22" sha1="jt4mo6t18f2g3ya2mtbqtvf0rbsqqi9" xml:space="preserve">[[Category:Tutorials]]</text>
      <sha1>jt4mo6t18f2g3ya2mtbqtvf0rbsqqi9</sha1>
    </revision>
    <revision>
      <id>309</id>
      <parentid>290</parentid>
      <timestamp>2024-01-13T14:13:28Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>309</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="27" sha1="knmmqxbke88v1tko2kywrpi4df49jsp" xml:space="preserve">[[Category:Creating parts]]</text>
      <sha1>knmmqxbke88v1tko2kywrpi4df49jsp</sha1>
    </revision>
    <revision>
      <id>317</id>
      <parentid>309</parentid>
      <timestamp>2024-01-15T02:06:25Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>317</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="30" sha1="orfxed28it9pnx0i649hu2m7p20d9rd" xml:space="preserve">[[Category:Parts and modules]]</text>
      <sha1>orfxed28it9pnx0i649hu2m7p20d9rd</sha1>
    </revision>
  </page>
  <page>
    <title>Class descriptions for custom modules</title>
    <ns>0</ns>
    <id>95</id>
    <revision>
      <id>293</id>
      <timestamp>2024-01-11T17:45:38Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>HowTo for Data, PartBehaviour and PartComponent classes</comment>
      <origin>293</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <revision>
      <id>294</id>
      <parentid>293</parentid>
      <timestamp>2024-01-11T17:46:07Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Add the page to the category</comment>
      <origin>294</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="27" sha1="c5wqrzvmgu4df6h10q9bxp5lfnr2eut" xml:space="preserve">[[Category:Custom Modules]]</text>
      <sha1>c5wqrzvmgu4df6h10q9bxp5lfnr2eut</sha1>
    </revision>
    <revision>
      <id>295</id>
      <parentid>294</parentid>
      <timestamp>2024-01-11T17:47:15Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>set sorting</comment>
      <origin>295</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="84" sha1="d5tu0zpmtyqu0n27ua6c2ab577u571r" xml:space="preserve">[[Category:Custom Modules]]

{{DEFAULTSORT:2_Class_descriptions_for_custom_modules}}</text>
      <sha1>d5tu0zpmtyqu0n27ua6c2ab577u571r</sha1>
    </revision>
    <revision>
      <id>297</id>
      <parentid>295</parentid>
      <timestamp>2024-01-11T18:34:00Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Add page contents</comment>
      <origin>297</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="14404" sha1="f0175oipkn99vhdtf9e1ua4sq446f68" xml:space="preserve">[[Category:Custom Modules]]

{{DEFAULTSORT:2_Class_descriptions_for_custom_modules}}

While you're mostly free to define how your classes would be set up, there are some guidelines that need to be followed, restrictions to be aware of and inner workings to understand.

== # Data class ==

=== ## Defining your class ===
 [Serializable]
 public class Data_MyCustomModule : ModuleData
 { .. }

=== ## Set your ParthBehaviourModule type reference ===
 public override Type ModuleType =&gt; typeof(Module_MyCustomModule);

=== ## Defining module properties ===

* these are entries shown in the PAM

 // Toggle (true/false) property
 [KSPState] // KSPState attribute tells the game to save the state of this property in the save game file
 [LocalizedField("Path/To/Your/Localization/String1")] // localization string for this attribute (see 'localization' paragraph)
 [PAMDisplayControl(SortIndex = 2)] // sets the sorting index for this property. Lower values are placed first
 public ModuleProperty&lt;bool&gt; SomeToggleProperty = new(false); // value in the parentheses defines the initial value
 
 // String property
 [LocalizedField("Path/To/Your/Localization/String2")]
 [PAMDisplayControl(SortIndex = 4)]
 [KSPDefinition] // KSPDefinition tells this property that its value is set from the part definition json (set by Patch Manager)
 public ModuleProperty&lt;string&gt; SomeStringProperty = new ("");
 
 // Float property - readonly
 [LocalizedField("Path/To/Your/Localization/String3")]
 [PAMDisplayControl(SortIndex = 7)]
 [JsonIgnore] // either [KSPState] or [JsonIgnore] is needed if you want this property to be readonly
 public ModuleProperty&lt;float&gt; SomeReadOnlyFloat = new (0, true, val =&gt; $"{val:N0} m");
 
 // Float property – editable by players, will be built as a slider
 [LocalizedField("Path/To/Your/Localization/String4")]
 [PAMDisplayControl(SortIndex = 1)]
 [SteppedRange(1f, 45f, 1f)] // minimum, maximum and step values
 public ModuleProperty&lt;float&gt; SomeEditableProperty = new (1f, false, val =&gt; $"{val:N0}°"); // initial value, isReadOnly, ToStringDelegate

=== ## Defining a dropdown list property ===

* dropdown list properties are string properties for which you define dropdown values in OnPartBehaviourModuleInit()

 // Dropdown property
 [LocalizedField("Path/To/Your/Localization/String5")]
 public ModuleProperty&lt;string&gt; DropdownProperty = new ModuleProperty&lt;string&gt;("Some value");
 
 public override void OnPartBehaviourModuleInit()
 {
     var dropdownList = new DropdownItemList();
     dropdownList.Add("some key", new DropdownItem() { key = "some key", text = "Some value" });
     dropdownList.Add("another key", new DropdownItem() { key = "another key", text = "Another value" });
     SetDropdownData(DropdownProperty, dropdownList);
 }

=== ## OnPartBehaviourModuleInit() ===

* runs when this module is initialized when entering Flight/OAB state

 public override void OnPartBehaviourModuleInit()
 { /* use this to initialize some values for your module, if needed */ }

=== ## OAB module description ===

* set the description of your module for all parts it’s being attached to
* description is shown in OAB and R&amp;D while hovering over the part after pressing SHIFT

 public override List&lt;OABPartData.PartInfoModuleEntry&gt; GetPartInfoEntries(Type partBehaviourModuleType, List&lt;OABPartData.PartInfoModuleEntry&gt; delegateList)
 {
     if (partBehaviourModuleType == ModuleType)
     {
         // add module description
         delegateList.Add(new OABPartData.PartInfoModuleEntry("", (_) =&gt; „Path/To/Your/Localization/String5“));
 
         // entry header
         var entry = new OABPartData.PartInfoModuleEntry(„Path/To/Your/Localization/String6“,
             _ =&gt;
             {
                 // subentries
                 var subEntries = new List&lt;OABPartData.PartInfoModuleSubEntry&gt;();
        
                 // first subentry
                 subEntries.Add(new OABPartData.PartInfoModuleSubEntry(
                     "Path/To/Your/Localization/String7", // subentry NAME
                     "subentry value"
                 ));
 
                 // second subentry
                 subEntries.Add(new OABPartData.PartInfoModuleSubEntry(
                     "Path/To/Your/Localization/String8", // subentry NAME
                     "subentry value"
                 ));
 
                 // if your module is using resources, you can add them to the description
                 // this doesn't set the value, it's just used to display it to the player
                 if (UseResources)
                 {
                     subEntries.Add(new OABPartData.PartInfoModuleSubEntry(
                         "Path/To/Your/Localization/String/ResourceName",
                         $"{RequiredResource.Rate.ToString("N3")} /s"
                     ));
                 }
 
                 return subEntries;
             });
         delegateList.Add(entry);
     }
     return delegateList;
 }

=== ## Setting up resource consumptions ===

* Note: trigger this from OnStart() in the Part Component class

 public override void SetupResourceRequest(ResourceFlowRequestBroker resourceFlowRequestBroker)
 {
     if (UseResources)
     {
         ResourceDefinitionID resourceIDFromName =
             GameManager.Instance.Game.ResourceDefinitionDatabase.GetResourceIDFromName(this.RequiredResource.ResourceName);
         if (resourceIDFromName == ResourceDefinitionID.InvalidID)
         {
             _LOGGER.LogError($"There are no resources with name {this.RequiredResource.ResourceName}");
             return;
         }
         RequestConfig = new ResourceFlowRequestCommandConfig();
         RequestConfig.FlowResource = resourceIDFromName;
         RequestConfig.FlowDirection = FlowDirection.FLOW_OUTBOUND;
         RequestConfig.FlowUnits = 0.0;
         RequestHandle = resourceFlowRequestBroker.AllocateOrGetRequest("MyCustomModule", default(ResourceFlowRequestHandle));
         resourceFlowRequestBroker.SetCommands(this.RequestHandle, 1.0, new ResourceFlowRequestCommandConfig[] { this.RequestConfig });
     }
 }
 
 [KSPDefinition]
 [Tooltip("Whether the module consumes resources")]
 public bool UseResources = true;
 
 public bool HasResourcesToOperate = true;
 
 [KSPDefinition]
 [Tooltip("Resource required to operate this module if it consumes resources")]
 public PartModuleResourceSetting RequiredResource;
 
 public ResourceFlowRequestCommandConfig RequestConfig;
   

== # Part Behaviour class ==

=== ## Defining your class ===
 [DisallowMultipleComponent]
 public class Module_OrbitalSurvey : PartBehaviourModule
 { .. }

=== ## Set your PartComponentModule type reference ===
 public override Type PartComponentModuleType =&gt; typeof(PartComponentModule_MyCustomModule);

=== ## Create Data module instance ===
 [SerializeField]
 protected Data_MyCustomModule _dataMyCustomModule;
 
 public override void AddDataModules()
 {
     base.AddDataModules();
     _dataMyCustomModule ??= new Data_MyCustomModule();
     DataModules.TryAddUnique(_dataMyCustomModule, out _dataMyCustomModule);
 }

=== ## Initialize the module behaviour ===
 private ModuleAction _myCustomAction;
 
 public override void OnInitialize()
 {
     base.OnInitialize();
 
     // module actions are triggered when players press a button on the PAM property
     _myCustomAction = new ModuleAction(MethodThatWillHandleTheAction);
     _dataMyCustomModule.AddAction("Path/To/Your/Localization/String/X", _myCustomAction, 1);
 
     if (PartBackingMode == PartBackingModes.Flight)
     {
         /* do stuff that's only needed in Flight view */
 
         // example1: hide or show PAM properties depending on the Flight/OAB view
         UpdateFlightPAMVisibility(); 
 
         // example2: subscribe to the enabled toggle
         _dataMyCustomModule.EnabledToggleProperty.OnChangedValue += MethodThatWillHandleThis;
     } 
 
     if (PartBackingMode == PartBackingModes.OAB)
     { /* do stuff that's only needed in the OAB*/ }
 }
 
 private void MethodThatWillHandleTheAction()
 { /* do stuff here */}

=== ## FixedUpdate loop - Flight ===

* define stuff that needs to be executed continuously on every FixedUpdate loop. Be careful not to do expensive stuff here
* this triggers in Flight view only

 // This triggers in flight
 public override void OnModuleFixedUpdate(float fixedDeltaTime)
 {   
     // example1: do stuff only if the module is enabled
     if (_dataMyCustomModule.EnabledToggleProperty.GetValue())
     { .. }
 
     // example2: update PAM items
     if (someConditionMet)
     {
         UpdateFlightPAMVisibility();
     }
 }

=== ## Update loop ===

* similar to FixedUpdate, but this is a regular Update loop independent of game time
* this triggers in Flight and in OAB

 public override void OnUpdate(float deltaTime)
 { .. }

=== ## FixedUpdate loop - OAB ===

* same as OnModuleFixedUpdate but it triggers only in OAB

 public override void OnModuleOABFixedUpdate(float deltaTime)
 { .. }

=== ## Define behaviour when the behaviour module instance will be destroyed ===

* cases: exiting Flight view, part has been destroyed, exiting the game

 public override void OnShutdown()
 {
     // example: unsubscribe from events
     _dataMyCustomModule.EnabledToggleProperty.OnChangedValue -= OnToggleChangedValue;
 }

=== ## Setting visibility for PAM properties ===
 private void UpdateFlightPAMVisibility(bool state)
 {
     _dataMyCustomModule.SetVisible(_dataMyCustomModule.SomeProperty, state);
     _dataMyCustomModule.SetVisible(_dataMyCustomModule.SomeOtherProperty, true);
     _dataMyCustomModule.SetVisible(_dataMyCustomModule.YetAnotherProperty, false);
 }

=== ## OnEnable ===

* triggers when Flight view is loaded and in OAB when part is added to the assembly

 protected void OnEnable()
 { .. }

== # Part Component class ==

=== ## Defining your class ===
 public class PartComponentModule_MyCustomModule : PartBehaviourModule
 { .. }

=== ## Set your PartBehaviourModule type reference ===
 public override Type PartComponentModuleType =&gt; typeof(PartComponentModule_MyCustomModule);

=== ## OnStart(double universalTime) ===

* for new vessels this will run when the Flight view is loaded
* also runs on load for every vessel currently in Flight (don't need to be loaded).
* best used for any kind of initialization of backend tasks this vessel/module needs to go through

 private Data_MyCustomModule _dataMyCustomModule;
 
 public override void OnStart(double universalTime)
 {
     // set a reference to the Data class
     if (!DataModules.TryGetByType&lt;Data_MyCustomModule&gt;(out _dataMyCustomModule))
     {
         _LOGGER.LogError("Unable to find a Data_MyCustomModule in the PartComponentModule for " + base.Part.PartName);
         return;
     }
 
     // initialize resource requests
     _dataMyCustomModule.SetupResourceRequest(base.resourceFlowRequestBroker);
 }

=== ## OnUpdate ===

* this starts triggering when the vessel is first placed in Flight. Doesn't trigger in the OAB before that
* once the vessel is in Flight, it will always trigger, in any view, until the part is destroyed/recovered
* use this for tasks that need to continually run, even when vessel is unloaded. Be careful not to put expensive tasks here.

 public override void OnUpdate(double universalTime, double deltaUniversalTime)
 {
     ResourceConsumptionUpdate(deltaUniversalTime); // example1: trigger resources consumption
     UpdateStatusAndState(); // example2: do general status updates if needed
 }

=== ## Resource consumption ===
 private void ResourceConsumptionUpdate(double deltaTime)
 {
     if (_dataMyCustomModule.UseResources)
     {
         if (GameManager.Instance.Game.SessionManager.IsDifficultyOptionEnabled("InfinitePower"))
         {
             _dataMyCustomModule.HasResourcesToOperate = true;
             if (base.resourceFlowRequestBroker.IsRequestActive(_dataMyCustomModule.RequestHandle))
             {
                 base.resourceFlowRequestBroker.SetRequestInactive(_dataMyCustomModule.RequestHandle);
                 return;
             }
         }
         else
         {
             if (this._hasOutstandingRequest)
             {
                 this._returnedRequestResolutionState =
                     base.resourceFlowRequestBroker.GetRequestState(_dataMyCustomModule.RequestHandle);
                 _dataMyCustomModule.HasResourcesToOperate = this._returnedRequestResolutionState.WasLastTickDeliveryAccepted;
             }
             this._hasOutstandingRequest = false;
             if (!_dataMyCustomModule.EnabledToggleProperty.GetValue() &amp;&amp;
                 base.resourceFlowRequestBroker.IsRequestActive(_dataMyCustomModule.RequestHandle))
             {
                 base.resourceFlowRequestBroker.SetRequestInactive(_dataMyCustomModule.RequestHandle);
                 _dataMyCustomModule.HasResourcesToOperate = false;
             }
             else if (_dataMyCustomModule.EnabledToggle.GetValue() &amp;&amp;
                 base.resourceFlowRequestBroker.IsRequestInactive(_dataMyCustomModule.RequestHandle))
             {
                 base.resourceFlowRequestBroker.SetRequestActive(_dataMyCustomModule.RequestHandle);
             }
             if (_dataMyCustomModule.EnabledToggleProperty.GetValue())
             {
                 _dataMyCustomModule.RequestConfig.FlowUnits = (double)_dataMyCustomModule.RequiredResource.Rate;
                 base.resourceFlowRequestBroker.SetCommands(_dataMyCustomModule.RequestHandle, 1.0,
                     new ResourceFlowRequestCommandConfig[] { _dataMyCustomModule.RequestConfig });
                 this._hasOutstandingRequest = true;
                 return;
             }
         }
     }
     else
     {
         _dataMyCustomModule.HasResourcesToOperate = true;
     }
 }

=== ## OnShutdown ===

* define behaviour when the Part Component instance will be destroyed
* cases: part has been destroyed, exiting the game

 public override void OnShutdown()
 { .. }</text>
      <sha1>f0175oipkn99vhdtf9e1ua4sq446f68</sha1>
    </revision>
    <revision>
      <id>298</id>
      <parentid>297</parentid>
      <timestamp>2024-01-11T18:36:43Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Formatting</comment>
      <origin>298</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="14329" sha1="czfcj6wltuv2d2cfk2rh2p4qugeq7pi" xml:space="preserve">[[Category:Custom Modules]]

{{DEFAULTSORT:2_Class_descriptions_for_custom_modules}}

While you're mostly free to define how your classes would be set up, there are some guidelines that need to be followed, restrictions to be aware of and inner workings to understand.

== Data class ==

=== Defining your class ===
 [Serializable]
 public class Data_MyCustomModule : ModuleData
 { .. }

=== Set your ParthBehaviourModule type reference ===
 public override Type ModuleType =&gt; typeof(Module_MyCustomModule);

=== Defining module properties ===

* these are entries shown in the PAM

 // Toggle (true/false) property
 [KSPState] // KSPState attribute tells the game to save the state of this property in the save game file
 [LocalizedField("Path/To/Your/Localization/String1")] // localization string for this attribute (see 'localization' paragraph)
 [PAMDisplayControl(SortIndex = 2)] // sets the sorting index for this property. Lower values are placed first
 public ModuleProperty&lt;bool&gt; SomeToggleProperty = new(false); // value in the parentheses defines the initial value
 
 // String property
 [LocalizedField("Path/To/Your/Localization/String2")]
 [PAMDisplayControl(SortIndex = 4)]
 [KSPDefinition] // KSPDefinition tells this property that its value is set from the part definition json (set by Patch Manager)
 public ModuleProperty&lt;string&gt; SomeStringProperty = new ("");
 
 // Float property - readonly
 [LocalizedField("Path/To/Your/Localization/String3")]
 [PAMDisplayControl(SortIndex = 7)]
 [JsonIgnore] // either [KSPState] or [JsonIgnore] is needed if you want this property to be readonly
 public ModuleProperty&lt;float&gt; SomeReadOnlyFloat = new (0, true, val =&gt; $"{val:N0} m");
 
 // Float property – editable by players, will be built as a slider
 [LocalizedField("Path/To/Your/Localization/String4")]
 [PAMDisplayControl(SortIndex = 1)]
 [SteppedRange(1f, 45f, 1f)] // minimum, maximum and step values
 public ModuleProperty&lt;float&gt; SomeEditableProperty = new (1f, false, val =&gt; $"{val:N0}°"); // initial value, isReadOnly, ToStringDelegate

=== Defining a dropdown list property ===

* dropdown list properties are string properties for which you define dropdown values in OnPartBehaviourModuleInit()

 // Dropdown property
 [LocalizedField("Path/To/Your/Localization/String5")]
 public ModuleProperty&lt;string&gt; DropdownProperty = new ModuleProperty&lt;string&gt;("Some value");
 
 public override void OnPartBehaviourModuleInit()
 {
     var dropdownList = new DropdownItemList();
     dropdownList.Add("some key", new DropdownItem() { key = "some key", text = "Some value" });
     dropdownList.Add("another key", new DropdownItem() { key = "another key", text = "Another value" });
     SetDropdownData(DropdownProperty, dropdownList);
 }

=== OnPartBehaviourModuleInit() ===

* runs when this module is initialized when entering Flight/OAB state

 public override void OnPartBehaviourModuleInit()
 { /* use this to initialize some values for your module, if needed */ }

=== OAB module description ===

* set the description of your module for all parts it’s being attached to
* description is shown in OAB and R&amp;D while hovering over the part after pressing SHIFT

 public override List&lt;OABPartData.PartInfoModuleEntry&gt; GetPartInfoEntries(Type partBehaviourModuleType, List&lt;OABPartData.PartInfoModuleEntry&gt; delegateList)
 {
     if (partBehaviourModuleType == ModuleType)
     {
         // add module description
         delegateList.Add(new OABPartData.PartInfoModuleEntry("", (_) =&gt; „Path/To/Your/Localization/String5“));
 
         // entry header
         var entry = new OABPartData.PartInfoModuleEntry(„Path/To/Your/Localization/String6“,
             _ =&gt;
             {
                 // subentries
                 var subEntries = new List&lt;OABPartData.PartInfoModuleSubEntry&gt;();
        
                 // first subentry
                 subEntries.Add(new OABPartData.PartInfoModuleSubEntry(
                     "Path/To/Your/Localization/String7", // subentry NAME
                     "subentry value"
                 ));
 
                 // second subentry
                 subEntries.Add(new OABPartData.PartInfoModuleSubEntry(
                     "Path/To/Your/Localization/String8", // subentry NAME
                     "subentry value"
                 ));
 
                 // if your module is using resources, you can add them to the description
                 // this doesn't set the value, it's just used to display it to the player
                 if (UseResources)
                 {
                     subEntries.Add(new OABPartData.PartInfoModuleSubEntry(
                         "Path/To/Your/Localization/String/ResourceName",
                         $"{RequiredResource.Rate.ToString("N3")} /s"
                     ));
                 }
 
                 return subEntries;
             });
         delegateList.Add(entry);
     }
     return delegateList;
 }

=== Setting up resource consumptions ===

* Note: trigger this from OnStart() in the Part Component class

 public override void SetupResourceRequest(ResourceFlowRequestBroker resourceFlowRequestBroker)
 {
     if (UseResources)
     {
         ResourceDefinitionID resourceIDFromName =
             GameManager.Instance.Game.ResourceDefinitionDatabase.GetResourceIDFromName(this.RequiredResource.ResourceName);
         if (resourceIDFromName == ResourceDefinitionID.InvalidID)
         {
             _LOGGER.LogError($"There are no resources with name {this.RequiredResource.ResourceName}");
             return;
         }
         RequestConfig = new ResourceFlowRequestCommandConfig();
         RequestConfig.FlowResource = resourceIDFromName;
         RequestConfig.FlowDirection = FlowDirection.FLOW_OUTBOUND;
         RequestConfig.FlowUnits = 0.0;
         RequestHandle = resourceFlowRequestBroker.AllocateOrGetRequest("MyCustomModule", default(ResourceFlowRequestHandle));
         resourceFlowRequestBroker.SetCommands(this.RequestHandle, 1.0, new ResourceFlowRequestCommandConfig[] { this.RequestConfig });
     }
 }
 
 [KSPDefinition]
 [Tooltip("Whether the module consumes resources")]
 public bool UseResources = true;
 
 public bool HasResourcesToOperate = true;
 
 [KSPDefinition]
 [Tooltip("Resource required to operate this module if it consumes resources")]
 public PartModuleResourceSetting RequiredResource;
 
 public ResourceFlowRequestCommandConfig RequestConfig;
   

== Part Behaviour class ==

=== Defining your class ===
 [DisallowMultipleComponent]
 public class Module_OrbitalSurvey : PartBehaviourModule
 { .. }

=== Set your PartComponentModule type reference ===
 public override Type PartComponentModuleType =&gt; typeof(PartComponentModule_MyCustomModule);

=== Create Data module instance ===
 [SerializeField]
 protected Data_MyCustomModule _dataMyCustomModule;
 
 public override void AddDataModules()
 {
     base.AddDataModules();
     _dataMyCustomModule ??= new Data_MyCustomModule();
     DataModules.TryAddUnique(_dataMyCustomModule, out _dataMyCustomModule);
 }

=== Initialize the module behaviour ===
 private ModuleAction _myCustomAction;
 
 public override void OnInitialize()
 {
     base.OnInitialize();
 
     // module actions are triggered when players press a button on the PAM property
     _myCustomAction = new ModuleAction(MethodThatWillHandleTheAction);
     _dataMyCustomModule.AddAction("Path/To/Your/Localization/String/X", _myCustomAction, 1);
 
     if (PartBackingMode == PartBackingModes.Flight)
     {
         /* do stuff that's only needed in Flight view */
 
         // example1: hide or show PAM properties depending on the Flight/OAB view
         UpdateFlightPAMVisibility(); 
 
         // example2: subscribe to the enabled toggle
         _dataMyCustomModule.EnabledToggleProperty.OnChangedValue += MethodThatWillHandleThis;
     } 
 
     if (PartBackingMode == PartBackingModes.OAB)
     { /* do stuff that's only needed in the OAB*/ }
 }
 
 private void MethodThatWillHandleTheAction()
 { /* do stuff here */}

=== FixedUpdate loop - Flight ===

* define stuff that needs to be executed continuously on every FixedUpdate loop. Be careful not to do expensive stuff here
* this triggers in Flight view only

 // This triggers in flight
 public override void OnModuleFixedUpdate(float fixedDeltaTime)
 {   
     // example1: do stuff only if the module is enabled
     if (_dataMyCustomModule.EnabledToggleProperty.GetValue())
     { .. }
 
     // example2: update PAM items
     if (someConditionMet)
     {
         UpdateFlightPAMVisibility();
     }
 }

=== Update loop ===

* similar to FixedUpdate, but this is a regular Update loop independent of game time
* this triggers in Flight and in OAB

 public override void OnUpdate(float deltaTime)
 { .. }

=== FixedUpdate loop - OAB ===

* same as OnModuleFixedUpdate but it triggers only in OAB

 public override void OnModuleOABFixedUpdate(float deltaTime)
 { .. }

=== Define behaviour when the behaviour module instance will be destroyed ===

* cases: exiting Flight view, part has been destroyed, exiting the game

 public override void OnShutdown()
 {
     // example: unsubscribe from events
     _dataMyCustomModule.EnabledToggleProperty.OnChangedValue -= OnToggleChangedValue;
 }

=== Setting visibility for PAM properties ===
 private void UpdateFlightPAMVisibility(bool state)
 {
     _dataMyCustomModule.SetVisible(_dataMyCustomModule.SomeProperty, state);
     _dataMyCustomModule.SetVisible(_dataMyCustomModule.SomeOtherProperty, true);
     _dataMyCustomModule.SetVisible(_dataMyCustomModule.YetAnotherProperty, false);
 }

=== OnEnable ===

* triggers when Flight view is loaded and in OAB when part is added to the assembly

 protected void OnEnable()
 { .. }

== Part Component class ==

=== Defining your class ===
 public class PartComponentModule_MyCustomModule : PartBehaviourModule
 { .. }

=== Set your PartBehaviourModule type reference ===
 public override Type PartComponentModuleType =&gt; typeof(PartComponentModule_MyCustomModule);

=== OnStart(double universalTime) ===

* for new vessels this will run when the Flight view is loaded
* also runs on load for every vessel currently in Flight (don't need to be loaded).
* best used for any kind of initialization of backend tasks this vessel/module needs to go through

 private Data_MyCustomModule _dataMyCustomModule;
 
 public override void OnStart(double universalTime)
 {
     // set a reference to the Data class
     if (!DataModules.TryGetByType&lt;Data_MyCustomModule&gt;(out _dataMyCustomModule))
     {
         _LOGGER.LogError("Unable to find a Data_MyCustomModule in the PartComponentModule for " + base.Part.PartName);
         return;
     }
 
     // initialize resource requests
     _dataMyCustomModule.SetupResourceRequest(base.resourceFlowRequestBroker);
 }

=== OnUpdate ===

* this starts triggering when the vessel is first placed in Flight. Doesn't trigger in the OAB before that
* once the vessel is in Flight, it will always trigger, in any view, until the part is destroyed/recovered
* use this for tasks that need to continually run, even when vessel is unloaded. Be careful not to put expensive tasks here.

 public override void OnUpdate(double universalTime, double deltaUniversalTime)
 {
     ResourceConsumptionUpdate(deltaUniversalTime); // example1: trigger resources consumption
     UpdateStatusAndState(); // example2: do general status updates if needed
 }

=== Resource consumption ===
 private void ResourceConsumptionUpdate(double deltaTime)
 {
     if (_dataMyCustomModule.UseResources)
     {
         if (GameManager.Instance.Game.SessionManager.IsDifficultyOptionEnabled("InfinitePower"))
         {
             _dataMyCustomModule.HasResourcesToOperate = true;
             if (base.resourceFlowRequestBroker.IsRequestActive(_dataMyCustomModule.RequestHandle))
             {
                 base.resourceFlowRequestBroker.SetRequestInactive(_dataMyCustomModule.RequestHandle);
                 return;
             }
         }
         else
         {
             if (this._hasOutstandingRequest)
             {
                 this._returnedRequestResolutionState =
                     base.resourceFlowRequestBroker.GetRequestState(_dataMyCustomModule.RequestHandle);
                 _dataMyCustomModule.HasResourcesToOperate = this._returnedRequestResolutionState.WasLastTickDeliveryAccepted;
             }
             this._hasOutstandingRequest = false;
             if (!_dataMyCustomModule.EnabledToggleProperty.GetValue() &amp;&amp;
                 base.resourceFlowRequestBroker.IsRequestActive(_dataMyCustomModule.RequestHandle))
             {
                 base.resourceFlowRequestBroker.SetRequestInactive(_dataMyCustomModule.RequestHandle);
                 _dataMyCustomModule.HasResourcesToOperate = false;
             }
             else if (_dataMyCustomModule.EnabledToggle.GetValue() &amp;&amp;
                 base.resourceFlowRequestBroker.IsRequestInactive(_dataMyCustomModule.RequestHandle))
             {
                 base.resourceFlowRequestBroker.SetRequestActive(_dataMyCustomModule.RequestHandle);
             }
             if (_dataMyCustomModule.EnabledToggleProperty.GetValue())
             {
                 _dataMyCustomModule.RequestConfig.FlowUnits = (double)_dataMyCustomModule.RequiredResource.Rate;
                 base.resourceFlowRequestBroker.SetCommands(_dataMyCustomModule.RequestHandle, 1.0,
                     new ResourceFlowRequestCommandConfig[] { _dataMyCustomModule.RequestConfig });
                 this._hasOutstandingRequest = true;
                 return;
             }
         }
     }
     else
     {
         _dataMyCustomModule.HasResourcesToOperate = true;
     }
 }

=== OnShutdown ===

* define behaviour when the Part Component instance will be destroyed
* cases: part has been destroyed, exiting the game

 public override void OnShutdown()
 { .. }</text>
      <sha1>czfcj6wltuv2d2cfk2rh2p4qugeq7pi</sha1>
    </revision>
    <revision>
      <id>332</id>
      <parentid>298</parentid>
      <timestamp>2024-01-26T16:01:41Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Additional clarification that PartBehaviour is only for loaded vessels</comment>
      <origin>332</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="14465" sha1="5h3m5gdxyryf5ri6z1u6rw5zcxtcsgf" xml:space="preserve">[[Category:Custom Modules]]

{{DEFAULTSORT:2_Class_descriptions_for_custom_modules}}

While you're mostly free to define how your classes would be set up, there are some guidelines that need to be followed, restrictions to be aware of and inner workings to understand.

== Data class ==

=== Defining your class ===
 [Serializable]
 public class Data_MyCustomModule : ModuleData
 { .. }

=== Set your ParthBehaviourModule type reference ===
 public override Type ModuleType =&gt; typeof(Module_MyCustomModule);

=== Defining module properties ===

* these are entries shown in the PAM

 // Toggle (true/false) property
 [KSPState] // KSPState attribute tells the game to save the state of this property in the save game file
 [LocalizedField("Path/To/Your/Localization/String1")] // localization string for this attribute (see 'localization' paragraph)
 [PAMDisplayControl(SortIndex = 2)] // sets the sorting index for this property. Lower values are placed first
 public ModuleProperty&lt;bool&gt; SomeToggleProperty = new(false); // value in the parentheses defines the initial value
 
 // String property
 [LocalizedField("Path/To/Your/Localization/String2")]
 [PAMDisplayControl(SortIndex = 4)]
 [KSPDefinition] // KSPDefinition tells this property that its value is set from the part definition json (set by Patch Manager)
 public ModuleProperty&lt;string&gt; SomeStringProperty = new ("");
 
 // Float property - readonly
 [LocalizedField("Path/To/Your/Localization/String3")]
 [PAMDisplayControl(SortIndex = 7)]
 [JsonIgnore] // either [KSPState] or [JsonIgnore] is needed if you want this property to be readonly
 public ModuleProperty&lt;float&gt; SomeReadOnlyFloat = new (0, true, val =&gt; $"{val:N0} m");
 
 // Float property – editable by players, will be built as a slider
 [LocalizedField("Path/To/Your/Localization/String4")]
 [PAMDisplayControl(SortIndex = 1)]
 [SteppedRange(1f, 45f, 1f)] // minimum, maximum and step values
 public ModuleProperty&lt;float&gt; SomeEditableProperty = new (1f, false, val =&gt; $"{val:N0}°"); // initial value, isReadOnly, ToStringDelegate

=== Defining a dropdown list property ===

* dropdown list properties are string properties for which you define dropdown values in OnPartBehaviourModuleInit()

 // Dropdown property
 [LocalizedField("Path/To/Your/Localization/String5")]
 public ModuleProperty&lt;string&gt; DropdownProperty = new ModuleProperty&lt;string&gt;("Some value");
 
 public override void OnPartBehaviourModuleInit()
 {
     var dropdownList = new DropdownItemList();
     dropdownList.Add("some key", new DropdownItem() { key = "some key", text = "Some value" });
     dropdownList.Add("another key", new DropdownItem() { key = "another key", text = "Another value" });
     SetDropdownData(DropdownProperty, dropdownList);
 }

=== OnPartBehaviourModuleInit() ===

* runs when this module is initialized when entering Flight/OAB state

 public override void OnPartBehaviourModuleInit()
 { /* use this to initialize some values for your module, if needed */ }

=== OAB module description ===

* set the description of your module for all parts it’s being attached to
* description is shown in OAB and R&amp;D while hovering over the part after pressing SHIFT

 public override List&lt;OABPartData.PartInfoModuleEntry&gt; GetPartInfoEntries(Type partBehaviourModuleType, List&lt;OABPartData.PartInfoModuleEntry&gt; delegateList)
 {
     if (partBehaviourModuleType == ModuleType)
     {
         // add module description
         delegateList.Add(new OABPartData.PartInfoModuleEntry("", (_) =&gt; „Path/To/Your/Localization/String5“));
 
         // entry header
         var entry = new OABPartData.PartInfoModuleEntry(„Path/To/Your/Localization/String6“,
             _ =&gt;
             {
                 // subentries
                 var subEntries = new List&lt;OABPartData.PartInfoModuleSubEntry&gt;();
        
                 // first subentry
                 subEntries.Add(new OABPartData.PartInfoModuleSubEntry(
                     "Path/To/Your/Localization/String7", // subentry NAME
                     "subentry value"
                 ));
 
                 // second subentry
                 subEntries.Add(new OABPartData.PartInfoModuleSubEntry(
                     "Path/To/Your/Localization/String8", // subentry NAME
                     "subentry value"
                 ));
 
                 // if your module is using resources, you can add them to the description
                 // this doesn't set the value, it's just used to display it to the player
                 if (UseResources)
                 {
                     subEntries.Add(new OABPartData.PartInfoModuleSubEntry(
                         "Path/To/Your/Localization/String/ResourceName",
                         $"{RequiredResource.Rate.ToString("N3")} /s"
                     ));
                 }
 
                 return subEntries;
             });
         delegateList.Add(entry);
     }
     return delegateList;
 }

=== Setting up resource consumptions ===

* Note: trigger this from OnStart() in the Part Component class

 public override void SetupResourceRequest(ResourceFlowRequestBroker resourceFlowRequestBroker)
 {
     if (UseResources)
     {
         ResourceDefinitionID resourceIDFromName =
             GameManager.Instance.Game.ResourceDefinitionDatabase.GetResourceIDFromName(this.RequiredResource.ResourceName);
         if (resourceIDFromName == ResourceDefinitionID.InvalidID)
         {
             _LOGGER.LogError($"There are no resources with name {this.RequiredResource.ResourceName}");
             return;
         }
         RequestConfig = new ResourceFlowRequestCommandConfig();
         RequestConfig.FlowResource = resourceIDFromName;
         RequestConfig.FlowDirection = FlowDirection.FLOW_OUTBOUND;
         RequestConfig.FlowUnits = 0.0;
         RequestHandle = resourceFlowRequestBroker.AllocateOrGetRequest("MyCustomModule", default(ResourceFlowRequestHandle));
         resourceFlowRequestBroker.SetCommands(this.RequestHandle, 1.0, new ResourceFlowRequestCommandConfig[] { this.RequestConfig });
     }
 }
 
 [KSPDefinition]
 [Tooltip("Whether the module consumes resources")]
 public bool UseResources = true;
 
 public bool HasResourcesToOperate = true;
 
 [KSPDefinition]
 [Tooltip("Resource required to operate this module if it consumes resources")]
 public PartModuleResourceSetting RequiredResource;
 
 public ResourceFlowRequestCommandConfig RequestConfig;
   

== Part Behaviour class ==

=== Defining your class ===
 [DisallowMultipleComponent]
 public class Module_OrbitalSurvey : PartBehaviourModule
 { .. }

=== Set your PartComponentModule type reference ===
 public override Type PartComponentModuleType =&gt; typeof(PartComponentModule_MyCustomModule);

=== Create Data module instance ===
 [SerializeField]
 protected Data_MyCustomModule _dataMyCustomModule;
 
 public override void AddDataModules()
 {
     base.AddDataModules();
     _dataMyCustomModule ??= new Data_MyCustomModule();
     DataModules.TryAddUnique(_dataMyCustomModule, out _dataMyCustomModule);
 }

=== Initialize the module behaviour ===
 private ModuleAction _myCustomAction;
 
 public override void OnInitialize()
 {
     base.OnInitialize();
 
     // module actions are triggered when players press a button on the PAM property
     _myCustomAction = new ModuleAction(MethodThatWillHandleTheAction);
     _dataMyCustomModule.AddAction("Path/To/Your/Localization/String/X", _myCustomAction, 1);
 
     if (PartBackingMode == PartBackingModes.Flight)
     {
         /* do stuff that's only needed in Flight view */
 
         // example1: hide or show PAM properties depending on the Flight/OAB view
         UpdateFlightPAMVisibility(); 
 
         // example2: subscribe to the enabled toggle
         _dataMyCustomModule.EnabledToggleProperty.OnChangedValue += MethodThatWillHandleThis;
     } 
 
     if (PartBackingMode == PartBackingModes.OAB)
     { /* do stuff that's only needed in the OAB*/ }
 }
 
 private void MethodThatWillHandleTheAction()
 { /* do stuff here */}

=== FixedUpdate loop - Flight/Map ===

* define stuff that needs to be executed continuously on every FixedUpdate loop. Be careful not to do expensive stuff here
* this triggers when the vessel is loaded, in Flight/Map view only

 // This triggers in flight
 public override void OnModuleFixedUpdate(float fixedDeltaTime)
 {   
     // example1: do stuff only if the module is enabled
     if (_dataMyCustomModule.EnabledToggleProperty.GetValue())
     { .. }
 
     // example2: update PAM items
     if (someConditionMet)
     {
         UpdateFlightPAMVisibility();
     }
 }

=== Update loop ===

* similar to FixedUpdate, but this is a regular Update loop independent of game time
* this triggers in Flight/Map when the vessel is loaded and in OAB when the part is attached to the assembly

 public override void OnUpdate(float deltaTime)
 { .. }

=== FixedUpdate loop - OAB ===

* same as OnModuleFixedUpdate but it triggers only in OAB

 public override void OnModuleOABFixedUpdate(float deltaTime)
 { .. }

=== Define behaviour when the behaviour module instance will be destroyed ===

* cases: exiting Flight view, part has been destroyed, exiting the game

 public override void OnShutdown()
 {
     // example: unsubscribe from events
     _dataMyCustomModule.EnabledToggleProperty.OnChangedValue -= OnToggleChangedValue;
 }

=== Setting visibility for PAM properties ===
 private void UpdateFlightPAMVisibility(bool state)
 {
     _dataMyCustomModule.SetVisible(_dataMyCustomModule.SomeProperty, state);
     _dataMyCustomModule.SetVisible(_dataMyCustomModule.SomeOtherProperty, true);
     _dataMyCustomModule.SetVisible(_dataMyCustomModule.YetAnotherProperty, false);
 }

=== OnEnable ===

* triggers when Flight view is loaded (only for the loaded vessel) and in OAB when part is added to the assembly

 protected void OnEnable()
 { .. }

== Part Component class ==

=== Defining your class ===
 public class PartComponentModule_MyCustomModule : PartBehaviourModule
 { .. }

=== Set your PartBehaviourModule type reference ===
 public override Type PartComponentModuleType =&gt; typeof(PartComponentModule_MyCustomModule);

=== OnStart(double universalTime) ===

* for new vessels this will run when the Flight view is loaded
* also runs on load for every vessel currently in Flight (don't need to be loaded).
* best used for any kind of initialization of backend tasks this vessel/module needs to go through

 private Data_MyCustomModule _dataMyCustomModule;
 
 public override void OnStart(double universalTime)
 {
     // set a reference to the Data class
     if (!DataModules.TryGetByType&lt;Data_MyCustomModule&gt;(out _dataMyCustomModule))
     {
         _LOGGER.LogError("Unable to find a Data_MyCustomModule in the PartComponentModule for " + base.Part.PartName);
         return;
     }
 
     // initialize resource requests
     _dataMyCustomModule.SetupResourceRequest(base.resourceFlowRequestBroker);
 }

=== OnUpdate ===

* this starts triggering when the vessel is first placed in Flight. Doesn't trigger in the OAB before that
* once the vessel is in Flight, it will always trigger, in any view, until the part is destroyed/recovered
* use this for tasks that need to continually run, even when vessel is unloaded. Be careful not to put expensive tasks here.

 public override void OnUpdate(double universalTime, double deltaUniversalTime)
 {
     ResourceConsumptionUpdate(deltaUniversalTime); // example1: trigger resources consumption
     UpdateStatusAndState(); // example2: do general status updates if needed
 }

=== Resource consumption ===
 private void ResourceConsumptionUpdate(double deltaTime)
 {
     if (_dataMyCustomModule.UseResources)
     {
         if (GameManager.Instance.Game.SessionManager.IsDifficultyOptionEnabled("InfinitePower"))
         {
             _dataMyCustomModule.HasResourcesToOperate = true;
             if (base.resourceFlowRequestBroker.IsRequestActive(_dataMyCustomModule.RequestHandle))
             {
                 base.resourceFlowRequestBroker.SetRequestInactive(_dataMyCustomModule.RequestHandle);
                 return;
             }
         }
         else
         {
             if (this._hasOutstandingRequest)
             {
                 this._returnedRequestResolutionState =
                     base.resourceFlowRequestBroker.GetRequestState(_dataMyCustomModule.RequestHandle);
                 _dataMyCustomModule.HasResourcesToOperate = this._returnedRequestResolutionState.WasLastTickDeliveryAccepted;
             }
             this._hasOutstandingRequest = false;
             if (!_dataMyCustomModule.EnabledToggleProperty.GetValue() &amp;&amp;
                 base.resourceFlowRequestBroker.IsRequestActive(_dataMyCustomModule.RequestHandle))
             {
                 base.resourceFlowRequestBroker.SetRequestInactive(_dataMyCustomModule.RequestHandle);
                 _dataMyCustomModule.HasResourcesToOperate = false;
             }
             else if (_dataMyCustomModule.EnabledToggle.GetValue() &amp;&amp;
                 base.resourceFlowRequestBroker.IsRequestInactive(_dataMyCustomModule.RequestHandle))
             {
                 base.resourceFlowRequestBroker.SetRequestActive(_dataMyCustomModule.RequestHandle);
             }
             if (_dataMyCustomModule.EnabledToggleProperty.GetValue())
             {
                 _dataMyCustomModule.RequestConfig.FlowUnits = (double)_dataMyCustomModule.RequiredResource.Rate;
                 base.resourceFlowRequestBroker.SetCommands(_dataMyCustomModule.RequestHandle, 1.0,
                     new ResourceFlowRequestCommandConfig[] { _dataMyCustomModule.RequestConfig });
                 this._hasOutstandingRequest = true;
                 return;
             }
         }
     }
     else
     {
         _dataMyCustomModule.HasResourcesToOperate = true;
     }
 }

=== OnShutdown ===

* define behaviour when the Part Component instance will be destroyed
* cases: part has been destroyed, exiting the game

 public override void OnShutdown()
 { .. }</text>
      <sha1>5h3m5gdxyryf5ri6z1u6rw5zcxtcsgf</sha1>
    </revision>
  </page>
  <page>
    <title>Miscellaneous and tips for custom modules</title>
    <ns>0</ns>
    <id>96</id>
    <revision>
      <id>299</id>
      <timestamp>2024-01-11T18:38:16Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Final remarks and some tips</comment>
      <origin>299</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <revision>
      <id>300</id>
      <parentid>299</parentid>
      <timestamp>2024-01-11T18:38:47Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Add category and sorting</comment>
      <origin>300</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="87" sha1="g8i78zoxrqr5e3w2avy2u6b99csfez0" xml:space="preserve">[[Category:Custom Modules]]
{{DEFAULTSORT:3_Miscellaneous_and_tips_for_custom_modules}}</text>
      <sha1>g8i78zoxrqr5e3w2avy2u6b99csfez0</sha1>
    </revision>
    <revision>
      <id>301</id>
      <parentid>300</parentid>
      <timestamp>2024-01-11T18:48:03Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Add page contents</comment>
      <origin>301</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5705" sha1="cde5e4aac3wgihd8z55hmukntzrp1ij" xml:space="preserve">[[Category:Custom Modules]]
{{DEFAULTSORT:3_Miscellaneous_and_tips_for_custom_modules}}

== Localization ==
For module properties that support a LocalizationField parameter it's best to use a localization file.
 [LocalizedField("Path/To/Your/Localization/String")]
 public ModuleProperty&lt;bool&gt; SomeToggleProperty = new(false);
Localizations will be automatically loaded by SpaceWarp if placed in &lt;code&gt;../BepInEx/plugins/YourModFolder/localizations/&lt;/code&gt;  inside a &lt;code&gt;.csv&lt;/code&gt; file.

Structure your &lt;code&gt;.csv&lt;/code&gt; file like so:
 Key,Type,Desc,English,German,French,Italian,Spanish,Japanese,Korean,Polish,Russian,Chinese (Simplified),Portuguese (Brazil),Chinese (Traditional)
 Path/To/Your/Localization/String,Text,,English translation goes here,German translation goes here
If you don't provide a translation string for a language, it will default to English for that particular string.

If you need to place a comma (",") in your translation string, wrap it inside double quotations marks, like so:
 Path/To/Your/Localization/String,Text,,"I can write commas here, no problem, as much commas I'd like."

== PAM module headers and sorting ==
If you want your module to have a header before its properties or if it needs to be sorted relative to other modules in the same part, define this in your Patch Manager &lt;code&gt;.patch&lt;/code&gt; file:
 :parts {
     +Module_OrbitalSurvey {
         +Data_OrbitalSurvey {
             ..
         }
     }
     PAMModuleVisualsOverride +: [
         {
             PartComponentModuleName: PartComponentModule_MyCustomModule,
             ModuleDisplayName: "Path/To/Your/Localization/String/Where/Your/Module/Name/Is/Defined",
             ShowHeader: true,
             ShowFooter: true // setting ShowFooter doesn't appear to have any effect? Update this guide if you have new info
         }
     ];
     PAMModuleSortOverride +: [
         {
             PartComponentModuleName: PartComponentModule_MyCustomModule,
             sortIndex: 40 // try setting a different value if you don't get what you need
         }
     ];
 }

== Register your module for background resource processing ==
Resource consumption while the vessel is unloaded is disabled by default, as an effort to enhance performance of the stock game. If your module needs to consume resources while it's not loaded (for example Life support consumption), Space Warp supports registration of your module to consume resources.

Do this somewhere where you initialize stuff for your mod (example here: in your plugin class):
 public class YourModPlugin : BaseSpaceWarpPlugin
 {
     public override void OnInitialized()
     {
         SpaceWarp.API.Parts.PartComponentModuleOverride
             .RegisterModuleForBackgroundResourceProcessing&lt;PartComponentModule_YourCustomModule&gt;();
     }
 }

== Tip: add reference to your Part Component module in your Data module class ==
If you need a reference to your Part Component class from inside your Data class, you can do it like so: 
 public class Data_MyCustomModule : ModuleData
 {
     // be sure to put the JsonIgnore attribute, as otherwise there will be a circular reference and bad things will happen
     [JsonIgnore]
     public PartComponentModule_MyCustomModule PartComponentModule;
 }
 
 public class PartComponentModule_MyCustomModule : PartComponentModule
 {
     private Data_MyCustomModule _dataMyCustomModule;
 
     public override void OnStart(double universalTime)
     {
         if (!DataModules.TryGetByType&lt;Data_MyCustomModule&gt;(out _dataMyCustomModule))
         {
             return;
         }
 
         _dataMyCustomModule.PartComponentModule = this;
     }
 }

== Tip: fetch VesselComponent, PartOwner, Body or other values of your vessel or part ==
 public class PartComponentModule_MyCustomModule : PartComponentModule
 {
     public override void OnStart(double universalTime)
     {
         var partOwner = base.Part.PartOwner;
         var vessel = partOwner.SimulationObject.Vessel;
         var body = vessel.mainBody.Name;
         var altitude = vessel.AltitudeFromRadius;
     }
 }

== Tip: fetch other modules attached to the part ==
Sometimes you might need data from other modules.
 public class PartComponentModule_MyCustomModule : PartComponentModule
 {
     private Data_Deployable _dataDeployable;
     private PartComponentModule_ScienceExperiment _moduleScienceExperiment;
 
     public override void OnStart(double universalTime)
     {
         // get the ScienceExperiment module
         Part.TryGetModule(typeof(PartComponentModule_ScienceExperiment), out var m);
         _moduleScienceExperiment = m as PartComponentModule_ScienceExperiment;
 
         // try to get Data_Deployable if the part has a Deployable module
         Part.TryGetModule(typeof(PartComponentModule_Deployable), out var m2);
         if (m2 != null)
         {
             var moduleDeployable = m2 as PartComponentModule_Deployable;
             foreach (var dataDeployable in moduleDeployable.DataModules?.ValuesList)
             {
                 if (dataDeployable is Data_Deployable)
                 {
                     _dataDeployable = dataDeployable as Data_Deployable;
 
                     // register for the deployment event
                     _dataDeployable.toggleExtend.OnChangedValue += (_) =&gt; YourMethodThatWillReactToDeploying();
                     break;
                 }
             }
         }
     }
 }</text>
      <sha1>cde5e4aac3wgihd8z55hmukntzrp1ij</sha1>
    </revision>
  </page>
  <page>
    <title>Configuring the mesh</title>
    <ns>0</ns>
    <id>97</id>
    <redirect title="Configuring the core part data" />
    <revision>
      <id>304</id>
      <timestamp>2024-01-13T03:15:54Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Munix moved page [[Configuring the mesh]] to [[Configuring the core part data]]: misleading title</comment>
      <origin>304</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="44" sha1="qgb4a4a2deetamkcdc60x2kvr9wwdke" xml:space="preserve">#REDIRECT [[Configuring the core part data]]</text>
      <sha1>qgb4a4a2deetamkcdc60x2kvr9wwdke</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Creating parts</title>
    <ns>14</ns>
    <id>98</id>
    <redirect title="Category:Parts and modules" />
    <revision>
      <id>316</id>
      <timestamp>2024-01-15T02:05:15Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Munix moved page [[Category:Creating parts]] to [[Category:Parts and modules]]</comment>
      <origin>316</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="41" sha1="iu6am4ywnt08ntwm6sz2os7dx3o0wt1" xml:space="preserve">#REDIRECT [[:Category:Parts and modules]]</text>
      <sha1>iu6am4ywnt08ntwm6sz2os7dx3o0wt1</sha1>
    </revision>
  </page>
</mediawiki>
