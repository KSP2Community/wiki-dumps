<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.11/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.11/ http://www.mediawiki.org/xml/export-0.11.xsd" version="0.11" xml:lang="en">
  <siteinfo>
    <sitename>KSP 2 Modding Wiki</sitename>
    <dbname>bitnami_mediawiki</dbname>
    <base>https://wiki.spacewarp.org/wiki/Main_Page</base>
    <generator>MediaWiki 1.40.1</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">KSP2 Modding Wiki</namespace>
      <namespace key="5" case="first-letter">KSP2 Modding Wiki talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="3000" case="first-letter">KSP1</namespace>
      <namespace key="3001" case="first-letter">KSP1 talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Main Page</title>
    <ns>0</ns>
    <id>1</id>
    <revision>
      <id>1</id>
      <timestamp>2023-04-15T20:07:34Z</timestamp>
      <contributor>
        <username>MediaWiki default</username>
        <id>2</id>
      </contributor>
      <origin>1</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="755" sha1="22vz5zlxa2zctewimaum2bf1due8hkl" xml:space="preserve">&lt;strong&gt;MediaWiki has been installed.&lt;/strong&gt;

Consult the [https://www.mediawiki.org/wiki/Special:MyLanguage/Help:Contents User's Guide] for information on using the wiki software.

== Getting started ==
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:Configuration_settings Configuration settings list]
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:FAQ MediaWiki FAQ]
* [https://lists.wikimedia.org/postorius/lists/mediawiki-announce.lists.wikimedia.org/ MediaWiki release mailing list]
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Localisation#Translation_resources Localise MediaWiki for your language]
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:Combating_spam Learn how to combat spam on your wiki]</text>
      <sha1>22vz5zlxa2zctewimaum2bf1due8hkl</sha1>
    </revision>
    <revision>
      <id>2</id>
      <parentid>1</parentid>
      <timestamp>2023-04-15T22:51:37Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Main Page]]" ([Edit=Allow only administrators] (indefinite) [Move=Allow only administrators] (indefinite))</comment>
      <origin>1</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="755" sha1="22vz5zlxa2zctewimaum2bf1due8hkl" xml:space="preserve">&lt;strong&gt;MediaWiki has been installed.&lt;/strong&gt;

Consult the [https://www.mediawiki.org/wiki/Special:MyLanguage/Help:Contents User's Guide] for information on using the wiki software.

== Getting started ==
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:Configuration_settings Configuration settings list]
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:FAQ MediaWiki FAQ]
* [https://lists.wikimedia.org/postorius/lists/mediawiki-announce.lists.wikimedia.org/ MediaWiki release mailing list]
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Localisation#Translation_resources Localise MediaWiki for your language]
* [https://www.mediawiki.org/wiki/Special:MyLanguage/Manual:Combating_spam Learn how to combat spam on your wiki]</text>
      <sha1>22vz5zlxa2zctewimaum2bf1due8hkl</sha1>
    </revision>
    <revision>
      <id>3</id>
      <parentid>2</parentid>
      <timestamp>2023-04-15T22:58:30Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>3</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="184" sha1="6mx5qbgiapq5f6zzuaj6ih8oidldvcq" xml:space="preserve">&lt;strong&gt;Welcome to KSP 2 Modding Wiki&lt;/strong&gt;

This wiki serves as a place to share knowledge about modding KSP 2. Anyone can create their own articles or contribute to existing ones.</text>
      <sha1>6mx5qbgiapq5f6zzuaj6ih8oidldvcq</sha1>
    </revision>
    <revision>
      <id>5</id>
      <parentid>3</parentid>
      <timestamp>2023-04-15T23:05:46Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>5</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="245" sha1="08r7dx5c3ttsqtc4cb72sy2gb3mwy31" xml:space="preserve">[[Category:TOC]]

&lt;strong&gt;Welcome to KSP 2 Modding Wiki&lt;/strong&gt;

This wiki serves as a place to share knowledge about modding KSP 2. Anyone can create their own articles or contribute to existing ones.

{{#categorytree:TOC|hideroot|mode=pages}}</text>
      <sha1>08r7dx5c3ttsqtc4cb72sy2gb3mwy31</sha1>
    </revision>
    <revision>
      <id>10</id>
      <parentid>5</parentid>
      <timestamp>2023-04-15T23:15:08Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>10</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="413" sha1="ttqyji2wkh2vwrc2xmqf5r0kgdyrmkm" xml:space="preserve">[[Category:TOC]]

'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone can create their own articles or contribute to existing ones.

== Categories ==
{{#categorytree:TOC|hideroot|mode=pages}}

== Create a new article ==
&lt;div style="float: left;"&gt;
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new article
placeholder=Article name
&lt;/inputbox&gt;
&lt;/div&gt;</text>
      <sha1>ttqyji2wkh2vwrc2xmqf5r0kgdyrmkm</sha1>
    </revision>
    <revision>
      <id>14</id>
      <parentid>10</parentid>
      <timestamp>2023-04-16T00:04:19Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>14</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="878" sha1="aq3hqhcytia1gkrcdpkplgvm7f721ml" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Existing categories==
To create your own category, simple create a page with the prefix "Category:", for example "Category:Part modding".
{{#categorytree:TOC|hideroot|mode=pages}}

==Create a new page==
For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;syntaxhighlight lang="xml" inline&gt;&lt;syntaxhighlight&gt;&lt;/syntaxhighlight&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.

&lt;div style="float: left;"&gt;
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;
&lt;/div&gt;</text>
      <sha1>aq3hqhcytia1gkrcdpkplgvm7f721ml</sha1>
    </revision>
    <revision>
      <id>15</id>
      <parentid>14</parentid>
      <timestamp>2023-04-16T00:09:35Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>15</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1012" sha1="j56ne5ia8y1uh830bgwadn12zrbj9rn" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Category list==
To assign a page to a category, use the following: &lt;syntaxhighlight inline&gt;[[Category:My category]]&lt;/syntaxhighlight&gt;. To create a new category if it does not exist yet, simple create a page with the prefix "Category:", for example "Category:My category".
{{#categorytree:TOC|hideroot|mode=pages}}

==Create a new page==
For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;syntaxhighlight lang="xml" inline&gt;&lt;syntaxhighlight&gt;&lt;/syntaxhighlight&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.

&lt;div style="float: left;"&gt;
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;
&lt;/div&gt;</text>
      <sha1>j56ne5ia8y1uh830bgwadn12zrbj9rn</sha1>
    </revision>
    <revision>
      <id>16</id>
      <parentid>15</parentid>
      <timestamp>2023-04-16T00:10:48Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>16</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="995" sha1="c4a8nyh7q6yjdlafqwtp5qjqdf3nrgy" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Category list==
{{#categorytree:TOC|hideroot|mode=pages}}

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

==== Help ====
To assign a page to a category, use the following: &lt;syntaxhighlight inline=""&gt;[[Category:My category]]&lt;/syntaxhighlight&gt;. To create a new category if it does not exist yet, simple create a page with the prefix "Category:", for example "Category:My category".For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;syntaxhighlight lang="xml" inline&gt;&lt;syntaxhighlight&gt;&lt;/syntaxhighlight&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.</text>
      <sha1>c4a8nyh7q6yjdlafqwtp5qjqdf3nrgy</sha1>
    </revision>
    <revision>
      <id>17</id>
      <parentid>16</parentid>
      <timestamp>2023-04-16T00:11:58Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <comment>/* Help */</comment>
      <origin>17</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1024" sha1="0z86o5rdmu9d5qosrmi3tcxrc8is5i7" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Category list==
{{#categorytree:TOC|hideroot|mode=pages}}

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

==== Help ====
To assign a page to a category, put the following line at the top of your page: &lt;syntaxhighlight inline=""&gt;[[Category:My category]]&lt;/syntaxhighlight&gt;. To create a new category if it does not exist yet, simple create a page with the prefix "Category:", for example "Category:My category".For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;syntaxhighlight lang="xml" inline&gt;&lt;syntaxhighlight&gt;&lt;/syntaxhighlight&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.</text>
      <sha1>0z86o5rdmu9d5qosrmi3tcxrc8is5i7</sha1>
    </revision>
    <revision>
      <id>18</id>
      <parentid>17</parentid>
      <timestamp>2023-04-16T00:13:46Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>18</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1029" sha1="78ick3fk5y2bjtr0hxkdq6b42m1xcum" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Category list==
{{#categorytree:TOC|hideroot|mode=pages}}

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

==== Help ====
To assign a page to a category, put the following line at the top of your page: &lt;syntaxhighlight inline=""&gt;[[Category:My category]]&lt;/syntaxhighlight&gt;. To create a new category if it does not exist yet, simple create a page with the prefix "Category:", for example "Category:My category".

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;syntaxhighlight lang="xml" inline=""&gt;&lt;syntaxhighlight&gt;&lt;/syntaxhighlight&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.</text>
      <sha1>78ick3fk5y2bjtr0hxkdq6b42m1xcum</sha1>
    </revision>
    <revision>
      <id>19</id>
      <parentid>18</parentid>
      <timestamp>2023-04-16T00:15:32Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>19</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1003" sha1="iqrs72edki8a88j0fdjv256srztcr29" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Category list==
{{#categorytree:TOC|hideroot|mode=pages}}

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

==== Help ====
To assign a page to a category, put the following line at the top of your page: &lt;syntaxhighlight inline=""&gt;[[Category:My category]]&lt;/syntaxhighlight&gt;. To create a new category if it does not exist yet, simple create a page with the prefix "Category:", for example "Category:My category".

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.</text>
      <sha1>iqrs72edki8a88j0fdjv256srztcr29</sha1>
    </revision>
    <revision>
      <id>20</id>
      <parentid>19</parentid>
      <timestamp>2023-04-16T00:16:18Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>20</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="988" sha1="b7xq2iocpythjch8bdl1v2drxehrhvb" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Category list==
{{#categorytree:TOC|hideroot|mode=pages}}

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

==== Help ====
To assign a page to a category, put the following line at the top of your page: &lt;code&gt;&lt;nowiki&gt;[[Category:My category]]&lt;/nowiki&gt;&lt;/code&gt;. To create a new category if it does not exist yet, simple create a page with the prefix "Category:", for example "Category:My category".

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.</text>
      <sha1>b7xq2iocpythjch8bdl1v2drxehrhvb</sha1>
    </revision>
    <revision>
      <id>21</id>
      <parentid>20</parentid>
      <timestamp>2023-04-16T00:22:58Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>21</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1331" sha1="m50jfvafnlx5xd4f0vdas3ucdoanxt0" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Category list==
{{#categorytree:TOC|hideroot|mode=pages}}

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

==== Help ====
To assign a page to a category, put the following line at the top of your page: &lt;code&gt;&lt;nowiki&gt;[[Category:My category]]&lt;/nowiki&gt;&lt;/code&gt;. To create a new category if it does not exist yet, simple create a page with the prefix "Category:", for example "Category:My category".

All new categories should either be subcategories of "TOC" to be displayed in the list on this page, or subcategories of other already existing categories. You can achieve this by placing this line at the top of the category's page: &lt;code&gt;&lt;nowiki&gt;[[Category:TOC]]&lt;/nowiki&gt;&lt;/code&gt;, similarly to how any other categories get assigned to pages.

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.</text>
      <sha1>m50jfvafnlx5xd4f0vdas3ucdoanxt0</sha1>
    </revision>
    <revision>
      <id>30</id>
      <parentid>21</parentid>
      <timestamp>2023-04-16T15:00:52Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <comment>/* Category list */</comment>
      <origin>30</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1327" sha1="6yanexys7apzdwhw7po4n85uijnwulp" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Page list==
{{#categorytree:TOC|hideroot|mode=pages}}

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

==== Help ====
To assign a page to a category, put the following line at the top of your page: &lt;code&gt;&lt;nowiki&gt;[[Category:My category]]&lt;/nowiki&gt;&lt;/code&gt;. To create a new category if it does not exist yet, simple create a page with the prefix "Category:", for example "Category:My category".

All new categories should either be subcategories of "TOC" to be displayed in the list on this page, or subcategories of other already existing categories. You can achieve this by placing this line at the top of the category's page: &lt;code&gt;&lt;nowiki&gt;[[Category:TOC]]&lt;/nowiki&gt;&lt;/code&gt;, similarly to how any other categories get assigned to pages.

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.</text>
      <sha1>6yanexys7apzdwhw7po4n85uijnwulp</sha1>
    </revision>
    <revision>
      <id>31</id>
      <parentid>30</parentid>
      <timestamp>2023-04-16T15:20:37Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>31</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1366" sha1="silkuh2uqnsxic97geve8mu2kdt9iam" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Page list==
You can find the list of all pages grouped by categories here: [[Category:TOC]].

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

==== Help ====
To assign a page to a category, put the following line at the top of your page: &lt;code&gt;&lt;nowiki&gt;[[Category:My category]]&lt;/nowiki&gt;&lt;/code&gt;. To create a new category if it does not exist yet, simple create a page with the prefix "Category:", for example "Category:My category".

All new categories should either be subcategories of "TOC" to be displayed in the list on this page, or subcategories of other already existing categories. You can achieve this by placing this line at the top of the category's page: &lt;code&gt;&lt;nowiki&gt;[[Category:TOC]]&lt;/nowiki&gt;&lt;/code&gt;, similarly to how any other categories get assigned to pages.

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.</text>
      <sha1>silkuh2uqnsxic97geve8mu2kdt9iam</sha1>
    </revision>
    <revision>
      <id>32</id>
      <parentid>31</parentid>
      <timestamp>2023-04-16T15:21:06Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>32</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1401" sha1="icgcq3uw0juqc9cfcor1c9s5l74k666" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Page list==
You can find the list of all pages grouped by categories here: [[:Category:TOC|Table of contents]].
[[Category:TOC]]
==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

==== Help ====
To assign a page to a category, put the following line at the top of your page: &lt;code&gt;&lt;nowiki&gt;[[Category:My category]]&lt;/nowiki&gt;&lt;/code&gt;. To create a new category if it does not exist yet, simple create a page with the prefix "Category:", for example "Category:My category".

All new categories should either be subcategories of "TOC" to be displayed in the list on this page, or subcategories of other already existing categories. You can achieve this by placing this line at the top of the category's page: &lt;code&gt;&lt;nowiki&gt;[[Category:TOC]]&lt;/nowiki&gt;&lt;/code&gt;, similarly to how any other categories get assigned to pages.

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.</text>
      <sha1>icgcq3uw0juqc9cfcor1c9s5l74k666</sha1>
    </revision>
    <revision>
      <id>65</id>
      <parentid>32</parentid>
      <timestamp>2023-05-21T23:01:03Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>65</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1555" sha1="hri51197esvruszpyhagb96fl7qw681" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Page list==
You can find the list of all pages grouped by categories here:
&lt;categorytree mode="pages"&gt;TOC&lt;/categorytree&gt;

'''Disclaimer:''' the above list might not be always up-to-date. For an always updated list of categories, you can check the [[:Category:TOC|Table of contents]].

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

====Help====
To assign a page to a category, put the following line at the top of your page: &lt;code&gt;&lt;nowiki&gt;[[Category:My category]]&lt;/nowiki&gt;&lt;/code&gt;. To create a new category if it does not exist yet, simple create a page with the prefix "Category:", for example "Category:My category".

All new categories should either be subcategories of "TOC" to be displayed in the list on this page, or subcategories of other already existing categories. You can achieve this by placing this line at the top of the category's page: &lt;code&gt;&lt;nowiki&gt;[[Category:TOC]]&lt;/nowiki&gt;&lt;/code&gt;, similarly to how any other categories get assigned to pages.

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.</text>
      <sha1>hri51197esvruszpyhagb96fl7qw681</sha1>
    </revision>
    <revision>
      <id>94</id>
      <parentid>65</parentid>
      <timestamp>2023-05-26T17:21:47Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>94</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1575" sha1="prac6ics9qs0voh1uyunm78awptkoje" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Page list==
You can find the list of all pages grouped by categories here:
&lt;categorytree mode="pages"&gt;TOC&lt;/categorytree&gt;

'''Disclaimer:''' the above list might not be always up-to-date. For an always updated list of categories, you can check the [[:Category:TOC|Table of contents]].

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

====Help====
To assign a page to a category, put the following line at the top or bottom of your page: &lt;code&gt;&lt;nowiki&gt;[[Category:My category]]&lt;/nowiki&gt;&lt;/code&gt;. To create a new category if it does not exist yet, simply create a page with the prefix "Category:", for example "Category:My category".

All new categories should either be subcategories of "TOC" to be displayed in the list on this page, or subcategories of other already existing categories. You can achieve this by placing this line at the top or bottom of the category's page: &lt;code&gt;&lt;nowiki&gt;[[Category:TOC]]&lt;/nowiki&gt;&lt;/code&gt;, similarly to how any other categories get assigned to pages.

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.</text>
      <sha1>prac6ics9qs0voh1uyunm78awptkoje</sha1>
    </revision>
    <revision>
      <id>131</id>
      <parentid>94</parentid>
      <timestamp>2023-08-02T23:59:45Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>/* Help */</comment>
      <origin>131</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1607" sha1="s5s6q9sm68tjifhltp30e7wetrlow0e" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Page list==
You can find the list of all pages grouped by categories here:
&lt;categorytree mode="pages"&gt;TOC&lt;/categorytree&gt;

'''Disclaimer:''' the above list might not be always up-to-date. For an always updated list of categories, you can check the [[:Category:TOC|Table of contents]].

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

====Help====
To assign a page to a category, put the following line at the top of your page: &lt;code&gt;&lt;nowiki&gt;[[Category:My category]]&lt;/nowiki&gt;&lt;/code&gt;.

To create a new category if it does not exist yet, simply create a page with the prefix "Category:", for example "Category:My category", and add a description of the category in the body.

All new categories should either be subcategories of "TOC" to be displayed in the list on this page, or subcategories of other already existing categories. You can achieve this by placing this line at the top of the category's page: &lt;code&gt;&lt;nowiki&gt;[[Category:TOC]]&lt;/nowiki&gt;&lt;/code&gt;, similarly to how any other categories get assigned to pages.

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.</text>
      <sha1>s5s6q9sm68tjifhltp30e7wetrlow0e</sha1>
    </revision>
    <revision>
      <id>132</id>
      <parentid>131</parentid>
      <timestamp>2023-08-03T00:00:09Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>132</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1444" sha1="5o7g1wzflfavq5t4j8cpwa0zgnz6c03" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Page list==
You can find the list of all pages grouped by categories here:
&lt;categorytree mode="pages"&gt;TOC&lt;/categorytree&gt;

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

====Help====
To assign a page to a category, put the following line at the top of your page: &lt;code&gt;&lt;nowiki&gt;[[Category:My category]]&lt;/nowiki&gt;&lt;/code&gt;.

To create a new category if it does not exist yet, simply create a page with the prefix "Category:", for example "Category:My category", and add a description of the category in the body.

All new categories should either be subcategories of "TOC" to be displayed in the list on this page, or subcategories of other already existing categories. You can achieve this by placing this line at the top of the category's page: &lt;code&gt;&lt;nowiki&gt;[[Category:TOC]]&lt;/nowiki&gt;&lt;/code&gt;, similarly to how any other categories get assigned to pages.

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.</text>
      <sha1>5o7g1wzflfavq5t4j8cpwa0zgnz6c03</sha1>
    </revision>
    <revision>
      <id>143</id>
      <parentid>132</parentid>
      <timestamp>2023-08-03T00:10:27Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>143</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1445" sha1="779yljrx34fzeuex12tg30zzxtp6364" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Page list==
You can find the list of all pages grouped by categories here: 
&lt;categorytree mode="pages"&gt;TOC&lt;/categorytree&gt;

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

====Help====
To assign a page to a category, put the following line at the top of your page: &lt;code&gt;&lt;nowiki&gt;[[Category:My category]]&lt;/nowiki&gt;&lt;/code&gt;.

To create a new category if it does not exist yet, simply create a page with the prefix "Category:", for example "Category:My category", and add a description of the category in the body.

All new categories should either be subcategories of "TOC" to be displayed in the list on this page, or subcategories of other already existing categories. You can achieve this by placing this line at the top of the category's page: &lt;code&gt;&lt;nowiki&gt;[[Category:TOC]]&lt;/nowiki&gt;&lt;/code&gt;, similarly to how any other categories get assigned to pages.

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.</text>
      <sha1>779yljrx34fzeuex12tg30zzxtp6364</sha1>
    </revision>
    <revision>
      <id>167</id>
      <parentid>143</parentid>
      <timestamp>2023-10-25T10:45:46Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>/* Help collapsed by default */</comment>
      <origin>167</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1495" sha1="pj0toszf33x2e53zxah5ogqetmr9aoa" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Page list==
You can find the list of all pages grouped by categories here: 
&lt;categorytree mode="pages"&gt;TOC&lt;/categorytree&gt;

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

====Help====

&lt;div class="mw-collapsible mw-collapsed"&gt;
To assign a page to a category, put the following line at the top of your page: &lt;code&gt;&lt;nowiki&gt;[[Category:My category]]&lt;/nowiki&gt;&lt;/code&gt;.

To create a new category if it does not exist yet, simply create a page with the prefix "Category:", for example "Category:My category", and add a description of the category in the body.

All new categories should either be subcategories of "TOC" to be displayed in the list on this page, or subcategories of other already existing categories. You can achieve this by placing this line at the top of the category's page: &lt;code&gt;&lt;nowiki&gt;[[Category:TOC]]&lt;/nowiki&gt;&lt;/code&gt;, similarly to how any other categories get assigned to pages.

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.
&lt;/div&gt;</text>
      <sha1>pj0toszf33x2e53zxah5ogqetmr9aoa</sha1>
    </revision>
    <revision>
      <id>169</id>
      <parentid>167</parentid>
      <timestamp>2023-10-25T10:51:55Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Added links section</comment>
      <origin>169</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1776" sha1="p59mvoqal56ls21z57bnebvn95n6grg" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Page list==
You can find the list of all pages grouped by categories here: 
&lt;categorytree mode="pages"&gt;TOC&lt;/categorytree&gt;

== Links ==

* [https://ksp2community.github.io/ KSP 2 Unofficial API Reference]
* [https://discord.gg/hHW5gpHxfE KSP 2 Modding Society Discord Server]
* [https://docs.spacewarp.org/ SpaceWarp Modding API Documentation]
* [https://github.com/KSP2Community KSP 2 Community GitHub]

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

====Help====

&lt;div class="mw-collapsible mw-collapsed"&gt;
To assign a page to a category, put the following line at the top of your page: &lt;code&gt;&lt;nowiki&gt;[[Category:My category]]&lt;/nowiki&gt;&lt;/code&gt;.

To create a new category if it does not exist yet, simply create a page with the prefix "Category:", for example "Category:My category", and add a description of the category in the body.

All new categories should either be subcategories of "TOC" to be displayed in the list on this page, or subcategories of other already existing categories. You can achieve this by placing this line at the top of the category's page: &lt;code&gt;&lt;nowiki&gt;[[Category:TOC]]&lt;/nowiki&gt;&lt;/code&gt;, similarly to how any other categories get assigned to pages.

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.
&lt;/div&gt;</text>
      <sha1>p59mvoqal56ls21z57bnebvn95n6grg</sha1>
    </revision>
    <revision>
      <id>170</id>
      <parentid>169</parentid>
      <timestamp>2023-10-25T10:54:24Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Added NuGet server link</comment>
      <origin>170</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1837" sha1="gy70pvtcib3dsb3whd7e3mkrosmymq8" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Page list==
You can find the list of all pages grouped by categories here: 
&lt;categorytree mode="pages"&gt;TOC&lt;/categorytree&gt;

== Links ==

* [https://ksp2community.github.io/ KSP 2 Unofficial API Reference]
* [https://discord.gg/hHW5gpHxfE KSP 2 Modding Society Discord Server]
* [https://docs.spacewarp.org/ SpaceWarp Modding API Documentation]
* [https://nuget.spacewarp.org KSP 2 Community NuGet Server]
* [https://github.com/KSP2Community KSP 2 Community GitHub]

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

====Help====

&lt;div class="mw-collapsible mw-collapsed"&gt;
To assign a page to a category, put the following line at the top of your page: &lt;code&gt;&lt;nowiki&gt;[[Category:My category]]&lt;/nowiki&gt;&lt;/code&gt;.

To create a new category if it does not exist yet, simply create a page with the prefix "Category:", for example "Category:My category", and add a description of the category in the body.

All new categories should either be subcategories of "TOC" to be displayed in the list on this page, or subcategories of other already existing categories. You can achieve this by placing this line at the top of the category's page: &lt;code&gt;&lt;nowiki&gt;[[Category:TOC]]&lt;/nowiki&gt;&lt;/code&gt;, similarly to how any other categories get assigned to pages.

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.
&lt;/div&gt;</text>
      <sha1>gy70pvtcib3dsb3whd7e3mkrosmymq8</sha1>
    </revision>
    <revision>
      <id>255</id>
      <parentid>170</parentid>
      <timestamp>2023-12-23T23:21:35Z</timestamp>
      <contributor>
        <username>Cheese</username>
        <id>7</id>
      </contributor>
      <comment>Update API link</comment>
      <origin>255</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1828" sha1="3dmn2mdf0pm1ceupp3b36vez6212vqn" xml:space="preserve">[[Category:TOC]]
'''Welcome to KSP 2 Modding Wiki'''

This wiki serves as a place to share knowledge about modding KSP 2. Anyone with an account can create their own articles or contribute to existing ones.

==Page list==
You can find the list of all pages grouped by categories here: 
&lt;categorytree mode="pages"&gt;TOC&lt;/categorytree&gt;

== Links ==

* [https://api.kerbal.wiki KSP 2 Unofficial API Reference]
* [https://discord.gg/hHW5gpHxfE KSP 2 Modding Society Discord Server]
* [https://docs.spacewarp.org/ SpaceWarp Modding API Documentation]
* [https://nuget.spacewarp.org KSP 2 Community NuGet Server]
* [https://github.com/KSP2Community KSP 2 Community GitHub]

==Create a new page==
&lt;inputbox&gt;
type=create
break=no
buttonlabel=Create new page
placeholder=Page name
&lt;/inputbox&gt;

====Help====

&lt;div class="mw-collapsible mw-collapsed"&gt;
To assign a page to a category, put the following line at the top of your page: &lt;code&gt;&lt;nowiki&gt;[[Category:My category]]&lt;/nowiki&gt;&lt;/code&gt;.

To create a new category if it does not exist yet, simply create a page with the prefix "Category:", for example "Category:My category", and add a description of the category in the body.

All new categories should either be subcategories of "TOC" to be displayed in the list on this page, or subcategories of other already existing categories. You can achieve this by placing this line at the top of the category's page: &lt;code&gt;&lt;nowiki&gt;[[Category:TOC]]&lt;/nowiki&gt;&lt;/code&gt;, similarly to how any other categories get assigned to pages.

For information on how to edit and format pages, you can visit [[mediawikiwiki:Help:Contents|MediaWiki's Help page]]. For code snippets syntax highlighting, you can use the‎ &lt;code&gt;&lt;nowiki&gt;&lt;syntaxhighlight&gt;&lt;/nowiki&gt;&lt;/code&gt; tag, see [[mediawikiwiki:Extension:SyntaxHighlight|full documentation]] for more details.
&lt;/div&gt;</text>
      <sha1>3dmn2mdf0pm1ceupp3b36vez6212vqn</sha1>
    </revision>
  </page>
  <page>
    <title>Category:TOC</title>
    <ns>14</ns>
    <id>3</id>
    <revision>
      <id>6</id>
      <timestamp>2023-04-15T23:06:20Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <comment>Created blank page</comment>
      <origin>6</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Getting started</title>
    <ns>14</ns>
    <id>4</id>
    <revision>
      <id>7</id>
      <timestamp>2023-04-15T23:08:18Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "This category should contain articles on the very basics of KSP 2 modding and how to set up everything and get started."</comment>
      <origin>7</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="119" sha1="4zm9z95i38ogq3xxovuefs6hq4s3v5i" xml:space="preserve">This category should contain articles on the very basics of KSP 2 modding and how to set up everything and get started.</text>
      <sha1>4zm9z95i38ogq3xxovuefs6hq4s3v5i</sha1>
    </revision>
    <revision>
      <id>8</id>
      <parentid>7</parentid>
      <timestamp>2023-04-15T23:08:39Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>8</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="137" sha1="dk7e3j56mdtpoy8rthiqr9wtzcenwk2" xml:space="preserve">[[Category:TOC]]

This category should contain articles on the very basics of KSP 2 modding and how to set up everything and get started.</text>
      <sha1>dk7e3j56mdtpoy8rthiqr9wtzcenwk2</sha1>
    </revision>
    <revision>
      <id>9</id>
      <parentid>8</parentid>
      <timestamp>2023-04-15T23:08:45Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>9</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="136" sha1="q6zeoacyne7wl30frus9xsfdgiqd217" xml:space="preserve">[[Category:TOC]]
This category should contain articles on the very basics of KSP 2 modding and how to set up everything and get started.</text>
      <sha1>q6zeoacyne7wl30frus9xsfdgiqd217</sha1>
    </revision>
    <revision>
      <id>163</id>
      <parentid>9</parentid>
      <timestamp>2023-10-24T20:11:26Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>163</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="142" sha1="5h247e73k41zv3e9x09u03kpkhgzr38" xml:space="preserve">This category should contain articles on the very basics of KSP 2 modding and how to set up everything and get started.
[[Category:Tutorials]]</text>
      <sha1>5h247e73k41zv3e9x09u03kpkhgzr38</sha1>
    </revision>
  </page>
  <page>
    <title>User:Cheese</title>
    <ns>2</ns>
    <id>6</id>
    <revision>
      <id>22</id>
      <timestamp>2023-04-16T12:38:11Z</timestamp>
      <contributor>
        <username>Cheese</username>
        <id>7</id>
      </contributor>
      <comment>Created my own user page :3</comment>
      <origin>22</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="71" sha1="cw0ef22bmwygdaudht8k1t5i14dck61" xml:space="preserve">Lead developer of [https://github.com/SpaceWarpDev/SpaceWarp SpaceWarp]</text>
      <sha1>cw0ef22bmwygdaudht8k1t5i14dck61</sha1>
    </revision>
    <revision>
      <id>95</id>
      <parentid>22</parentid>
      <timestamp>2023-05-31T16:53:05Z</timestamp>
      <contributor>
        <username>Cheese</username>
        <id>7</id>
      </contributor>
      <minor/>
      <origin>95</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="91" sha1="odmn9qujcr7q09xg2c5dk7l0b806t8e" xml:space="preserve">Lead developer of [https://github.com/SpaceWarpDev/SpaceWarp SpaceWarp]

Admin of this wiki</text>
      <sha1>odmn9qujcr7q09xg2c5dk7l0b806t8e</sha1>
    </revision>
  </page>
  <page>
    <title>Setting up a Development Environment</title>
    <ns>0</ns>
    <id>7</id>
    <revision>
      <id>23</id>
      <timestamp>2023-04-16T13:17:14Z</timestamp>
      <contributor>
        <username>Cheese</username>
        <id>7</id>
      </contributor>
      <comment>Initial Creation</comment>
      <origin>23</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3854" sha1="hlsiaajdqs67nzr02cl52laifodvu8f" xml:space="preserve">This page provides information on how to set up a development environment for Kerbal Space Program 2 modding.

==Prerequisites==
This guide assumes you have the following prerequisites satisfied

# That you own a copy of Kerbal Space Program 2
# That you have dotnet installed
# That you have an IDE such as Rider or Visual Studio, or some other way to compile C# code into a DLL
==Template Setup==
This is the first step in setting up a development environment, depending on which IDE/Method of compilation you are using it has to be done in a few different ways.

===Visual Studio or no IDE===
First install the template using the following command in the command line
 dotnet new install SpaceWarp.Template
====Visual Studio====
If you are then using Visual Studio to develop the mods, the next steps are as follows
# Open Visual Studio
# ''Create a new project''
# Search for "SpaceWarp" in the search bar at the top, then select it and click ''Next''
# Fill out your project name and click ''Next''
# Fill out the fields on the following page. You can find more information about the parameters by hovering over the corresponding "i" icons
# Click on ''Create'' and your project will be made.
====No IDE====
If you aren't using Visual Studio, use the following command but replace all the parameters with the ones to describe your mod
 dotnet new spacewarpmod -n MyAwesomeModName -G my_awesome_mod_name -A "munix" -B "com.github.munix.my_awesome_mod_name" -M "My Awesome Mod Name" -D "This is the description of my awesome mod." -S "https://github.com/munix/MyAwesomeModName" -V "1.0.0"
{| class="wikitable" style="margin:auto"
|+ Parameters (Bold entries are required)
|-
! Parameter !! Console Argument !! Short Argument !! Description !! Default Value
|-
| Project name || --name || -n || The name of your project in PascalCase || &lt;code&gt;&lt;current directory name&gt;&lt;/code&gt;
|-
| TargetFramework || --TargetFramework || -T || .NET version to target, default value is set for KSP 2 || &lt;code&gt;.netstandard2.0&lt;/code&gt;
|-
| UnityVersion || --UnityVersion || -U || Unity version to target, default value is set for KSP 2 || &lt;code&gt;2020.3.33&lt;/code&gt;
|-
| '''GUID''' || --GUID || -G || Your mod's ID which serves as the folder and .dll name of your built mod, used by SpaceWarp || -
|-
| '''Author''' || --Author || -A || The name(s) of the mod's author(s) || -
|-
| '''BepinexName''' || --BepinexName || -B || Your mod's ID in domain syntax, for example: com.github.author.modname, used by BepInEx || -
|-
| '''ModName''' || --ModName || -M || The name of your mod || -
|-
| Description || --Description || -D || A short description of your mod || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Source || --Source || -S || The repository or download location of the mod's source code || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Check Version	|| --CheckVersion || -C || URL to up-to-date swinfo.json for version checking (for example: https://raw.githubusercontent.com/author/mod/main/swinfo.json) || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Version || --Version || -V || The mod's initial version || &lt;code&gt;1.0.0&lt;/code&gt;
|}
===Rider===
For rider the steps are as follows
# Download the latest release of [https://github.com/arthomnix/KerbalDev/releases KerbalDev]
# In Rider, install the plugin by going to the settings/plugins, and click the gear icon to install the zip file as a plugin from disk
# Now create a new solution via the new SpaceWarp Mod template, and fill out every parameter except Description/Source/Check Version
==Post Template Instantiation==
After you have instantiated the template, the next steps are to copy KSP2's DLL to the project, this is done by copying &lt;code&gt;&lt;KSP2 Root&gt;/KSP2_x64_Data/Managed/Assembly-CSharp.dll&lt;/code&gt; intoto the &lt;code&gt;&lt;project root&gt;/external_dlls/&lt;/code&gt; folder

Now you should be set up with an example project and can get started on your mod.</text>
      <sha1>hlsiaajdqs67nzr02cl52laifodvu8f</sha1>
    </revision>
    <revision>
      <id>24</id>
      <parentid>23</parentid>
      <timestamp>2023-04-16T13:18:00Z</timestamp>
      <contributor>
        <username>Cheese</username>
        <id>7</id>
      </contributor>
      <minor/>
      <comment>Add category</comment>
      <origin>24</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3883" sha1="2rmmdy8l6576sxg8ngoy41d5bdomniv" xml:space="preserve">[[Category:Getting Started]]
This page provides information on how to set up a development environment for Kerbal Space Program 2 modding.

==Prerequisites==
This guide assumes you have the following prerequisites satisfied

# That you own a copy of Kerbal Space Program 2
# That you have dotnet installed
# That you have an IDE such as Rider or Visual Studio, or some other way to compile C# code into a DLL
==Template Setup==
This is the first step in setting up a development environment, depending on which IDE/Method of compilation you are using it has to be done in a few different ways.

===Visual Studio or no IDE===
First install the template using the following command in the command line
 dotnet new install SpaceWarp.Template
====Visual Studio====
If you are then using Visual Studio to develop the mods, the next steps are as follows
# Open Visual Studio
# ''Create a new project''
# Search for "SpaceWarp" in the search bar at the top, then select it and click ''Next''
# Fill out your project name and click ''Next''
# Fill out the fields on the following page. You can find more information about the parameters by hovering over the corresponding "i" icons
# Click on ''Create'' and your project will be made.
====No IDE====
If you aren't using Visual Studio, use the following command but replace all the parameters with the ones to describe your mod
 dotnet new spacewarpmod -n MyAwesomeModName -G my_awesome_mod_name -A "munix" -B "com.github.munix.my_awesome_mod_name" -M "My Awesome Mod Name" -D "This is the description of my awesome mod." -S "https://github.com/munix/MyAwesomeModName" -V "1.0.0"
{| class="wikitable" style="margin:auto"
|+ Parameters (Bold entries are required)
|-
! Parameter !! Console Argument !! Short Argument !! Description !! Default Value
|-
| Project name || --name || -n || The name of your project in PascalCase || &lt;code&gt;&lt;current directory name&gt;&lt;/code&gt;
|-
| TargetFramework || --TargetFramework || -T || .NET version to target, default value is set for KSP 2 || &lt;code&gt;.netstandard2.0&lt;/code&gt;
|-
| UnityVersion || --UnityVersion || -U || Unity version to target, default value is set for KSP 2 || &lt;code&gt;2020.3.33&lt;/code&gt;
|-
| '''GUID''' || --GUID || -G || Your mod's ID which serves as the folder and .dll name of your built mod, used by SpaceWarp || -
|-
| '''Author''' || --Author || -A || The name(s) of the mod's author(s) || -
|-
| '''BepinexName''' || --BepinexName || -B || Your mod's ID in domain syntax, for example: com.github.author.modname, used by BepInEx || -
|-
| '''ModName''' || --ModName || -M || The name of your mod || -
|-
| Description || --Description || -D || A short description of your mod || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Source || --Source || -S || The repository or download location of the mod's source code || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Check Version	|| --CheckVersion || -C || URL to up-to-date swinfo.json for version checking (for example: https://raw.githubusercontent.com/author/mod/main/swinfo.json) || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Version || --Version || -V || The mod's initial version || &lt;code&gt;1.0.0&lt;/code&gt;
|}
===Rider===
For rider the steps are as follows
# Download the latest release of [https://github.com/arthomnix/KerbalDev/releases KerbalDev]
# In Rider, install the plugin by going to the settings/plugins, and click the gear icon to install the zip file as a plugin from disk
# Now create a new solution via the new SpaceWarp Mod template, and fill out every parameter except Description/Source/Check Version
==Post Template Instantiation==
After you have instantiated the template, the next steps are to copy KSP2's DLL to the project, this is done by copying &lt;code&gt;&lt;KSP2 Root&gt;/KSP2_x64_Data/Managed/Assembly-CSharp.dll&lt;/code&gt; intoto the &lt;code&gt;&lt;project root&gt;/external_dlls/&lt;/code&gt; folder

Now you should be set up with an example project and can get started on your mod.</text>
      <sha1>2rmmdy8l6576sxg8ngoy41d5bdomniv</sha1>
    </revision>
    <revision>
      <id>25</id>
      <parentid>24</parentid>
      <timestamp>2023-04-16T13:18:19Z</timestamp>
      <contributor>
        <username>Cheese</username>
        <id>7</id>
      </contributor>
      <minor/>
      <comment>Fix category</comment>
      <origin>25</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3883" sha1="23ilqdle396wllmb9p1x8aho46v8p8u" xml:space="preserve">[[Category:Getting started]]
This page provides information on how to set up a development environment for Kerbal Space Program 2 modding.

==Prerequisites==
This guide assumes you have the following prerequisites satisfied

# That you own a copy of Kerbal Space Program 2
# That you have dotnet installed
# That you have an IDE such as Rider or Visual Studio, or some other way to compile C# code into a DLL
==Template Setup==
This is the first step in setting up a development environment, depending on which IDE/Method of compilation you are using it has to be done in a few different ways.

===Visual Studio or no IDE===
First install the template using the following command in the command line
 dotnet new install SpaceWarp.Template
====Visual Studio====
If you are then using Visual Studio to develop the mods, the next steps are as follows
# Open Visual Studio
# ''Create a new project''
# Search for "SpaceWarp" in the search bar at the top, then select it and click ''Next''
# Fill out your project name and click ''Next''
# Fill out the fields on the following page. You can find more information about the parameters by hovering over the corresponding "i" icons
# Click on ''Create'' and your project will be made.
====No IDE====
If you aren't using Visual Studio, use the following command but replace all the parameters with the ones to describe your mod
 dotnet new spacewarpmod -n MyAwesomeModName -G my_awesome_mod_name -A "munix" -B "com.github.munix.my_awesome_mod_name" -M "My Awesome Mod Name" -D "This is the description of my awesome mod." -S "https://github.com/munix/MyAwesomeModName" -V "1.0.0"
{| class="wikitable" style="margin:auto"
|+ Parameters (Bold entries are required)
|-
! Parameter !! Console Argument !! Short Argument !! Description !! Default Value
|-
| Project name || --name || -n || The name of your project in PascalCase || &lt;code&gt;&lt;current directory name&gt;&lt;/code&gt;
|-
| TargetFramework || --TargetFramework || -T || .NET version to target, default value is set for KSP 2 || &lt;code&gt;.netstandard2.0&lt;/code&gt;
|-
| UnityVersion || --UnityVersion || -U || Unity version to target, default value is set for KSP 2 || &lt;code&gt;2020.3.33&lt;/code&gt;
|-
| '''GUID''' || --GUID || -G || Your mod's ID which serves as the folder and .dll name of your built mod, used by SpaceWarp || -
|-
| '''Author''' || --Author || -A || The name(s) of the mod's author(s) || -
|-
| '''BepinexName''' || --BepinexName || -B || Your mod's ID in domain syntax, for example: com.github.author.modname, used by BepInEx || -
|-
| '''ModName''' || --ModName || -M || The name of your mod || -
|-
| Description || --Description || -D || A short description of your mod || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Source || --Source || -S || The repository or download location of the mod's source code || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Check Version	|| --CheckVersion || -C || URL to up-to-date swinfo.json for version checking (for example: https://raw.githubusercontent.com/author/mod/main/swinfo.json) || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Version || --Version || -V || The mod's initial version || &lt;code&gt;1.0.0&lt;/code&gt;
|}
===Rider===
For rider the steps are as follows
# Download the latest release of [https://github.com/arthomnix/KerbalDev/releases KerbalDev]
# In Rider, install the plugin by going to the settings/plugins, and click the gear icon to install the zip file as a plugin from disk
# Now create a new solution via the new SpaceWarp Mod template, and fill out every parameter except Description/Source/Check Version
==Post Template Instantiation==
After you have instantiated the template, the next steps are to copy KSP2's DLL to the project, this is done by copying &lt;code&gt;&lt;KSP2 Root&gt;/KSP2_x64_Data/Managed/Assembly-CSharp.dll&lt;/code&gt; intoto the &lt;code&gt;&lt;project root&gt;/external_dlls/&lt;/code&gt; folder

Now you should be set up with an example project and can get started on your mod.</text>
      <sha1>23ilqdle396wllmb9p1x8aho46v8p8u</sha1>
    </revision>
    <revision>
      <id>26</id>
      <parentid>25</parentid>
      <timestamp>2023-04-16T14:43:31Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <comment>Some minor formatting changes + added required versions of VS and .NET</comment>
      <origin>26</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3910" sha1="o64v7bam697m85gf67o20w3tprzqr0q" xml:space="preserve">[[Category:Getting started]]
This page provides information on how to set up a development environment for Kerbal Space Program 2 modding.

==Prerequisites==
This guide assumes you have the following prerequisites satisfied

# That you own a copy of Kerbal Space Program 2
# That you have the .NET 6 SDK or newer installed
# That you have an IDE such as Rider or Visual Studio 2022, or some other way to compile C# code into a DLL
==Template Setup==
This is the first step in setting up a development environment, depending on which IDE/method of compilation you are using it has to be done in a few different ways.

===Visual Studio or no IDE===
First install the template using the following command in the command line:
 dotnet new install SpaceWarp.Template
====Visual Studio====
If you are then using Visual Studio to develop the mods, the next steps are as follows:
# Open Visual Studio
# ''Create a new project''
# Search for "SpaceWarp" in the search bar at the top, then select it and click ''Next''
# Fill out your project name and click ''Next''
# Fill out the fields on the following page. You can find more information about the parameters by hovering over the corresponding "i" icons
# Click on ''Create'' and your project will be made.
====No IDE====
If you aren't using Visual Studio, use the following command but replace all the parameters with the ones to describe your mod
 dotnet new spacewarpmod -n MyAwesomeModName -G my_awesome_mod_name -A "munix" -B "com.github.munix.my_awesome_mod_name" -M "My Awesome Mod Name" -D "This is the description of my awesome mod." -S "https://github.com/munix/MyAwesomeModName" -V "1.0.0"
{| class="wikitable" style="margin:auto"
|+ Parameters (Bold entries are required)
|-
! Parameter !! Console Argument !! Short Argument !! Description !! Default Value
|-
| Project name || --name || -n || The name of your project in PascalCase || &lt;code&gt;&lt;current directory name&gt;&lt;/code&gt;
|-
| TargetFramework || --TargetFramework || -T || .NET version to target, default value is set for KSP 2 || &lt;code&gt;.netstandard2.0&lt;/code&gt;
|-
| UnityVersion || --UnityVersion || -U || Unity version to target, default value is set for KSP 2 || &lt;code&gt;2020.3.33&lt;/code&gt;
|-
| '''GUID''' || --GUID || -G || Your mod's ID which serves as the folder and .dll name of your built mod, used by SpaceWarp || -
|-
| '''Author''' || --Author || -A || The name(s) of the mod's author(s) || -
|-
| '''BepinexName''' || --BepinexName || -B || Your mod's ID in domain syntax, for example: com.github.author.modname, used by BepInEx || -
|-
| '''ModName''' || --ModName || -M || The name of your mod || -
|-
| Description || --Description || -D || A short description of your mod || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Source || --Source || -S || The repository or download location of the mod's source code || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Check Version	|| --CheckVersion || -C || URL to up-to-date swinfo.json for version checking (for example: https://raw.githubusercontent.com/author/mod/main/swinfo.json) || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Version || --Version || -V || The mod's initial version || &lt;code&gt;1.0.0&lt;/code&gt;
|}
===Rider===
For Rider the steps are as follows:
# Download the latest release of [https://github.com/arthomnix/KerbalDev/releases KerbalDev]
# In Rider, install the plugin by going to the Settings -&gt; Plugins, and click the gear icon to install the zip file as a plugin from disk
# Now create a new solution via the new SpaceWarp Mod template, and fill out every parameter except Description/Source/Check Version
==Post Template Instantiation==
After you have instantiated the template, the next steps are to copy KSP2's DLL to the project, this is done by copying &lt;code&gt;&lt;KSP2 Root&gt;/KSP2_x64_Data/Managed/Assembly-CSharp.dll&lt;/code&gt; into the &lt;code&gt;&lt;project root&gt;/external_dlls/&lt;/code&gt; folder.

Now you should be set up with an example project and can get started on your mod.</text>
      <sha1>o64v7bam697m85gf67o20w3tprzqr0q</sha1>
    </revision>
    <revision>
      <id>27</id>
      <parentid>26</parentid>
      <timestamp>2023-04-16T14:43:45Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>27</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3911" sha1="44xc1k2n4c1dasyp7wew5iyrgjacjnz" xml:space="preserve">[[Category:Getting started]]
This page provides information on how to set up a development environment for Kerbal Space Program 2 modding.

==Prerequisites==
This guide assumes you have the following prerequisites satisfied:

# That you own a copy of Kerbal Space Program 2
# That you have the .NET 6 SDK or newer installed
# That you have an IDE such as Rider or Visual Studio 2022, or some other way to compile C# code into a DLL
==Template Setup==
This is the first step in setting up a development environment, depending on which IDE/method of compilation you are using it has to be done in a few different ways.

===Visual Studio or no IDE===
First install the template using the following command in the command line:
 dotnet new install SpaceWarp.Template
====Visual Studio====
If you are then using Visual Studio to develop the mods, the next steps are as follows:
# Open Visual Studio
# ''Create a new project''
# Search for "SpaceWarp" in the search bar at the top, then select it and click ''Next''
# Fill out your project name and click ''Next''
# Fill out the fields on the following page. You can find more information about the parameters by hovering over the corresponding "i" icons
# Click on ''Create'' and your project will be made.
====No IDE====
If you aren't using Visual Studio, use the following command but replace all the parameters with the ones to describe your mod
 dotnet new spacewarpmod -n MyAwesomeModName -G my_awesome_mod_name -A "munix" -B "com.github.munix.my_awesome_mod_name" -M "My Awesome Mod Name" -D "This is the description of my awesome mod." -S "https://github.com/munix/MyAwesomeModName" -V "1.0.0"
{| class="wikitable" style="margin:auto"
|+ Parameters (Bold entries are required)
|-
! Parameter !! Console Argument !! Short Argument !! Description !! Default Value
|-
| Project name || --name || -n || The name of your project in PascalCase || &lt;code&gt;&lt;current directory name&gt;&lt;/code&gt;
|-
| TargetFramework || --TargetFramework || -T || .NET version to target, default value is set for KSP 2 || &lt;code&gt;.netstandard2.0&lt;/code&gt;
|-
| UnityVersion || --UnityVersion || -U || Unity version to target, default value is set for KSP 2 || &lt;code&gt;2020.3.33&lt;/code&gt;
|-
| '''GUID''' || --GUID || -G || Your mod's ID which serves as the folder and .dll name of your built mod, used by SpaceWarp || -
|-
| '''Author''' || --Author || -A || The name(s) of the mod's author(s) || -
|-
| '''BepinexName''' || --BepinexName || -B || Your mod's ID in domain syntax, for example: com.github.author.modname, used by BepInEx || -
|-
| '''ModName''' || --ModName || -M || The name of your mod || -
|-
| Description || --Description || -D || A short description of your mod || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Source || --Source || -S || The repository or download location of the mod's source code || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Check Version	|| --CheckVersion || -C || URL to up-to-date swinfo.json for version checking (for example: https://raw.githubusercontent.com/author/mod/main/swinfo.json) || &lt;code&gt;""&lt;/code&gt; ''(empty)''
|-
| Version || --Version || -V || The mod's initial version || &lt;code&gt;1.0.0&lt;/code&gt;
|}
===Rider===
For Rider the steps are as follows:
# Download the latest release of [https://github.com/arthomnix/KerbalDev/releases KerbalDev]
# In Rider, install the plugin by going to the Settings -&gt; Plugins, and click the gear icon to install the zip file as a plugin from disk
# Now create a new solution via the new SpaceWarp Mod template, and fill out every parameter except Description/Source/Check Version
==Post Template Instantiation==
After you have instantiated the template, the next steps are to copy KSP2's DLL to the project, this is done by copying &lt;code&gt;&lt;KSP2 Root&gt;/KSP2_x64_Data/Managed/Assembly-CSharp.dll&lt;/code&gt; into the &lt;code&gt;&lt;project root&gt;/external_dlls/&lt;/code&gt; folder.

Now you should be set up with an example project and can get started on your mod.</text>
      <sha1>44xc1k2n4c1dasyp7wew5iyrgjacjnz</sha1>
    </revision>
    <revision>
      <id>308</id>
      <parentid>27</parentid>
      <timestamp>2024-01-13T14:03:22Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>308</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="753" sha1="f05kg1rzmomzzonaihzs99mh7arhji4" xml:space="preserve">[[Category:Getting started]]
There are three main types of projects that you will be creating most of the time:

* '''Unity project''' - used to add objects such as parts or planets into the game.
* '''.NET project''' - mostly composed of C# code, useful for example for various small QoL and gameplay enhancements or fixes, etc.
* '''Mixed project''' - a combination of the previous two, used for example if you want to create parts with custom modules, or when making a gameplay tool with a UI.

To set up a standalone Unity project, see [[Setting up Unity]].

For the .NET and mixed project types, you can use the [https://github.com/SpaceWarpDev/SpaceWarp.Template SpaceWarp.Template]. Further instructions are provided on the repository's homepage.</text>
      <sha1>f05kg1rzmomzzonaihzs99mh7arhji4</sha1>
    </revision>
  </page>
  <page>
    <title>Category:KSP 1 code conversion</title>
    <ns>14</ns>
    <id>8</id>
    <revision>
      <id>28</id>
      <timestamp>2023-04-16T14:55:30Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "[[Category:TOS]] Guides and tips on how to adapt KSP 1 mod code to KSP 2."</comment>
      <origin>28</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="73" sha1="k2qrj2pujcrqrfoka2uuamic0lnb6ym" xml:space="preserve">[[Category:TOS]]
Guides and tips on how to adapt KSP 1 mod code to KSP 2.</text>
      <sha1>k2qrj2pujcrqrfoka2uuamic0lnb6ym</sha1>
    </revision>
    <revision>
      <id>29</id>
      <parentid>28</parentid>
      <timestamp>2023-04-16T14:55:45Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <origin>29</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="73" sha1="khi72oc8fkidv6c48oxe0vs1634fhce" xml:space="preserve">[[Category:TOC]]
Guides and tips on how to adapt KSP 1 mod code to KSP 2.</text>
      <sha1>khi72oc8fkidv6c48oxe0vs1634fhce</sha1>
    </revision>
  </page>
  <page>
    <title>Orbits and PatchedConicsOrbit methods and info</title>
    <ns>0</ns>
    <id>9</id>
    <revision>
      <id>33</id>
      <timestamp>2023-04-16T19:09:52Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <comment>Initial version - very rough. Needs editing and a lot more info</comment>
      <origin>33</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3543" sha1="i2j7ii1skb78xqu6h5tnfxkdbkf19ns" xml:space="preserve">{{DISPLAYTITLE:Orbits and PatchedConicsOrbit methods and info}}
[[Category:KSP 1 code conversion]]

When porting from KSP1 to KSP2 one of the first things you're likely to encounter is the fact that where KSP1 defined an orbit using the Orbit class, in KSP2 it's now the PatchedConicsOrbit class. These classes have a lot in common; for example, there are a number of methods and properties where the names are almost identical other than a change of case for the initial character. Nevertheless, there are a few differences that you should know about when porting KSP1 code to work in KSP2.

So where you might have a variable of type Orbit, now you'll mostly use a variable of type PatchedConicsOrbit.
{| class="wikitable"
|+Orbit vs PatchedConicOrbit Properties
!KSP1
!KSP2
|-
|Orbit o;
|PatchedConicsOrbit o;
|-
|o.referenceBody.position
|o.referenceBody.Position.localPosition
|-
|o.referenceBody.transform.up
|o.referenceBody.transform.up.vector
|-
|o.referenceBody.transform.right
|o.referenceBody.transform.right.vector
|-
|o.referenceBody.Radius
|o.referenceBody.radius
|-
|o.referenceBody.orbit
|o.referenceBody.Orbit
|-
|o.LAN
|o.longitudeOfAscendingNode
|-
|Planetarium.up
|o.ReferenceFrame.up.vector
|-
|Planetarium.right
|o.ReferenceFrame.right.vector
|-
|o.PeR
|o.Periapsis
|-
|o.PeA
|o.PeriapsisArl
|-
|o.ApR
|o.Apoapsis
|-
|o.ApA
|o.ApoapsisArl
|-
|o.trueAnomaly
|o.TrueAnomaly
|-
|o.patchEndTransition
|o.PatchEndTransition
|-
|o.referenceBody.timeWarpAltitudeLimits [n]
|o.referenceBody.TimeWarpAltitudeOffset*n
|-
|
|
|}
{| class="wikitable"
|+Orbit vs PatchedConicOrbit Methods
!KSP1
!KSP2
|-
|o.getOrbitalVelocityAtUT()
|o.GetOrbitalVelocityAtUTZup()
|-
|o.getRelativePositionAtUT()
|o.GetRelativePositionAtUT()
|-
|o.GetOrbitNormal()
|o.GetRelativeOrbitNormal()
|-
|o.referenceBody.GetLatitude()
|o.referenceBody.GetLatLonAltFromRadius()
|-
|
|
|}


Body Type: Properties and Methods

TypeCelestialBody -&gt; CelestialBodyComponent

Vessel Type: Properties and Methods

Coordinate Systems

Useful Code Block Conversions

Was

o.GetOrbitalStateVectorsAtUT(UT, out pos, out vel);

newOrbit.UpdateFromStateVectors(pos, vel, o.referenceBody, UT);

Is

o.GetOrbitalStateVectorsAtUT(UT, out pos, out vel);

KSP.Sim.Position position = new KSP.Sim.Position(o.referenceBody.coordinateSystem, OrbitExtensions.SwapYZ(pos - o.referenceBody.Position.localPosition));

KSP.Sim.Velocity velocity = new KSP.Sim.Velocity(o.referenceBody.relativeToMotion, OrbitExtensions.SwapYZ(vel));

newOrbit.UpdateFromStateVectors(position, velocity, o.referenceBody, UT);

Was

PatchedConics.SolverParameters solverParameters = new PatchedConics.SolverParameters();

Is

PatchedConicSolver.SolverParameters solverParameters = new PatchedConicSolver.SolverParameters();

Was

PatchedConics.CalculatePatch(o, nextOrbit, UT, solverParameters, null);

Is

nextOrbit = o.NextPatch as PatchedConicsOrbit;

Was

o.UTAtMeanAnomaly(o.GetMeanAnomalyAtEccentricAnomaly(o.GetEccentricAnomalyAtTrueAnomaly(trueAnomaly)), UT);

Is

o.GetUTforTrueAnomaly(trueAnomaly*UtilMath.Deg2Rad, o.period);

New Code

public static Vector3d DvToBurnVec(PatchedConicsOrbit o, Vector3d dV, double UT)

{

Vector3d burnVec;

burnVec.x = Vector3d.Dot(dV, o.RadialPlus(UT));

burnVec.y = Vector3d.Dot(dV, o.NormalPlus(UT));

burnVec.z = Vector3d.Dot(dV, -1 * o.Prograde(UT)); return burnVec;

}

public static Vector3d BurnVecToDv(PatchedConicsOrbit o, Vector3d burnVec, double UT) { return burnVec.x * o.RadialPlus(UT) + burnVec.y * o.NormalPlus(UT) - burnVec.z * o.Prograde(UT); }</text>
      <sha1>i2j7ii1skb78xqu6h5tnfxkdbkf19ns</sha1>
    </revision>
    <revision>
      <id>34</id>
      <parentid>33</parentid>
      <timestamp>2023-04-16T21:15:17Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Admin moved page [[Translating KSP1 code to KSP2]] to [[Orbits and PatchedConicsOrbit methods and info]] without leaving a redirect: Name change</comment>
      <origin>33</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3543" sha1="i2j7ii1skb78xqu6h5tnfxkdbkf19ns" xml:space="preserve">{{DISPLAYTITLE:Orbits and PatchedConicsOrbit methods and info}}
[[Category:KSP 1 code conversion]]

When porting from KSP1 to KSP2 one of the first things you're likely to encounter is the fact that where KSP1 defined an orbit using the Orbit class, in KSP2 it's now the PatchedConicsOrbit class. These classes have a lot in common; for example, there are a number of methods and properties where the names are almost identical other than a change of case for the initial character. Nevertheless, there are a few differences that you should know about when porting KSP1 code to work in KSP2.

So where you might have a variable of type Orbit, now you'll mostly use a variable of type PatchedConicsOrbit.
{| class="wikitable"
|+Orbit vs PatchedConicOrbit Properties
!KSP1
!KSP2
|-
|Orbit o;
|PatchedConicsOrbit o;
|-
|o.referenceBody.position
|o.referenceBody.Position.localPosition
|-
|o.referenceBody.transform.up
|o.referenceBody.transform.up.vector
|-
|o.referenceBody.transform.right
|o.referenceBody.transform.right.vector
|-
|o.referenceBody.Radius
|o.referenceBody.radius
|-
|o.referenceBody.orbit
|o.referenceBody.Orbit
|-
|o.LAN
|o.longitudeOfAscendingNode
|-
|Planetarium.up
|o.ReferenceFrame.up.vector
|-
|Planetarium.right
|o.ReferenceFrame.right.vector
|-
|o.PeR
|o.Periapsis
|-
|o.PeA
|o.PeriapsisArl
|-
|o.ApR
|o.Apoapsis
|-
|o.ApA
|o.ApoapsisArl
|-
|o.trueAnomaly
|o.TrueAnomaly
|-
|o.patchEndTransition
|o.PatchEndTransition
|-
|o.referenceBody.timeWarpAltitudeLimits [n]
|o.referenceBody.TimeWarpAltitudeOffset*n
|-
|
|
|}
{| class="wikitable"
|+Orbit vs PatchedConicOrbit Methods
!KSP1
!KSP2
|-
|o.getOrbitalVelocityAtUT()
|o.GetOrbitalVelocityAtUTZup()
|-
|o.getRelativePositionAtUT()
|o.GetRelativePositionAtUT()
|-
|o.GetOrbitNormal()
|o.GetRelativeOrbitNormal()
|-
|o.referenceBody.GetLatitude()
|o.referenceBody.GetLatLonAltFromRadius()
|-
|
|
|}


Body Type: Properties and Methods

TypeCelestialBody -&gt; CelestialBodyComponent

Vessel Type: Properties and Methods

Coordinate Systems

Useful Code Block Conversions

Was

o.GetOrbitalStateVectorsAtUT(UT, out pos, out vel);

newOrbit.UpdateFromStateVectors(pos, vel, o.referenceBody, UT);

Is

o.GetOrbitalStateVectorsAtUT(UT, out pos, out vel);

KSP.Sim.Position position = new KSP.Sim.Position(o.referenceBody.coordinateSystem, OrbitExtensions.SwapYZ(pos - o.referenceBody.Position.localPosition));

KSP.Sim.Velocity velocity = new KSP.Sim.Velocity(o.referenceBody.relativeToMotion, OrbitExtensions.SwapYZ(vel));

newOrbit.UpdateFromStateVectors(position, velocity, o.referenceBody, UT);

Was

PatchedConics.SolverParameters solverParameters = new PatchedConics.SolverParameters();

Is

PatchedConicSolver.SolverParameters solverParameters = new PatchedConicSolver.SolverParameters();

Was

PatchedConics.CalculatePatch(o, nextOrbit, UT, solverParameters, null);

Is

nextOrbit = o.NextPatch as PatchedConicsOrbit;

Was

o.UTAtMeanAnomaly(o.GetMeanAnomalyAtEccentricAnomaly(o.GetEccentricAnomalyAtTrueAnomaly(trueAnomaly)), UT);

Is

o.GetUTforTrueAnomaly(trueAnomaly*UtilMath.Deg2Rad, o.period);

New Code

public static Vector3d DvToBurnVec(PatchedConicsOrbit o, Vector3d dV, double UT)

{

Vector3d burnVec;

burnVec.x = Vector3d.Dot(dV, o.RadialPlus(UT));

burnVec.y = Vector3d.Dot(dV, o.NormalPlus(UT));

burnVec.z = Vector3d.Dot(dV, -1 * o.Prograde(UT)); return burnVec;

}

public static Vector3d BurnVecToDv(PatchedConicsOrbit o, Vector3d burnVec, double UT) { return burnVec.x * o.RadialPlus(UT) + burnVec.y * o.NormalPlus(UT) - burnVec.z * o.Prograde(UT); }</text>
      <sha1>i2j7ii1skb78xqu6h5tnfxkdbkf19ns</sha1>
    </revision>
    <revision>
      <id>38</id>
      <parentid>34</parentid>
      <timestamp>2023-04-17T21:41:01Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <minor/>
      <comment>Removed empty table rows</comment>
      <origin>38</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3529" sha1="mbgipjgvu4q2ifsohniva5r3nj1ezeb" xml:space="preserve">{{DISPLAYTITLE:Orbits and PatchedConicsOrbit methods and info}}
[[Category:KSP 1 code conversion]]

When porting from KSP1 to KSP2 one of the first things you're likely to encounter is the fact that where KSP1 defined an orbit using the Orbit class, in KSP2 it's now the PatchedConicsOrbit class. These classes have a lot in common; for example, there are a number of methods and properties where the names are almost identical other than a change of case for the initial character. Nevertheless, there are a few differences that you should know about when porting KSP1 code to work in KSP2.

So where you might have a variable of type Orbit, now you'll mostly use a variable of type PatchedConicsOrbit.
{| class="wikitable"
|+Orbit vs PatchedConicOrbit Properties
!KSP1
!KSP2
|-
|Orbit o;
|PatchedConicsOrbit o;
|-
|o.referenceBody.position
|o.referenceBody.Position.localPosition
|-
|o.referenceBody.transform.up
|o.referenceBody.transform.up.vector
|-
|o.referenceBody.transform.right
|o.referenceBody.transform.right.vector
|-
|o.referenceBody.Radius
|o.referenceBody.radius
|-
|o.referenceBody.orbit
|o.referenceBody.Orbit
|-
|o.LAN
|o.longitudeOfAscendingNode
|-
|Planetarium.up
|o.ReferenceFrame.up.vector
|-
|Planetarium.right
|o.ReferenceFrame.right.vector
|-
|o.PeR
|o.Periapsis
|-
|o.PeA
|o.PeriapsisArl
|-
|o.ApR
|o.Apoapsis
|-
|o.ApA
|o.ApoapsisArl
|-
|o.trueAnomaly
|o.TrueAnomaly
|-
|o.patchEndTransition
|o.PatchEndTransition
|-
|o.referenceBody.timeWarpAltitudeLimits [n]
|o.referenceBody.TimeWarpAltitudeOffset*n
|}
{| class="wikitable"
|+Orbit vs PatchedConicOrbit Methods
!KSP1
!KSP2
|-
|o.getOrbitalVelocityAtUT()
|o.GetOrbitalVelocityAtUTZup()
|-
|o.getRelativePositionAtUT()
|o.GetRelativePositionAtUT()
|-
|o.GetOrbitNormal()
|o.GetRelativeOrbitNormal()
|-
|o.referenceBody.GetLatitude()
|o.referenceBody.GetLatLonAltFromRadius()
|}


Body Type: Properties and Methods

TypeCelestialBody -&gt; CelestialBodyComponent

Vessel Type: Properties and Methods

Coordinate Systems

Useful Code Block Conversions

Was

o.GetOrbitalStateVectorsAtUT(UT, out pos, out vel);

newOrbit.UpdateFromStateVectors(pos, vel, o.referenceBody, UT);

Is

o.GetOrbitalStateVectorsAtUT(UT, out pos, out vel);

KSP.Sim.Position position = new KSP.Sim.Position(o.referenceBody.coordinateSystem, OrbitExtensions.SwapYZ(pos - o.referenceBody.Position.localPosition));

KSP.Sim.Velocity velocity = new KSP.Sim.Velocity(o.referenceBody.relativeToMotion, OrbitExtensions.SwapYZ(vel));

newOrbit.UpdateFromStateVectors(position, velocity, o.referenceBody, UT);

Was

PatchedConics.SolverParameters solverParameters = new PatchedConics.SolverParameters();

Is

PatchedConicSolver.SolverParameters solverParameters = new PatchedConicSolver.SolverParameters();

Was

PatchedConics.CalculatePatch(o, nextOrbit, UT, solverParameters, null);

Is

nextOrbit = o.NextPatch as PatchedConicsOrbit;

Was

o.UTAtMeanAnomaly(o.GetMeanAnomalyAtEccentricAnomaly(o.GetEccentricAnomalyAtTrueAnomaly(trueAnomaly)), UT);

Is

o.GetUTforTrueAnomaly(trueAnomaly*UtilMath.Deg2Rad, o.period);

New Code

public static Vector3d DvToBurnVec(PatchedConicsOrbit o, Vector3d dV, double UT)

{

Vector3d burnVec;

burnVec.x = Vector3d.Dot(dV, o.RadialPlus(UT));

burnVec.y = Vector3d.Dot(dV, o.NormalPlus(UT));

burnVec.z = Vector3d.Dot(dV, -1 * o.Prograde(UT)); return burnVec;

}

public static Vector3d BurnVecToDv(PatchedConicsOrbit o, Vector3d burnVec, double UT) { return burnVec.x * o.RadialPlus(UT) + burnVec.y * o.NormalPlus(UT) - burnVec.z * o.Prograde(UT); }</text>
      <sha1>mbgipjgvu4q2ifsohniva5r3nj1ezeb</sha1>
    </revision>
  </page>
  <page>
    <title>Modding Resources</title>
    <ns>0</ns>
    <id>10</id>
    <revision>
      <id>35</id>
      <timestamp>2023-04-17T13:31:16Z</timestamp>
      <contributor>
        <username>AtomicTech</username>
        <id>10</id>
      </contributor>
      <comment>Made page.</comment>
      <origin>35</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="588" sha1="2pyaqjf5i27ry1c0anq7df3l97t95fy" xml:space="preserve">The original Kerbal Space Program enjoyed a number of different avenues for aspiring modders to learn how to dig into KSP's code. Kerbal Space Program 2 shares many similar platforms but, as the game is in its infancy, these sources can be hard to find. To combat this, we've complied a list here of the most active modding groups for those of us who wish to start digging into KSP 2's code:

* '''[https://forum.kerbalspaceprogram.com/ The Kerbal Space Program Forums]'''

* [https://disboard.org/server/1078696971088433153 '''The KSP 2 Modding Society''']

(Page will be updated later.)</text>
      <sha1>2pyaqjf5i27ry1c0anq7df3l97t95fy</sha1>
    </revision>
  </page>
  <page>
    <title>File:Screenshot194-KerbinBound.png</title>
    <ns>6</ns>
    <id>11</id>
    <revision>
      <id>36</id>
      <timestamp>2023-04-17T13:38:08Z</timestamp>
      <contributor>
        <username>AtomicTech</username>
        <id>10</id>
      </contributor>
      <origin>36</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="32" sha1="0ug6fsxlx0qox39nukyqo6m894l0dpr" xml:space="preserve">From my old series, KerbinBound.</text>
      <sha1>0ug6fsxlx0qox39nukyqo6m894l0dpr</sha1>
    </revision>
  </page>
  <page>
    <title>User:AtomicTech</title>
    <ns>2</ns>
    <id>12</id>
    <revision>
      <id>37</id>
      <timestamp>2023-04-17T13:39:30Z</timestamp>
      <contributor>
        <username>AtomicTech</username>
        <id>10</id>
      </contributor>
      <comment>Made the page.</comment>
      <origin>37</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="271" sha1="hw5ui7ixkswgff2qou16u1p7txvtk5x" xml:space="preserve">Formerly: KSP Mod Developer and Mission Report Writer. 

Currently: Forums Dweller and KSP 2 Modding Society Administrator.
[[File:Screenshot194-KerbinBound.png|thumb|A picture from KerbinBound.]]
https://forum.kerbalspaceprogram.com/index.php?/profile/210823-atomictech/</text>
      <sha1>hw5ui7ixkswgff2qou16u1p7txvtk5x</sha1>
    </revision>
  </page>
  <page>
    <title>KSP 2 Mod Equivalents</title>
    <ns>0</ns>
    <id>13</id>
    <revision>
      <id>39</id>
      <timestamp>2023-04-18T17:53:26Z</timestamp>
      <contributor>
        <username>AtomicTech</username>
        <id>10</id>
      </contributor>
      <comment>Made page.</comment>
      <origin>39</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="303" sha1="fcf6gbpm5mtbkmo0t94h03rb228ttu0" xml:space="preserve">Kerbal Space Program has a catalog of mods spanning back to 2011. A significant number of them were Quality of Life (QoL) mods which aimed to make a players experience better. On this list, we've compiled a number of mods that are spiritual successors to their KSP 1 counterparts.
(Content coming soon.)</text>
      <sha1>fcf6gbpm5mtbkmo0t94h03rb228ttu0</sha1>
    </revision>
  </page>
  <page>
    <title>User talk:AtomicTech</title>
    <ns>3</ns>
    <id>14</id>
    <revision>
      <id>40</id>
      <timestamp>2023-04-18T17:58:10Z</timestamp>
      <contributor>
        <username>AtomicTech</username>
        <id>10</id>
      </contributor>
      <comment>Created blank page</comment>
      <origin>40</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
  </page>
  <page>
    <title>Talk:Main Page</title>
    <ns>1</ns>
    <id>15</id>
    <revision>
      <id>41</id>
      <timestamp>2023-04-21T14:12:48Z</timestamp>
      <contributor>
        <username>AtomicTech</username>
        <id>10</id>
      </contributor>
      <comment>m</comment>
      <origin>41</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
  </page>
  <page>
    <title>Part modding videos (tutorials)</title>
    <ns>0</ns>
    <id>16</id>
    <revision>
      <id>42</id>
      <timestamp>2023-04-23T16:30:04Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Created page with "Following are video tutorials for making part mods by LuxStice:  &lt;youtube&gt;https://www.youtube.com/watch?v=9fQg-oMqcH8&lt;/youtube&gt;  &lt;youtube&gt;https://www.youtube.com/watch?v=G-g0AxrFMGM&lt;/youtube&gt;"</comment>
      <origin>42</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="191" sha1="b0crt1w5rw7uwtgla8xq15y44o3pd4m" xml:space="preserve">Following are video tutorials for making part mods by LuxStice:

&lt;youtube&gt;https://www.youtube.com/watch?v=9fQg-oMqcH8&lt;/youtube&gt;

&lt;youtube&gt;https://www.youtube.com/watch?v=G-g0AxrFMGM&lt;/youtube&gt;</text>
      <sha1>b0crt1w5rw7uwtgla8xq15y44o3pd4m</sha1>
    </revision>
    <revision>
      <id>43</id>
      <parentid>42</parentid>
      <timestamp>2023-04-23T16:31:09Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>43</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="208" sha1="ikteo4iibbvh6r58tsnfkrxg4lxfve9" xml:space="preserve">[Parts modding]

Following are video tutorials for making part mods by LuxStice:

&lt;youtube&gt;https://www.youtube.com/watch?v=9fQg-oMqcH8&lt;/youtube&gt;

&lt;youtube&gt;https://www.youtube.com/watch?v=G-g0AxrFMGM&lt;/youtube&gt;</text>
      <sha1>ikteo4iibbvh6r58tsnfkrxg4lxfve9</sha1>
    </revision>
    <revision>
      <id>44</id>
      <parentid>43</parentid>
      <timestamp>2023-04-23T16:31:23Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>44</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="210" sha1="9osct4zas32bsuvkxksm83k53wctah2" xml:space="preserve">[[Parts modding]]

Following are video tutorials for making part mods by LuxStice:

&lt;youtube&gt;https://www.youtube.com/watch?v=9fQg-oMqcH8&lt;/youtube&gt;

&lt;youtube&gt;https://www.youtube.com/watch?v=G-g0AxrFMGM&lt;/youtube&gt;</text>
      <sha1>9osct4zas32bsuvkxksm83k53wctah2</sha1>
    </revision>
    <revision>
      <id>45</id>
      <parentid>44</parentid>
      <timestamp>2023-04-23T16:31:43Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>45</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="219" sha1="hpuq8jq2q6ah8zl9u3d8rr7a0k6fp9u" xml:space="preserve">[[Category:Parts modding]]

Following are video tutorials for making part mods by LuxStice:

&lt;youtube&gt;https://www.youtube.com/watch?v=9fQg-oMqcH8&lt;/youtube&gt;

&lt;youtube&gt;https://www.youtube.com/watch?v=G-g0AxrFMGM&lt;/youtube&gt;</text>
      <sha1>hpuq8jq2q6ah8zl9u3d8rr7a0k6fp9u</sha1>
    </revision>
    <revision>
      <id>139</id>
      <parentid>45</parentid>
      <timestamp>2023-08-03T00:08:32Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>139</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="242" sha1="61lvzet8jzd2zkv4avtej3fqf6fo9rg" xml:space="preserve">[[Category:Parts modding]]
[[Category:Tutorials]]

Following are video tutorials for making part mods by LuxStice:

&lt;youtube&gt;https://www.youtube.com/watch?v=9fQg-oMqcH8&lt;/youtube&gt;

&lt;youtube&gt;https://www.youtube.com/watch?v=G-g0AxrFMGM&lt;/youtube&gt;</text>
      <sha1>61lvzet8jzd2zkv4avtej3fqf6fo9rg</sha1>
    </revision>
    <revision>
      <id>140</id>
      <parentid>139</parentid>
      <timestamp>2023-08-03T00:08:45Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <minor/>
      <comment>Munix moved page [[Part modding video tutorials]] to [[Part modding videos (tutorials)]]</comment>
      <origin>139</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="242" sha1="61lvzet8jzd2zkv4avtej3fqf6fo9rg" xml:space="preserve">[[Category:Parts modding]]
[[Category:Tutorials]]

Following are video tutorials for making part mods by LuxStice:

&lt;youtube&gt;https://www.youtube.com/watch?v=9fQg-oMqcH8&lt;/youtube&gt;

&lt;youtube&gt;https://www.youtube.com/watch?v=G-g0AxrFMGM&lt;/youtube&gt;</text>
      <sha1>61lvzet8jzd2zkv4avtej3fqf6fo9rg</sha1>
    </revision>
    <revision>
      <id>191</id>
      <parentid>140</parentid>
      <timestamp>2023-10-28T12:33:26Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Changed categories</comment>
      <origin>191</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="243" sha1="b023l5f84p94ur4adnqb8loqk85t2zj" xml:space="preserve">[[Category:Tutorials]]

Following are video tutorials for making part mods by LuxStice:

&lt;youtube&gt;https://www.youtube.com/watch?v=9fQg-oMqcH8&lt;/youtube&gt;

&lt;youtube&gt;https://www.youtube.com/watch?v=G-g0AxrFMGM&lt;/youtube&gt;
[[Category:Creating parts]]</text>
      <sha1>b023l5f84p94ur4adnqb8loqk85t2zj</sha1>
    </revision>
    <revision>
      <id>192</id>
      <parentid>191</parentid>
      <timestamp>2023-10-28T12:33:54Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Changed categories</comment>
      <origin>192</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="219" sha1="sbst50yh3h6hhpcg3lzdijo3zjpx7vr" xml:space="preserve">Following are video tutorials for making part mods by LuxStice:

&lt;youtube&gt;https://www.youtube.com/watch?v=9fQg-oMqcH8&lt;/youtube&gt;

&lt;youtube&gt;https://www.youtube.com/watch?v=G-g0AxrFMGM&lt;/youtube&gt;
[[Category:Creating parts]]</text>
      <sha1>sbst50yh3h6hhpcg3lzdijo3zjpx7vr</sha1>
    </revision>
    <revision>
      <id>328</id>
      <parentid>192</parentid>
      <timestamp>2024-01-15T02:10:20Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>328</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="222" sha1="k3cp40e9jdfmc6fg02oklxbimze2ule" xml:space="preserve">Following are video tutorials for making part mods by LuxStice:

&lt;youtube&gt;https://www.youtube.com/watch?v=9fQg-oMqcH8&lt;/youtube&gt;

&lt;youtube&gt;https://www.youtube.com/watch?v=G-g0AxrFMGM&lt;/youtube&gt;
[[Category:Parts and modules]]</text>
      <sha1>k3cp40e9jdfmc6fg02oklxbimze2ule</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Parts modding</title>
    <ns>14</ns>
    <id>17</id>
    <revision>
      <id>46</id>
      <timestamp>2023-04-23T16:32:04Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Created page with "Pages which focus on making part mods."</comment>
      <origin>46</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="38" sha1="0flu4zw26x41ys1fmp0zi62afy8cvso" xml:space="preserve">Pages which focus on making part mods.</text>
      <sha1>0flu4zw26x41ys1fmp0zi62afy8cvso</sha1>
    </revision>
    <revision>
      <id>47</id>
      <parentid>46</parentid>
      <timestamp>2023-04-23T16:32:16Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>47</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="56" sha1="828ripegakj85kmzsy5gwewkz6xdgnh" xml:space="preserve">[[Category:TOC]]

Pages which focus on making part mods.</text>
      <sha1>828ripegakj85kmzsy5gwewkz6xdgnh</sha1>
    </revision>
    <revision>
      <id>48</id>
      <parentid>47</parentid>
      <timestamp>2023-04-23T16:32:22Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>48</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="55" sha1="r5bf0a1wp1a4pe360qpa03yhf8n5cmn" xml:space="preserve">[[Category:TOC]]
Pages which focus on making part mods.</text>
      <sha1>r5bf0a1wp1a4pe360qpa03yhf8n5cmn</sha1>
    </revision>
  </page>
  <page>
    <title>Subscribe to game Messages</title>
    <ns>0</ns>
    <id>18</id>
    <revision>
      <id>49</id>
      <timestamp>2023-05-03T09:01:00Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Created page with "Game triggers a bunch of Messages (events) you can subscribe to in your code in order to react to those messages.  For instance 'VesselDeltaVCalculationMessage' for whenever the game is doing updates to any vessel deltav, or UIButtonClickedMessage for when the player clicks on any UI element.  You could always do any check inside an Update() method of your plugin class, but using Messages is more efficient when you need to do checks on events that are not triggered very..."</comment>
      <origin>49</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="821" sha1="lfthytc3rm8mp1j9x08llkadw0ovcwn" xml:space="preserve">Game triggers a bunch of Messages (events) you can subscribe to in your code in order to react to those messages.

For instance 'VesselDeltaVCalculationMessage' for whenever the game is doing updates to any vessel deltav, or UIButtonClickedMessage for when the player clicks on any UI element.

You could always do any check inside an Update() method of your plugin class, but using Messages is more efficient when you need to do checks on events that are not triggered very often.


To see what Messages are being triggered on certain events you an use the ShowKSP2Events mod: https://github.com/Falki-git/ShowKSP2Events.


This mod displays Messages as they are being triggered, colors them to make it easier to see when the event was triggered and it keeps a count of how many times an event has been triggered so far.</text>
      <sha1>lfthytc3rm8mp1j9x08llkadw0ovcwn</sha1>
    </revision>
    <revision>
      <id>51</id>
      <parentid>49</parentid>
      <timestamp>2023-05-03T09:07:49Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Add page content</comment>
      <origin>51</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="934" sha1="lcv6host5zy041ncefin036ai0ywqir" xml:space="preserve">Game triggers a bunch of Messages (events) you can subscribe to in your code in order to react to those messages.

For instance ''&lt;code&gt;VesselDeltaVCalculationMessage&lt;/code&gt;'' for whenever the game is doing updates to any vessel deltav, or ''&lt;code&gt;UIButtonClickedMessage&lt;/code&gt;'' for when the player clicks on any UI element.

You could always do any check inside an ''Update()'' method of your plugin class, but using Messages is more efficient when you need to do checks on events that are not triggered very often.



'''To see what Messages are being triggered on certain events you an use the &lt;code&gt;ShowKSP2Events&lt;/code&gt; mod:'''

'''https://github.com/Falki-git/ShowKSP2Events&lt;nowiki/&gt;.'''



This mod displays Messages as they are being triggered, colors them to make it easier to see when the event was triggered and it keeps a count of how many times an event has been triggered so far.

[[File:ShowKSP2Events.png|left|thumb]]</text>
      <sha1>lcv6host5zy041ncefin036ai0ywqir</sha1>
    </revision>
    <revision>
      <id>53</id>
      <parentid>51</parentid>
      <timestamp>2023-05-05T07:15:28Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Add to Tools category</comment>
      <origin>53</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="971" sha1="ryd23ni835475tf5zloa1oc4t524c17" xml:space="preserve">Game triggers a bunch of Messages (events) you can subscribe to in your code in order to react to those messages.

For instance ''&lt;code&gt;VesselDeltaVCalculationMessage&lt;/code&gt;'' for whenever the game is doing updates to any vessel deltav, or ''&lt;code&gt;UIButtonClickedMessage&lt;/code&gt;'' for when the player clicks on any UI element.

You could always do any check inside an ''Update()'' method of your plugin class, but using Messages is more efficient when you need to do checks on events that are not triggered very often.



'''To see what Messages are being triggered on certain events you an use the &lt;code&gt;ShowKSP2Events&lt;/code&gt; mod:'''

'''https://github.com/Falki-git/ShowKSP2Events&lt;nowiki/&gt;.'''



This mod displays Messages as they are being triggered, colors them to make it easier to see when the event was triggered and it keeps a count of how many times an event has been triggered so far.

[[File:ShowKSP2Events 1.2.0.png|left|thumb|1000x1000px]]
[[Category:Tools]]</text>
      <sha1>ryd23ni835475tf5zloa1oc4t524c17</sha1>
    </revision>
    <revision>
      <id>114</id>
      <parentid>53</parentid>
      <timestamp>2023-07-27T12:03:56Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Change link from github to spacedock</comment>
      <origin>114</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="960" sha1="at07tu70hfmwbrk7z44zp6ejz8gity1" xml:space="preserve">Game triggers a bunch of Messages (events) you can subscribe to in your code in order to react to those messages.

For instance ''&lt;code&gt;VesselDeltaVCalculationMessage&lt;/code&gt;'' for whenever the game is doing updates to any vessel deltav, or ''&lt;code&gt;UIButtonClickedMessage&lt;/code&gt;'' for when the player clicks on any UI element.

You could always do any check inside an ''Update()'' method of your plugin class, but using Messages is more efficient when you need to do checks on events that are not triggered very often.



'''To see what Messages are being triggered on certain events you an use the &lt;code&gt;ShowKSP2Events&lt;/code&gt; mod:'''

https://spacedock.info/mod/3375/ShowKSP2Events.




This mod displays Messages as they are being triggered, colors them to make it easier to see when the event was triggered and it keeps a count of how many times an event has been triggered so far.

[[File:ShowKSP2Events 1.2.0.png|left|thumb|1000x1000px]]
[[Category:Tools]]</text>
      <sha1>at07tu70hfmwbrk7z44zp6ejz8gity1</sha1>
    </revision>
    <revision>
      <id>160</id>
      <parentid>114</parentid>
      <timestamp>2023-10-23T22:00:39Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>First!</comment>
      <origin>160</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="986" sha1="pgthiemg9xgcfaade8l25oka48njm4z" xml:space="preserve">Game triggers a bunch of Messages (events) you can subscribe to in your code in order to react to those messages.

For instance ''&lt;code&gt;VesselDeltaVCalculationMessage&lt;/code&gt;'' for whenever the game is doing updates to any vessel deltav, or ''&lt;code&gt;UIButtonClickedMessage&lt;/code&gt;'' for when the player clicks on any UI element.

You could always do any check inside an ''Update()'' method of your plugin class, but using Messages is more efficient when you need to do checks on events that are not triggered very often.



'''To see what Messages are being triggered on certain events you an use the &lt;code&gt;ShowKSP2Events&lt;/code&gt; mod:'''

https://spacedock.info/mod/3375/ShowKSP2Events, or download it with CKAN.




This mod displays Messages as they are being triggered, colors them to make it easier to see when the event was triggered and it keeps a count of how many times an event has been triggered so far.

[[File:ShowKSP2Events 1.2.0.png|left|thumb|1000x1000px]]
[[Category:Tools]]</text>
      <sha1>pgthiemg9xgcfaade8l25oka48njm4z</sha1>
    </revision>
    <revision>
      <id>166</id>
      <parentid>160</parentid>
      <timestamp>2023-10-24T20:28:33Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <comment>Move to "Messages" category</comment>
      <origin>166</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="989" sha1="nwz45xjnfsntus1zxn9vg1is3e6lsti" xml:space="preserve">[[Category:Messages]]
Game triggers a bunch of Messages (events) you can subscribe to in your code in order to react to those messages.

For instance ''&lt;code&gt;VesselDeltaVCalculationMessage&lt;/code&gt;'' for whenever the game is doing updates to any vessel deltav, or ''&lt;code&gt;UIButtonClickedMessage&lt;/code&gt;'' for when the player clicks on any UI element.

You could always do any check inside an ''Update()'' method of your plugin class, but using Messages is more efficient when you need to do checks on events that are not triggered very often.



'''To see what Messages are being triggered on certain events you an use the &lt;code&gt;ShowKSP2Events&lt;/code&gt; mod:'''

https://spacedock.info/mod/3375/ShowKSP2Events, or download it with CKAN.




This mod displays Messages as they are being triggered, colors them to make it easier to see when the event was triggered and it keeps a count of how many times an event has been triggered so far.

[[File:ShowKSP2Events 1.2.0.png|left|thumb|1000x1000px]]</text>
      <sha1>nwz45xjnfsntus1zxn9vg1is3e6lsti</sha1>
    </revision>
    <revision>
      <id>168</id>
      <parentid>166</parentid>
      <timestamp>2023-10-25T10:49:44Z</timestamp>
      <contributor>
        <username>Cheese</username>
        <id>7</id>
      </contributor>
      <minor/>
      <comment>Change game to "The game" and fix some formatting</comment>
      <origin>168</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="990" sha1="cy2n5iqrfrbaerarflnp9tmuq72j1f2" xml:space="preserve">[[Category:Messages]]
The game triggers a bunch of Messages (events) you can subscribe to in your code in order to react to those messages.

For instance ''&lt;code&gt;VesselDeltaVCalculationMessage&lt;/code&gt;'' for whenever the game is doing updates to any vessel deltav, or ''&lt;code&gt;UIButtonClickedMessage&lt;/code&gt;'' for when the player clicks on any UI element.

You could always do any check inside an ''Update()'' method of your plugin class, but using Messages is more efficient when you need to do checks on events that are not triggered very often.



'''To see what Messages are being triggered on certain events you an use the &lt;code&gt;ShowKSP2Events&lt;/code&gt; mod:'''

https://spacedock.info/mod/3375/ShowKSP2Events, or download it with CKAN


This mod displays Messages as they are being triggered, colors them to make it easier to see when the event was triggered and it keeps a count of how many times an event has been triggered so far.

[[File:ShowKSP2Events 1.2.0.png|left|thumb|1000x1000px]]</text>
      <sha1>cy2n5iqrfrbaerarflnp9tmuq72j1f2</sha1>
    </revision>
    <revision>
      <id>256</id>
      <parentid>168</parentid>
      <timestamp>2023-12-24T23:21:16Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Replaced UIButtonClickedMessage with GameStateChangedMessage as it's more useful</comment>
      <origin>256</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1025" sha1="618miaj1tk1pzwjnr0xz6p3fhwb8dpo" xml:space="preserve">[[Category:Messages]]
The game triggers a bunch of Messages (events) you can subscribe to in your code in order to react to those messages.

For instance ''&lt;code&gt;VesselDeltaVCalculationMessage&lt;/code&gt;'' for whenever the game is doing updates to any vessel deltav, or ''&lt;code&gt;GameStateChangedMessage&lt;/code&gt;'' for when the player enters a different screen (e.g. Flight state -&gt; KSC state).

You could always do any check inside an ''Update()'' method of your plugin class, but using Messages is more efficient when you need to do checks on events that are not triggered very often.



'''To see what Messages are being triggered on certain events you an use the &lt;code&gt;ShowKSP2Events&lt;/code&gt; mod:'''

https://spacedock.info/mod/3375/ShowKSP2Events, or download it with CKAN


This mod displays Messages as they are being triggered, colors them to make it easier to see when the event was triggered and it keeps a count of how many times an event has been triggered so far.

[[File:ShowKSP2Events 1.2.0.png|left|thumb|1000x1000px]]</text>
      <sha1>618miaj1tk1pzwjnr0xz6p3fhwb8dpo</sha1>
    </revision>
  </page>
  <page>
    <title>File:ShowKSP2Events.png</title>
    <ns>6</ns>
    <id>19</id>
    <revision>
      <id>50</id>
      <timestamp>2023-05-03T09:06:36Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <origin>50</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="22" sha1="npgrz43w80vax52j6ahh6qvlutnnnuz" xml:space="preserve">ShowKSP2Events example</text>
      <sha1>npgrz43w80vax52j6ahh6qvlutnnnuz</sha1>
    </revision>
  </page>
  <page>
    <title>File:ShowKSP2Events 1.2.0.png</title>
    <ns>6</ns>
    <id>20</id>
    <revision>
      <id>52</id>
      <timestamp>2023-05-05T07:09:58Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <origin>52</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="20" sha1="finkn47dbf3a8yu8melv9ic6i3f89jd" xml:space="preserve">ShowKSP2Events 1.2.0</text>
      <sha1>finkn47dbf3a8yu8melv9ic6i3f89jd</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Tools</title>
    <ns>14</ns>
    <id>21</id>
    <revision>
      <id>54</id>
      <timestamp>2023-05-05T07:17:04Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Add description and TOC category.</comment>
      <origin>54</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="42" sha1="cpkc69jyqpu46jmtviildcw4uwzoelu" xml:space="preserve">Tools you can use to mod.
[[Category:TOC]]</text>
      <sha1>cpkc69jyqpu46jmtviildcw4uwzoelu</sha1>
    </revision>
  </page>
  <page>
    <title>Sizes</title>
    <ns>0</ns>
    <id>22</id>
    <revision>
      <id>55</id>
      <timestamp>2023-05-18T16:39:19Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <comment>Created page with "Meshes in KSP2 come in a variety of shapes and forms, but for cyllinder-like shapes, they maintain a set number of segments. {| class="wikitable" |+ !diameter !Sides |- |1.25m |24 |- |2.5m |48 |- |3.75m | |- |5m | |}"</comment>
      <origin>55</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="216" sha1="92jd2f3qazm6w8krc1o8ih4gkfhul49" xml:space="preserve">Meshes in KSP2 come in a variety of shapes and forms, but for cyllinder-like shapes, they maintain a set number of segments.
{| class="wikitable"
|+
!diameter
!Sides
|-
|1.25m
|24
|-
|2.5m
|48
|-
|3.75m
|
|-
|5m
|
|}</text>
      <sha1>92jd2f3qazm6w8krc1o8ih4gkfhul49</sha1>
    </revision>
    <revision>
      <id>60</id>
      <parentid>55</parentid>
      <timestamp>2023-05-21T12:42:11Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Added category</comment>
      <origin>60</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="243" sha1="a9bmyh85g2c9g9k3f5kc5pbdtudz8g8" xml:space="preserve">Meshes in KSP2 come in a variety of shapes and forms, but for cyllinder-like shapes, they maintain a set number of segments.
{| class="wikitable"
|+
!diameter
!Sides
|-
|1.25m
|24
|-
|2.5m
|48
|-
|3.75m
|
|-
|5m
|
|}
[[Category:Parts modding]]</text>
      <sha1>a9bmyh85g2c9g9k3f5kc5pbdtudz8g8</sha1>
    </revision>
    <revision>
      <id>66</id>
      <parentid>60</parentid>
      <timestamp>2023-05-21T23:36:54Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <comment>Added labels to the table</comment>
      <origin>66</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="393" sha1="t7k61de3afe263f2lqvp3syymiswjk9" xml:space="preserve">Meshes in KSP2 come in a variety of shapes and forms, but for cyllinder-like shapes, they maintain a set number of segments.
{| class="wikitable"
|+
!Label
!diameter
!Sides
|-
|XS-
|0.3125m
|
|-
|XS
|0.625m
|
|-
|XS+
|0.9375m
|
|-
|SM
|1.25m
|24
|-
|SM+
|1.875m
|
|-
|MD
|2.5m
|48
|-
|MD+
|3.125m
|
|-
|LG
|3.75m
|
|-
|LG+
|4.375m
|
|-
|XL
|5m
|
|-
|
|
|
|-
|
|
|
|}
[[Category:Parts modding]]</text>
      <sha1>t7k61de3afe263f2lqvp3syymiswjk9</sha1>
    </revision>
    <revision>
      <id>67</id>
      <parentid>66</parentid>
      <timestamp>2023-05-21T23:41:48Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <minor/>
      <comment>LuxStice moved page [[Mesh convention]] to [[Sizes]] without leaving a redirect</comment>
      <origin>66</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="393" sha1="t7k61de3afe263f2lqvp3syymiswjk9" xml:space="preserve">Meshes in KSP2 come in a variety of shapes and forms, but for cyllinder-like shapes, they maintain a set number of segments.
{| class="wikitable"
|+
!Label
!diameter
!Sides
|-
|XS-
|0.3125m
|
|-
|XS
|0.625m
|
|-
|XS+
|0.9375m
|
|-
|SM
|1.25m
|24
|-
|SM+
|1.875m
|
|-
|MD
|2.5m
|48
|-
|MD+
|3.125m
|
|-
|LG
|3.75m
|
|-
|LG+
|4.375m
|
|-
|XL
|5m
|
|-
|
|
|
|-
|
|
|
|}
[[Category:Parts modding]]</text>
      <sha1>t7k61de3afe263f2lqvp3syymiswjk9</sha1>
    </revision>
    <revision>
      <id>68</id>
      <parentid>67</parentid>
      <timestamp>2023-05-21T23:45:27Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <origin>68</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="644" sha1="n3sx6gjitnn49ftd4xb9zw2tqdg1w36" xml:space="preserve">KSP2 brought more life to the sizes present in KSP1, giving them labels and colors acording to each diameter. Here is some information about it
{| class="wikitable"
|+Regular Sizes
!Label
!diameter
!Sides
|-
|XS-
|0.3125m
|
|-
|XS
|0.625m
|
|-
|XS+
|0.9375m
|
|-
|SM
|1.25m
|24
|-
|SM+
|1.875m
|
|-
|MD
|2.5m
|48
|-
|MD+
|3.125m
|
|-
|LG
|3.75m
|
|-
|LG+
|4.375m
|
|-
|XL
|5m
|
|}

=== Special Sizes ===
Other than the ones shown above, there's also some extra sizes added by KSP1 (and ported to KSP2) and by mods. Here's some of them
{| class="wikitable"
|+
!Label
!Diameter
|-
|MK2
|1.25m in the center
|-
|Mk3
|
|}
[[Category:Parts modding]]</text>
      <sha1>n3sx6gjitnn49ftd4xb9zw2tqdg1w36</sha1>
    </revision>
    <revision>
      <id>69</id>
      <parentid>68</parentid>
      <timestamp>2023-05-24T18:28:02Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <origin>69</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="648" sha1="bulr1km0bcrcotg7xox2u3fpikg879w" xml:space="preserve">KSP2 brought more life to the sizes present in KSP1, giving them labels and colors acording to each diameter. Here is some information about it
{| class="wikitable"
|+Regular Sizes
!Label
!diameter
!Sides
|-
|XS-
|0.3125m
|
|-
|XS
|0.625m
|12
|-
|XS+
|0.9375m
|
|-
|SM
|1.25m
|24
|-
|SM+
|1.875m
|
|-
|MD
|2.5m
|36
|-
|MD+
|3.125m
|
|-
|LG
|3.75m
|48
|-
|LG+
|4.375m
|
|-
|XL
|5m
|
|}

=== Special Sizes ===
Other than the ones shown above, there's also some extra sizes added by KSP1 (and ported to KSP2) and by mods. Here's some of them
{| class="wikitable"
|+
!Label
!Diameter
|-
|MK2
|1.25m in the center
|-
|Mk3
|
|}
[[Category:Parts modding]]</text>
      <sha1>bulr1km0bcrcotg7xox2u3fpikg879w</sha1>
    </revision>
    <revision>
      <id>118</id>
      <parentid>69</parentid>
      <timestamp>2023-08-02T23:13:30Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>118</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="810" sha1="017oo7cma0mllqigrhf2ev3mefu7txi" xml:space="preserve">KSP2 brought more life to the sizes present in KSP1, giving them labels and colors according to each diameter. Here is some information about it

===Regular Sizes===
The rows in bold are stock game sizes and the rest are added by mods.
{| class="wikitable"
!Label
!diameter
!Sides
|-
|XS-
|0.3125m
|
|-
|'''XS'''
|'''0.625m'''
|'''12'''
|-
|XS+
|0.9375m
|
|-
|'''SM'''
|'''1.25m'''
|'''24'''
|-
|SM+
|1.875m
|
|-
|'''MD'''
|'''2.5m'''
|'''36'''
|-
|MD+
|3.125m
|
|-
|'''LG'''
|'''3.75m'''
|'''48'''
|-
|LG+ 
|4.375m 
|
|-
|'''XL'''
|'''5m'''
|
|}

=== Special Sizes===
Other than the ones shown above, there's also some extra sizes added by KSP1 (and ported to KSP2) and by mods. Here's some of them:
{| class="wikitable"
|+
!Label
!Diameter
|-
|MK2
|1.25m in the center
|-
|Mk3
|
|}
[[Category:Parts modding]]</text>
      <sha1>017oo7cma0mllqigrhf2ev3mefu7txi</sha1>
    </revision>
    <revision>
      <id>119</id>
      <parentid>118</parentid>
      <timestamp>2023-08-02T23:20:02Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>119</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="837" sha1="mm5jvqa61l9qyzecq9s6j6rih7becc9" xml:space="preserve">KSP2 brought more life to the sizes present in KSP1, giving them labels and colors according to each diameter. Here is some information about it

===Regular Sizes===
The rows in bold are stock game sizes and the rest are added by mods.
{| class="wikitable"
!Label
!diameter
!Sides
|-
|XS-
|0.3125m
|
|-
|'''XS'''
|'''0.625m'''
|'''12'''
|-
|XS+
|0.9375m
|
|-
|'''SM'''
|'''1.25m'''
|'''24'''
|-
|SM+
|1.875m
|
|-
|'''MD'''
|'''2.5m'''
|'''36'''
|-
|MD+
|3.125m
|
|-
|'''LG'''
|'''3.75m'''
|'''48'''
|-
|LG+ 
|4.375m 
|
|-
|'''XL'''
|'''5m'''
|
|-
|'''XXL'''
|'''10m'''
|
|}

=== Special Sizes===
Other than the ones shown above, there's also some extra sizes added by KSP1 (and ported to KSP2) and by mods. Here's some of them:
{| class="wikitable"
|+
!Label
!Diameter
|-
|MK2
|1.25m in the center
|-
|Mk3
|
|}
[[Category:Parts modding]]</text>
      <sha1>mm5jvqa61l9qyzecq9s6j6rih7becc9</sha1>
    </revision>
    <revision>
      <id>124</id>
      <parentid>119</parentid>
      <timestamp>2023-08-02T23:36:54Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>124</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1100" sha1="cshfqk83nxb08jmgwp6n4ekyk5zlgy2" xml:space="preserve">KSP2 brought more life to the sizes present in KSP1, giving them labels and colors according to each diameter. Here is some information about them. This list does not contain all possible sizes as defined by the game, and it also contains modded part sizes. For a list of all the stock game part sizes available to be used in the Core Part Data module and part JSON definitions files, see [[Size Category]].

===Regular Sizes===
The rows in bold are stock game sizes and the rest are added by mods.
{| class="wikitable"
!Label
!diameter
!Sides
|-
|XS-
|0.3125m
|
|-
|'''XS'''
|'''0.625m'''
|'''12'''
|-
|XS+ 
|0.9375m 
|
|-
|'''SM'''
|'''1.25m'''
|'''24'''
|-
|SM+
| 1.875m
|
|-
|'''MD'''
|'''2.5m'''
|'''36'''
|-
|MD+
|3.125m
|
|-
|'''LG'''
|'''3.75m'''
|'''48'''
|-
|LG+
|4.375m
|
|-
|'''XL'''
|'''5m'''
|
|-
|'''XXL'''
|'''10m'''
|
|}

===Special Sizes===
Other than the ones shown above, there's also some extra sizes added by KSP1 (and ported to KSP2) and by mods. Here's some of them:
{| class="wikitable"
|+
!Label
!Diameter
|-
|MK2
|1.25m in the center
|-
|Mk3
|
|}
[[Category:Parts modding]]</text>
      <sha1>cshfqk83nxb08jmgwp6n4ekyk5zlgy2</sha1>
    </revision>
    <revision>
      <id>125</id>
      <parentid>124</parentid>
      <timestamp>2023-08-02T23:37:05Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>125</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1101" sha1="glmaoz2nom814b7rodcpgwxp6he986k" xml:space="preserve">KSP2 brought more life to the sizes present in KSP1, giving them labels and colors according to each diameter. Here is some information about them.

This list does not contain all possible sizes as defined by the game, and it also contains modded part sizes. For a list of all the stock game part sizes available to be used in the Core Part Data module and part JSON definitions files, see [[Size Category]].

===Regular Sizes===
The rows in bold are stock game sizes and the rest are added by mods.
{| class="wikitable"
!Label
!diameter
!Sides
|-
|XS-
|0.3125m
|
|-
|'''XS'''
|'''0.625m'''
|'''12'''
|-
|XS+ 
|0.9375m 
|
|-
|'''SM'''
|'''1.25m'''
|'''24'''
|-
|SM+
| 1.875m
|
|-
|'''MD'''
|'''2.5m'''
|'''36'''
|-
|MD+
|3.125m
|
|-
|'''LG'''
|'''3.75m'''
|'''48'''
|-
|LG+
|4.375m
|
|-
|'''XL'''
|'''5m'''
|
|-
|'''XXL'''
|'''10m'''
|
|}

===Special Sizes===
Other than the ones shown above, there's also some extra sizes added by KSP1 (and ported to KSP2) and by mods. Here's some of them:
{| class="wikitable"
|+
!Label
!Diameter
|-
|MK2
|1.25m in the center
|-
|Mk3
|
|}
[[Category:Parts modding]]</text>
      <sha1>glmaoz2nom814b7rodcpgwxp6he986k</sha1>
    </revision>
    <revision>
      <id>260</id>
      <parentid>125</parentid>
      <timestamp>2023-12-25T14:45:20Z</timestamp>
      <contributor>
        <username>StanWildin</username>
        <id>17</id>
      </contributor>
      <comment>pretty much a full overhaul of the parts documentation. Adding height and what it means and how to use it as well as the modeling language.</comment>
      <origin>260</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4448" sha1="achr4es9qz06p97a7yzmpgyz8l89fbg" xml:space="preserve">KSP2 brought more life to the sizes presets in KSP1, giving them labels as well as colors for each diameter. Here is some information about them.

This list does not contain all possible sizes as defined by the game, and it also contains modded part sizes. For a list of all the stock game part sizes available to be used in the Core Part Data module and part JSON definitions files, see [[Size Category]].

= '''AssetStudioModGUI''' =
Here's how to understand labels and how to find the right parts. I recommend excluding the reentry mesh when searching for a part or include the category of the part you want to find. Sadly you cant filter two things at the same time so you'll have to look through the whole list. One very good tip is to look for a short name that doesn't have _reentry or _lod1, lod2 in it. That's usually the actual part. Also you can sort the categories so they are together for each medium like texture, sprite, text, animation or mesh etc.

=== Part Size ===
{| class="wikitable"
!'''&lt;big&gt;''(x)V''&lt;/big&gt;'''
!'''&lt;big&gt;''=''&lt;/big&gt;'''
!'''&lt;big&gt;''Size of part''&lt;/big&gt;'''
!'''&lt;big&gt;''Label''&lt;/big&gt;'''
|-
|'''0v'''
|'''='''
|'''Extra Small'''
|'''(XS)'''
|-
|'''1v'''
|'''='''
|'''Small'''
|'''(SM)'''
|-
|'''2v'''
|'''='''
|'''Medium'''
|'''(MD)'''
|-
|'''3v'''
|'''='''
|'''Large'''
|'''(LG)'''
|-
|'''4v'''
|'''='''
|'''Extra Large'''
|'''(XL)'''
|-
|'''5v'''
|'''='''
|'''Extra Extra Large'''
|'''(XXL)'''
|}

=== Part Scale ===
{| class="wikitable"
!'''&lt;big&gt;''S(x)''&lt;/big&gt;'''
!'''&lt;big&gt;''=''&lt;/big&gt;'''
!'''&lt;big&gt;''Scale of part''&lt;/big&gt;'''
!'''&lt;big&gt;''Reference''&lt;/big&gt;'''
!&lt;big&gt;'''''Stack'''''&lt;/big&gt;
|-
|'''s1'''
|'''='''
|'''One Stack'''
|'''none'''
|'''1x1'''
|-
|'''s2'''
|'''='''
|'''One Stack that contains two of S1'''
|'''Short'''
|'''1x2'''
|-
|'''s3'''
|'''='''
|'''One stack that contains two of S2'''
|'''none'''
|'''1x4'''
|-
|'''s4'''
|'''='''
|'''One stack that contains two of S3'''
|'''Long'''
|'''1x8'''
|}

= Stock KSP2 Part Sizes and Modded Sizes =
Here are the Charts for the Sizes you'll have to follow when modeling.

Formula behind the design language of parts:      Height + ('''Fake''') Margin = Bevel [Amount to Bevel]

=== Stock Parts ===
{| class="wikitable"
!''&lt;big&gt;'''Size'''&lt;/big&gt;''
!&lt;big&gt;'''''Width'''''&lt;/big&gt;
!&lt;big&gt;'''''Height'''''&lt;/big&gt;
!'''&lt;big&gt;''Margin''&lt;/big&gt;'''
!&lt;big&gt;'''''Bevel'''''&lt;/big&gt;
!&lt;big&gt;'''''Faces'''''&lt;/big&gt;
!
|-
|'''XS'''
|'''0.625m'''
|'''23.4375cm'''
|'''+ 5cm'''
|'''[0.025]'''
|'''12'''
|
|-
|'''SM'''
|'''1.25m'''
|'''46.875cm'''
|'''+ 5cm'''
|'''[0.025]'''
|'''24'''
|
|-
|'''MD'''
|'''2.5m'''
|'''0.9375m'''
|'''+ 0.05m'''
|'''[0.025]'''
|'''36'''
|
|-
|'''LG'''
|'''3.75m'''
|'''1.875m'''
|'''+ 0.1m'''
|'''[0.03]'''
|'''48'''
|
|-
|'''XL'''
|'''5m'''
|'''1.875m'''
|'''+ 0.1m'''
|'''[0.05]'''
|'''48'''
|
|-
|'''XXL'''
|'''10m'''
|'''10m Ball'''
|
|
|'''60'''
|
|}
So what does '''Fake''' Margin mean? Well it's basically the point where the two objects connect and clip into each others geometry making a seal. Those parts don't have collisions. It can also be referred to as wiggle room or a light bleeding seal. The real height is what’s visible and also what is measured.

==== Example of Fake and Real Height: ====
[[File:Pasted image 1.png|left|1079x1079px]]













==== '''Example of Visible Height:''' ====
[[File:Pasted image 0.png|right|1080x1080px]]




















As you can see. The blue line is where the actual object connects to its Gizmo/Origin and the “fake” height/Margin is inside the other object. So when modelling your object, please work in the volume of the parts real/actual size and when you are done you can increase the volume to the ('''Margin''') amount for the respective size.

=== Modded/Custom Parts ===
{| class="wikitable"
!''&lt;big&gt;'''Size'''&lt;/big&gt;''
!'''&lt;big&gt;''Width''&lt;/big&gt;'''
!'''&lt;big&gt;''Height''&lt;/big&gt;'''
!'''&lt;big&gt;''Faces''&lt;/big&gt;'''
!
|-
|'''XS-'''
|'''0.3125m'''
|
|
|
|-
|'''XS+'''
|'''0.9375m'''
|
|
|
|-
|'''SM+'''
|'''1.875m'''
|
|
|
|-
|'''MD+'''
|'''3.125m'''
|
|
|
|-
|'''LG+'''
|'''4.375m'''
|
|
|
|}

===Special Sizes===
Other than the ones shown above, there's also some extra sizes added by KSP1 (and ported to KSP2) and by mods. Here's some of them:

(WIP)
{| class="wikitable"
|+
!'''''&lt;big&gt;Label&lt;/big&gt;'''''
!'''''&lt;big&gt;Diameter&lt;/big&gt;'''''
|-
|'''MK2'''
|'''1.25m in the center'''
|-
|'''Mk3'''
|
|}
[[Category:Parts modding]]





''&lt;u&gt;More to come&lt;/u&gt;''

'''''&lt;small&gt;Created by StanWildin&lt;/small&gt;'''''</text>
      <sha1>achr4es9qz06p97a7yzmpgyz8l89fbg</sha1>
    </revision>
    <revision>
      <id>261</id>
      <parentid>260</parentid>
      <timestamp>2023-12-25T14:46:57Z</timestamp>
      <contributor>
        <username>StanWildin</username>
        <id>17</id>
      </contributor>
      <minor/>
      <origin>261</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4453" sha1="2n6ujzcf46uuud4aznoxhp9t096eznq" xml:space="preserve">KSP2 brought more life to the sizes presets in KSP1, giving them labels as well as colors for each diameter. Here is some information about them.

This list does not contain all possible sizes as defined by the game, and it also contains modded part sizes. For a list of all the stock game part sizes available to be used in the Core Part Data module and part JSON definitions files, see [[Size Category]].

= '''AssetStudioModGUI''' =
Here's how to understand labels and how to find the right parts. I recommend excluding the reentry mesh when searching for a part or include the category of the part you want to find. Sadly you cant filter two things at the same time so you'll have to look through the whole list. One very good tip is to look for a short name that doesn't have _reentry or _lod1, lod2 in it. That's usually the actual part. Also you can sort the categories so they are together for each medium like texture, sprite, text, animation or mesh etc.

=== Part Size ===
{| class="wikitable"
!'''&lt;big&gt;''(x)V''&lt;/big&gt;'''
!'''&lt;big&gt;''=''&lt;/big&gt;'''
!'''&lt;big&gt;''Size of part''&lt;/big&gt;'''
!'''&lt;big&gt;''Label''&lt;/big&gt;'''
|-
|'''0v'''
|'''='''
|'''Extra Small'''
|'''(XS)'''
|-
|'''1v'''
|'''='''
|'''Small'''
|'''(SM)'''
|-
|'''2v'''
|'''='''
|'''Medium'''
|'''(MD)'''
|-
|'''3v'''
|'''='''
|'''Large'''
|'''(LG)'''
|-
|'''4v'''
|'''='''
|'''Extra Large'''
|'''(XL)'''
|-
|'''5v'''
|'''='''
|'''Extra Extra Large'''
|'''(XXL)'''
|}

=== Part Scale ===
{| class="wikitable"
!'''&lt;big&gt;''S(x)''&lt;/big&gt;'''
!'''&lt;big&gt;''=''&lt;/big&gt;'''
!'''&lt;big&gt;''Scale of part''&lt;/big&gt;'''
!'''&lt;big&gt;''Reference''&lt;/big&gt;'''
!&lt;big&gt;'''''Stack'''''&lt;/big&gt;
|-
|'''s1'''
|'''='''
|'''One Stack'''
|'''none'''
|'''1x1'''
|-
|'''s2'''
|'''='''
|'''One Stack that contains two of S1'''
|'''Short'''
|'''1x2'''
|-
|'''s3'''
|'''='''
|'''One stack that contains two of S2'''
|'''none'''
|'''1x4'''
|-
|'''s4'''
|'''='''
|'''One stack that contains two of S3'''
|'''Long'''
|'''1x8'''
|}

= Stock KSP2 Part Sizes and Modded Sizes =
Here are the Charts for the Sizes you'll have to follow when modeling.

Formula behind the design language of parts:      Height + ('''Fake''') Margin = Bevel [Amount to Bevel]

=== Stock Parts ===
{| class="wikitable"
!''&lt;big&gt;'''Size'''&lt;/big&gt;''
!&lt;big&gt;'''''Width'''''&lt;/big&gt;
!&lt;big&gt;'''''Height'''''&lt;/big&gt;
!'''&lt;big&gt;''Margin''&lt;/big&gt;'''
!&lt;big&gt;'''''Bevel'''''&lt;/big&gt;
!&lt;big&gt;'''''Faces'''''&lt;/big&gt;
!
|-
|'''XS'''
|'''0.625m'''
|'''23.4375cm'''
|'''+ 5cm'''
|'''[0.025]'''
|'''12'''
|
|-
|'''SM'''
|'''1.25m'''
|'''46.875cm'''
|'''+ 5cm'''
|'''[0.025]'''
|'''24'''
|
|-
|'''MD'''
|'''2.5m'''
|'''0.9375m'''
|'''+ 0.05m'''
|'''[0.025]'''
|'''36'''
|
|-
|'''LG'''
|'''3.75m'''
|'''1.875m'''
|'''+ 0.1m'''
|'''[0.03]'''
|'''48'''
|
|-
|'''XL'''
|'''5m'''
|'''1.875m'''
|'''+ 0.1m'''
|'''[0.05]'''
|'''48'''
|
|-
|'''XXL'''
|'''10m'''
|'''10m Ball'''
|
|
|'''60'''
|
|}
So what does '''Fake''' Margin mean? Well it's basically the point where the two objects connect and clip into each others geometry making a seal. Those parts don't have collisions. It can also be referred to as wiggle room or a light bleeding seal. The real height is what’s visible and also what is measured.

==== Example of Fake and Real Height: ====
[[File:Pasted image 1.png|left|1079x1079px]]















==== '''Example of Visible Height:''' ====
[[File:Pasted image 0.png|right|1080x1080px]]























As you can see. The blue line is where the actual object connects to its Gizmo/Origin and the “fake” height/Margin is inside the other object. So when modelling your object, please work in the volume of the parts real/actual size and when you are done you can increase the volume to the ('''Margin''') amount for the respective size.

=== Modded/Custom Parts ===
{| class="wikitable"
!''&lt;big&gt;'''Size'''&lt;/big&gt;''
!'''&lt;big&gt;''Width''&lt;/big&gt;'''
!'''&lt;big&gt;''Height''&lt;/big&gt;'''
!'''&lt;big&gt;''Faces''&lt;/big&gt;'''
!
|-
|'''XS-'''
|'''0.3125m'''
|
|
|
|-
|'''XS+'''
|'''0.9375m'''
|
|
|
|-
|'''SM+'''
|'''1.875m'''
|
|
|
|-
|'''MD+'''
|'''3.125m'''
|
|
|
|-
|'''LG+'''
|'''4.375m'''
|
|
|
|}

===Special Sizes===
Other than the ones shown above, there's also some extra sizes added by KSP1 (and ported to KSP2) and by mods. Here's some of them:

(WIP)
{| class="wikitable"
|+
!'''''&lt;big&gt;Label&lt;/big&gt;'''''
!'''''&lt;big&gt;Diameter&lt;/big&gt;'''''
|-
|'''MK2'''
|'''1.25m in the center'''
|-
|'''Mk3'''
|
|}
[[Category:Parts modding]]





''&lt;u&gt;More to come&lt;/u&gt;''

'''''&lt;small&gt;Created by StanWildin&lt;/small&gt;'''''</text>
      <sha1>2n6ujzcf46uuud4aznoxhp9t096eznq</sha1>
    </revision>
    <revision>
      <id>262</id>
      <parentid>261</parentid>
      <timestamp>2023-12-25T14:48:43Z</timestamp>
      <contributor>
        <username>StanWildin</username>
        <id>17</id>
      </contributor>
      <minor/>
      <comment>/* Example of Visible Height: */</comment>
      <origin>262</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4810" sha1="pg4b0jzth4sxs1rn6uryo0z2ydp62g1" xml:space="preserve">KSP2 brought more life to the sizes presets in KSP1, giving them labels as well as colors for each diameter. Here is some information about them.

This list does not contain all possible sizes as defined by the game, and it also contains modded part sizes. For a list of all the stock game part sizes available to be used in the Core Part Data module and part JSON definitions files, see [[Size Category]].

= '''AssetStudioModGUI''' =
Here's how to understand labels and how to find the right parts. I recommend excluding the reentry mesh when searching for a part or include the category of the part you want to find. Sadly you cant filter two things at the same time so you'll have to look through the whole list. One very good tip is to look for a short name that doesn't have _reentry or _lod1, lod2 in it. That's usually the actual part. Also you can sort the categories so they are together for each medium like texture, sprite, text, animation or mesh etc.

=== Part Size ===
{| class="wikitable"
!'''&lt;big&gt;''(x)V''&lt;/big&gt;'''
!'''&lt;big&gt;''=''&lt;/big&gt;'''
!'''&lt;big&gt;''Size of part''&lt;/big&gt;'''
!'''&lt;big&gt;''Label''&lt;/big&gt;'''
|-
|'''0v'''
|'''='''
|'''Extra Small'''
|'''(XS)'''
|-
|'''1v'''
|'''='''
|'''Small'''
|'''(SM)'''
|-
|'''2v'''
|'''='''
|'''Medium'''
|'''(MD)'''
|-
|'''3v'''
|'''='''
|'''Large'''
|'''(LG)'''
|-
|'''4v'''
|'''='''
|'''Extra Large'''
|'''(XL)'''
|-
|'''5v'''
|'''='''
|'''Extra Extra Large'''
|'''(XXL)'''
|}

=== Part Scale ===
{| class="wikitable"
!'''&lt;big&gt;''S(x)''&lt;/big&gt;'''
!'''&lt;big&gt;''=''&lt;/big&gt;'''
!'''&lt;big&gt;''Scale of part''&lt;/big&gt;'''
!'''&lt;big&gt;''Reference''&lt;/big&gt;'''
!&lt;big&gt;'''''Stack'''''&lt;/big&gt;
|-
|'''s1'''
|'''='''
|'''One Stack'''
|'''none'''
|'''1x1'''
|-
|'''s2'''
|'''='''
|'''One Stack that contains two of S1'''
|'''Short'''
|'''1x2'''
|-
|'''s3'''
|'''='''
|'''One stack that contains two of S2'''
|'''none'''
|'''1x4'''
|-
|'''s4'''
|'''='''
|'''One stack that contains two of S3'''
|'''Long'''
|'''1x8'''
|}

= Stock KSP2 Part Sizes and Modded Sizes =
Here are the Charts for the Sizes you'll have to follow when modeling.

Formula behind the design language of parts:      Height + ('''Fake''') Margin = Bevel [Amount to Bevel]

=== Stock Parts ===
{| class="wikitable"
!''&lt;big&gt;'''Size'''&lt;/big&gt;''
!&lt;big&gt;'''''Width'''''&lt;/big&gt;
!&lt;big&gt;'''''Height'''''&lt;/big&gt;
!'''&lt;big&gt;''Margin''&lt;/big&gt;'''
!&lt;big&gt;'''''Bevel'''''&lt;/big&gt;
!&lt;big&gt;'''''Faces'''''&lt;/big&gt;
!
|-
|'''XS'''
|'''0.625m'''
|'''23.4375cm'''
|'''+ 5cm'''
|'''[0.025]'''
|'''12'''
|
|-
|'''SM'''
|'''1.25m'''
|'''46.875cm'''
|'''+ 5cm'''
|'''[0.025]'''
|'''24'''
|
|-
|'''MD'''
|'''2.5m'''
|'''0.9375m'''
|'''+ 0.05m'''
|'''[0.025]'''
|'''36'''
|
|-
|'''LG'''
|'''3.75m'''
|'''1.875m'''
|'''+ 0.1m'''
|'''[0.03]'''
|'''48'''
|
|-
|'''XL'''
|'''5m'''
|'''1.875m'''
|'''+ 0.1m'''
|'''[0.05]'''
|'''48'''
|
|-
|'''XXL'''
|'''10m'''
|'''10m Ball'''
|
|
|'''60'''
|
|}
So what does '''Fake''' Margin mean? Well it's basically the point where the two objects connect and clip into each others geometry making a seal. Those parts don't have collisions. It can also be referred to as wiggle room or a light bleeding seal. The real height is what’s visible and also what is measured.

==== Example of Fake and Real Height: ====
[[File:Pasted image 1.png|left|1000x1000px|frameless]]















==== '''Example of Visible Height:''' ====
[[File:Pasted image 0.png|1000x1000px|left|frameless]]






















As you can see. The blue line is where the actual object connects to its Gizmo/Origin and the “fake” height/Margin is inside the other object. So when modelling your object, please work in the volume of the parts real/actual size and when you are done you can increase the volume to the ('''Margin''') amount for the respective size.

As you can see. The blue line is where the actual object connects to its Gizmo/Origin and the “fake” height/Margin is inside the other object. So when modelling your object, please work in the volume of the parts real/actual size and when you are done you can increase the volume to the ('''Margin''') amount for the respective size.

=== Modded/Custom Parts ===
{| class="wikitable"
!''&lt;big&gt;'''Size'''&lt;/big&gt;''
!'''&lt;big&gt;''Width''&lt;/big&gt;'''
!'''&lt;big&gt;''Height''&lt;/big&gt;'''
!'''&lt;big&gt;''Faces''&lt;/big&gt;'''
!
|-
|'''XS-'''
|'''0.3125m'''
|
|
|
|-
|'''XS+'''
|'''0.9375m'''
|
|
|
|-
|'''SM+'''
|'''1.875m'''
|
|
|
|-
|'''MD+'''
|'''3.125m'''
|
|
|
|-
|'''LG+'''
|'''4.375m'''
|
|
|
|}

===Special Sizes===
Other than the ones shown above, there's also some extra sizes added by KSP1 (and ported to KSP2) and by mods. Here's some of them:

(WIP)
{| class="wikitable"
|+
!'''''&lt;big&gt;Label&lt;/big&gt;'''''
!'''''&lt;big&gt;Diameter&lt;/big&gt;'''''
|-
|'''MK2'''
|'''1.25m in the center'''
|-
|'''Mk3'''
|
|}
[[Category:Parts modding]]





''&lt;u&gt;More to come&lt;/u&gt;''

'''''&lt;small&gt;Created by StanWildin&lt;/small&gt;'''''</text>
      <sha1>pg4b0jzth4sxs1rn6uryo0z2ydp62g1</sha1>
    </revision>
    <revision>
      <id>263</id>
      <parentid>262</parentid>
      <timestamp>2023-12-25T14:50:35Z</timestamp>
      <contributor>
        <username>StanWildin</username>
        <id>17</id>
      </contributor>
      <minor/>
      <origin>263</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4425" sha1="j3jdayg056093lx0ib20psfr2z2w6l8" xml:space="preserve">KSP2 brought more life to the sizes presets in KSP1, giving them labels as well as colors for each diameter. Here is some information about them.

This list does not contain all possible sizes as defined by the game, and it also contains modded part sizes. For a list of all the stock game part sizes available to be used in the Core Part Data module and part JSON definitions files, see [[Size Category]].

= '''AssetStudioModGUI''' =
Here's how to understand labels and how to find the right parts. I recommend excluding the reentry mesh when searching for a part or include the category of the part you want to find. Sadly you cant filter two things at the same time so you'll have to look through the whole list. One very good tip is to look for a short name that doesn't have _reentry or _lod1, lod2 in it. That's usually the actual part. Also you can sort the categories so they are together for each medium like texture, sprite, text, animation or mesh etc.

=== Part Size ===
{| class="wikitable"
!'''&lt;big&gt;''(x)V''&lt;/big&gt;'''
!'''&lt;big&gt;''=''&lt;/big&gt;'''
!'''&lt;big&gt;''Size of part''&lt;/big&gt;'''
!'''&lt;big&gt;''Label''&lt;/big&gt;'''
|-
|'''0v'''
|'''='''
|'''Extra Small'''
|'''(XS)'''
|-
|'''1v'''
|'''='''
|'''Small'''
|'''(SM)'''
|-
|'''2v'''
|'''='''
|'''Medium'''
|'''(MD)'''
|-
|'''3v'''
|'''='''
|'''Large'''
|'''(LG)'''
|-
|'''4v'''
|'''='''
|'''Extra Large'''
|'''(XL)'''
|-
|'''5v'''
|'''='''
|'''Extra Extra Large'''
|'''(XXL)'''
|}

=== Part Scale ===
{| class="wikitable"
!'''&lt;big&gt;''S(x)''&lt;/big&gt;'''
!'''&lt;big&gt;''=''&lt;/big&gt;'''
!'''&lt;big&gt;''Scale of part''&lt;/big&gt;'''
!'''&lt;big&gt;''Reference''&lt;/big&gt;'''
!&lt;big&gt;'''''Stack'''''&lt;/big&gt;
|-
|'''s1'''
|'''='''
|'''One Stack'''
|'''none'''
|'''1x1'''
|-
|'''s2'''
|'''='''
|'''One Stack that contains two of S1'''
|'''Short'''
|'''1x2'''
|-
|'''s3'''
|'''='''
|'''One stack that contains two of S2'''
|'''none'''
|'''1x4'''
|-
|'''s4'''
|'''='''
|'''One stack that contains two of S3'''
|'''Long'''
|'''1x8'''
|}

= Stock KSP2 Part Sizes and Modded Sizes =
Here are the Charts for the Sizes you'll have to follow when modeling.

Formula behind the design language of parts:      Height + ('''Fake''') Margin = Bevel [Amount to Bevel]

=== Stock Parts ===
{| class="wikitable"
!''&lt;big&gt;'''Size'''&lt;/big&gt;''
!&lt;big&gt;'''''Width'''''&lt;/big&gt;
!&lt;big&gt;'''''Height'''''&lt;/big&gt;
!'''&lt;big&gt;''Margin''&lt;/big&gt;'''
!&lt;big&gt;'''''Bevel'''''&lt;/big&gt;
!&lt;big&gt;'''''Faces'''''&lt;/big&gt;
!
|-
|'''XS'''
|'''0.625m'''
|'''23.4375cm'''
|'''+ 5cm'''
|'''[0.025]'''
|'''12'''
|
|-
|'''SM'''
|'''1.25m'''
|'''46.875cm'''
|'''+ 5cm'''
|'''[0.025]'''
|'''24'''
|
|-
|'''MD'''
|'''2.5m'''
|'''0.9375m'''
|'''+ 0.05m'''
|'''[0.025]'''
|'''36'''
|
|-
|'''LG'''
|'''3.75m'''
|'''1.875m'''
|'''+ 0.1m'''
|'''[0.03]'''
|'''48'''
|
|-
|'''XL'''
|'''5m'''
|'''1.875m'''
|'''+ 0.1m'''
|'''[0.05]'''
|'''48'''
|
|-
|'''XXL'''
|'''10m'''
|'''10m Ball'''
|
|
|'''60'''
|
|}
So what does '''Fake''' Margin mean? Well it's basically the point where the two objects connect and clip into each others geometry making a seal. Those parts don't have collisions. It can also be referred to as wiggle room or a light bleeding seal. The real height is what’s visible and also what is measured.

==== Example of Fake and Real Height: ====
[[File:Pasted_image_1.png|frameless|1049x1049px]]

==== '''Example of Visible Height:''' ====
[[File:Pasted_image_0.png|frameless|1049x1049px]]
As you can see. The blue line is where the actual object connects to its Gizmo/Origin and the “fake” height/Margin is inside the other object. So when modelling your object, please work in the volume of the parts real/actual size and when you are done you can increase the volume to the ('''Margin''') amount for the respective size.

=== Modded/Custom Parts ===
{| class="wikitable"
!''&lt;big&gt;'''Size'''&lt;/big&gt;''
!'''&lt;big&gt;''Width''&lt;/big&gt;'''
!'''&lt;big&gt;''Height''&lt;/big&gt;'''
!'''&lt;big&gt;''Faces''&lt;/big&gt;'''
!
|-
|'''XS-'''
|'''0.3125m'''
|
|
|
|-
|'''XS+'''
|'''0.9375m'''
|
|
|
|-
|'''SM+'''
|'''1.875m'''
|
|
|
|-
|'''MD+'''
|'''3.125m'''
|
|
|
|-
|'''LG+'''
|'''4.375m'''
|
|
|
|}

===Special Sizes===
Other than the ones shown above, there's also some extra sizes added by KSP1 (and ported to KSP2) and by mods. Here's some of them:

(WIP)
{| class="wikitable"
|+
!'''''&lt;big&gt;Label&lt;/big&gt;'''''
!'''''&lt;big&gt;Diameter&lt;/big&gt;'''''
|-
|'''MK2'''
|'''1.25m in the center'''
|-
|'''Mk3'''
|
|}
[[Category:Parts modding]]





''&lt;u&gt;More to come&lt;/u&gt;''

'''''&lt;small&gt;Created by StanWildin&lt;/small&gt;'''''</text>
      <sha1>j3jdayg056093lx0ib20psfr2z2w6l8</sha1>
    </revision>
    <revision>
      <id>264</id>
      <parentid>263</parentid>
      <timestamp>2023-12-25T14:51:09Z</timestamp>
      <contributor>
        <username>StanWildin</username>
        <id>17</id>
      </contributor>
      <minor/>
      <origin>264</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4426" sha1="ppvz555wvqrsj5d1hc5p4a4urqhrg5p" xml:space="preserve">KSP2 brought more life to the sizes presets in KSP1, giving them labels as well as colors for each diameter. Here is some information about them.

This list does not contain all possible sizes as defined by the game, and it also contains modded part sizes. For a list of all the stock game part sizes available to be used in the Core Part Data module and part JSON definitions files, see [[Size Category]].

= '''AssetStudioModGUI''' =
Here's how to understand labels and how to find the right parts. I recommend excluding the reentry mesh when searching for a part or include the category of the part you want to find. Sadly you cant filter two things at the same time so you'll have to look through the whole list. One very good tip is to look for a short name that doesn't have _reentry or _lod1, lod2 in it. That's usually the actual part. Also you can sort the categories so they are together for each medium like texture, sprite, text, animation or mesh etc.

=== Part Size ===
{| class="wikitable"
!'''&lt;big&gt;''(x)V''&lt;/big&gt;'''
!'''&lt;big&gt;''=''&lt;/big&gt;'''
!'''&lt;big&gt;''Size of part''&lt;/big&gt;'''
!'''&lt;big&gt;''Label''&lt;/big&gt;'''
|-
|'''0v'''
|'''='''
|'''Extra Small'''
|'''(XS)'''
|-
|'''1v'''
|'''='''
|'''Small'''
|'''(SM)'''
|-
|'''2v'''
|'''='''
|'''Medium'''
|'''(MD)'''
|-
|'''3v'''
|'''='''
|'''Large'''
|'''(LG)'''
|-
|'''4v'''
|'''='''
|'''Extra Large'''
|'''(XL)'''
|-
|'''5v'''
|'''='''
|'''Extra Extra Large'''
|'''(XXL)'''
|}

=== Part Scale ===
{| class="wikitable"
!'''&lt;big&gt;''S(x)''&lt;/big&gt;'''
!'''&lt;big&gt;''=''&lt;/big&gt;'''
!'''&lt;big&gt;''Scale of part''&lt;/big&gt;'''
!'''&lt;big&gt;''Reference''&lt;/big&gt;'''
!&lt;big&gt;'''''Stack'''''&lt;/big&gt;
|-
|'''s1'''
|'''='''
|'''One Stack'''
|'''none'''
|'''1x1'''
|-
|'''s2'''
|'''='''
|'''One Stack that contains two of S1'''
|'''Short'''
|'''1x2'''
|-
|'''s3'''
|'''='''
|'''One stack that contains two of S2'''
|'''none'''
|'''1x4'''
|-
|'''s4'''
|'''='''
|'''One stack that contains two of S3'''
|'''Long'''
|'''1x8'''
|}

= Stock KSP2 Part Sizes and Modded Sizes =
Here are the Charts for the Sizes you'll have to follow when modeling.

Formula behind the design language of parts:      Height + ('''Fake''') Margin = Bevel [Amount to Bevel]

=== Stock Parts ===
{| class="wikitable"
!''&lt;big&gt;'''Size'''&lt;/big&gt;''
!&lt;big&gt;'''''Width'''''&lt;/big&gt;
!&lt;big&gt;'''''Height'''''&lt;/big&gt;
!'''&lt;big&gt;''Margin''&lt;/big&gt;'''
!&lt;big&gt;'''''Bevel'''''&lt;/big&gt;
!&lt;big&gt;'''''Faces'''''&lt;/big&gt;
!
|-
|'''XS'''
|'''0.625m'''
|'''23.4375cm'''
|'''+ 5cm'''
|'''[0.025]'''
|'''12'''
|
|-
|'''SM'''
|'''1.25m'''
|'''46.875cm'''
|'''+ 5cm'''
|'''[0.025]'''
|'''24'''
|
|-
|'''MD'''
|'''2.5m'''
|'''0.9375m'''
|'''+ 0.05m'''
|'''[0.025]'''
|'''36'''
|
|-
|'''LG'''
|'''3.75m'''
|'''1.875m'''
|'''+ 0.1m'''
|'''[0.03]'''
|'''48'''
|
|-
|'''XL'''
|'''5m'''
|'''1.875m'''
|'''+ 0.1m'''
|'''[0.05]'''
|'''48'''
|
|-
|'''XXL'''
|'''10m'''
|'''10m Ball'''
|
|
|'''60'''
|
|}
So what does '''Fake''' Margin mean? Well it's basically the point where the two objects connect and clip into each others geometry making a seal. Those parts don't have collisions. It can also be referred to as wiggle room or a light bleeding seal. The real height is what’s visible and also what is measured.

==== Example of Fake and Real Height: ====
[[File:Pasted_image_1.png|frameless|1049x1049px]]

==== '''Example of Visible Height:''' ====
[[File:Pasted_image_0.png|frameless|1049x1049px]]

As you can see. The blue line is where the actual object connects to its Gizmo/Origin and the “fake” height/Margin is inside the other object. So when modelling your object, please work in the volume of the parts real/actual size and when you are done you can increase the volume to the ('''Margin''') amount for the respective size.

=== Modded/Custom Parts ===
{| class="wikitable"
!''&lt;big&gt;'''Size'''&lt;/big&gt;''
!'''&lt;big&gt;''Width''&lt;/big&gt;'''
!'''&lt;big&gt;''Height''&lt;/big&gt;'''
!'''&lt;big&gt;''Faces''&lt;/big&gt;'''
!
|-
|'''XS-'''
|'''0.3125m'''
|
|
|
|-
|'''XS+'''
|'''0.9375m'''
|
|
|
|-
|'''SM+'''
|'''1.875m'''
|
|
|
|-
|'''MD+'''
|'''3.125m'''
|
|
|
|-
|'''LG+'''
|'''4.375m'''
|
|
|
|}

===Special Sizes===
Other than the ones shown above, there's also some extra sizes added by KSP1 (and ported to KSP2) and by mods. Here's some of them:

(WIP)
{| class="wikitable"
|+
!'''''&lt;big&gt;Label&lt;/big&gt;'''''
!'''''&lt;big&gt;Diameter&lt;/big&gt;'''''
|-
|'''MK2'''
|'''1.25m in the center'''
|-
|'''Mk3'''
|
|}
[[Category:Parts modding]]





''&lt;u&gt;More to come&lt;/u&gt;''

'''''&lt;small&gt;Created by StanWildin&lt;/small&gt;'''''</text>
      <sha1>ppvz555wvqrsj5d1hc5p4a4urqhrg5p</sha1>
    </revision>
    <revision>
      <id>279</id>
      <parentid>264</parentid>
      <timestamp>2024-01-05T15:58:41Z</timestamp>
      <contributor>
        <username>Cheese</username>
        <id>7</id>
      </contributor>
      <comment>XS uses 24 faces, not 12</comment>
      <origin>279</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4420" sha1="snddyjds0iw44anzhl4mz6gggqgod1j" xml:space="preserve">KSP2 brought more life to the sizes presets in KSP1, giving them labels as well as colors for each diameter. Here is some information about them.

This list does not contain all possible sizes as defined by the game, and it also contains modded part sizes. For a list of all the stock game part sizes available to be used in the Core Part Data module and part JSON definitions files, see [[Size Category]].

= '''AssetStudioModGUI''' =
Here's how to understand labels and how to find the right parts. I recommend excluding the reentry mesh when searching for a part or include the category of the part you want to find. Sadly you cant filter two things at the same time so you'll have to look through the whole list. One very good tip is to look for a short name that doesn't have _reentry or _lod1, lod2 in it. That's usually the actual part. Also you can sort the categories so they are together for each medium like texture, sprite, text, animation or mesh etc.

=== Part Size ===
{| class="wikitable"
!'''&lt;big&gt;''(x)V''&lt;/big&gt;'''
!'''&lt;big&gt;''=''&lt;/big&gt;'''
!'''&lt;big&gt;''Size of part''&lt;/big&gt;'''
!'''&lt;big&gt;''Label''&lt;/big&gt;'''
|-
|'''0v'''
|'''='''
|'''Extra Small'''
|'''(XS)'''
|-
|'''1v'''
|'''='''
|'''Small'''
|'''(SM)'''
|-
|'''2v'''
|'''='''
|'''Medium'''
|'''(MD)'''
|-
|'''3v'''
|'''='''
|'''Large'''
|'''(LG)'''
|-
|'''4v'''
|'''='''
|'''Extra Large'''
|'''(XL)'''
|-
|'''5v'''
|'''='''
|'''Extra Extra Large'''
|'''(XXL)'''
|}

=== Part Scale ===
{| class="wikitable"
!'''&lt;big&gt;''S(x)''&lt;/big&gt;'''
!'''&lt;big&gt;''=''&lt;/big&gt;'''
!'''&lt;big&gt;''Scale of part''&lt;/big&gt;'''
!'''&lt;big&gt;''Reference''&lt;/big&gt;'''
!&lt;big&gt;'''''Stack'''''&lt;/big&gt;
|-
|'''s1'''
|'''='''
|'''One Stack'''
|'''none'''
|'''1x1'''
|-
|'''s2'''
|'''='''
|'''One Stack that contains two of S1'''
|'''Short'''
|'''1x2'''
|-
|'''s3'''
|'''='''
|'''One stack that contains two of S2'''
|'''none'''
|'''1x4'''
|-
|'''s4'''
|'''='''
|'''One stack that contains two of S3'''
|'''Long'''
|'''1x8'''
|}

= Stock KSP2 Part Sizes and Modded Sizes =
Here are the Charts for the Sizes you'll have to follow when modeling.

Formula behind the design language of parts:      Height + ('''Fake''') Margin = Bevel [Amount to Bevel]

=== Stock Parts ===
{| class="wikitable"
!''&lt;big&gt;'''Size'''&lt;/big&gt;''
!&lt;big&gt;'''''Width'''''&lt;/big&gt;
!&lt;big&gt;'''''Height'''''&lt;/big&gt;
!'''&lt;big&gt;''Margin''&lt;/big&gt;'''
!&lt;big&gt;'''''Bevel'''''&lt;/big&gt;
!&lt;big&gt;'''''Faces'''''&lt;/big&gt;
!
|-
|'''XS'''
|'''0.625m'''
|'''23.4375cm'''
|'''+ 5cm'''
|'''[0.025]'''
|24
|
|-
|'''SM'''
|'''1.25m'''
|'''46.875cm'''
|'''+ 5cm'''
|'''[0.025]'''
|'''24'''
|
|-
|'''MD'''
|'''2.5m'''
|'''0.9375m'''
|'''+ 0.05m'''
|'''[0.025]'''
|'''36'''
|
|-
|'''LG'''
|'''3.75m'''
|'''1.875m'''
|'''+ 0.1m'''
|'''[0.03]'''
|'''48'''
|
|-
|'''XL'''
|'''5m'''
|'''1.875m'''
|'''+ 0.1m'''
|'''[0.05]'''
|'''48'''
|
|-
|'''XXL'''
|'''10m'''
|'''10m Ball'''
|
|
|'''60'''
|
|}
So what does '''Fake''' Margin mean? Well it's basically the point where the two objects connect and clip into each others geometry making a seal. Those parts don't have collisions. It can also be referred to as wiggle room or a light bleeding seal. The real height is what’s visible and also what is measured.

==== Example of Fake and Real Height: ====
[[File:Pasted_image_1.png|frameless|1049x1049px]]

==== '''Example of Visible Height:''' ====
[[File:Pasted_image_0.png|frameless|1049x1049px]]

As you can see. The blue line is where the actual object connects to its Gizmo/Origin and the “fake” height/Margin is inside the other object. So when modelling your object, please work in the volume of the parts real/actual size and when you are done you can increase the volume to the ('''Margin''') amount for the respective size.

=== Modded/Custom Parts ===
{| class="wikitable"
!''&lt;big&gt;'''Size'''&lt;/big&gt;''
!'''&lt;big&gt;''Width''&lt;/big&gt;'''
!'''&lt;big&gt;''Height''&lt;/big&gt;'''
!'''&lt;big&gt;''Faces''&lt;/big&gt;'''
!
|-
|'''XS-'''
|'''0.3125m'''
|
|
|
|-
|'''XS+'''
|'''0.9375m'''
|
|
|
|-
|'''SM+'''
|'''1.875m'''
|
|
|
|-
|'''MD+'''
|'''3.125m'''
|
|
|
|-
|'''LG+'''
|'''4.375m'''
|
|
|
|}

===Special Sizes===
Other than the ones shown above, there's also some extra sizes added by KSP1 (and ported to KSP2) and by mods. Here's some of them:

(WIP)
{| class="wikitable"
|+
!'''''&lt;big&gt;Label&lt;/big&gt;'''''
!'''''&lt;big&gt;Diameter&lt;/big&gt;'''''
|-
|'''MK2'''
|'''1.25m in the center'''
|-
|'''Mk3'''
|
|}
[[Category:Parts modding]]





''&lt;u&gt;More to come&lt;/u&gt;''

'''''&lt;small&gt;Created by StanWildin&lt;/small&gt;'''''</text>
      <sha1>snddyjds0iw44anzhl4mz6gggqgod1j</sha1>
    </revision>
  </page>
  <page>
    <title>Scenery - Standard (Opaque) shader</title>
    <ns>0</ns>
    <id>23</id>
    <revision>
      <id>56</id>
      <timestamp>2023-05-18T19:42:16Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <comment>Created page with "=== Main shader used for the parts === This (KSP2/Scenery/Standard (Opaque)) is the main shader used for parts and the shader that allows for parts to be repainted. {| class="wikitable sortable mw-collapsible" |+Color !Property !Name !Type !Default Value !Recommended Value !Description |- |'''_Color''' |Color |Color |(1, 1, 1, 1) |(1, 1, 1, 1) |Color multiplier for ''_MainTex'' |- |'''_MainTex''' |Albedo Map |Texture2D |white | |Map used for areas with no color under the..."</comment>
      <origin>56</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2993" sha1="2vbjpsazb0pdcvaklzjp0a23n2gvuv3" xml:space="preserve">=== Main shader used for the parts ===
This (KSP2/Scenery/Standard (Opaque)) is the main shader used for parts and the shader that allows for parts to be repainted.
{| class="wikitable sortable mw-collapsible"
|+Color
!Property
!Name
!Type
!Default Value
!Recommended Value
!Description
|-
|'''_Color'''
|Color
|Color
|(1, 1, 1, 1)
|(1, 1, 1, 1)
|Color multiplier for ''_MainTex''
|-
|'''_MainTex'''
|Albedo Map
|Texture2D
|white
|
|Map used for areas with no color under the _Paint
|-
|'''_MetallicGlossMap'''
|Metallic
|Texture2D
|white
|
|Main map for smoothness/metallic
|-
|'''_Metallic'''
|Metallic/Smoothness Map
|float(0, 1)
|0
|1
|
|-
|'''_GlossMapScale'''
|Smoothness Scale
|float(0, 1)
|1
|1
|Multiplier for smoothness
|-
|'''_MipBias'''
|[https://docs.unity3d.com/ScriptReference/Texture-mipMapBias.html Mip Bias]
|float(0, 1)
|0.8
|0.8
|
|-
|'''_BumpMap'''
|Normal Map
|Texture2D
|bump
|
|Main normal/bump map for the part
|-
|'''_DetailBumpMap'''
|Detail Normal Map
|Texture2D
|bump
|
|tileable extra details
|-
|'''_DetailMask'''
|Detail Mask
|Texture2D
|white
|
|mask for ''_DetailBumpMap''
|-
|'''_DetailBumpScale'''
|Detail Normal Scale
|float(0, 1)
|1
|
|Multiplier for details' bump
|-
|'''_DetailBumpTiling'''
|Detail Normal Tiling
|float(0.01, 10)
|1
|
|
|-
|'''_OcclusionMap'''
|Occlusion Map
|Texture2D
|white
|
|Stock part's dont seem to use this. Occlusion seems to imbeded into ''_MainTex'', ''_MetallicGlossMap'' and ''_PaintMaskGlossMap''
|-
|'''_OcclusionStrength'''
|Strength
|float(0, 1)
|1
|
|Multiplier for ambient occlusion
|-
|'''_EmissionMap'''
|Emission Map
|Texture2D
|white
|
|Map for emission used by engines and generators
|-
|'''_EmissionColor'''
|Emission Color
|
|(0, 0, 0, 1)
|white
|
|-
|'''_UseTimeOfDay'''
|Use Time of Day
|Toggle
|0 (false)
|
|
|-
|'''_TimeOfDayDotMin'''
|Min
|float(-1, 1)
| -0.005
|
|
|-
|'''_TimeOfDayDotMax'''
|Max
|float(-1, 1)
|0.005
|
|
|-
|'''_PaintA'''
|Paint Color A
|Color
|white
|
|Base paint for the part (will be overwritten during runtime)
|-
|'''_PaintB'''
|Paint Color B
|Color
|white
|
|Accent paint for the part (will be overwritten during runtime)
|-
|'''_PaintMaskGlossMap'''
|Paint Mask
|Texture2D
|white
|
|This is a special texture where:
'''alpha channel''' dictates the smoothness
'''red channel''' dictates the accent
'''green channel''' dictates the base (this also masks the accent)
'''blue channel''' dictates where it should show the original texture
|-
|'''_PaintGlossMapScale'''
|Paint Smoothness Scale
|float(0, 1)
|1
|1
|Multiplier for smoothness on painted areas
|-
|'''_SmoothnessOverride'''
|Use PaintMask for Paint Smoothness
|Toggle
|0 (false)
|1 (true)
|when true, ''_PaintMaskGlossMap'' will be used for mettalic (on painted areas) instead of ''_MetallicGlossMap''
|-
|'''_RimFalloff'''
|_RimFalloff
|float(0.01, 5)
|0.1
|0.1
|
|-
|'''_RimColor'''
|_RimColor
|Color
|transparent
|
|
|-
|'''_Culling'''
|Cull Mode
|float
|2
|2
|
|-
|'''_Offset'''
|Depth Offset
|float(-1, 1)
|0
|0
|
|}</text>
      <sha1>2vbjpsazb0pdcvaklzjp0a23n2gvuv3</sha1>
    </revision>
    <revision>
      <id>57</id>
      <parentid>56</parentid>
      <timestamp>2023-05-18T19:42:49Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <minor/>
      <origin>57</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2998" sha1="9rmuxz4tayvlqc19sazelu7igyf76n4" xml:space="preserve">=== Main shader used for the parts ===
This (KSP2/Scenery/Standard (Opaque)) is the main shader used for parts and the shader that allows for parts to be repainted.
{| class="wikitable sortable mw-collapsible"
|+Color
!Property
!Name
!Type
!Default Value
!Recommended Value
!Description
|-
|'''_Color'''
|Color
|Color
|(1, 1, 1, 1)
|(1, 1, 1, 1)
|Color multiplier for ''_MainTex''
|-
|'''_MainTex'''
|Albedo Map
|Texture2D
|white
|
|Map used for areas with no color under the _Paint
|-
|'''_MetallicGlossMap'''
|Metallic
|Texture2D
|white
|
|Main map for smoothness/metallic
|-
|'''_Metallic'''
|Metallic/Smoothness Map
|float(0, 1)
|0
|1
|
|-
|'''_GlossMapScale'''
|Smoothness Scale
|float(0, 1)
|1
|1
|Multiplier for smoothness
|-
|'''_MipBias'''
|[https://docs.unity3d.com/ScriptReference/Texture-mipMapBias.html Mip Bias]
|float(0, 1)
|0.8
|0.8
|
|-
|'''_BumpMap'''
|Normal Map
|Texture2D
|bump
|
|Main normal/bump map for the part
|-
|'''_DetailBumpMap'''
|Detail Normal Map
|Texture2D
|bump
|
|tileable extra details
|-
|'''_DetailMask'''
|Detail Mask
|Texture2D
|white
|
|mask for ''_DetailBumpMap''
|-
|'''_DetailBumpScale'''
|Detail Normal Scale
|float(0, 1)
|1
|
|Multiplier for details' bump
|-
|'''_DetailBumpTiling'''
|Detail Normal Tiling
|float(0.01, 10)
|1
|
|
|-
|'''_OcclusionMap'''
|Occlusion Map
|Texture2D
|white
|
|Stock part's dont seem to use this. Occlusion seems to imbeded into ''_MainTex'', ''_MetallicGlossMap'' and ''_PaintMaskGlossMap''
|-
|'''_OcclusionStrength'''
|Strength
|float(0, 1)
|1
|
|Multiplier for ambient occlusion
|-
|'''_EmissionMap'''
|Emission Map
|Texture2D
|white
|
|Map for emission used by engines and generators
|-
|'''_EmissionColor'''
|Emission Color
|Color
|(0, 0, 0, 1)
|white
|
|-
|'''_UseTimeOfDay'''
|Use Time of Day
|Toggle
|0 (false)
|
|
|-
|'''_TimeOfDayDotMin'''
|Min
|float(-1, 1)
| -0.005
|
|
|-
|'''_TimeOfDayDotMax'''
|Max
|float(-1, 1)
|0.005
|
|
|-
|'''_PaintA'''
|Paint Color A
|Color
|white
|
|Base paint for the part (will be overwritten during runtime)
|-
|'''_PaintB'''
|Paint Color B
|Color
|white
|
|Accent paint for the part (will be overwritten during runtime)
|-
|'''_PaintMaskGlossMap'''
|Paint Mask
|Texture2D
|white
|
|This is a special texture where:
'''alpha channel''' dictates the smoothness
'''red channel''' dictates the accent
'''green channel''' dictates the base (this also masks the accent)
'''blue channel''' dictates where it should show the original texture
|-
|'''_PaintGlossMapScale'''
|Paint Smoothness Scale
|float(0, 1)
|1
|1
|Multiplier for smoothness on painted areas
|-
|'''_SmoothnessOverride'''
|Use PaintMask for Paint Smoothness
|Toggle
|0 (false)
|1 (true)
|when true, ''_PaintMaskGlossMap'' will be used for mettalic (on painted areas) instead of ''_MetallicGlossMap''
|-
|'''_RimFalloff'''
|_RimFalloff
|float(0.01, 5)
|0.1
|0.1
|
|-
|'''_RimColor'''
|_RimColor
|Color
|transparent
|
|
|-
|'''_Culling'''
|Cull Mode
|float
|2
|2
|
|-
|'''_Offset'''
|Depth Offset
|float(-1, 1)
|0
|0
|
|}</text>
      <sha1>9rmuxz4tayvlqc19sazelu7igyf76n4</sha1>
    </revision>
    <revision>
      <id>58</id>
      <parentid>57</parentid>
      <timestamp>2023-05-18T19:43:38Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <origin>58</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3003" sha1="jfui7eegxtuf9ugeg4mr0c667c51kju" xml:space="preserve">=== Main shader used for the parts ===
This (KSP2/Scenery/Standard (Opaque)) is the main shader used for parts and the shader that allows for parts to be repainted.
{| class="wikitable sortable mw-collapsible"
|+Properties
!Property
!Name
!Type
!Default Value
!Recommended Value
!Description
|-
|'''_Color'''
|Color
|Color
|(1, 1, 1, 1)
|(1, 1, 1, 1)
|Color multiplier for ''_MainTex''
|-
|'''_MainTex'''
|Albedo Map
|Texture2D
|white
|
|Map used for areas with no color under the _Paint
|-
|'''_MetallicGlossMap'''
|Metallic
|Texture2D
|white
|
|Main map for smoothness/metallic
|-
|'''_Metallic'''
|Metallic/Smoothness Map
|float(0, 1)
|0
|1
|
|-
|'''_GlossMapScale'''
|Smoothness Scale
|float(0, 1)
|1
|1
|Multiplier for smoothness
|-
|'''_MipBias'''
|[https://docs.unity3d.com/ScriptReference/Texture-mipMapBias.html Mip Bias]
|float(0, 1)
|0.8
|0.8
|
|-
|'''_BumpMap'''
|Normal Map
|Texture2D
|bump
|
|Main normal/bump map for the part
|-
|'''_DetailBumpMap'''
|Detail Normal Map
|Texture2D
|bump
|
|tileable extra details
|-
|'''_DetailMask'''
|Detail Mask
|Texture2D
|white
|
|mask for ''_DetailBumpMap''
|-
|'''_DetailBumpScale'''
|Detail Normal Scale
|float(0, 1)
|1
|
|Multiplier for details' bump
|-
|'''_DetailBumpTiling'''
|Detail Normal Tiling
|float(0.01, 10)
|1
|
|
|-
|'''_OcclusionMap'''
|Occlusion Map
|Texture2D
|white
|
|Stock part's dont seem to use this. Occlusion seems to imbeded into ''_MainTex'', ''_MetallicGlossMap'' and ''_PaintMaskGlossMap''
|-
|'''_OcclusionStrength'''
|Strength
|float(0, 1)
|1
|
|Multiplier for ambient occlusion
|-
|'''_EmissionMap'''
|Emission Map
|Texture2D
|white
|
|Map for emission used by engines and generators
|-
|'''_EmissionColor'''
|Emission Color
|Color
|(0, 0, 0, 1)
|white
|
|-
|'''_UseTimeOfDay'''
|Use Time of Day
|Toggle
|0 (false)
|
|
|-
|'''_TimeOfDayDotMin'''
|Min
|float(-1, 1)
| -0.005
|
|
|-
|'''_TimeOfDayDotMax'''
|Max
|float(-1, 1)
|0.005
|
|
|-
|'''_PaintA'''
|Paint Color A
|Color
|white
|
|Base paint for the part (will be overwritten during runtime)
|-
|'''_PaintB'''
|Paint Color B
|Color
|white
|
|Accent paint for the part (will be overwritten during runtime)
|-
|'''_PaintMaskGlossMap'''
|Paint Mask
|Texture2D
|white
|
|This is a special texture where:
'''alpha channel''' dictates the smoothness
'''red channel''' dictates the accent
'''green channel''' dictates the base (this also masks the accent)
'''blue channel''' dictates where it should show the original texture
|-
|'''_PaintGlossMapScale'''
|Paint Smoothness Scale
|float(0, 1)
|1
|1
|Multiplier for smoothness on painted areas
|-
|'''_SmoothnessOverride'''
|Use PaintMask for Paint Smoothness
|Toggle
|0 (false)
|1 (true)
|when true, ''_PaintMaskGlossMap'' will be used for mettalic (on painted areas) instead of ''_MetallicGlossMap''
|-
|'''_RimFalloff'''
|_RimFalloff
|float(0.01, 5)
|0.1
|0.1
|
|-
|'''_RimColor'''
|_RimColor
|Color
|transparent
|
|
|-
|'''_Culling'''
|Cull Mode
|float
|2
|2
|
|-
|'''_Offset'''
|Depth Offset
|float(-1, 1)
|0
|0
|
|}</text>
      <sha1>jfui7eegxtuf9ugeg4mr0c667c51kju</sha1>
    </revision>
    <revision>
      <id>59</id>
      <parentid>58</parentid>
      <timestamp>2023-05-18T19:44:23Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <minor/>
      <comment>bullet list for _PaintMaskGlossMap description</comment>
      <origin>59</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3015" sha1="3hsh17f9kqbuy5t696zkh3tqx1tzm75" xml:space="preserve">=== Main shader used for the parts ===
This (KSP2/Scenery/Standard (Opaque)) is the main shader used for parts and the shader that allows for parts to be repainted.
{| class="wikitable sortable mw-collapsible"
|+Properties
!Property
!Name
!Type
!Default Value
!Recommended Value
!Description
|-
|'''_Color'''
|Color
|Color
|(1, 1, 1, 1)
|(1, 1, 1, 1)
|Color multiplier for ''_MainTex''
|-
|'''_MainTex'''
|Albedo Map
|Texture2D
|white
|
|Map used for areas with no color under the _Paint
|-
|'''_MetallicGlossMap'''
|Metallic
|Texture2D
|white
|
|Main map for smoothness/metallic
|-
|'''_Metallic'''
|Metallic/Smoothness Map
|float(0, 1)
|0
|1
|
|-
|'''_GlossMapScale'''
|Smoothness Scale
|float(0, 1)
|1
|1
|Multiplier for smoothness
|-
|'''_MipBias'''
|[https://docs.unity3d.com/ScriptReference/Texture-mipMapBias.html Mip Bias]
|float(0, 1)
|0.8
|0.8
|
|-
|'''_BumpMap'''
|Normal Map
|Texture2D
|bump
|
|Main normal/bump map for the part
|-
|'''_DetailBumpMap'''
|Detail Normal Map
|Texture2D
|bump
|
|tileable extra details
|-
|'''_DetailMask'''
|Detail Mask
|Texture2D
|white
|
|mask for ''_DetailBumpMap''
|-
|'''_DetailBumpScale'''
|Detail Normal Scale
|float(0, 1)
|1
|
|Multiplier for details' bump
|-
|'''_DetailBumpTiling'''
|Detail Normal Tiling
|float(0.01, 10)
|1
|
|
|-
|'''_OcclusionMap'''
|Occlusion Map
|Texture2D
|white
|
|Stock part's dont seem to use this. Occlusion seems to imbeded into ''_MainTex'', ''_MetallicGlossMap'' and ''_PaintMaskGlossMap''
|-
|'''_OcclusionStrength'''
|Strength
|float(0, 1)
|1
|
|Multiplier for ambient occlusion
|-
|'''_EmissionMap'''
|Emission Map
|Texture2D
|white
|
|Map for emission used by engines and generators
|-
|'''_EmissionColor'''
|Emission Color
|Color
|(0, 0, 0, 1)
|white
|
|-
|'''_UseTimeOfDay'''
|Use Time of Day
|Toggle
|0 (false)
|
|
|-
|'''_TimeOfDayDotMin'''
|Min
|float(-1, 1)
| -0.005
|
|
|-
|'''_TimeOfDayDotMax'''
|Max
|float(-1, 1)
|0.005
|
|
|-
|'''_PaintA'''
|Paint Color A
|Color
|white
|
|Base paint for the part (will be overwritten during runtime)
|-
|'''_PaintB'''
|Paint Color B
|Color
|white
|
|Accent paint for the part (will be overwritten during runtime)
|-
|'''_PaintMaskGlossMap'''
|Paint Mask
|Texture2D
|white
|
|This is a special texture where:

* '''alpha channel''' dictates the smoothness

* '''red channel''' dictates the accent

* '''green channel''' dictates the base (this also masks the accent)

* '''blue channel''' dictates where it should show the original texture
|-
|'''_PaintGlossMapScale'''
|Paint Smoothness Scale
|float(0, 1)
|1
|1
|Multiplier for smoothness on painted areas
|-
|'''_SmoothnessOverride'''
|Use PaintMask for Paint Smoothness
|Toggle
|0 (false)
|1 (true)
|when true, ''_PaintMaskGlossMap'' will be used for mettalic (on painted areas) instead of ''_MetallicGlossMap''
|-
|'''_RimFalloff'''
|_RimFalloff
|float(0.01, 5)
|0.1
|0.1
|
|-
|'''_RimColor'''
|_RimColor
|Color
|transparent
|
|
|-
|'''_Culling'''
|Cull Mode
|float
|2
|2
|
|-
|'''_Offset'''
|Depth Offset
|float(-1, 1)
|0
|0
|
|}</text>
      <sha1>3hsh17f9kqbuy5t696zkh3tqx1tzm75</sha1>
    </revision>
    <revision>
      <id>61</id>
      <parentid>59</parentid>
      <timestamp>2023-05-21T12:42:35Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Added category</comment>
      <origin>61</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3042" sha1="8j2g3ho7xex0la5szufsdh1gw7k35e7" xml:space="preserve">=== Main shader used for the parts ===
This (KSP2/Scenery/Standard (Opaque)) is the main shader used for parts and the shader that allows for parts to be repainted.
{| class="wikitable sortable mw-collapsible"
|+Properties
!Property
!Name
!Type
!Default Value
!Recommended Value
!Description
|-
|'''_Color'''
|Color
|Color
|(1, 1, 1, 1)
|(1, 1, 1, 1)
|Color multiplier for ''_MainTex''
|-
|'''_MainTex'''
|Albedo Map
|Texture2D
|white
|
|Map used for areas with no color under the _Paint
|-
|'''_MetallicGlossMap'''
|Metallic
|Texture2D
|white
|
|Main map for smoothness/metallic
|-
|'''_Metallic'''
|Metallic/Smoothness Map
|float(0, 1)
|0
|1
|
|-
|'''_GlossMapScale'''
|Smoothness Scale
|float(0, 1)
|1
|1
|Multiplier for smoothness
|-
|'''_MipBias'''
|[https://docs.unity3d.com/ScriptReference/Texture-mipMapBias.html Mip Bias]
|float(0, 1)
|0.8
|0.8
|
|-
|'''_BumpMap'''
|Normal Map
|Texture2D
|bump
|
|Main normal/bump map for the part
|-
|'''_DetailBumpMap'''
|Detail Normal Map
|Texture2D
|bump
|
|tileable extra details
|-
|'''_DetailMask'''
|Detail Mask
|Texture2D
|white
|
|mask for ''_DetailBumpMap''
|-
|'''_DetailBumpScale'''
|Detail Normal Scale
|float(0, 1)
|1
|
|Multiplier for details' bump
|-
|'''_DetailBumpTiling'''
|Detail Normal Tiling
|float(0.01, 10)
|1
|
|
|-
|'''_OcclusionMap'''
|Occlusion Map
|Texture2D
|white
|
|Stock part's dont seem to use this. Occlusion seems to imbeded into ''_MainTex'', ''_MetallicGlossMap'' and ''_PaintMaskGlossMap''
|-
|'''_OcclusionStrength'''
|Strength
|float(0, 1)
|1
|
|Multiplier for ambient occlusion
|-
|'''_EmissionMap'''
|Emission Map
|Texture2D
|white
|
|Map for emission used by engines and generators
|-
|'''_EmissionColor'''
|Emission Color
|Color
|(0, 0, 0, 1)
|white
|
|-
|'''_UseTimeOfDay'''
|Use Time of Day
|Toggle
|0 (false)
|
|
|-
|'''_TimeOfDayDotMin'''
|Min
|float(-1, 1)
| -0.005
|
|
|-
|'''_TimeOfDayDotMax'''
|Max
|float(-1, 1)
|0.005
|
|
|-
|'''_PaintA'''
|Paint Color A
|Color
|white
|
|Base paint for the part (will be overwritten during runtime)
|-
|'''_PaintB'''
|Paint Color B
|Color
|white
|
|Accent paint for the part (will be overwritten during runtime)
|-
|'''_PaintMaskGlossMap'''
|Paint Mask
|Texture2D
|white
|
|This is a special texture where:

* '''alpha channel''' dictates the smoothness

* '''red channel''' dictates the accent

* '''green channel''' dictates the base (this also masks the accent)

* '''blue channel''' dictates where it should show the original texture
|-
|'''_PaintGlossMapScale'''
|Paint Smoothness Scale
|float(0, 1)
|1
|1
|Multiplier for smoothness on painted areas
|-
|'''_SmoothnessOverride'''
|Use PaintMask for Paint Smoothness
|Toggle
|0 (false)
|1 (true)
|when true, ''_PaintMaskGlossMap'' will be used for mettalic (on painted areas) instead of ''_MetallicGlossMap''
|-
|'''_RimFalloff'''
|_RimFalloff
|float(0.01, 5)
|0.1
|0.1
|
|-
|'''_RimColor'''
|_RimColor
|Color
|transparent
|
|
|-
|'''_Culling'''
|Cull Mode
|float
|2
|2
|
|-
|'''_Offset'''
|Depth Offset
|float(-1, 1)
|0
|0
|
|}
[[Category:Parts modding]]</text>
      <sha1>8j2g3ho7xex0la5szufsdh1gw7k35e7</sha1>
    </revision>
    <revision>
      <id>136</id>
      <parentid>61</parentid>
      <timestamp>2023-08-03T00:07:10Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <minor/>
      <comment>Munix moved page [[Scenery - Standard (Opaque)]] to [[Scenery - Standard (Opaque) shader]]: Make the name more clear</comment>
      <origin>61</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3042" sha1="8j2g3ho7xex0la5szufsdh1gw7k35e7" xml:space="preserve">=== Main shader used for the parts ===
This (KSP2/Scenery/Standard (Opaque)) is the main shader used for parts and the shader that allows for parts to be repainted.
{| class="wikitable sortable mw-collapsible"
|+Properties
!Property
!Name
!Type
!Default Value
!Recommended Value
!Description
|-
|'''_Color'''
|Color
|Color
|(1, 1, 1, 1)
|(1, 1, 1, 1)
|Color multiplier for ''_MainTex''
|-
|'''_MainTex'''
|Albedo Map
|Texture2D
|white
|
|Map used for areas with no color under the _Paint
|-
|'''_MetallicGlossMap'''
|Metallic
|Texture2D
|white
|
|Main map for smoothness/metallic
|-
|'''_Metallic'''
|Metallic/Smoothness Map
|float(0, 1)
|0
|1
|
|-
|'''_GlossMapScale'''
|Smoothness Scale
|float(0, 1)
|1
|1
|Multiplier for smoothness
|-
|'''_MipBias'''
|[https://docs.unity3d.com/ScriptReference/Texture-mipMapBias.html Mip Bias]
|float(0, 1)
|0.8
|0.8
|
|-
|'''_BumpMap'''
|Normal Map
|Texture2D
|bump
|
|Main normal/bump map for the part
|-
|'''_DetailBumpMap'''
|Detail Normal Map
|Texture2D
|bump
|
|tileable extra details
|-
|'''_DetailMask'''
|Detail Mask
|Texture2D
|white
|
|mask for ''_DetailBumpMap''
|-
|'''_DetailBumpScale'''
|Detail Normal Scale
|float(0, 1)
|1
|
|Multiplier for details' bump
|-
|'''_DetailBumpTiling'''
|Detail Normal Tiling
|float(0.01, 10)
|1
|
|
|-
|'''_OcclusionMap'''
|Occlusion Map
|Texture2D
|white
|
|Stock part's dont seem to use this. Occlusion seems to imbeded into ''_MainTex'', ''_MetallicGlossMap'' and ''_PaintMaskGlossMap''
|-
|'''_OcclusionStrength'''
|Strength
|float(0, 1)
|1
|
|Multiplier for ambient occlusion
|-
|'''_EmissionMap'''
|Emission Map
|Texture2D
|white
|
|Map for emission used by engines and generators
|-
|'''_EmissionColor'''
|Emission Color
|Color
|(0, 0, 0, 1)
|white
|
|-
|'''_UseTimeOfDay'''
|Use Time of Day
|Toggle
|0 (false)
|
|
|-
|'''_TimeOfDayDotMin'''
|Min
|float(-1, 1)
| -0.005
|
|
|-
|'''_TimeOfDayDotMax'''
|Max
|float(-1, 1)
|0.005
|
|
|-
|'''_PaintA'''
|Paint Color A
|Color
|white
|
|Base paint for the part (will be overwritten during runtime)
|-
|'''_PaintB'''
|Paint Color B
|Color
|white
|
|Accent paint for the part (will be overwritten during runtime)
|-
|'''_PaintMaskGlossMap'''
|Paint Mask
|Texture2D
|white
|
|This is a special texture where:

* '''alpha channel''' dictates the smoothness

* '''red channel''' dictates the accent

* '''green channel''' dictates the base (this also masks the accent)

* '''blue channel''' dictates where it should show the original texture
|-
|'''_PaintGlossMapScale'''
|Paint Smoothness Scale
|float(0, 1)
|1
|1
|Multiplier for smoothness on painted areas
|-
|'''_SmoothnessOverride'''
|Use PaintMask for Paint Smoothness
|Toggle
|0 (false)
|1 (true)
|when true, ''_PaintMaskGlossMap'' will be used for mettalic (on painted areas) instead of ''_MetallicGlossMap''
|-
|'''_RimFalloff'''
|_RimFalloff
|float(0.01, 5)
|0.1
|0.1
|
|-
|'''_RimColor'''
|_RimColor
|Color
|transparent
|
|
|-
|'''_Culling'''
|Cull Mode
|float
|2
|2
|
|-
|'''_Offset'''
|Depth Offset
|float(-1, 1)
|0
|0
|
|}
[[Category:Parts modding]]</text>
      <sha1>8j2g3ho7xex0la5szufsdh1gw7k35e7</sha1>
    </revision>
    <revision>
      <id>138</id>
      <parentid>136</parentid>
      <timestamp>2023-08-03T00:07:42Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>138</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3042" sha1="n7360kh91ulj1rxlp56ga2oiae7er6r" xml:space="preserve">[[Category:Part textures]]
=== Main shader used for the parts ===
This (KSP2/Scenery/Standard (Opaque)) is the main shader used for parts and the shader that allows for parts to be repainted.
{| class="wikitable sortable mw-collapsible"
|+Properties
!Property
!Name
!Type
!Default Value
!Recommended Value
!Description
|-
|'''_Color'''
|Color
|Color
|(1, 1, 1, 1)
|(1, 1, 1, 1)
|Color multiplier for ''_MainTex''
|-
|'''_MainTex'''
|Albedo Map
|Texture2D
|white
|
|Map used for areas with no color under the _Paint
|-
|'''_MetallicGlossMap'''
|Metallic
|Texture2D
|white
|
|Main map for smoothness/metallic
|-
|'''_Metallic'''
|Metallic/Smoothness Map
|float(0, 1)
|0
|1
|
|-
|'''_GlossMapScale'''
|Smoothness Scale
|float(0, 1)
|1
|1
|Multiplier for smoothness
|-
|'''_MipBias'''
|[https://docs.unity3d.com/ScriptReference/Texture-mipMapBias.html Mip Bias]
|float(0, 1)
|0.8
|0.8
|
|-
|'''_BumpMap'''
|Normal Map
|Texture2D
|bump
|
|Main normal/bump map for the part
|-
|'''_DetailBumpMap'''
|Detail Normal Map
|Texture2D
|bump
|
|tileable extra details
|-
|'''_DetailMask'''
|Detail Mask
|Texture2D
|white
|
|mask for ''_DetailBumpMap''
|-
|'''_DetailBumpScale'''
|Detail Normal Scale
|float(0, 1)
|1
|
|Multiplier for details' bump
|-
|'''_DetailBumpTiling'''
|Detail Normal Tiling
|float(0.01, 10)
|1
|
|
|-
|'''_OcclusionMap'''
|Occlusion Map
|Texture2D
|white
|
|Stock part's dont seem to use this. Occlusion seems to imbeded into ''_MainTex'', ''_MetallicGlossMap'' and ''_PaintMaskGlossMap''
|-
|'''_OcclusionStrength'''
|Strength
|float(0, 1)
|1
|
|Multiplier for ambient occlusion
|-
|'''_EmissionMap'''
|Emission Map
|Texture2D
|white
|
|Map for emission used by engines and generators
|-
|'''_EmissionColor'''
|Emission Color
|Color
|(0, 0, 0, 1)
|white
|
|-
|'''_UseTimeOfDay'''
|Use Time of Day
|Toggle
|0 (false)
|
|
|-
|'''_TimeOfDayDotMin'''
|Min
|float(-1, 1)
| -0.005
|
|
|-
|'''_TimeOfDayDotMax'''
|Max
|float(-1, 1)
|0.005
|
|
|-
|'''_PaintA'''
|Paint Color A
|Color
|white
|
|Base paint for the part (will be overwritten during runtime)
|-
|'''_PaintB'''
|Paint Color B
|Color
|white
|
|Accent paint for the part (will be overwritten during runtime)
|-
|'''_PaintMaskGlossMap'''
|Paint Mask
|Texture2D
|white
|
|This is a special texture where:

* '''alpha channel''' dictates the smoothness

* '''red channel''' dictates the accent

* '''green channel''' dictates the base (this also masks the accent)

* '''blue channel''' dictates where it should show the original texture
|-
|'''_PaintGlossMapScale'''
|Paint Smoothness Scale
|float(0, 1)
|1
|1
|Multiplier for smoothness on painted areas
|-
|'''_SmoothnessOverride'''
|Use PaintMask for Paint Smoothness
|Toggle
|0 (false)
|1 (true)
|when true, ''_PaintMaskGlossMap'' will be used for mettalic (on painted areas) instead of ''_MetallicGlossMap''
|-
|'''_RimFalloff'''
|_RimFalloff
|float(0.01, 5)
|0.1
|0.1
|
|-
|'''_RimColor'''
|_RimColor
|Color
|transparent
|
|
|-
|'''_Culling'''
|Cull Mode
|float
|2
|2
|
|-
|'''_Offset'''
|Depth Offset
|float(-1, 1)
|0
|0
|
|}</text>
      <sha1>n7360kh91ulj1rxlp56ga2oiae7er6r</sha1>
    </revision>
  </page>
  <page>
    <title>PartsProvider</title>
    <ns>0</ns>
    <id>24</id>
    <revision>
      <id>62</id>
      <timestamp>2023-05-21T22:48:50Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <comment>Created page with "== KSP.Game.'''PartProvider''' ==  === '''GameManager.Instance.Game.Parts''' === This class is the main provider for anything related to parts definitions and data.  ==== AddPartData(''KSP.Sim.Definitions.''PartCore jsonData, System.string rawJson) ==== This method is used to add parts to the '''PartProvider'''. It asks for a PartCore and a raw json (from the same part core provided).  * '''jsonData -''' This argument requires a part core which is a class defining ''almo..."</comment>
      <origin>62</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="941" sha1="crrac1yuonrdcxs7vgqvz2en6mgg3rr" xml:space="preserve">== KSP.Game.'''PartProvider''' ==

=== '''GameManager.Instance.Game.Parts''' ===
This class is the main provider for anything related to parts definitions and data.

==== AddPartData(''KSP.Sim.Definitions.''PartCore jsonData, System.string rawJson) ====
This method is used to add parts to the '''PartProvider'''. It asks for a PartCore and a raw json (from the same part core provided).

* '''jsonData -''' This argument requires a part core which is a class defining ''almost'' all the part's data. Including all modules.
* '''rawJson''' '''-''' This argument requires a json equivalent to the '''jsonData''' provided. It should match exactly what you provide on the first argument.

==== Tips and Tricks: ====

* You can either use '''[https://docs.unity3d.com/ScriptReference/JsonUtility.ToJson.html JsonUtility]''' or '''[https://www.newtonsoft.com/json/help/html/SerializeObject.htm newtonsoft's Json.Net]''' to get your '''rawJson'''.</text>
      <sha1>crrac1yuonrdcxs7vgqvz2en6mgg3rr</sha1>
    </revision>
    <revision>
      <id>63</id>
      <parentid>62</parentid>
      <timestamp>2023-05-21T22:50:16Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <minor/>
      <comment>/* GameManager.Instance.Game.Parts */</comment>
      <origin>63</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="957" sha1="3z50qu8tz4z7mkst10qejky7zn8r5d6" xml:space="preserve">== KSP.Game.'''PartProvider''' ==
This class is the main provider for anything related to parts definitions and data.

==== AddPartData(''KSP.Sim.Definitions.''PartCore jsonData, System.string rawJson) ====
This method is used to add parts to the '''PartProvider'''. It asks for a PartCore and a raw json (from the same part core provided).

* '''jsonData -''' This argument requires a part core which is a class defining ''almost'' all the part's data. Including all modules.
* '''rawJson''' '''-''' This argument requires a json equivalent to the '''jsonData''' provided. It should match exactly what you provide on the first argument.

==== Tips and Tricks: ====

* You can either use '''[https://docs.unity3d.com/ScriptReference/JsonUtility.ToJson.html JsonUtility]''' or '''[https://www.newtonsoft.com/json/help/html/SerializeObject.htm newtonsoft's Json.Net]''' to get your '''rawJson'''.
* You can access it via '''GameManager.Instance.Game.Parts'''.</text>
      <sha1>3z50qu8tz4z7mkst10qejky7zn8r5d6</sha1>
    </revision>
    <revision>
      <id>64</id>
      <parentid>63</parentid>
      <timestamp>2023-05-21T22:51:00Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <minor/>
      <comment>Added category</comment>
      <origin>64</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="984" sha1="a5jysiw5tpim8bxqqibszjafa05xcj3" xml:space="preserve">== KSP.Game.'''PartProvider''' ==
This class is the main provider for anything related to parts definitions and data.

==== AddPartData(''KSP.Sim.Definitions.''PartCore jsonData, System.string rawJson) ====
This method is used to add parts to the '''PartProvider'''. It asks for a PartCore and a raw json (from the same part core provided).

* '''jsonData -''' This argument requires a part core which is a class defining ''almost'' all the part's data. Including all modules.
* '''rawJson''' '''-''' This argument requires a json equivalent to the '''jsonData''' provided. It should match exactly what you provide on the first argument.

==== Tips and Tricks: ====

* You can either use '''[https://docs.unity3d.com/ScriptReference/JsonUtility.ToJson.html JsonUtility]''' or '''[https://www.newtonsoft.com/json/help/html/SerializeObject.htm newtonsoft's Json.Net]''' to get your '''rawJson'''.
* You can access it via '''GameManager.Instance.Game.Parts'''.
[[Category:Parts modding]]</text>
      <sha1>a5jysiw5tpim8bxqqibszjafa05xcj3</sha1>
    </revision>
    <revision>
      <id>144</id>
      <parentid>64</parentid>
      <timestamp>2023-08-03T00:11:49Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>144</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1004" sha1="adeqe7fdo92bt01axt8w4k8fhvfwxqw" xml:space="preserve">[[Category:Parts modding]]
[[Category:Game systems]]
== KSP.Game.PartProvider ==
This class is the main provider for anything related to parts definitions and data.

==== AddPartData(''KSP.Sim.Definitions.''PartCore jsonData, System.string rawJson) ====
This method is used to add parts to the '''PartProvider'''. It asks for a PartCore and a raw json (from the same part core provided).

* '''jsonData -''' This argument requires a part core which is a class defining ''almost'' all the part's data. Including all modules.
* '''rawJson''' '''-''' This argument requires a json equivalent to the '''jsonData''' provided. It should match exactly what you provide on the first argument.

==== Tips and Tricks: ====

* You can either use '''[https://docs.unity3d.com/ScriptReference/JsonUtility.ToJson.html JsonUtility]''' or '''[https://www.newtonsoft.com/json/help/html/SerializeObject.htm newtonsoft's Json.Net]''' to get your '''rawJson'''.
* You can access it via '''GameManager.Instance.Game.Parts'''.</text>
      <sha1>adeqe7fdo92bt01axt8w4k8fhvfwxqw</sha1>
    </revision>
  </page>
  <page>
    <title>File:MK2 RCS Block diffuse texture.png</title>
    <ns>6</ns>
    <id>25</id>
    <revision>
      <id>70</id>
      <timestamp>2023-05-25T00:32:52Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <origin>70</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="56" sha1="rkc7mi5c6gh2qx7gmh4jl11th4xbr8x" xml:space="preserve">Diffusion texture for SORRY's mk2 RCS Block, by LuxStice</text>
      <sha1>rkc7mi5c6gh2qx7gmh4jl11th4xbr8x</sha1>
    </revision>
    <revision>
      <id>76</id>
      <parentid>70</parentid>
      <timestamp>2023-05-25T00:52:41Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <comment>LuxStice uploaded a new version of [[File:MK2 RCS Block diffuse texture.png]]</comment>
      <origin>70</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="56" sha1="rkc7mi5c6gh2qx7gmh4jl11th4xbr8x" xml:space="preserve">Diffusion texture for SORRY's mk2 RCS Block, by LuxStice</text>
      <sha1>rkc7mi5c6gh2qx7gmh4jl11th4xbr8x</sha1>
    </revision>
  </page>
  <page>
    <title>File:MK2 RCS Block m.png</title>
    <ns>6</ns>
    <id>26</id>
    <revision>
      <id>71</id>
      <timestamp>2023-05-25T00:38:50Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <origin>71</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="42" sha1="ddtptdls61ekyus3g2li6hykvr24bj3" xml:space="preserve">Metallic texture for SORRY's MK2 RCS Block</text>
      <sha1>ddtptdls61ekyus3g2li6hykvr24bj3</sha1>
    </revision>
    <revision>
      <id>75</id>
      <parentid>71</parentid>
      <timestamp>2023-05-25T00:52:13Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <comment>LuxStice uploaded a new version of [[File:MK2 RCS Block m.png]]</comment>
      <origin>71</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="42" sha1="ddtptdls61ekyus3g2li6hykvr24bj3" xml:space="preserve">Metallic texture for SORRY's MK2 RCS Block</text>
      <sha1>ddtptdls61ekyus3g2li6hykvr24bj3</sha1>
    </revision>
  </page>
  <page>
    <title>File:MK2 RCS Block normal texture.png</title>
    <ns>6</ns>
    <id>27</id>
    <revision>
      <id>72</id>
      <timestamp>2023-05-25T00:42:54Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <origin>72</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="36" sha1="hso842ukxxos1l0luohh6qgyzy1oxmp" xml:space="preserve">SORRY's MK2 RCS Block normal texture</text>
      <sha1>hso842ukxxos1l0luohh6qgyzy1oxmp</sha1>
    </revision>
    <revision>
      <id>74</id>
      <parentid>72</parentid>
      <timestamp>2023-05-25T00:47:19Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <comment>LuxStice uploaded a new version of [[File:MK2 RCS Block normal texture.png]]</comment>
      <origin>72</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="36" sha1="hso842ukxxos1l0luohh6qgyzy1oxmp" xml:space="preserve">SORRY's MK2 RCS Block normal texture</text>
      <sha1>hso842ukxxos1l0luohh6qgyzy1oxmp</sha1>
    </revision>
  </page>
  <page>
    <title>Texturing</title>
    <ns>0</ns>
    <id>28</id>
    <revision>
      <id>73</id>
      <timestamp>2023-05-25T00:43:43Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <comment>Created page with "KSP2 graphics improved a lot, and for that they used textures, for parts we can use up to 6 textures. Diffusion, Metallic, Occlusion, Normal, Emission and Paint Map, the later being a custom texture used by the [[Scenery - Standard (Opaque)]] shader.  == Diffusion texture == [[File:MK2 RCS Block diffuse texture.png|thumb|Diffusion texture for SORRY's MK2 RCS Block, by LuxStice. Overlayed with the Height Map and Ambient Occlusion to mimic the game's textures]] KSP2's diff..."</comment>
      <origin>73</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1843" sha1="kqvnt82i8ii7hkcz6xl5gmd1sn5n5ne" xml:space="preserve">KSP2 graphics improved a lot, and for that they used textures, for parts we can use up to 6 textures. Diffusion, Metallic, Occlusion, Normal, Emission and Paint Map, the later being a custom texture used by the [[Scenery - Standard (Opaque)]] shader.

== Diffusion texture ==
[[File:MK2 RCS Block diffuse texture.png|thumb|Diffusion texture for SORRY's MK2 RCS Block, by LuxStice. Overlayed with the Height Map and Ambient Occlusion to mimic the game's textures]]
KSP2's diffusion map is pretty simple, it's a simple "mask" telling the shader where each color should be. This texture is used only when no paint is applied, Also, this texture is shown where there's a blue pixel in the Paint Map texture.

====== Tips and Tricks: ======

* The base color used by the game is 0, 0, 0.98 (HSV)
* The game overlays the diffusion texture with the ambient occlusion to be more RAM efficient.








== Metallic texture ==
[[File:MK2 RCS Block m.png|thumb|Metallic texture for SORRY's MK2 RCS Block, this texture features detailing visible only when downloaded]]
This texture tells the shader how reflective a given pixel should be, the higher the alpha on said pixel the more reflective it will be. Every pixel on this texture should be white and you should only change the '''opacity''' of the pixels. This is overwritten by the Paint Map's opacity when a pixel is marked as painted (either a green or red pixel).












== Normal/Bump texture ==
[[File:MK2 RCS Block normal texture.png|thumb|SORRY's MK2 RCS Block normal texture, containing detailing such as metal edges, nails and small elevations]]
A bump texture is used to give or take height on a certain pixel, affecting how shadows are casted by and to it, also affects reflections. This texture should only contain detailing and its prefered over the use of extra meshes or geometry.</text>
      <sha1>kqvnt82i8ii7hkcz6xl5gmd1sn5n5ne</sha1>
    </revision>
    <revision>
      <id>77</id>
      <parentid>73</parentid>
      <timestamp>2023-05-25T00:54:52Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <origin>77</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1734" sha1="jswn436qwjmect48r7sp75h4yydzboc" xml:space="preserve">KSP2 graphics improved a lot, and for that they used textures, for parts we can use up to 6 textures. Diffusion, Metallic, Occlusion, Normal, Emission and Paint Map, the later being a custom texture used by the [[Scenery - Standard (Opaque)]] shader.

== Diffusion texture ==
[[File:MK2_RCS_Block_diffuse_texture.png|thumb|351x351px]]
KSP2's diffusion map is pretty simple, it's a simple "mask" telling the shader where each color should be. This texture is used only when no paint is applied, Also, this texture is shown where there's a blue pixel in the Paint Map texture.

====== Tips and Tricks: ======

* The base color used by the game is 0, 0, 0.98 (HSV)
* The game overlays the diffusion texture with the ambient occlusion to be more RAM efficient.








== Metallic texture ==
[[File:MK2 RCS Block m.png|thumb|Metallic texture for SORRY's MK2 RCS Block, this texture features detailing visible only when downloaded|349x349px]]
This texture tells the shader how reflective a given pixel should be, the higher the alpha on said pixel the more reflective it will be. Every pixel on this texture should be white and you should only change the '''opacity''' of the pixels. This is overwritten by the Paint Map's opacity when a pixel is marked as painted (either a green or red pixel).












== Normal/Bump texture ==
[[File:MK2 RCS Block normal texture.png|thumb|SORRY's MK2 RCS Block normal texture, containing detailing such as metal edges, nails and small elevations|353x353px]]
A bump texture is used to give or take height on a certain pixel, affecting how shadows are casted by and to it, also affects reflections. This texture should only contain detailing and its prefered over the use of extra meshes or geometry.</text>
      <sha1>jswn436qwjmect48r7sp75h4yydzboc</sha1>
    </revision>
    <revision>
      <id>79</id>
      <parentid>77</parentid>
      <timestamp>2023-05-25T01:07:17Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <origin>79</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2317" sha1="ryug0dlm8ycvpfppl0bd3otdueqlhg0" xml:space="preserve">KSP2 graphics improved a lot, and for that they used textures, for parts we can use up to 6 textures. Diffusion, Metallic, Occlusion, Normal, Emission and Paint Map, the later being a custom texture used by the [[Scenery - Standard (Opaque)]] shader.

== Diffusion texture ==
[[File:MK2_RCS_Block_diffuse_texture.png|thumb|351x351px]]
KSP2's diffusion map is pretty simple, it's a simple "mask" telling the shader where each color should be. This texture is used only when no paint is applied, Also, this texture is shown where there's a blue pixel in the Paint Map texture.

====== Tips and Tricks: ======

* The base color used by the game is 0, 0, 0.98 (HSV)
* The game overlays the diffusion texture with the ambient occlusion to be more RAM efficient.








== Metallic texture ==
[[File:MK2 RCS Block m.png|thumb|Metallic texture for SORRY's MK2 RCS Block, this texture features detailing visible only when downloaded|349x349px]]
This texture tells the shader how reflective a given pixel should be, the higher the alpha on said pixel the more reflective it will be. Every pixel on this texture should be white and you should only change the '''opacity''' of the pixels. This is overwritten by the Paint Map's opacity when a pixel is marked as painted (either a green or red pixel).












== Normal/Bump texture ==
[[File:MK2 RCS Block normal texture.png|thumb|SORRY's MK2 RCS Block normal texture, containing detailing such as metal edges, nails and small elevations|353x353px]]
A bump texture is used to give or take height on a certain pixel, affecting how shadows are casted by and to it, also affects reflections. This texture should only contain detailing and its prefered over the use of extra meshes or geometry.














== Paint Map Texture ==
[[File:MK2 RCS Block Paint Map Texture.png|thumb|finished Paint Map for MK2 RCS Block from SORRY. Note that in this image all channels are combined where cyan = Green and Blue and White = Red. Green and Blue]]
This texture is a custom made texture that the shader uses, by reading the RGBA values on each pixel it is able to make the parts paintable! The game uses '''alpha''' for the smoothness, '''blue''' to display the diffusion and metallic textures, '''green''' to display the base color and '''red''' to display the accent color in game.</text>
      <sha1>ryug0dlm8ycvpfppl0bd3otdueqlhg0</sha1>
    </revision>
    <revision>
      <id>80</id>
      <parentid>79</parentid>
      <timestamp>2023-05-26T15:08:16Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <origin>80</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2354" sha1="2ix41tdrj0ajqygsxfnaem4ewfkqgkj" xml:space="preserve">KSP2 graphics improved a lot, and for that they used textures, for parts we can use up to 6 textures. Diffusion, Metallic, Occlusion, Normal, Emission and Paint Map, the later being a custom texture used by the [[Scenery - Standard (Opaque)]] shader.

== Diffusion texture ==
[[File:MK2_RCS_Block_diffuse_texture.png|thumb|351x351px]]
KSP2's diffusion map is pretty simple, it's a simple "mask" telling the shader where each color should be. This texture is used only when no paint is applied, Also, this texture is shown where there's a blue pixel in the Paint Map texture.

====== Tips and Tricks: ======

* The base color used by the game is 0, 0, 0.98 (HSV)
* The game overlays the diffusion texture with the ambient occlusion to be more RAM efficient.








== Metallic texture ==
[[File:MK2 RCS Block m.png|thumb|Metallic texture for SORRY's MK2 RCS Block, this texture features detailing visible only when downloaded|349x349px]]
This texture tells the shader how reflective a given pixel should be, the higher the alpha on said pixel the more reflective it will be. Every pixel on this texture should be white and you should only change the '''opacity''' of the pixels. This is overwritten by the Paint Map's opacity when a pixel is marked as painted (either a green or red pixel).












== Normal/Bump texture ==
[[File:MK2 RCS Block normal texture.png|thumb|SORRY's MK2 RCS Block normal texture, containing detailing such as metal edges, nails and small elevations|353x353px]]
A bump texture is used to give or take height on a certain pixel, affecting how shadows are casted by and to it, also affects reflections. This texture should only contain detailing and its prefered over the use of extra meshes or geometry.














== Paint Map Texture ==
[[File:MK2 RCS Block Paint Map Texture.png|thumb|finished Paint Map for MK2 RCS Block from SORRY. Note that in this image all channels are combined where cyan = Green and Blue and White = Red. Green and Blue|356x356px]]
This texture is a custom made texture that the shader uses, by reading the RGBA values on each pixel it is able to make the parts paintable! The game uses '''alpha''' for the smoothness, '''blue''' to display the diffusion and metallic textures, '''green''' to display the base color and '''red''' to display the accent color in game.
[[Category:Parts modding]]</text>
      <sha1>2ix41tdrj0ajqygsxfnaem4ewfkqgkj</sha1>
    </revision>
    <revision>
      <id>81</id>
      <parentid>80</parentid>
      <timestamp>2023-05-26T15:08:45Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <comment>/* Tips and Tricks: */</comment>
      <origin>81</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2353" sha1="6roupudzl6c5qv1hu0zhwyn5xlf34vx" xml:space="preserve">KSP2 graphics improved a lot, and for that they used textures, for parts we can use up to 6 textures. Diffusion, Metallic, Occlusion, Normal, Emission and Paint Map, the later being a custom texture used by the [[Scenery - Standard (Opaque)]] shader.

== Diffusion texture ==
[[File:MK2_RCS_Block_diffuse_texture.png|thumb|351x351px]]
KSP2's diffusion map is pretty simple, it's a simple "mask" telling the shader where each color should be. This texture is used only when no paint is applied, Also, this texture is shown where there's a blue pixel in the Paint Map texture.

====== Tips and Tricks ======

* The base color used by the game is 0, 0, 0.98 (HSV)
* The game overlays the diffusion texture with the ambient occlusion to be more RAM efficient.








== Metallic texture ==
[[File:MK2 RCS Block m.png|thumb|Metallic texture for SORRY's MK2 RCS Block, this texture features detailing visible only when downloaded|349x349px]]
This texture tells the shader how reflective a given pixel should be, the higher the alpha on said pixel the more reflective it will be. Every pixel on this texture should be white and you should only change the '''opacity''' of the pixels. This is overwritten by the Paint Map's opacity when a pixel is marked as painted (either a green or red pixel).












== Normal/Bump texture ==
[[File:MK2 RCS Block normal texture.png|thumb|SORRY's MK2 RCS Block normal texture, containing detailing such as metal edges, nails and small elevations|353x353px]]
A bump texture is used to give or take height on a certain pixel, affecting how shadows are casted by and to it, also affects reflections. This texture should only contain detailing and its prefered over the use of extra meshes or geometry.














== Paint Map Texture ==
[[File:MK2 RCS Block Paint Map Texture.png|thumb|finished Paint Map for MK2 RCS Block from SORRY. Note that in this image all channels are combined where cyan = Green and Blue and White = Red. Green and Blue|356x356px]]
This texture is a custom made texture that the shader uses, by reading the RGBA values on each pixel it is able to make the parts paintable! The game uses '''alpha''' for the smoothness, '''blue''' to display the diffusion and metallic textures, '''green''' to display the base color and '''red''' to display the accent color in game.
[[Category:Parts modding]]</text>
      <sha1>6roupudzl6c5qv1hu0zhwyn5xlf34vx</sha1>
    </revision>
    <revision>
      <id>82</id>
      <parentid>81</parentid>
      <timestamp>2023-05-26T15:10:36Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <comment>/* Diffusion texture */</comment>
      <origin>82</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2354" sha1="aa03owqv3uzi6d4wd2foo757dilw6je" xml:space="preserve">KSP2 graphics improved a lot, and for that they used textures, for parts we can use up to 6 textures. Diffusion, Metallic, Occlusion, Normal, Emission and Paint Map, the later being a custom texture used by the [[Scenery - Standard (Opaque)]] shader.

== Diffusion texture ==
[[File:MK2_RCS_Block_diffuse_texture.png|thumb|351x351px]]
KSP2's diffusion map is pretty simple, it's a simple "mask" telling the shader where each color should be. This texture is used only when no paint is applied, Also, this texture is shown where there's a blue pixel in the Paint Map texture.

====== Tips and Tricks ======

* The base color used by the game is 0, 0, 0.98 (HSV)
* The game overlays the diffusion texture with the ambient occlusion to be more RAM efficient.









== Metallic texture ==
[[File:MK2 RCS Block m.png|thumb|Metallic texture for SORRY's MK2 RCS Block, this texture features detailing visible only when downloaded|349x349px]]
This texture tells the shader how reflective a given pixel should be, the higher the alpha on said pixel the more reflective it will be. Every pixel on this texture should be white and you should only change the '''opacity''' of the pixels. This is overwritten by the Paint Map's opacity when a pixel is marked as painted (either a green or red pixel).












== Normal/Bump texture ==
[[File:MK2 RCS Block normal texture.png|thumb|SORRY's MK2 RCS Block normal texture, containing detailing such as metal edges, nails and small elevations|353x353px]]
A bump texture is used to give or take height on a certain pixel, affecting how shadows are casted by and to it, also affects reflections. This texture should only contain detailing and its prefered over the use of extra meshes or geometry.














== Paint Map Texture ==
[[File:MK2 RCS Block Paint Map Texture.png|thumb|finished Paint Map for MK2 RCS Block from SORRY. Note that in this image all channels are combined where cyan = Green and Blue and White = Red. Green and Blue|356x356px]]
This texture is a custom made texture that the shader uses, by reading the RGBA values on each pixel it is able to make the parts paintable! The game uses '''alpha''' for the smoothness, '''blue''' to display the diffusion and metallic textures, '''green''' to display the base color and '''red''' to display the accent color in game.
[[Category:Parts modding]]</text>
      <sha1>aa03owqv3uzi6d4wd2foo757dilw6je</sha1>
    </revision>
    <revision>
      <id>83</id>
      <parentid>82</parentid>
      <timestamp>2023-05-26T15:12:07Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <origin>83</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2486" sha1="539ywvh7agl82sfjcmdfkzrvlhxj5j3" xml:space="preserve">KSP2 graphics improved a lot, and for that they used textures, for parts we can use up to 6 textures. Diffusion, Metallic, Occlusion, Normal, Emission and Paint Map, the later being a custom texture used by the [[Scenery - Standard (Opaque)]] shader.

== Diffusion texture ==
[[File:MK2_RCS_Block_diffuse_texture.png|thumb|287x287px|Diffusion texture for SORRY's MK2 RCS Block, this texture is overlayed with normal texture details giving it shadows and highlights]]
KSP2's diffusion map is pretty simple, it's a simple "mask" telling the shader where each color should be. This texture is used only when no paint is applied, Also, this texture is shown where there's a blue pixel in the Paint Map texture.

====== Tips and Tricks ======

* The base color used by the game is 0, 0, 0.98 (HSV)
* The game overlays the diffusion texture with the ambient occlusion to be more RAM efficient.









== Metallic texture ==
[[File:MK2 RCS Block m.png|thumb|Metallic texture for SORRY's MK2 RCS Block, this texture features detailing visible only when downloaded|289x289px]]
This texture tells the shader how reflective a given pixel should be, the higher the alpha on said pixel the more reflective it will be. Every pixel on this texture should be white and you should only change the '''opacity''' of the pixels. This is overwritten by the Paint Map's opacity when a pixel is marked as painted (either a green or red pixel).












== Normal/Bump texture ==
[[File:MK2 RCS Block normal texture.png|thumb|SORRY's MK2 RCS Block normal texture, containing detailing such as metal edges, nails and small elevations|291x291px]]
A bump texture is used to give or take height on a certain pixel, affecting how shadows are casted by and to it, also affects reflections. This texture should only contain detailing and its prefered over the use of extra meshes or geometry.














== Paint Map Texture ==
[[File:MK2 RCS Block Paint Map Texture.png|thumb|finished Paint Map for MK2 RCS Block from SORRY. Note that in this image all channels are combined where cyan = Green and Blue and White = Red. Green and Blue|285x285px]]
This texture is a custom made texture that the shader uses, by reading the RGBA values on each pixel it is able to make the parts paintable! The game uses '''alpha''' for the smoothness, '''blue''' to display the diffusion and metallic textures, '''green''' to display the base color and '''red''' to display the accent color in game.
[[Category:Parts modding]]</text>
      <sha1>539ywvh7agl82sfjcmdfkzrvlhxj5j3</sha1>
    </revision>
    <revision>
      <id>105</id>
      <parentid>83</parentid>
      <timestamp>2023-07-16T16:20:35Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <comment>/* Diffusion texture */</comment>
      <origin>105</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2499" sha1="pdrr55m9gvkejf8jzfufha4eitmtwy8" xml:space="preserve">KSP2 graphics improved a lot, and for that they used textures, for parts we can use up to 6 textures. Diffusion, Metallic, Occlusion, Normal, Emission and Paint Map, the later being a custom texture used by the [[Scenery - Standard (Opaque)]] shader.

== Diffusion texture ==
[[File:MK2_RCS_Block_diffuse_texture.png|thumb|287x287px|Diffusion texture for SORRY's MK2 RCS Block, this texture is overlayed with normal texture details giving it shadows and highlights]]
KSP2's diffusion map is pretty simple, it's a simple "mask" telling the shader where each color should be. This texture is used only when no paint is applied, Also, this texture is shown where there's a blue pixel in the Paint Map texture.

====== Tips and Tricks ======

* The base color used by the game is 0, 0, 0.98 (HSV)
* The game overlays the diffusion texture with the ambient occlusion to be more RAM efficient.









== Metallic texture ==
[[File:MK2 RCS Block m.png|thumb|Metallic texture for SORRY's MK2 RCS Block, this texture features detailing visible only when downloaded|289x289px]]
This texture tells the shader how reflective a given pixel should be, the higher the alpha on said pixel the more reflective it will be. Every pixel on this texture should be white and you should only change the '''opacity''' of the pixels. This is overwritten by the Paint Map's opacity when a pixel is marked as painted (either a green or red pixel).












== Normal/Bump texture ==
[[File:MK2 RCS Block normal texture.png|thumb|SORRY's MK2 RCS Block normal texture, containing detailing such as metal edges, nails and small elevations|291x291px]]
A bump texture is used to give or take height on a certain pixel, affecting how shadows are casted by and to it, also affects reflections. This texture should only contain detailing and its prefered over the use of extra meshes or geometry.














== Paint Map Texture ==
[[File:MK2 RCS Block Paint Map Texture.png|thumb|finished Paint Map for MK2 RCS Block from SORRY. Note that in this image all channels are combined where cyan = Green and Blue and White = Red. Green and Blue|285x285px]]
This texture is a custom made texture that the shader uses, by reading the RGBA values on each pixel it is able to make the parts paintable! The game uses '''alpha''' for the smoothness, '''blue''' to display the diffusion and metallic textures, '''green''' to display the base color and '''red''' to display the accent color in game.
[[Category:Parts modding]]
__FORCETOC__</text>
      <sha1>pdrr55m9gvkejf8jzfufha4eitmtwy8</sha1>
    </revision>
    <revision>
      <id>135</id>
      <parentid>105</parentid>
      <timestamp>2023-08-03T00:06:16Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>135</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2487" sha1="8zscyr4xg9z38tgyluntltnvuvj86g5" xml:space="preserve">[[Category:Part textures]]
KSP2 graphics improved a lot, and for that they use textures, for parts we can use up to 6 textures. Diffusion, Metallic, Occlusion, Normal, Emission and Paint Map, the latter being a custom texture used by the [[Scenery - Standard (Opaque) shader]].

==Diffusion texture==
[[File:MK2_RCS_Block_diffuse_texture.png|thumb|287x287px|Diffusion texture for SORRY's MK2 RCS Block, this texture is overlayed with normal texture details giving it shadows and highlights]]
KSP2's diffusion map is pretty simple, it's a simple "mask" telling the shader where each color should be. This texture is used only when no paint is applied, Also, this texture is shown where there's a blue pixel in the Paint Map texture.

======Tips and Tricks====== 

*The base color used by the game is 0, 0, 0.98 (HSV)
*The game overlays the diffusion texture with the ambient occlusion to be more RAM efficient.








==Metallic texture==
[[File:MK2 RCS Block m.png|thumb|Metallic texture for SORRY's MK2 RCS Block, this texture features detailing visible only when downloaded|289x289px]]
This texture tells the shader how reflective a given pixel should be, the higher the alpha on said pixel the more reflective it will be. Every pixel on this texture should be white and you should only change the '''opacity''' of the pixels. This is overwritten by the Paint Map's opacity when a pixel is marked as painted (either a green or red pixel).












==Normal/Bump texture==
[[File:MK2 RCS Block normal texture.png|thumb|SORRY's MK2 RCS Block normal texture, containing detailing such as metal edges, nails and small elevations|291x291px]]
A bump texture is used to give or take height on a certain pixel, affecting how shadows are casted by and to it, also affects reflections. This texture should only contain detailing and its prefered over the use of extra meshes or geometry.














==Paint Map Texture==
[[File:MK2 RCS Block Paint Map Texture.png|thumb|finished Paint Map for MK2 RCS Block from SORRY. Note that in this image all channels are combined where cyan = Green and Blue and White = Red. Green and Blue|285x285px]]
This texture is a custom made texture that the shader uses, by reading the RGBA values on each pixel it is able to make the parts paintable! The game uses '''alpha''' for the smoothness, '''blue''' to display the diffusion and metallic textures, '''green''' to display the base color and '''red''' to display the accent color in game.
__FORCETOC__</text>
      <sha1>8zscyr4xg9z38tgyluntltnvuvj86g5</sha1>
    </revision>
  </page>
  <page>
    <title>File:MK2 RCS Block Paint Map Texture.png</title>
    <ns>6</ns>
    <id>29</id>
    <revision>
      <id>78</id>
      <timestamp>2023-05-25T00:57:24Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <origin>78</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="21" sha1="n7w0ucfwll50drsfjlhpryawpuxlc8a" xml:space="preserve">PM Texture from SORRY</text>
      <sha1>n7w0ucfwll50drsfjlhpryawpuxlc8a</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Orbits</title>
    <ns>14</ns>
    <id>30</id>
    <revision>
      <id>84</id>
      <timestamp>2023-05-26T15:25:31Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <comment>Information about orbits in KSP2 and the classes and methods that are used to access or modify them</comment>
      <origin>84</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="227" sha1="0tdrkuj470oew6yu7jhhzm1qh032ux6" xml:space="preserve">This category is for tagging information in the Wiki relating to orbits in KSP2. Use this category for pages that document the classes, methods, and other information relating to creating, accessing, or modifiying, orbits, etc.</text>
      <sha1>0tdrkuj470oew6yu7jhhzm1qh032ux6</sha1>
    </revision>
    <revision>
      <id>87</id>
      <parentid>84</parentid>
      <timestamp>2023-05-26T17:13:35Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <minor/>
      <comment>Added category</comment>
      <origin>87</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="253" sha1="0t6dtez0y8hvaq2rb7kda0ukxhiinz6" xml:space="preserve">This category is for tagging information in the Wiki relating to orbits in KSP2. Use this category for pages that document the classes, methods, and other information relating to creating, accessing, or modifiying, orbits, etc.
[[Category:Game systems]]</text>
      <sha1>0t6dtez0y8hvaq2rb7kda0ukxhiinz6</sha1>
    </revision>
    <revision>
      <id>88</id>
      <parentid>87</parentid>
      <timestamp>2023-05-26T17:14:05Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>88</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="254" sha1="5hkx13xjzw4lq4jx62x4ho4iyltlb87" xml:space="preserve">This category is for tagging information in the Wiki relating to orbits in KSP2. Use this category for pages that document the classes, methods, and other information relating to creating, accessing, or modifiying, orbits, etc.

[[Category:Game systems]]</text>
      <sha1>5hkx13xjzw4lq4jx62x4ho4iyltlb87</sha1>
    </revision>
    <revision>
      <id>90</id>
      <parentid>88</parentid>
      <timestamp>2023-05-26T17:17:52Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <minor/>
      <comment>Added Orbits category to TOC</comment>
      <origin>90</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="289" sha1="5prn4df81luj63u9ufrdi3sgfbtje6w" xml:space="preserve">&lt;nowiki&gt;[[Category:TOC]]&lt;/nowiki&gt;

This category is for tagging information in the Wiki relating to orbits in KSP2. Use this category for pages that document the classes, methods, and other information relating to creating, accessing, or modifiying, orbits, etc.

[[Category:Game systems]]</text>
      <sha1>5prn4df81luj63u9ufrdi3sgfbtje6w</sha1>
    </revision>
    <revision>
      <id>91</id>
      <parentid>90</parentid>
      <timestamp>2023-05-26T17:18:34Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <minor/>
      <comment>Corrected typo and formatting for catagroy</comment>
      <origin>91</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="271" sha1="qj3y46kkkdnzl5ualc9wjj5u5z1ej5z" xml:space="preserve">[[Category:TOC]]

This category is for tagging information in the Wiki relating to orbits in KSP2. Use this category for pages that document the classes, methods, and other information relating to creating, accessing, or modifying, orbits, etc.

[[Category:Game systems]]</text>
      <sha1>qj3y46kkkdnzl5ualc9wjj5u5z1ej5z</sha1>
    </revision>
    <revision>
      <id>92</id>
      <parentid>91</parentid>
      <timestamp>2023-05-26T17:19:27Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <minor/>
      <comment>Corrected categroy</comment>
      <origin>92</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="280" sha1="7k9htwfrgddexlt1dqem0gj91ihqzsz" xml:space="preserve">[[Category:Game Systems]]

This category is for tagging information in the Wiki relating to orbits in KSP2. Use this category for pages that document the classes, methods, and other information relating to creating, accessing, or modifying, orbits, etc.

[[Category:Game systems]]</text>
      <sha1>7k9htwfrgddexlt1dqem0gj91ihqzsz</sha1>
    </revision>
    <revision>
      <id>93</id>
      <parentid>92</parentid>
      <timestamp>2023-05-26T17:19:53Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <minor/>
      <comment>corrected typo in category name</comment>
      <origin>93</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="280" sha1="3na1dzg4blhiqpwivifj8tg6qfyg7if" xml:space="preserve">[[Category:Game systems]]

This category is for tagging information in the Wiki relating to orbits in KSP2. Use this category for pages that document the classes, methods, and other information relating to creating, accessing, or modifying, orbits, etc.

[[Category:Game systems]]</text>
      <sha1>3na1dzg4blhiqpwivifj8tg6qfyg7if</sha1>
    </revision>
  </page>
  <page>
    <title>PatchedConicSolver</title>
    <ns>0</ns>
    <id>31</id>
    <revision>
      <id>85</id>
      <timestamp>2023-05-26T16:45:50Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <comment>Initial documentation of the PatchedConicSolver class</comment>
      <origin>85</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4330" sha1="gncopotxnkjn2g56ddv9yyt6o9c6qqk" xml:space="preserve">[[Category: Orbits]]
PatchedConicSolver is a class that is part of Orbiter objects. It is used to capture, generate, update, and provide access to patched conics information relating to the Orbiter object it is associated with. The PatchedConicSolver class has the following '''public''' members.

'''Namespace:''' KSP.Sim.impl

== PatchedConicSolver.MaxTotalPatches ==
'''Type:''' int

 The maximum limit on the number of patches. The default value = 10. This member can be get, but not set.

== PatchedConicSolver.Orbiter ==
'''Type:''' OrbiterComponent

 The ''ObiterComponent'' object this class is associated with. This member can be get, but not set.

== PatchedConicSolver.CurrentTrajectory[index] ==
'''Type:''' List&lt;PatchedConicsOrbit&gt;

 A list of PatchedConicOrbits. May be given an index to obtain a particular trajectory. It’s basically a list of all the trajectories currently associated with this Orbiter object, and you can do things with it like any list. The length of the list will be no longer than MaxTotalPatches, with list members being chronologically organized from the patch that occurs first to the last patch. Unused members are null. This member can be get, but not set.

== PatchedConicSolver.PatchesAhead ==
'''Type: int'''

 The number of patches ahead. This member can be get or set. It is set in the private method PatchedConicSolver.CalculatePatchList()

== PatchedConicSolver.OnDestroy() ==
'''Called by:''' TBD

 The ''PatchedConicSolver.OnDestroy()'' method first tests to see if the Orbiter object is null. If it is, then it returns immediately. Otherwise, it will remove the handler for ''OnReferenceBodyChange'' which was added by the ''OnStart'' method.

== PatchedConicSolver.OnStart() ==
'''Called by:''' TBD

 The ''PatchedConicSolver.OnStart()'' method adds a new handler for the ''Orbiter.OnReferenceBodyChange'' method so that OnReferenceBodyChange will be called when necessary. It then sets the private _patchLimit to be the max of ''PersistentProfileManager.ConicPatchLimit'' and 1, adds this.Orbiter.PatchedConicsOrbit to the ''CurrentTrajectory'' list, and similarly adds any remaining patches from 1 to MaxTotalPatches.

== PatchedConicSolver.OnUpdate() ==
'''Called By:''' TBD

 The ''PatchedConicSolver.OnUpdate()'' method first calls ''PatchedConicSolver.SetPatchesInactive'', then calls private methods for ''InitializeFirstPatch()'' and ''CalculatePatchList()'' to ensure the patches are updated.

== PatchedConicSolver.SetPatchesInactive(List&lt;PatchedConicsOrbit&gt;, int) ==
'''Called By:''' ''OnUpdate''

 The ''PatchedConicSolver.SetPatchesInactive()'' method accepts a list of patches (i.e., ''CurrentTrajectory'') and (optionally) a starting index for the list (defaults to 0). For each list member from the starting index to the end of the list, the member's ActivePatch property is set to ''false''.

== PatchedConicSolver.SetTarget(CelestialBodyComponent) ==
'''Called By:''' TBD

 The ''PatchedConicSolver.SetTarget()'' method accepts a CelestialBodyComponent and uses that to set the private _targetBody property.

== PatchedConicsOrbit.FindPatchContainingUT(double) ==
'''Called By:''' TBD

 The ''PatchedConicsOrbit FindPatchContainingUT()'' method accepts a double (the universal time of interest) and returns the ''PatchedConicOrbit'' for the patch associated with that time.

== PatchedConicsOrbit.DecreasePatchLimit() ==
'''Called By:''' TBD

 The ''PatchedConicsOrbit.DecreasePatchLimit()'' method decreased the current setting of the private _pathcLimit property by 1 to a value that is never less than 1.

== PatchedConicsOrbit.IncreasePatchLimit() ==
'''Called By:''' TBD

 The ''PatchedConicsOrbit.IncreasePatchLimit()'' method increases the current setting of the private _pathcLimit property by 1 to a value that is never more than 5.

== PatchedConicsOrbit.RefreshPatchLimit() ==
'''Called By:''' TBD

 The ''PatchedConicsOrbit.RefreshPatchLimit()'' method clamps the current setting of the private _pathcLimit property to be between 1 and 5 inclusively.

== PatchedConicsOrbit.SolverParameters ==
'''Called By:''' TBD

 The ''PatchedConicsOrbit.SolverParameters'' class defines the parameters needed for the solver with default values assigned to ''maxGeometrySolverIterations'' (25), ''maxTimeSolverIterations'' (50), and ''outerReaches'' (1E+20).</text>
      <sha1>gncopotxnkjn2g56ddv9yyt6o9c6qqk</sha1>
    </revision>
    <revision>
      <id>86</id>
      <parentid>85</parentid>
      <timestamp>2023-05-26T17:10:40Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <comment>Added Called By/Used By details where available</comment>
      <origin>86</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5239" sha1="3e3tc0ud4efc3365xlb8ec9a7hafke8" xml:space="preserve">[[Category: Orbits]]
PatchedConicSolver is a class that is part of Orbiter objects. It is used to capture, generate, update, and provide access to patched conics information relating to the Orbiter object it is associated with. The PatchedConicSolver class has the following '''public''' members.

'''Namespace:''' KSP.Sim.impl

== PatchedConicSolver.MaxTotalPatches ==
'''Type:''' int

 The maximum limit on the number of patches. The default value = 10. This member can be get, but not set.

== PatchedConicSolver.Orbiter ==
'''Type:''' OrbiterComponent

 The ''ObiterComponent'' object this class is associated with. This member can be get, but not set.

== PatchedConicSolver.CurrentTrajectory[index] ==
'''Type:''' List&lt;PatchedConicsOrbit&gt;

 A list of PatchedConicOrbits. May be given an index to obtain a particular trajectory. It’s basically a list of all the trajectories currently associated with this Orbiter object, and you can do things with it like any list. The length of the list will be no longer than MaxTotalPatches, with list members being chronologically organized from the patch that occurs first to the last patch. Unused members are null. This member can be get, but not set.

== PatchedConicSolver.PatchesAhead ==
'''Type: int'''

 The number of patches ahead. This member can be get or set. It is set in the private method PatchedConicSolver.CalculatePatchList()

== PatchedConicSolver.OnDestroy() ==
'''Called by:''' TBD

 The ''PatchedConicSolver.OnDestroy()'' method first tests to see if the Orbiter object is null. If it is, then it returns immediately. Otherwise, it will remove the handler for ''OnReferenceBodyChange'' which was added by the ''OnStart'' method.

== PatchedConicSolver.OnStart() ==
'''Called by:''' ''VesselComponent.OnStart(double)''

 The ''PatchedConicSolver.OnStart()'' method adds a new handler for the ''Orbiter.OnReferenceBodyChange'' method so that OnReferenceBodyChange will be called when necessary. It then sets the private _patchLimit to be the max of ''PersistentProfileManager.ConicPatchLimit'' and 1, adds this.Orbiter.PatchedConicsOrbit to the ''CurrentTrajectory'' list, and similarly adds any remaining patches from 1 to MaxTotalPatches.

== PatchedConicSolver.OnUpdate() ==
'''Called By:''' ''VesselComponent.OnUpdateOrbit()''

 The ''PatchedConicSolver.OnUpdate()'' method first calls ''PatchedConicSolver.SetPatchesInactive'', then calls private methods for ''InitializeFirstPatch()'' and ''CalculatePatchList()'' to ensure the patches are updated.
 '''NOTE:''' When called by ''VesselComponent.OnUpdateOrbit()'', this method is called ''before'' calling ''orbiter.ManeuverPlanSolver.OnUpdate()''.

== PatchedConicSolver.SetPatchesInactive(List&lt;PatchedConicsOrbit&gt;, int) ==
'''Called By:''' ''OnUpdate'', ''ManeuverPlanSolver.UpdateManeuverTrajectory()''

 The ''PatchedConicSolver.SetPatchesInactive()'' method accepts a list of patches (i.e., ''CurrentTrajectory'') and (optionally) a starting index for the list (defaults to 0). For each list member from the starting index to the end of the list, the member's ActivePatch property is set to ''false''.
 '''NOTE:''' When called by ''ManeuverPlanSolver.UpdateManeuverTrajectory()'', this method is called ''after'' calling ''ManeuverPlanSolver.SetPatchesInactive''

== PatchedConicSolver.SetTarget(CelestialBodyComponent) ==
'''Called By:''' ''VesselComponent.TargetObject''

 The ''PatchedConicSolver.SetTarget()'' method accepts a CelestialBodyComponent and uses that to set the private _targetBody property.

== PatchedConicsOrbit.FindPatchContainingUT(double) ==
'''Called By:''' ''OrbitalReadoutInstrumentManager.Update()'', ''ManeuverPlanComponent.IsValidNode()'', ''ManeuverPlanComponent.UpdateNodeDetails()'', ''ManeuverPlanComponent.GetManeuverNodeBurnDirVector()'', and ''ManeuverPlanComponent.SolveManeuver()''

 The ''PatchedConicsOrbit FindPatchContainingUT()'' method accepts a double (the universal time of interest) and returns the ''PatchedConicOrbit'' for the patch associated with that time.

== PatchedConicsOrbit.DecreasePatchLimit() ==
'''Called By:''' TBD

 The ''PatchedConicsOrbit.DecreasePatchLimit()'' method decreased the current setting of the private _pathcLimit property by 1 to a value that is never less than 1.

== PatchedConicsOrbit.IncreasePatchLimit() ==
'''Called By:''' TBD

 The ''PatchedConicsOrbit.IncreasePatchLimit()'' method increases the current setting of the private _pathcLimit property by 1 to a value that is never more than 5.

== PatchedConicsOrbit.RefreshPatchLimit() ==
'''Called By:''' ''GameplaySettingsMenuManager.ApplyConicPatchLimit()''

 The ''PatchedConicsOrbit.RefreshPatchLimit()'' method clamps the current setting of the private _pathcLimit property to be between 1 and 5 inclusively.

== PatchedConicsOrbit.SolverParameters ==
'''Called By:''' ''PatchedConics.GetClosestApproach()'', ''PatchedConics.EncountersBody()'', ''PatchedConics.CheckEncounter()''

'''Used By:''' ''ManeuverPlanSolver'', ''PatchedConicSolver''

 The ''PatchedConicsOrbit.SolverParameters'' class defines the parameters needed for the solver with default values assigned to ''maxGeometrySolverIterations'' (25), ''maxTimeSolverIterations'' (50), and ''outerReaches'' (1E+20).</text>
      <sha1>3e3tc0ud4efc3365xlb8ec9a7hafke8</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Game systems</title>
    <ns>14</ns>
    <id>32</id>
    <revision>
      <id>89</id>
      <timestamp>2023-05-26T17:15:26Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Created new category</comment>
      <origin>89</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="125" sha1="aicgn2jbe0a0zd25i2mktb0iasdayvi" xml:space="preserve">This category contains descriptions of the game systems' overall architecture and their classes and members.
[[Category:TOC]]</text>
      <sha1>aicgn2jbe0a0zd25i2mktb0iasdayvi</sha1>
    </revision>
  </page>
  <page>
    <title>User:Munix</title>
    <ns>2</ns>
    <id>33</id>
    <revision>
      <id>96</id>
      <timestamp>2023-05-31T17:00:52Z</timestamp>
      <contributor>
        <username>Cheese</username>
        <id>7</id>
      </contributor>
      <comment>Munix</comment>
      <origin>96</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="19" sha1="o2j97umg3tr1pupg1ejgmegng0hxn6j" xml:space="preserve">Good twin of muñix</text>
      <sha1>o2j97umg3tr1pupg1ejgmegng0hxn6j</sha1>
    </revision>
  </page>
  <page>
    <title>User:ShadowDev</title>
    <ns>2</ns>
    <id>34</id>
    <revision>
      <id>97</id>
      <timestamp>2023-05-31T17:26:42Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <comment>yes</comment>
      <origin>97</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="25" sha1="8qm9j0ot1wbhdolmenmp28qdxe6ouwe" xml:space="preserve">https://curseforge.co.uk/</text>
      <sha1>8qm9j0ot1wbhdolmenmp28qdxe6ouwe</sha1>
    </revision>
  </page>
  <page>
    <title>VesselComponent</title>
    <ns>0</ns>
    <id>35</id>
    <revision>
      <id>98</id>
      <timestamp>2023-05-31T17:42:15Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <comment>Too lazy to add any real info.</comment>
      <origin>98</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="130" sha1="1xyxqg8prjtbwz75k3u3yo7bue00lxy" xml:space="preserve">The vessel component is used to control a vessel. this is not to be confused with the PartComponent that controls individual parts</text>
      <sha1>1xyxqg8prjtbwz75k3u3yo7bue00lxy</sha1>
    </revision>
    <revision>
      <id>99</id>
      <parentid>98</parentid>
      <timestamp>2023-05-31T17:43:05Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <origin>99</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="156" sha1="61fp7jmcyt8g98o6563rew37wu3c28z" xml:space="preserve">The vessel component is used to control a vessel. this is not to be confused with the PartComponent that controls individual parts
[[Category:Game systems]]</text>
      <sha1>61fp7jmcyt8g98o6563rew37wu3c28z</sha1>
    </revision>
  </page>
  <page>
    <title>UniverseModel</title>
    <ns>0</ns>
    <id>36</id>
    <revision>
      <id>100</id>
      <timestamp>2023-05-31T17:48:47Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <comment>UniverseModel stuff</comment>
      <origin>100</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="273" sha1="0yubsklju4i4w5qditgqf8jl7xpa8dw" xml:space="preserve">the UniverseModel contains everything that the game knows about. 


How to get a Vessel by name using UniverseModel 
VesselComponent vesselMovedComponent = GameManager.Instance.Game.UniverseModel.GetAllVessels().Where((vessel) =&gt; vessel.Name == "Vessel Name Here").First();</text>
      <sha1>0yubsklju4i4w5qditgqf8jl7xpa8dw</sha1>
    </revision>
    <revision>
      <id>101</id>
      <parentid>100</parentid>
      <timestamp>2023-05-31T17:49:39Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <comment>code blocks n stuff</comment>
      <origin>101</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="341" sha1="pypzmids9wblev42ns6kv2va6zh7kdu" xml:space="preserve">the UniverseModel contains everything that the game knows about. 

How to get a Vessel by name using UniverseModel &lt;syntaxhighlight lang="csharp" line="1" start="0"&gt;
VesselComponent vesselMovedComponent = GameManager.Instance.Game.UniverseModel.GetAllVessels().Where((vessel) =&gt; vessel.Name == "Vessel Name Here").First();
&lt;/syntaxhighlight&gt;</text>
      <sha1>pypzmids9wblev42ns6kv2va6zh7kdu</sha1>
    </revision>
    <revision>
      <id>102</id>
      <parentid>101</parentid>
      <timestamp>2023-05-31T17:50:09Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <comment>fiix</comment>
      <origin>102</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="336" sha1="et90u08k4ar2qqohhr890hjcp1gfhvj" xml:space="preserve">the UniverseModel contains everything that the game knows about. 

How to get a Vessel by name using UniverseModel &lt;syntaxhighlight lang="csharp" line="1" start="0"&gt;
VesselComponent vesselComponent = GameManager.Instance.Game.UniverseModel.GetAllVessels().Where((vessel) =&gt; vessel.Name == "Vessel Name Here").First();
&lt;/syntaxhighlight&gt;</text>
      <sha1>et90u08k4ar2qqohhr890hjcp1gfhvj</sha1>
    </revision>
    <revision>
      <id>103</id>
      <parentid>102</parentid>
      <timestamp>2023-05-31T17:50:46Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <origin>103</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="363" sha1="czg9zey6h4b6ndokfwujp9xrrumglqr" xml:space="preserve">the UniverseModel contains everything that the game knows about. 

How to get a Vessel by name using UniverseModel &lt;syntaxhighlight lang="csharp" line="1" start="0"&gt;
VesselComponent vesselComponent = GameManager.Instance.Game.UniverseModel.GetAllVessels().Where((vessel) =&gt; vessel.Name == "Vessel Name Here").First();
&lt;/syntaxhighlight&gt;

[[Category:Game systems]]</text>
      <sha1>czg9zey6h4b6ndokfwujp9xrrumglqr</sha1>
    </revision>
  </page>
  <page>
    <title>Resources</title>
    <ns>0</ns>
    <id>37</id>
    <revision>
      <id>104</id>
      <timestamp>2023-07-16T14:47:20Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <comment>Created page with "Resources are divided into base resources and recipes. Recipes are a collection witn 2 or more resources and their respective unit per recipe. {| class="wikitable sortable" |+ !Resource Name !Display Name Term !Abbreviation Term !Mass(per unit) !Volume(per unit) !Specific Heat (per unit) !Flow mode !Transfer Mode !Cost (per unit) !Icon Address |- |Methane |Resource/DisplayName/Methane |Resource/Abbreviation/LF |1 |0.65 |2010 |STACK_PRIORITY_SEARCH |PUMP |0.8 | |- |Oxidiz..."</comment>
      <origin>104</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2367" sha1="5azhl6wpga804ayrdovi2glcgndmzwb" xml:space="preserve">Resources are divided into base resources and recipes. Recipes are a collection witn 2 or more resources and their respective unit per recipe.
{| class="wikitable sortable"
|+
!Resource Name
!Display Name Term
!Abbreviation Term
!Mass(per unit)
!Volume(per unit)
!Specific Heat (per unit)
!Flow mode
!Transfer Mode
!Cost (per unit)
!Icon Address
|-
|Methane
|Resource/DisplayName/Methane
|Resource/Abbreviation/LF
|1
|0.65
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|Oxidizer
|Resource/DisplayName/Oxidizer
|Resource/Abbreviation/Ox
|1
|1.2
|1551
|STACK_PRIORITY_SEARCH
|PUMP
|0.18
|
|-
|Xenon
|Resource/DisplayName/Xenon Gas
|Resource/Abbreviation/Xe
|1
|0.1
|120
|STAGE_PRIORITY_FLOW
|PUMP
|4
|
|-
|ElectricCharge
|Resource/DisplayName/Electric Charge
|Resource/Abbreviation/EC
|0
|0
|0
|STAGE_PRIORITY_FLOW
|PUMP
|0
|Assets/UI/Sprites/Whitebox/WB-ICO-Battery.png
|-
|SolidFuel
|Resource/DisplayName/Solid Fuel
|Resource/Abbreviation/SF
|1
|5
|900
|NO_FLOW
|NONE
|0.6
|
|-
|Hydrogen
|Resource/DisplayName/Hydrogen
|Resource/Abbreviation/H
|1
|5
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|Ablator
|Resource/DisplayName/Ablator
|Resource/Abbreviation/Ab
|1
|1
|400
|STACK_PRIORITY_SEARCH
|PUMP
|0.5
|
|-
|MonoPropellant
|Resource/DisplayName/MonoPropellant
|Resource/Abbreviation/MP
|1
|5
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1.2
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|Uranium
|Resource/DisplayName/Uranium
|Resource/DisplayName/Uranium
|1
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|-
|EVAPropellant
|Resource/DisplayName/EVAPropellant
|Resource/Abbreviation/EP
|1
|20
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|IntakeAir
|Resource/DisplayName/Intake Air
|Resource/DisplayName/Air
|1
|1
|10
|ALL_VESSEL
|PUMP
|0
|
|-
|TestRocks
|Resource/DisplayName/TestRocks
|Resource/Abbreviation/TR
|0.010
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|}

= Recipes =
Recipes are composed by 2 or more resources.
{| class="wikitable"
|+
!Resource Name
!Display Name Term
!Abbreviation Term
!ingredients
!Unit per recipe unit
|-
|Methalox
|Resource/DisplayName/Methalox
|Resource/Abbreviation/MO
|Methane
Oxidizer
|0.2
0.8
|-
|MethaneAir
|Resource/DisplayName/Methane Air
|Resource/Abbreviation/MA
|Methane
IntakeAir
|1
1
|-
|XenonEC
|Resource/DisplayName/Xenon
|Resource/Abbreviation/Xe
|Xenon
ElectricCharge
|1
1
|}</text>
      <sha1>5azhl6wpga804ayrdovi2glcgndmzwb</sha1>
    </revision>
    <revision>
      <id>106</id>
      <parentid>104</parentid>
      <timestamp>2023-07-16T16:22:09Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <origin>106</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3187" sha1="s2c1oaorcstbyo19j71shnyak4day5h" xml:space="preserve">Resources are divided into base resources and recipes. Recipes are a collection witn 2 or more resources and their respective unit per recipe.
{| class="wikitable sortable"
|+Stock resources
!Resource Name 
!Display Name Term 
!Abbreviation Term
!Mass(per unit)
!Volume(per unit)
!Specific Heat (per unit)
!Flow mode
!Transfer Mode
!Cost (per unit)
!Icon Address
|-
|'''Methane'''
|Resource/DisplayName/Methane
|Resource/Abbreviation/LF
|1
|0.65
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Oxidizer'''
|Resource/DisplayName/Oxidizer
|Resource/Abbreviation/Ox
|1
|1.2
|1551
|STACK_PRIORITY_SEARCH
|PUMP
|0.18
|
|-
|'''Xenon'''
|Resource/DisplayName/Xenon Gas
|Resource/Abbreviation/Xe
|1
|0.1
|120
|STAGE_PRIORITY_FLOW
|PUMP
|4
|
|-
|'''ElectricCharge'''
|Resource/DisplayName/Electric Charge
|Resource/Abbreviation/EC
|0
|0
|0
|STAGE_PRIORITY_FLOW
|PUMP
|0
|Assets/UI/Sprites/Whitebox/WB-ICO-Battery.png
|-
|'''SolidFuel'''
|Resource/DisplayName/Solid Fuel
|Resource/Abbreviation/SF
|1
|5
|900
|NO_FLOW
|NONE
|0.6
|
|-
|'''Hydrogen'''
|Resource/DisplayName/Hydrogen
|Resource/Abbreviation/H
|1
|5
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Ablator'''
|Resource/DisplayName/Ablator
|Resource/Abbreviation/Ab
|1
|1
|400
|STACK_PRIORITY_SEARCH
|PUMP
|0.5
|
|-
|'''MonoPropellant'''
|Resource/DisplayName/MonoPropellant
|Resource/Abbreviation/MP
|1
|5
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1.2
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''Uranium'''
|Resource/DisplayName/Uranium
|Resource/DisplayName/Uranium
|1
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|-
|'''EVAPropellant'''
|Resource/DisplayName/EVAPropellant
|Resource/Abbreviation/EP
|1
|20
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''IntakeAir'''
|Resource/DisplayName/Intake Air
|Resource/DisplayName/Air
|1
|1
|10
|ALL_VESSEL
|PUMP
|0
|
|-
|'''TestRocks'''
|Resource/DisplayName/TestRocks
|Resource/Abbreviation/TR
|0.010
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|}

='''Recipes'''=
Recipes are composed by 2 or more resources.
{| class="wikitable"
|+Stock recipes
!Resource Name
!Display Name Term
!Abbreviation Term
!ingredients
!Unit per recipe unit
|-
|Methalox
|Resource/DisplayName/Methalox
|Resource/Abbreviation/MO
|Methane
Oxidizer
|0.2
0.8
|-
|MethaneAir
|Resource/DisplayName/Methane Air
|Resource/Abbreviation/MA
|Methane
IntakeAir
|1
1
|-
|XenonEC
|Resource/DisplayName/Xenon
|Resource/Abbreviation/Xe
|Xenon
ElectricCharge
|1
1
|}

==Flow mode==
refers to how the fuel should flow on the vessel. On resource definitions this is represented by an '''integer'''. Goes as follows:

*'''0 - NULL''' - invalid flow, shouldn't be used.
*'''1 - NO_FLOW''' - The fuel on said part wont flow to any other tank
*'''2 - ALL_VESSEL''' - The fuel will be evenly distrbuted to all requesters
*'''3 - STAGE_PRIORITY_FLOW'''
*'''4 - STACK_PRIORITY_SEARCH'''
*'''5 - STAGE_STACK_FLOW_BALANCE'''

==Transfer Mode==
refers to if (or not) the fuel should be pumped to other parts. On resource definitions this is represented by an integer. Goes as follows:

*'''0 - NONE''' - fuel isn't transfered to other parts
*'''1 - PUMP''' - fuel is trasnfered to other parts</text>
      <sha1>s2c1oaorcstbyo19j71shnyak4day5h</sha1>
    </revision>
    <revision>
      <id>107</id>
      <parentid>106</parentid>
      <timestamp>2023-07-16T22:09:31Z</timestamp>
      <contributor>
        <username>Sinon</username>
        <id>4</id>
      </contributor>
      <minor/>
      <comment>engrish</comment>
      <origin>107</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3187" sha1="22pyc5k7lqd4jo9z56bjzu1lf3b50g7" xml:space="preserve">Resources are divided into base resources and recipes. Recipes are a collection with 2 or more resources and their respective unit per recipe.
{| class="wikitable sortable"
|+Stock resources
!Resource Name 
!Display Name Term 
!Abbreviation Term
!Mass(per unit)
!Volume(per unit)
!Specific Heat (per unit)
!Flow mode
!Transfer Mode
!Cost (per unit)
!Icon Address
|-
|'''Methane'''
|Resource/DisplayName/Methane
|Resource/Abbreviation/LF
|1
|0.65
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Oxidizer'''
|Resource/DisplayName/Oxidizer
|Resource/Abbreviation/Ox
|1
|1.2
|1551
|STACK_PRIORITY_SEARCH
|PUMP
|0.18
|
|-
|'''Xenon'''
|Resource/DisplayName/Xenon Gas
|Resource/Abbreviation/Xe
|1
|0.1
|120
|STAGE_PRIORITY_FLOW
|PUMP
|4
|
|-
|'''ElectricCharge'''
|Resource/DisplayName/Electric Charge
|Resource/Abbreviation/EC
|0
|0
|0
|STAGE_PRIORITY_FLOW
|PUMP
|0
|Assets/UI/Sprites/Whitebox/WB-ICO-Battery.png
|-
|'''SolidFuel'''
|Resource/DisplayName/Solid Fuel
|Resource/Abbreviation/SF
|1
|5
|900
|NO_FLOW
|NONE
|0.6
|
|-
|'''Hydrogen'''
|Resource/DisplayName/Hydrogen
|Resource/Abbreviation/H
|1
|5
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Ablator'''
|Resource/DisplayName/Ablator
|Resource/Abbreviation/Ab
|1
|1
|400
|STACK_PRIORITY_SEARCH
|PUMP
|0.5
|
|-
|'''MonoPropellant'''
|Resource/DisplayName/MonoPropellant
|Resource/Abbreviation/MP
|1
|5
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1.2
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''Uranium'''
|Resource/DisplayName/Uranium
|Resource/DisplayName/Uranium
|1
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|-
|'''EVAPropellant'''
|Resource/DisplayName/EVAPropellant
|Resource/Abbreviation/EP
|1
|20
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''IntakeAir'''
|Resource/DisplayName/Intake Air
|Resource/DisplayName/Air
|1
|1
|10
|ALL_VESSEL
|PUMP
|0
|
|-
|'''TestRocks'''
|Resource/DisplayName/TestRocks
|Resource/Abbreviation/TR
|0.010
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|}

='''Recipes'''=
Recipes are composed by 2 or more resources.
{| class="wikitable"
|+Stock recipes
!Resource Name
!Display Name Term
!Abbreviation Term
!ingredients
!Unit per recipe unit
|-
|Methalox
|Resource/DisplayName/Methalox
|Resource/Abbreviation/MO
|Methane
Oxidizer
|0.2
0.8
|-
|MethaneAir
|Resource/DisplayName/Methane Air
|Resource/Abbreviation/MA
|Methane
IntakeAir
|1
1
|-
|XenonEC
|Resource/DisplayName/Xenon
|Resource/Abbreviation/Xe
|Xenon
ElectricCharge
|1
1
|}

==Flow mode==
refers to how the fuel should flow on the vessel. On resource definitions this is represented by an '''integer'''. Goes as follows:

*'''0 - NULL''' - invalid flow, shouldn't be used.
*'''1 - NO_FLOW''' - The fuel on said part wont flow to any other tank
*'''2 - ALL_VESSEL''' - The fuel will be evenly distrbuted to all requesters
*'''3 - STAGE_PRIORITY_FLOW'''
*'''4 - STACK_PRIORITY_SEARCH'''
*'''5 - STAGE_STACK_FLOW_BALANCE'''

==Transfer Mode==
refers to if (or not) the fuel should be pumped to other parts. On resource definitions this is represented by an integer. Goes as follows:

*'''0 - NONE''' - fuel isn't transfered to other parts
*'''1 - PUMP''' - fuel is trasnfered to other parts</text>
      <sha1>22pyc5k7lqd4jo9z56bjzu1lf3b50g7</sha1>
    </revision>
    <revision>
      <id>108</id>
      <parentid>107</parentid>
      <timestamp>2023-07-16T22:12:51Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <origin>108</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3200" sha1="ec4y4t7iif7vyj4xshzggy7hayv0emj" xml:space="preserve">Resources are divided into base resources and recipes. Recipes are a collection with 2 or more resources and their respective unit per recipe.
{| class="wikitable sortable"
|+Stock resources
!Resource Name 
!Display Name Term 
!Abbreviation Term
!Mass(per unit)
!Volume(per unit)
!Specific Heat (per unit)
!Flow mode
!Transfer Mode
!Cost (per unit)
!Icon Address
|-
|'''Methane'''
|Resource/DisplayName/Methane
|Resource/Abbreviation/LF
|1
|0.65
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Oxidizer'''
|Resource/DisplayName/Oxidizer
|Resource/Abbreviation/Ox
|1
|1.2
|1551
|STACK_PRIORITY_SEARCH
|PUMP
|0.18
|
|-
|'''Xenon'''
|Resource/DisplayName/Xenon Gas
|Resource/Abbreviation/Xe
|1
|0.1
|120
|STAGE_PRIORITY_FLOW
|PUMP
|4
|
|-
|'''ElectricCharge'''
|Resource/DisplayName/Electric Charge
|Resource/Abbreviation/EC
|0
|0
|0
|STAGE_PRIORITY_FLOW
|PUMP
|0
|Assets/UI/Sprites/Whitebox/WB-ICO-Battery.png
|-
|'''SolidFuel'''
|Resource/DisplayName/Solid Fuel
|Resource/Abbreviation/SF
|1
|5
|900
|NO_FLOW
|NONE
|0.6
|
|-
|'''Hydrogen'''
|Resource/DisplayName/Hydrogen
|Resource/Abbreviation/H
|1
|5
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Ablator'''
|Resource/DisplayName/Ablator
|Resource/Abbreviation/Ab
|1
|1
|400
|STACK_PRIORITY_SEARCH
|PUMP
|0.5
|
|-
|'''MonoPropellant'''
|Resource/DisplayName/MonoPropellant
|Resource/Abbreviation/MP
|1
|5
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1.2
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''Uranium'''
|Resource/DisplayName/Uranium
|Resource/DisplayName/Uranium
|1
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|-
|'''EVAPropellant'''
|Resource/DisplayName/EVAPropellant
|Resource/Abbreviation/EP
|1
|20
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''IntakeAir'''
|Resource/DisplayName/Intake Air
|Resource/DisplayName/Air
|1
|1
|10
|ALL_VESSEL
|PUMP
|0
|
|-
|'''TestRocks'''
|Resource/DisplayName/TestRocks
|Resource/Abbreviation/TR
|0.010
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|}

='''Recipes'''=
Recipes are composed by 2 or more resources.
{| class="wikitable"
|+Stock recipes
!Resource Name
!Display Name Term
!Abbreviation Term
!ingredients
!Unit per recipe unit
|-
|Methalox
|Resource/DisplayName/Methalox
|Resource/Abbreviation/MO
|Methane
Oxidizer
|0.2
0.8
|-
|MethaneAir
|Resource/DisplayName/Methane Air
|Resource/Abbreviation/MA
|Methane
IntakeAir
|1
1
|-
|XenonEC
|Resource/DisplayName/Xenon
|Resource/Abbreviation/Xe
|Xenon
ElectricCharge
|1
1
|}

==Flow mode==
refers to how the fuel should flow on the vessel. On resource definitions this is represented by an '''integer'''. Goes as follows:

*'''0 - NULL''' - invalid flow, shouldn't be used.
*'''1 - NO_FLOW''' - The fuel on said part wont flow to any other tank
*'''2 - ALL_VESSEL''' - The fuel will be evenly distrbuted to all requesters
*'''3 - STAGE_PRIORITY_FLOW'''
*'''4 - STACK_PRIORITY_SEARCH'''
*'''5 - STAGE_STACK_FLOW_BALANCE'''

==Transfer Mode==
refers to if (or not) the fuel should be pumped to other parts. On resource definitions this is represented by an integer. Goes as follows:

*'''0 - NONE''' - fuel isn't transfered to other parts
*'''1 - PUMP''' - fuel is trasnfered to other parts
__FORCETOC__</text>
      <sha1>ec4y4t7iif7vyj4xshzggy7hayv0emj</sha1>
    </revision>
    <revision>
      <id>109</id>
      <parentid>108</parentid>
      <timestamp>2023-07-16T22:13:10Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>109</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3240" sha1="5zoznqcv2rl1ta9bymkwgvrq1gxi8j4" xml:space="preserve">Resources are divided into base resources and recipes. Recipes are a collection with 2 or more resources and their respective unit per recipe.
&lt;div style="overflow-x: scroll"&gt;
{| class="wikitable sortable"
|+Stock resources
!Resource Name 
!Display Name Term 
!Abbreviation Term
!Mass(per unit)
!Volume(per unit)
!Specific Heat (per unit)
!Flow mode
!Transfer Mode
!Cost (per unit)
!Icon Address
|-
|'''Methane'''
|Resource/DisplayName/Methane
|Resource/Abbreviation/LF
|1
|0.65
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Oxidizer'''
|Resource/DisplayName/Oxidizer
|Resource/Abbreviation/Ox
|1
|1.2
|1551
|STACK_PRIORITY_SEARCH
|PUMP
|0.18
|
|-
|'''Xenon'''
|Resource/DisplayName/Xenon Gas
|Resource/Abbreviation/Xe
|1
|0.1
|120
|STAGE_PRIORITY_FLOW
|PUMP
|4
|
|-
|'''ElectricCharge'''
|Resource/DisplayName/Electric Charge
|Resource/Abbreviation/EC
|0
|0
|0
|STAGE_PRIORITY_FLOW
|PUMP
|0
|Assets/UI/Sprites/Whitebox/WB-ICO-Battery.png
|-
|'''SolidFuel'''
|Resource/DisplayName/Solid Fuel
|Resource/Abbreviation/SF
|1
|5
|900
|NO_FLOW
|NONE
|0.6
|
|-
|'''Hydrogen'''
|Resource/DisplayName/Hydrogen
|Resource/Abbreviation/H
|1
|5
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Ablator'''
|Resource/DisplayName/Ablator
|Resource/Abbreviation/Ab
|1
|1
|400
|STACK_PRIORITY_SEARCH
|PUMP
|0.5
|
|-
|'''MonoPropellant'''
|Resource/DisplayName/MonoPropellant
|Resource/Abbreviation/MP
|1
|5
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1.2
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''Uranium'''
|Resource/DisplayName/Uranium
|Resource/DisplayName/Uranium
|1
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|-
|'''EVAPropellant'''
|Resource/DisplayName/EVAPropellant
|Resource/Abbreviation/EP
|1
|20
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''IntakeAir'''
|Resource/DisplayName/Intake Air
|Resource/DisplayName/Air
|1
|1
|10
|ALL_VESSEL
|PUMP
|0
|
|-
|'''TestRocks'''
|Resource/DisplayName/TestRocks
|Resource/Abbreviation/TR
|0.010
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|}
&lt;/div&gt;

='''Recipes'''=
Recipes are composed by 2 or more resources.
{| class="wikitable"
|+Stock recipes
!Resource Name
!Display Name Term
!Abbreviation Term
!ingredients
!Unit per recipe unit
|-
|Methalox
|Resource/DisplayName/Methalox
|Resource/Abbreviation/MO
|Methane
Oxidizer
|0.2
0.8
|-
|MethaneAir
|Resource/DisplayName/Methane Air
|Resource/Abbreviation/MA
|Methane
IntakeAir
|1
1
|-
|XenonEC
|Resource/DisplayName/Xenon
|Resource/Abbreviation/Xe
|Xenon
ElectricCharge
|1
1
|}

==Flow mode==
refers to how the fuel should flow on the vessel. On resource definitions this is represented by an '''integer'''. Goes as follows:

*'''0 - NULL''' - invalid flow, shouldn't be used.
*'''1 - NO_FLOW''' - The fuel on said part wont flow to any other tank
*'''2 - ALL_VESSEL''' - The fuel will be evenly distrbuted to all requesters
*'''3 - STAGE_PRIORITY_FLOW'''
*'''4 - STACK_PRIORITY_SEARCH'''
*'''5 - STAGE_STACK_FLOW_BALANCE'''

==Transfer Mode==
refers to if (or not) the fuel should be pumped to other parts. On resource definitions this is represented by an integer. Goes as follows:

*'''0 - NONE''' - fuel isn't transfered to other parts
*'''1 - PUMP''' - fuel is trasnfered to other parts
__FORCETOC__</text>
      <sha1>5zoznqcv2rl1ta9bymkwgvrq1gxi8j4</sha1>
    </revision>
    <revision>
      <id>110</id>
      <parentid>109</parentid>
      <timestamp>2023-07-16T22:14:07Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>110</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3234" sha1="qork473iombly845108930eruz0s4vr" xml:space="preserve">Resources are divided into base resources and recipes. Recipes are a collection with 2 or more resources and their respective unit per recipe.
&lt;div style="overflow-x: scroll"&gt;
{| class="wikitable sortable"
|+Stock resources
!Resource Name 
!Display Name Term 
!Abbreviation Term
!Mass(per unit)
!Volume(per unit)
!Specific Heat (per unit)
!Flow mode
!Transfer Mode
!Cost (per unit)
!Icon Address
|-
|'''Methane'''
|Resource/DisplayName/Methane
|Resource/Abbreviation/LF
|1
|0.65
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Oxidizer'''
|Resource/DisplayName/Oxidizer
|Resource/Abbreviation/Ox
|1
|1.2
|1551
|STACK_PRIORITY_SEARCH
|PUMP
|0.18
|
|-
|'''Xenon'''
|Resource/DisplayName/Xenon Gas
|Resource/Abbreviation/Xe
|1
|0.1
|120
|STAGE_PRIORITY_FLOW
|PUMP
|4
|
|-
|'''ElectricCharge'''
|Resource/DisplayName/Electric Charge
|Resource/Abbreviation/EC
|0
|0
|0
|STAGE_PRIORITY_FLOW
|PUMP
|0
|Assets/UI/Sprites/Whitebox/WB-ICO-Battery.png
|-
|'''SolidFuel'''
|Resource/DisplayName/Solid Fuel
|Resource/Abbreviation/SF
|1
|5
|900
|NO_FLOW
|NONE
|0.6
|
|-
|'''Hydrogen'''
|Resource/DisplayName/Hydrogen
|Resource/Abbreviation/H
|1
|5
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Ablator'''
|Resource/DisplayName/Ablator
|Resource/Abbreviation/Ab
|1
|1
|400
|STACK_PRIORITY_SEARCH
|PUMP
|0.5
|
|-
|'''MonoPropellant'''
|Resource/DisplayName/MonoPropellant
|Resource/Abbreviation/MP
|1
|5
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1.2
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''Uranium'''
|Resource/DisplayName/Uranium
|Resource/DisplayName/Uranium
|1
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|-
|'''EVAPropellant'''
|Resource/DisplayName/EVAPropellant
|Resource/Abbreviation/EP
|1
|20
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''IntakeAir'''
|Resource/DisplayName/Intake Air
|Resource/DisplayName/Air
|1
|1
|10
|ALL_VESSEL
|PUMP
|0
|
|-
|'''TestRocks'''
|Resource/DisplayName/TestRocks
|Resource/Abbreviation/TR
|0.010
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|}
&lt;/div&gt;

=Recipes=
Recipes are composed by 2 or more resources.
{| class="wikitable"
|+Stock recipes
!Resource Name
!Display Name Term
!Abbreviation Term
!ingredients
!Unit per recipe unit
|-
|Methalox
|Resource/DisplayName/Methalox
|Resource/Abbreviation/MO
|Methane
Oxidizer
|0.2
0.8
|-
|MethaneAir
|Resource/DisplayName/Methane Air
|Resource/Abbreviation/MA
|Methane
IntakeAir
|1
1
|-
|XenonEC
|Resource/DisplayName/Xenon
|Resource/Abbreviation/Xe
|Xenon
ElectricCharge
|1
1
|}

==Flow mode==
refers to how the fuel should flow on the vessel. On resource definitions this is represented by an '''integer'''. Goes as follows:

*'''0 - NULL''' - invalid flow, shouldn't be used.
*'''1 - NO_FLOW''' - The fuel on said part wont flow to any other tank
*'''2 - ALL_VESSEL''' - The fuel will be evenly distrbuted to all requesters
*'''3 - STAGE_PRIORITY_FLOW'''
*'''4 - STACK_PRIORITY_SEARCH'''
*'''5 - STAGE_STACK_FLOW_BALANCE'''

==Transfer Mode==
refers to if (or not) the fuel should be pumped to other parts. On resource definitions this is represented by an integer. Goes as follows:

*'''0 - NONE''' - fuel isn't transfered to other parts
*'''1 - PUMP''' - fuel is trasnfered to other parts
__FORCETOC__</text>
      <sha1>qork473iombly845108930eruz0s4vr</sha1>
    </revision>
    <revision>
      <id>111</id>
      <parentid>110</parentid>
      <timestamp>2023-07-16T22:16:27Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <origin>111</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3346" sha1="l4uafm2o0r8vh9cw2evw1fitc5y4jim" xml:space="preserve">Resources are divided into base resources and recipes. Recipes are a collection with 2 or more resources and their respective unit per recipe.
&lt;div style="overflow-x: scroll"&gt;
{| class="wikitable sortable"
|+Stock resources
!Resource Name 
!Display Name Term 
!Abbreviation Term
!Mass(per unit)
!Volume(per unit)
!Specific Heat (per unit)
![https://wiki.spacewarp.org/wiki/Resources#Flow_mode Flow mode]
![https://wiki.spacewarp.org/wiki/Resources#Transfer_mode Transfer mode]
!Cost (per unit)
!Icon Address
|-
|'''Methane'''
|Resource/DisplayName/Methane
|Resource/Abbreviation/LF
|1
|0.65
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Oxidizer'''
|Resource/DisplayName/Oxidizer
|Resource/Abbreviation/Ox
|1
|1.2
|1551
|STACK_PRIORITY_SEARCH
|PUMP
|0.18
|
|-
|'''Xenon'''
|Resource/DisplayName/Xenon Gas
|Resource/Abbreviation/Xe
|1
|0.1
|120
|STAGE_PRIORITY_FLOW
|PUMP
|4
|
|-
|'''ElectricCharge'''
|Resource/DisplayName/Electric Charge
|Resource/Abbreviation/EC
|0
|0
|0
|STAGE_PRIORITY_FLOW
|PUMP
|0
|Assets/UI/Sprites/Whitebox/WB-ICO-Battery.png
|-
|'''SolidFuel'''
|Resource/DisplayName/Solid Fuel
|Resource/Abbreviation/SF
|1
|5
|900
|NO_FLOW
|NONE
|0.6
|
|-
|'''Hydrogen'''
|Resource/DisplayName/Hydrogen
|Resource/Abbreviation/H
|1
|5
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Ablator'''
|Resource/DisplayName/Ablator
|Resource/Abbreviation/Ab
|1
|1
|400
|STACK_PRIORITY_SEARCH
|PUMP
|0.5
|
|-
|'''MonoPropellant'''
|Resource/DisplayName/MonoPropellant
|Resource/Abbreviation/MP
|1
|5
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1.2
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''Uranium'''
|Resource/DisplayName/Uranium
|Resource/DisplayName/Uranium
|1
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|-
|'''EVAPropellant'''
|Resource/DisplayName/EVAPropellant
|Resource/Abbreviation/EP
|1
|20
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''IntakeAir'''
|Resource/DisplayName/Intake Air
|Resource/DisplayName/Air
|1
|1
|10
|ALL_VESSEL
|PUMP
|0
|
|-
|'''TestRocks'''
|Resource/DisplayName/TestRocks
|Resource/Abbreviation/TR
|0.010
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|}
&lt;/div&gt;

=Recipes=
Recipes are composed by 2 or more resources.
{| class="wikitable"
|+Stock recipes
!Resource Name
!Display Name Term
!Abbreviation Term
!ingredients
!Unit per recipe unit
|-
|Methalox
|Resource/DisplayName/Methalox
|Resource/Abbreviation/MO
|Methane
Oxidizer
|0.2
0.8
|-
|MethaneAir
|Resource/DisplayName/Methane Air
|Resource/Abbreviation/MA
|Methane
IntakeAir
|1
1
|-
|XenonEC
|Resource/DisplayName/Xenon
|Resource/Abbreviation/Xe
|Xenon
ElectricCharge
|1
1
|}

==Flow mode==
refers to how the fuel should flow on the vessel. On resource definitions this is represented by an '''integer'''. Goes as follows:

*'''0 - NULL''' - invalid flow, shouldn't be used.
*'''1 - NO_FLOW''' - The fuel on said part wont flow to any other tank
*'''2 - ALL_VESSEL''' - The fuel will be evenly distrbuted to all requesters
*'''3 - STAGE_PRIORITY_FLOW'''
*'''4 - STACK_PRIORITY_SEARCH'''
*'''5 - STAGE_STACK_FLOW_BALANCE'''

==Transfer Mode==
refers to if (or not) the fuel should be pumped to other parts. On resource definitions this is represented by an integer. Goes as follows:

*'''0 - NONE''' - fuel isn't transfered to other parts
*'''1 - PUMP''' - fuel is trasnfered to other parts
__FORCETOC__</text>
      <sha1>l4uafm2o0r8vh9cw2evw1fitc5y4jim</sha1>
    </revision>
    <revision>
      <id>112</id>
      <parentid>111</parentid>
      <timestamp>2023-07-16T22:17:39Z</timestamp>
      <contributor>
        <username>LuxStice</username>
        <id>12</id>
      </contributor>
      <comment>/* Flow mode */</comment>
      <origin>112</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3346" sha1="8ebom14l5i4dmgkoy0o4f2grk8gp5uv" xml:space="preserve">Resources are divided into base resources and recipes. Recipes are a collection with 2 or more resources and their respective unit per recipe.
&lt;div style="overflow-x: scroll"&gt;
{| class="wikitable sortable"
|+Stock resources
!Resource Name 
!Display Name Term 
!Abbreviation Term
!Mass(per unit)
!Volume(per unit)
!Specific Heat (per unit)
![https://wiki.spacewarp.org/wiki/Resources#Flow_Mode Flow Mode]
![https://wiki.spacewarp.org/wiki/Resources#Transfer_Mode Transfer Mode]
!Cost (per unit)
!Icon Address
|-
|'''Methane'''
|Resource/DisplayName/Methane
|Resource/Abbreviation/LF
|1
|0.65
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Oxidizer'''
|Resource/DisplayName/Oxidizer
|Resource/Abbreviation/Ox
|1
|1.2
|1551
|STACK_PRIORITY_SEARCH
|PUMP
|0.18
|
|-
|'''Xenon'''
|Resource/DisplayName/Xenon Gas
|Resource/Abbreviation/Xe
|1
|0.1
|120
|STAGE_PRIORITY_FLOW
|PUMP
|4
|
|-
|'''ElectricCharge'''
|Resource/DisplayName/Electric Charge
|Resource/Abbreviation/EC
|0
|0
|0
|STAGE_PRIORITY_FLOW
|PUMP
|0
|Assets/UI/Sprites/Whitebox/WB-ICO-Battery.png
|-
|'''SolidFuel'''
|Resource/DisplayName/Solid Fuel
|Resource/Abbreviation/SF
|1
|5
|900
|NO_FLOW
|NONE
|0.6
|
|-
|'''Hydrogen'''
|Resource/DisplayName/Hydrogen
|Resource/Abbreviation/H
|1
|5
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Ablator'''
|Resource/DisplayName/Ablator
|Resource/Abbreviation/Ab
|1
|1
|400
|STACK_PRIORITY_SEARCH
|PUMP
|0.5
|
|-
|'''MonoPropellant'''
|Resource/DisplayName/MonoPropellant
|Resource/Abbreviation/MP
|1
|5
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1.2
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''Uranium'''
|Resource/DisplayName/Uranium
|Resource/DisplayName/Uranium
|1
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|-
|'''EVAPropellant'''
|Resource/DisplayName/EVAPropellant
|Resource/Abbreviation/EP
|1
|20
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''IntakeAir'''
|Resource/DisplayName/Intake Air
|Resource/DisplayName/Air
|1
|1
|10
|ALL_VESSEL
|PUMP
|0
|
|-
|'''TestRocks'''
|Resource/DisplayName/TestRocks
|Resource/Abbreviation/TR
|0.010
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|}
&lt;/div&gt;

=Recipes=
Recipes are composed by 2 or more resources.
{| class="wikitable"
|+Stock recipes
!Resource Name
!Display Name Term
!Abbreviation Term
!ingredients
!Unit per recipe unit
|-
|Methalox
|Resource/DisplayName/Methalox
|Resource/Abbreviation/MO
|Methane
Oxidizer
|0.2
0.8
|-
|MethaneAir
|Resource/DisplayName/Methane Air
|Resource/Abbreviation/MA
|Methane
IntakeAir
|1
1
|-
|XenonEC
|Resource/DisplayName/Xenon
|Resource/Abbreviation/Xe
|Xenon
ElectricCharge
|1
1
|}

==Flow Mode==
refers to how the fuel should flow on the vessel. On resource definitions this is represented by an '''integer'''. Goes as follows:

*'''0 - NULL''' - invalid flow, shouldn't be used.
*'''1 - NO_FLOW''' - The fuel on said part wont flow to any other tank
*'''2 - ALL_VESSEL''' - The fuel will be evenly distrbuted to all requesters
*'''3 - STAGE_PRIORITY_FLOW'''
*'''4 - STACK_PRIORITY_SEARCH'''
*'''5 - STAGE_STACK_FLOW_BALANCE'''

==Transfer Mode==
refers to if (or not) the fuel should be pumped to other parts. On resource definitions this is represented by an integer. Goes as follows:

*'''0 - NONE''' - fuel isn't transfered to other parts
*'''1 - PUMP''' - fuel is trasnfered to other parts
__FORCETOC__</text>
      <sha1>8ebom14l5i4dmgkoy0o4f2grk8gp5uv</sha1>
    </revision>
    <revision>
      <id>113</id>
      <parentid>112</parentid>
      <timestamp>2023-07-16T22:20:01Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>113</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3268" sha1="7int13vfsbc3uic80kb0v4oznodhjkk" xml:space="preserve">Resources are divided into base resources and recipes. Recipes are a collection with 2 or more resources and their respective unit per recipe.
&lt;div style="overflow-x: scroll"&gt;
{| class="wikitable sortable"
|+Stock resources
!Resource Name 
!Display Name Term 
!Abbreviation Term
!Mass(per unit)
!Volume(per unit)
!Specific Heat (per unit)
![[#Flow Mode|Flow Mode]]
![[#Transfer Mode|Transfer Mode]]
!Cost (per unit)
!Icon Address
|-
|'''Methane'''
|Resource/DisplayName/Methane
|Resource/Abbreviation/LF
|1
|0.65
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Oxidizer'''
|Resource/DisplayName/Oxidizer
|Resource/Abbreviation/Ox
|1
|1.2
|1551
|STACK_PRIORITY_SEARCH
|PUMP
|0.18
|
|-
|'''Xenon'''
|Resource/DisplayName/Xenon Gas
|Resource/Abbreviation/Xe
|1
|0.1
|120
|STAGE_PRIORITY_FLOW
|PUMP
|4
|
|-
|'''ElectricCharge'''
|Resource/DisplayName/Electric Charge
|Resource/Abbreviation/EC
|0
|0
|0
|STAGE_PRIORITY_FLOW
|PUMP
|0
|Assets/UI/Sprites/Whitebox/WB-ICO-Battery.png
|-
|'''SolidFuel'''
|Resource/DisplayName/Solid Fuel
|Resource/Abbreviation/SF
|1
|5
|900
|NO_FLOW
|NONE
|0.6
|
|-
|'''Hydrogen'''
|Resource/DisplayName/Hydrogen
|Resource/Abbreviation/H
|1
|5
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Ablator'''
|Resource/DisplayName/Ablator
|Resource/Abbreviation/Ab
|1
|1
|400
|STACK_PRIORITY_SEARCH
|PUMP
|0.5
|
|-
|'''MonoPropellant'''
|Resource/DisplayName/MonoPropellant
|Resource/Abbreviation/MP
|1
|5
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1.2
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''Uranium'''
|Resource/DisplayName/Uranium
|Resource/DisplayName/Uranium
|1
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|-
|'''EVAPropellant'''
|Resource/DisplayName/EVAPropellant
|Resource/Abbreviation/EP
|1
|20
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''IntakeAir'''
|Resource/DisplayName/Intake Air
|Resource/DisplayName/Air
|1
|1
|10
|ALL_VESSEL
|PUMP
|0
|
|-
|'''TestRocks'''
|Resource/DisplayName/TestRocks
|Resource/Abbreviation/TR
|0.010
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|}
&lt;/div&gt;

=Recipes=
Recipes are composed by 2 or more resources.
{| class="wikitable"
|+Stock recipes
!Resource Name
!Display Name Term
!Abbreviation Term
!ingredients
!Unit per recipe unit
|-
|Methalox
|Resource/DisplayName/Methalox
|Resource/Abbreviation/MO
|Methane
Oxidizer
|0.2
0.8
|-
|MethaneAir
|Resource/DisplayName/Methane Air
|Resource/Abbreviation/MA
|Methane
IntakeAir
|1
1
|-
|XenonEC
|Resource/DisplayName/Xenon
|Resource/Abbreviation/Xe
|Xenon
ElectricCharge
|1
1
|}

==Flow Mode==
refers to how the fuel should flow on the vessel. On resource definitions this is represented by an '''integer'''. Goes as follows:

*'''0 - NULL''' - invalid flow, shouldn't be used.
*'''1 - NO_FLOW''' - The fuel on said part wont flow to any other tank
*'''2 - ALL_VESSEL''' - The fuel will be evenly distrbuted to all requesters
*'''3 - STAGE_PRIORITY_FLOW'''
*'''4 - STACK_PRIORITY_SEARCH'''
*'''5 - STAGE_STACK_FLOW_BALANCE'''

==Transfer Mode==
refers to if (or not) the fuel should be pumped to other parts. On resource definitions this is represented by an integer. Goes as follows:

*'''0 - NONE''' - fuel isn't transfered to other parts
*'''1 - PUMP''' - fuel is trasnfered to other parts
__FORCETOC__</text>
      <sha1>7int13vfsbc3uic80kb0v4oznodhjkk</sha1>
    </revision>
    <revision>
      <id>142</id>
      <parentid>113</parentid>
      <timestamp>2023-08-03T00:09:52Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>142</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3294" sha1="f2zbqyxltqd65uiqqau3sokkkoy62ea" xml:space="preserve">Resources are divided into base resources and recipes. Recipes are a collection with 2 or more resources and their respective unit per recipe.
&lt;div style="overflow-x: scroll"&gt;
{| class="wikitable sortable"
|+Stock resources
!Resource Name 
!Display Name Term 
!Abbreviation Term
!Mass(per unit)
!Volume(per unit)
!Specific Heat (per unit)
![[#Flow Mode|Flow Mode]]
![[#Transfer Mode|Transfer Mode]]
!Cost (per unit)
!Icon Address
|-
|'''Methane'''
|Resource/DisplayName/Methane
|Resource/Abbreviation/LF
|1
|0.65
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Oxidizer'''
|Resource/DisplayName/Oxidizer
|Resource/Abbreviation/Ox
|1
|1.2
|1551
|STACK_PRIORITY_SEARCH
|PUMP
|0.18
|
|-
|'''Xenon'''
|Resource/DisplayName/Xenon Gas
|Resource/Abbreviation/Xe
|1
|0.1
|120
|STAGE_PRIORITY_FLOW
|PUMP
|4
|
|-
|'''ElectricCharge'''
|Resource/DisplayName/Electric Charge
|Resource/Abbreviation/EC
|0
|0
|0
|STAGE_PRIORITY_FLOW
|PUMP
|0
|Assets/UI/Sprites/Whitebox/WB-ICO-Battery.png
|-
|'''SolidFuel'''
|Resource/DisplayName/Solid Fuel
|Resource/Abbreviation/SF
|1
|5
|900
|NO_FLOW
|NONE
|0.6
|
|-
|'''Hydrogen'''
|Resource/DisplayName/Hydrogen
|Resource/Abbreviation/H
|1
|5
|2010
|STACK_PRIORITY_SEARCH
|PUMP
|0.8
|
|-
|'''Ablator'''
|Resource/DisplayName/Ablator
|Resource/Abbreviation/Ab
|1
|1
|400
|STACK_PRIORITY_SEARCH
|PUMP
|0.5
|
|-
|'''MonoPropellant'''
|Resource/DisplayName/MonoPropellant
|Resource/Abbreviation/MP
|1
|5
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1.2
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''Uranium'''
|Resource/DisplayName/Uranium
|Resource/DisplayName/Uranium
|1
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|-
|'''EVAPropellant'''
|Resource/DisplayName/EVAPropellant
|Resource/Abbreviation/EP
|1
|20
|3000
|STAGE_PRIORITY_FLOW
|PUMP
|1
|Assets/UI/Sprites/Whitebox/WB-ICO-Partial-Out-of-Fuel.png
|-
|'''IntakeAir'''
|Resource/DisplayName/Intake Air
|Resource/DisplayName/Air
|1
|1
|10
|ALL_VESSEL
|PUMP
|0
|
|-
|'''TestRocks'''
|Resource/DisplayName/TestRocks
|Resource/Abbreviation/TR
|0.010
|5
|1000
|ALL_VESSEL
|PUMP
|0.02
|
|}
&lt;/div&gt;

=Recipes=
Recipes are composed by 2 or more resources.
{| class="wikitable"
|+Stock recipes
!Resource Name
!Display Name Term
!Abbreviation Term
!ingredients
!Unit per recipe unit
|-
|Methalox
|Resource/DisplayName/Methalox
|Resource/Abbreviation/MO
|Methane
Oxidizer
|0.2
0.8
|-
|MethaneAir
|Resource/DisplayName/Methane Air
|Resource/Abbreviation/MA
|Methane
IntakeAir
|1
1
|-
|XenonEC
|Resource/DisplayName/Xenon
|Resource/Abbreviation/Xe
|Xenon
ElectricCharge
|1
1
|}

==Flow Mode==
refers to how the fuel should flow on the vessel. On resource definitions this is represented by an '''integer'''. Goes as follows:

*'''0 - NULL''' - invalid flow, shouldn't be used.
*'''1 - NO_FLOW''' - The fuel on said part wont flow to any other tank
*'''2 - ALL_VESSEL''' - The fuel will be evenly distrbuted to all requesters
*'''3 - STAGE_PRIORITY_FLOW'''
*'''4 - STACK_PRIORITY_SEARCH'''
*'''5 - STAGE_STACK_FLOW_BALANCE'''

==Transfer Mode==
refers to if (or not) the fuel should be pumped to other parts. On resource definitions this is represented by an integer. Goes as follows:

*'''0 - NONE''' - fuel isn't transfered to other parts
*'''1 - PUMP''' - fuel is trasnfered to other parts
__FORCETOC__
[[Category:Game systems]]</text>
      <sha1>f2zbqyxltqd65uiqqau3sokkkoy62ea</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Core Part Data</title>
    <ns>14</ns>
    <id>38</id>
    <revision>
      <id>115</id>
      <timestamp>2023-08-02T23:07:12Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Created page with "The pages in this category contain the descriptions and possible values of various properties in the Core Part Data module."</comment>
      <origin>115</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="123" sha1="66dzhqcsrti3rajta2fg1ezxp8c317u" xml:space="preserve">The pages in this category contain the descriptions and possible values of various properties in the Core Part Data module.</text>
      <sha1>66dzhqcsrti3rajta2fg1ezxp8c317u</sha1>
    </revision>
    <revision>
      <id>116</id>
      <parentid>115</parentid>
      <timestamp>2023-08-02T23:07:31Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>116</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="140" sha1="li4jhk5e53gozy2ykfioar40f6gy9wj" xml:space="preserve">The pages in this category contain the descriptions and possible values of various properties in the Core Part Data module.
[[Category:TOC]]</text>
      <sha1>li4jhk5e53gozy2ykfioar40f6gy9wj</sha1>
    </revision>
    <revision>
      <id>117</id>
      <parentid>116</parentid>
      <timestamp>2023-08-02T23:07:56Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>117</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="150" sha1="ek1l4amjjxq52o9m0e3mda3q4llo3yq" xml:space="preserve">The pages in this category contain the descriptions and possible values of various properties in the Core Part Data module.
[[Category:Parts modding]]</text>
      <sha1>ek1l4amjjxq52o9m0e3mda3q4llo3yq</sha1>
    </revision>
    <revision>
      <id>128</id>
      <parentid>117</parentid>
      <timestamp>2023-08-02T23:54:42Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>128</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="150" sha1="e0pnhugmt121kw0qeigm3gcqhx6cucs" xml:space="preserve">[[Category:Parts modding]]
The pages in this category contain the descriptions and possible values of various properties in the Core Part Data module.</text>
      <sha1>e0pnhugmt121kw0qeigm3gcqhx6cucs</sha1>
    </revision>
  </page>
  <page>
    <title>Category</title>
    <ns>0</ns>
    <id>39</id>
    <revision>
      <id>120</id>
      <timestamp>2023-08-02T23:27:04Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Created page with "[[Category:Core Part Data]]  Following is the list of possible part categories: {| class="wikitable" |+ !Category !Notes |- |None | |- |Production | |- |Control | |- |Structural | |- |Aero | |- |Utility | |- |Science | |- |Pods | |- |FuelTank | |- |Engine | |- |Communication | |- |Electrical | |- |Ground | |- |Thermal | |- |Payload | |- |Coupling | |- |ColonyEssentials | |- |Favorites | |- |SubAssemblies | |- |Amenities | |- |Storage | |}"</comment>
      <origin>120</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="442" sha1="coldbyzbzbxxclk43rrw89errjdkf3b" xml:space="preserve">[[Category:Core Part Data]]

Following is the list of possible part categories:
{| class="wikitable"
|+
!Category
!Notes
|-
|None
|
|-
|Production
|
|-
|Control
|
|-
|Structural
|
|-
|Aero
|
|-
|Utility
|
|-
|Science
|
|-
|Pods
|
|-
|FuelTank
|
|-
|Engine
|
|-
|Communication
|
|-
|Electrical
|
|-
|Ground
|
|-
|Thermal
|
|-
|Payload
|
|-
|Coupling
|
|-
|ColonyEssentials
|
|-
|Favorites
|
|-
|SubAssemblies
|
|-
|Amenities
|
|-
|Storage
|
|}</text>
      <sha1>coldbyzbzbxxclk43rrw89errjdkf3b</sha1>
    </revision>
    <revision>
      <id>121</id>
      <parentid>120</parentid>
      <timestamp>2023-08-02T23:27:56Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>121</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="441" sha1="csgnzw0f1uvbmeqtrk8w0pnin6rw7p5" xml:space="preserve">[[Category:Core Part Data]]
Following is the list of possible part categories:
{| class="wikitable"
|+
!Category
!Notes
|-
|None
|
|-
|Production
|
|-
|Control
|
|-
|Structural
|
|-
|Aero
|
|-
|Utility
|
|-
|Science
|
|-
|Pods
|
|-
|FuelTank
|
|-
|Engine
|
|-
|Communication
|
|-
|Electrical
|
|-
|Ground
|
|-
|Thermal
|
|-
|Payload
|
|-
|Coupling
|
|-
|ColonyEssentials
|
|-
|Favorites
|
|-
|SubAssemblies
|
|-
|Amenities
|
|-
|Storage
|
|}</text>
      <sha1>csgnzw0f1uvbmeqtrk8w0pnin6rw7p5</sha1>
    </revision>
  </page>
  <page>
    <title>Family</title>
    <ns>0</ns>
    <id>40</id>
    <revision>
      <id>122</id>
      <timestamp>2023-08-02T23:31:09Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Created page with "[[Category:Core Part Data]] Following is the list of all currently used part families: {| class="wikitable" |+ !Family !Note |- |0000-Pod | |- |0010-Probe | |- |0020-Cockpit | |- |0030-Rover | |- |0040-Methalox |Fuel tank family |- |0050-Methane |Fuel tank family |- |0060-Monopropellant |Fuel tank family |- |0070-Xenon |Fuel tank family |- |0080-Hydrogen |Fuel tank family |- |0090-Fuel Line |Fuel tank family |- |0100-Methalox |Engine type family |- |0110-Solid Fuel Boost..."</comment>
      <origin>122</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1488" sha1="3r3qpcvysrn0kf318zq3mi8oz695nz1" xml:space="preserve">[[Category:Core Part Data]]
Following is the list of all currently used part families:
{| class="wikitable"
|+
!Family
!Note
|-
|0000-Pod
|
|-
|0010-Probe
|
|-
|0020-Cockpit
|
|-
|0030-Rover
|
|-
|0040-Methalox
|Fuel tank family
|-
|0050-Methane
|Fuel tank family
|-
|0060-Monopropellant
|Fuel tank family
|-
|0070-Xenon
|Fuel tank family
|-
|0080-Hydrogen
|Fuel tank family
|-
|0090-Fuel Line
|Fuel tank family
|-
|0100-Methalox
|Engine type family
|-
|0110-Solid Fuel Booster
|Engine type family
|-
|0120-Jet Engine
|Engine type family
|-
|0130-Monopropellant
|Engine type family
|-
|0140-Xenon
|Engine type family
|-
|0150-Hydrogen
|Engine type family
|-
|0160-Strut
|
|-
|0170-Clamp
|
|-
|0180-Engine Mount
|
|-
|0190-Adapter
|
|-
|0200-Beam
|
|-
|0210-Body
|
|-
|0220-Panel
|
|-
|0230-Hub
|
|-
|0240-Truss
|
|-
|0250-Truss Adapter
|
|-
|0260-Truss Resizer
|
|-
|0270-Tube
|
|-
|0280-Stack Decoupler
|
|-
|0290-Stack Separator
|
|-
|0300-Radial Decoupler
|
|-
|0310-Docking Port
|
|-
|0320-Fairing
|
|-
|0330-Cargo Bay
|
|-
|0340-Crew Cabin
|
|-
|0350-Truss
|
|-
|0360-Nose Cone
|
|-
|0370-Intake
|
|-
|0380-Wing
|
|-
|0390-Stabilizer
|
|-
|0400-Control Surface
|
|-
|0410-Tail Section
|
|-
|0420-Landing Leg
|
|-
|0430-Landing Gear
|
|-
|0440-Wheel
|
|-
|0450-Heat Shield
|
|-
|0470-Battery
|
|-
|0480-Solar Array
|
|-
|0490-Generator
|
|-
|0500-Antenna
|
|-
|0510-Parachute
|
|-
|0520-RCS
|
|-
|0530-Stabilizer
|
|-
|0540-Light
|
|-
|0550-Ladder
|
|-
|Factory
|
|-
|Service Bay
|
|}</text>
      <sha1>3r3qpcvysrn0kf318zq3mi8oz695nz1</sha1>
    </revision>
    <revision>
      <id>154</id>
      <parentid>122</parentid>
      <timestamp>2023-09-12T16:53:58Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <comment>Custom families</comment>
      <origin>154</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2009" sha1="n7d5vwnu1w2s5gr3mw2akb8blechknk" xml:space="preserve">[[Category:Core Part Data]]

===Custom family===
Creating a custom family for your parts is simple, it just needs to follow the following format:
 xxxx-FamilyName
Where &lt;code&gt;xxxx&lt;/code&gt; is a number that will indicate the position of you part family in the OAB Parts Picker. For example if you use &lt;code&gt;0075&lt;/code&gt; the family will be put between Xenon and Hydrogen fuel tanks.

For your family name to be correctly displayed you will need to add a &lt;code&gt;VAB/PartsPicker/&lt;FamilyName&gt;&lt;/code&gt; entry to your localization files.

===Stock families===
Following is the list of all currently used part families:
{| class="wikitable"
|+
!Family
!Note
|-
|0000-Pod
|
|-
|0010-Probe
|
|-
|0020-Cockpit
|
|-
|0030-Rover
|
|-
|0040-Methalox
|Fuel tank family 
|-
|0050-Methane
|Fuel tank family
|-
|0060-Monopropellant
|Fuel tank family
|-
|0070-Xenon
|Fuel tank family
|-
|0080-Hydrogen
|Fuel tank family
|-
|0090-Fuel Line
|Fuel tank family
|-
|0100-Methalox
|Engine type family 
|-
|0110-Solid Fuel Booster
|Engine type family
|-
|0120-Jet Engine
|Engine type family
|-
|0130-Monopropellant
|Engine type family
|-
|0140-Xenon
|Engine type family
|-
|0150-Hydrogen
|Engine type family
|-
|0160-Strut
|
|-
|0170-Clamp
|
|-
|0180-Engine Mount
|
|-
|0190-Adapter
|
|-
|0200-Beam
|
|-
|0210-Body
|
|-
|0220-Panel
|
|-
|0230-Hub
|
|-
|0240-Truss
|
|-
|0250-Truss Adapter
|
|-
|0260-Truss Resizer
|
|-
|0270-Tube
|
|-
|0280-Stack Decoupler
|
|-
|0290-Stack Separator
|
|-
|0300-Radial Decoupler
|
|-
|0310-Docking Port
|
|-
|0320-Fairing
|
|-
|0330-Cargo Bay
|
|-
|0340-Crew Cabin
|
|-
|0350-Truss
|
|-
|0360-Nose Cone
|
|-
|0370-Intake
|
|-
|0380-Wing
|
|-
|0390-Stabilizer
|
|-
|0400-Control Surface
|
|-
|0410-Tail Section
|
|-
|0420-Landing Leg
|
|-
|0430-Landing Gear
|
|-
|0440-Wheel
|
|-
|0450-Heat Shield
|
|-
|0470-Battery
|
|-
|0480-Solar Array
|
|-
|0490-Generator
|
|-
|0500-Antenna
|
|-
|0510-Parachute
|
|-
|0520-RCS
|
|-
|0530-Stabilizer
|
|-
|0540-Light
|
|-
|0550-Ladder
|
|-
|Factory
|
|-
|Service Bay
|
|}</text>
      <sha1>n7d5vwnu1w2s5gr3mw2akb8blechknk</sha1>
    </revision>
    <revision>
      <id>164</id>
      <parentid>154</parentid>
      <timestamp>2023-10-24T20:23:59Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <comment>/* Custom family */</comment>
      <origin>164</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2012" sha1="kqk94670l9p2ehxi8s0ynvukzrduixo" xml:space="preserve">[[Category:Core Part Data]]

===Custom family===
Creating a custom family for your parts is simple, it just needs to follow the following format:
 xxxx-FamilyName
Where &lt;code&gt;xxxx&lt;/code&gt; is a number that will indicate the position of you part family in the OAB Parts Picker. For example if you use &lt;code&gt;0075&lt;/code&gt; the family will be put between Xenon and Hydrogen fuel tanks.

For your family name to be correctly displayed you will need to add a &lt;code&gt;VAB/PartsPicker/xxxx-FamilyName&lt;/code&gt; entry to your localization files.

===Stock families===
Following is the list of all currently used part families:
{| class="wikitable"
|+
!Family
!Note
|-
|0000-Pod
|
|-
|0010-Probe
|
|-
|0020-Cockpit
|
|-
|0030-Rover
|
|-
|0040-Methalox
|Fuel tank family 
|-
|0050-Methane
|Fuel tank family
|-
|0060-Monopropellant
|Fuel tank family
|-
|0070-Xenon
|Fuel tank family
|-
|0080-Hydrogen
|Fuel tank family
|-
|0090-Fuel Line
|Fuel tank family
|-
|0100-Methalox
|Engine type family 
|-
|0110-Solid Fuel Booster
|Engine type family
|-
|0120-Jet Engine
|Engine type family
|-
|0130-Monopropellant
|Engine type family
|-
|0140-Xenon
|Engine type family
|-
|0150-Hydrogen
|Engine type family
|-
|0160-Strut
|
|-
|0170-Clamp
|
|-
|0180-Engine Mount
|
|-
|0190-Adapter
|
|-
|0200-Beam
|
|-
|0210-Body
|
|-
|0220-Panel
|
|-
|0230-Hub
|
|-
|0240-Truss
|
|-
|0250-Truss Adapter
|
|-
|0260-Truss Resizer
|
|-
|0270-Tube
|
|-
|0280-Stack Decoupler
|
|-
|0290-Stack Separator
|
|-
|0300-Radial Decoupler
|
|-
|0310-Docking Port
|
|-
|0320-Fairing
|
|-
|0330-Cargo Bay
|
|-
|0340-Crew Cabin
|
|-
|0350-Truss
|
|-
|0360-Nose Cone
|
|-
|0370-Intake
|
|-
|0380-Wing
|
|-
|0390-Stabilizer
|
|-
|0400-Control Surface
|
|-
|0410-Tail Section
|
|-
|0420-Landing Leg
|
|-
|0430-Landing Gear
|
|-
|0440-Wheel
|
|-
|0450-Heat Shield
|
|-
|0470-Battery
|
|-
|0480-Solar Array
|
|-
|0490-Generator
|
|-
|0500-Antenna
|
|-
|0510-Parachute
|
|-
|0520-RCS
|
|-
|0530-Stabilizer
|
|-
|0540-Light
|
|-
|0550-Ladder
|
|-
|Factory
|
|-
|Service Bay
|
|}</text>
      <sha1>kqk94670l9p2ehxi8s0ynvukzrduixo</sha1>
    </revision>
    <revision>
      <id>201</id>
      <parentid>164</parentid>
      <timestamp>2023-10-28T19:15:07Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>add modded families</comment>
      <origin>201</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2235" sha1="ephyaual45z8qwmesl2lxmasteksjyd" xml:space="preserve">[[Category:Core Part Data]]

===Custom family===
Creating a custom family for your parts is simple, it just needs to follow the following format:
 xxxx-FamilyName
Where &lt;code&gt;xxxx&lt;/code&gt; is a number that will indicate the position of you part family in the OAB Parts Picker. For example if you use &lt;code&gt;0075&lt;/code&gt; the family will be put between Xenon and Hydrogen fuel tanks.

For your family name to be correctly displayed you will need to add a &lt;code&gt;VAB/PartsPicker/xxxx-FamilyName&lt;/code&gt; entry to your localization files.

===Stock families===
Following is the list of all currently used part families:
{| class="wikitable"
|+
!Family
!Note
|-
|0000-Pod
|
|-
|0010-Probe
|
|-
|0020-Cockpit
|
|-
|0030-Rover
|
|-
|0040-Methalox
|Fuel tank family 
|-
|0050-Methane
|Fuel tank family
|-
|0060-Monopropellant
|Fuel tank family
|-
|0070-Xenon
|Fuel tank family
|-
|0080-Hydrogen
|Fuel tank family
|-
|0090-Fuel Line
|Fuel tank family
|-
|0100-Methalox
|Engine type family 
|-
|0110-Solid Fuel Booster
|Engine type family
|-
|0120-Jet Engine
|Engine type family
|-
|0130-Monopropellant
|Engine type family
|-
|0140-Xenon
|Engine type family
|-
|0150-Hydrogen
|Engine type family
|-
|0160-Strut
|
|-
|0170-Clamp
|
|-
|0180-Engine Mount
|
|-
|0190-Adapter
|
|-
|0200-Beam
|
|-
|0210-Body
|
|-
|0220-Panel
|
|-
|0230-Hub
|
|-
|0240-Truss
|
|-
|0250-Truss Adapter
|
|-
|0260-Truss Resizer
|
|-
|0270-Tube
|
|-
|0280-Stack Decoupler
|
|-
|0290-Stack Separator
|
|-
|0300-Radial Decoupler
|
|-
|0310-Docking Port
|
|-
|0320-Fairing
|
|-
|0330-Cargo Bay
|
|-
|0340-Crew Cabin
|
|-
|0350-Truss
|
|-
|0360-Nose Cone
|
|-
|0370-Intake
|
|-
|0380-Wing
|
|-
|0390-Stabilizer
|
|-
|0400-Control Surface
|
|-
|0410-Tail Section
|
|-
|0420-Landing Leg
|
|-
|0430-Landing Gear
|
|-
|0440-Wheel
|
|-
|0450-Heat Shield
|
|-
|0470-Battery
|
|-
|0480-Solar Array
|
|-
|0490-Generator
|
|-
|0500-Antenna
|
|-
|0510-Parachute
|
|-
|0520-RCS
|
|-
|0530-Stabilizer
|
|-
|0540-Light
|
|-
|0550-Ladder
|
|-
|Factory
|
|-
|Service Bay
|
|}


===Modded families===
Following is the list of common part families added by mods:
{| class="wikitable"
|+
!Family
!Note
|-
|0419-OP
|Optimism + Perspiration Engines (Used in the Engine Workshop/part modding tutorial)
|}</text>
      <sha1>ephyaual45z8qwmesl2lxmasteksjyd</sha1>
    </revision>
  </page>
  <page>
    <title>Size Category</title>
    <ns>0</ns>
    <id>41</id>
    <revision>
      <id>123</id>
      <timestamp>2023-08-02T23:34:12Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Created page with "[[Category:Core Part Data]] Following is the list of possible part size categories: {| class="wikitable" |+ !Size Category !Note |- |Auto | |- |XS |0.625m diameter |- |S |1.25m diameter |- |M |2.5m diameter |- |L |3.75m diameter |- |XL |5m diameter |- |XXL |10m diameter (hydrogen ball tank) |- |XXXL | |- |XXXXL | |- |XXXXXL | |- |XXXXXXL | |}"</comment>
      <origin>123</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="344" sha1="fr7xxp7yey6tj00cdn8bjuckrrp8bwg" xml:space="preserve">[[Category:Core Part Data]]
Following is the list of possible part size categories:
{| class="wikitable"
|+
!Size Category
!Note
|-
|Auto
|
|-
|XS
|0.625m diameter
|-
|S
|1.25m diameter
|-
|M
|2.5m diameter
|-
|L
|3.75m diameter
|-
|XL
|5m diameter
|-
|XXL
|10m diameter (hydrogen ball tank)
|-
|XXXL
|
|-
|XXXXL
|
|-
|XXXXXL
|
|-
|XXXXXXL
|
|}</text>
      <sha1>fr7xxp7yey6tj00cdn8bjuckrrp8bwg</sha1>
    </revision>
  </page>
  <page>
    <title>Stage Type</title>
    <ns>0</ns>
    <id>42</id>
    <revision>
      <id>126</id>
      <timestamp>2023-08-02T23:38:46Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Created page with "[[Category:Core Part Data]] Following is the list of possible part stage types: {| class="wikitable" |+ !Stage Type !Notes |- |None | |- |LiquidEngine | |- |SolidEngine | |- |Parachute | |- |Science | |- |DecouplerHorizontal | |- |DecouplerVertical | |- |Fairing | |}"</comment>
      <origin>126</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="267" sha1="sjtdzj430musvl7mhlchxwp47qwb03d" xml:space="preserve">[[Category:Core Part Data]]
Following is the list of possible part stage types:
{| class="wikitable"
|+
!Stage Type
!Notes
|-
|None
|
|-
|LiquidEngine
|
|-
|SolidEngine
|
|-
|Parachute
|
|-
|Science
|
|-
|DecouplerHorizontal
|
|-
|DecouplerVertical
|
|-
|Fairing
|
|}</text>
      <sha1>sjtdzj430musvl7mhlchxwp47qwb03d</sha1>
    </revision>
    <revision>
      <id>129</id>
      <parentid>126</parentid>
      <timestamp>2023-08-02T23:56:25Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>129</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="307" sha1="1knho55m4089yp56utaj0xrrok8gp1l" xml:space="preserve">[[Category:Core Part Data]]
Following is the list of possible part stage types:
{| class="wikitable"
|+
!Stage Type
!Notes
|-
|None
|
|-
|LiquidEngine
|
|-
|SolidEngine
|
|-
|Parachute
|
|-
|Science
|
|-
|DecouplerHorizontal
|Radial decoupler
|-
|DecouplerVertical
|Stack (inline) decoupler
|-
|Fairing
|
|}</text>
      <sha1>1knho55m4089yp56utaj0xrrok8gp1l</sha1>
    </revision>
  </page>
  <page>
    <title>Staging Icon Asset Address</title>
    <ns>0</ns>
    <id>43</id>
    <revision>
      <id>127</id>
      <timestamp>2023-08-02T23:48:19Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Created page with "[[Category:Core Part Data]] Following is the list of possible staging icon asset addresses: {| class="wikitable" |+ !Staging Icon Asset Address !Notes |- |Staging-Engines/Staging-ICO-Jet-Airs.png |Airbreathing jet engines (does not include dual mode engines like Rapier, those are considered as Methalox engines) |- |Staging-Engines/Staging-ICO-Metallic.png |Nuclear engines |- |Staging-Engines/Staging-ICO-Methalox.png |Methalox liquid fuel engines |- |Staging-Engines/Stagi..."</comment>
      <origin>127</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="950" sha1="cbknkmm3kkrb79u8nqjr1xjhgjpheyw" xml:space="preserve">[[Category:Core Part Data]]
Following is the list of possible staging icon asset addresses:
{| class="wikitable"
|+
!Staging Icon Asset Address
!Notes
|-
|Staging-Engines/Staging-ICO-Jet-Airs.png
|Airbreathing jet engines (does not include dual mode engines like Rapier, those are considered as Methalox engines)
|-
|Staging-Engines/Staging-ICO-Metallic.png
|Nuclear engines
|-
|Staging-Engines/Staging-ICO-Methalox.png
|Methalox liquid fuel engines
|-
|Staging-Engines/Staging-ICO-Monoprop.png
|Monopropellant liquid fuel engines
|-
|Staging-Engines/Staging-ICO-Xenons.png
|Xenon ion engines
|-
|Staging-ICO-Booster.png
|Solid rocket boosters
|-
|Staging-ICO-Chute.png
|Parachutes
|-
|Staging-ICO-Port.png
|Docking ports
|-
|Staging-ICO-Radial.png
|Radial decouplers
|-
|Staging-ICO-Structure01.png
|Structural (for example launch clamps)
|-
|Staging-Icon-Inline.png
|Stack (inline) decouplers
|-
|staging_icons_temp/staging_fairing.png
|Fairings
|}</text>
      <sha1>cbknkmm3kkrb79u8nqjr1xjhgjpheyw</sha1>
    </revision>
    <revision>
      <id>130</id>
      <parentid>127</parentid>
      <timestamp>2023-08-02T23:57:08Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>130</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="947" sha1="gjxrq3z54z6owni4bqwruzshzsjjrbw" xml:space="preserve">[[Category:Core Part Data]]
Following is the list of possible staging icon asset addresses:
{| class="wikitable"
|+
!Staging Icon Asset Address
!Notes
|-
|Staging-Engines/Staging-ICO-Jet-Airs.png
|Airbreathing jet engines (does not include dual mode engines like Rapier, those are considered Methalox engines)
|-
|Staging-Engines/Staging-ICO-Metallic.png
|Nuclear engines
|-
|Staging-Engines/Staging-ICO-Methalox.png
|Methalox liquid fuel engines
|-
|Staging-Engines/Staging-ICO-Monoprop.png
|Monopropellant liquid fuel engines
|-
|Staging-Engines/Staging-ICO-Xenons.png
|Xenon ion engines
|-
|Staging-ICO-Booster.png
|Solid rocket boosters
|-
|Staging-ICO-Chute.png
|Parachutes
|-
|Staging-ICO-Port.png
|Docking ports
|-
|Staging-ICO-Radial.png
|Radial decouplers
|-
|Staging-ICO-Structure01.png
|Structural (for example launch clamps)
|-
|Staging-Icon-Inline.png
|Stack (inline) decouplers
|-
|staging_icons_temp/staging_fairing.png
|Fairings
|}</text>
      <sha1>gjxrq3z54z6owni4bqwruzshzsjjrbw</sha1>
    </revision>
    <revision>
      <id>159</id>
      <parentid>130</parentid>
      <timestamp>2023-10-23T21:49:16Z</timestamp>
      <contributor>
        <username>Cheese</username>
        <id>7</id>
      </contributor>
      <comment>Change it from "possible" to "exist with in the game"</comment>
      <origin>159</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1014" sha1="bxa42auraqx8tmmp1vtku6awmhpcdu7" xml:space="preserve">[[Category:Core Part Data]]
Following is the list of staging icon asset addresses that exist within the game (you should be able to add your own if you wish):
{| class="wikitable"
|+
!Staging Icon Asset Address
!Notes
|-
|Staging-Engines/Staging-ICO-Jet-Airs.png
|Airbreathing jet engines (does not include dual mode engines like Rapier, those are considered Methalox engines)
|-
|Staging-Engines/Staging-ICO-Metallic.png
|Nuclear engines
|-
|Staging-Engines/Staging-ICO-Methalox.png
|Methalox liquid fuel engines
|-
|Staging-Engines/Staging-ICO-Monoprop.png
|Monopropellant liquid fuel engines
|-
|Staging-Engines/Staging-ICO-Xenons.png
|Xenon ion engines
|-
|Staging-ICO-Booster.png
|Solid rocket boosters
|-
|Staging-ICO-Chute.png
|Parachutes
|-
|Staging-ICO-Port.png
|Docking ports
|-
|Staging-ICO-Radial.png
|Radial decouplers
|-
|Staging-ICO-Structure01.png
|Structural (for example launch clamps)
|-
|Staging-Icon-Inline.png
|Stack (inline) decouplers
|-
|staging_icons_temp/staging_fairing.png
|Fairings
|}</text>
      <sha1>bxa42auraqx8tmmp1vtku6awmhpcdu7</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Tutorials</title>
    <ns>14</ns>
    <id>44</id>
    <revision>
      <id>133</id>
      <timestamp>2023-08-03T00:02:46Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Created page with "[[Category:TOC]] This category contains modding tutorials."</comment>
      <origin>133</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="58" sha1="mym1ismcu52dptt1wpjxdm63sao7kgy" xml:space="preserve">[[Category:TOC]]
This category contains modding tutorials.</text>
      <sha1>mym1ismcu52dptt1wpjxdm63sao7kgy</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Part textures</title>
    <ns>14</ns>
    <id>45</id>
    <revision>
      <id>134</id>
      <timestamp>2023-08-03T00:04:13Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Created page with "Pages about part textures and how to create them. [[Category:Parts modding]]"</comment>
      <origin>134</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="76" sha1="lskxtlpg5yze74t7nf37e7b60v4pxu6" xml:space="preserve">Pages about part textures and how to create them.
[[Category:Parts modding]]</text>
      <sha1>lskxtlpg5yze74t7nf37e7b60v4pxu6</sha1>
    </revision>
  </page>
  <page>
    <title>Scenery - Standard (Opaque)</title>
    <ns>0</ns>
    <id>46</id>
    <redirect title="Scenery - Standard (Opaque) shader" />
    <revision>
      <id>137</id>
      <timestamp>2023-08-03T00:07:10Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Munix moved page [[Scenery - Standard (Opaque)]] to [[Scenery - Standard (Opaque) shader]]: Make the name more clear</comment>
      <origin>137</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="48" sha1="2oe4a1rcm3ewzp8wwnnw0254dxledlp" xml:space="preserve">#REDIRECT [[Scenery - Standard (Opaque) shader]]</text>
      <sha1>2oe4a1rcm3ewzp8wwnnw0254dxledlp</sha1>
    </revision>
  </page>
  <page>
    <title>Part modding video tutorials</title>
    <ns>0</ns>
    <id>47</id>
    <redirect title="Part modding videos (tutorials)" />
    <revision>
      <id>141</id>
      <timestamp>2023-08-03T00:08:45Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Munix moved page [[Part modding video tutorials]] to [[Part modding videos (tutorials)]]</comment>
      <origin>141</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="45" sha1="qc7qzbnoixo58amofenu4dexxrbbrhr" xml:space="preserve">#REDIRECT [[Part modding videos (tutorials)]]</text>
      <sha1>qc7qzbnoixo58amofenu4dexxrbbrhr</sha1>
    </revision>
  </page>
  <page>
    <title>Category:UI</title>
    <ns>14</ns>
    <id>48</id>
    <revision>
      <id>145</id>
      <timestamp>2023-08-31T20:52:30Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <comment>Add UI Category</comment>
      <origin>145</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="106" sha1="4qb7emnqx0xx26bjipb47gik0bjlt61" xml:space="preserve">[[Category:TOC]]

This category contains all info on the game UI as well as help on creating UIs for mods.</text>
      <sha1>4qb7emnqx0xx26bjipb47gik0bjlt61</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Game UI</title>
    <ns>14</ns>
    <id>49</id>
    <revision>
      <id>146</id>
      <timestamp>2023-08-31T20:54:13Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <comment>Category Game UI</comment>
      <origin>146</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="72" sha1="g4vuvkvy35qa3xha1vpygsb0qojyo8i" xml:space="preserve">[[Category:UI]]

This category contains information about the game's UI.</text>
      <sha1>g4vuvkvy35qa3xha1vpygsb0qojyo8i</sha1>
    </revision>
  </page>
  <page>
    <title>File:Capture d'écran 2023-08-31 230104.png</title>
    <ns>6</ns>
    <id>50</id>
    <revision>
      <id>147</id>
      <timestamp>2023-08-31T21:03:01Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <origin>147</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="19" sha1="2o026q3y3gzls2rsxqevmlswdkligr2" xml:space="preserve">KSP2 Main Menu Logo</text>
      <sha1>2o026q3y3gzls2rsxqevmlswdkligr2</sha1>
    </revision>
  </page>
  <page>
    <title>Colors</title>
    <ns>0</ns>
    <id>51</id>
    <revision>
      <id>148</id>
      <timestamp>2023-08-31T21:09:06Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <comment>Added Game UI Colors page</comment>
      <origin>148</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="288" sha1="f6ttcgoslgok60r5a2h88s1l4tfhdk3" xml:space="preserve">[[Category:Game UI]]

A list of the colors used in the stock game UI.

=== Logo ===
[[File:Capture d'écran 2023-08-31 230104.png|alt=KSP2 Logo|thumb|Main Menu Logo]]

* White: &lt;code&gt;#ffffff&lt;/code&gt;, &lt;code&gt;rgb(255, 255, 255)&lt;/code&gt;
* Red: &lt;code&gt;#e01500&lt;/code&gt;, &lt;code&gt;rgb(224, 21, 0)&lt;/code&gt;</text>
      <sha1>f6ttcgoslgok60r5a2h88s1l4tfhdk3</sha1>
    </revision>
    <revision>
      <id>150</id>
      <parentid>148</parentid>
      <timestamp>2023-08-31T21:30:23Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <comment>Start flight UI</comment>
      <origin>150</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="951" sha1="tvsx0fhp599m3lbt6s3reow9a4q62on" xml:space="preserve">[[Category:Game UI]]

A list of the colors used in the stock game UI.

=== Logo ===
[[File:Capture d'écran 2023-08-31 230104.png|alt=KSP2 Logo|thumb|Main Menu Logo]]

* White: &lt;code&gt;#ffffff&lt;/code&gt;, &lt;code&gt;rgb(255, 255, 255)&lt;/code&gt;
* Red: &lt;code&gt;#e01500&lt;/code&gt;, &lt;code&gt;rgb(224, 21, 0)&lt;/code&gt;

== Flight UI ==

=== Common ===
[[File:App.bar UI.png|thumb|App Bar]]

* Border Light: &lt;code&gt;#5356cc&lt;/code&gt;, &lt;code&gt;rgb(83, 86, 204)&lt;/code&gt;
* Border Dark: &lt;code&gt;#2a2a66&lt;/code&gt;, &lt;code&gt;rgb(42, 42, 102)&lt;/code&gt;
* Light Green: &lt;code&gt;#00ff66&lt;/code&gt;, &lt;code&gt;rgb(0, 255, 102)&lt;/code&gt;

=== App Bar ===

* Background (Bar): &lt;code&gt;#141616&lt;/code&gt;, &lt;code&gt;rgb(20, 22, 22)&lt;/code&gt;
* Icon / Light Gray: &lt;code&gt;#aab2cc&lt;/code&gt;, &lt;code&gt;rgb(170, 178, 204)&lt;/code&gt;
* Deselected / Dark Gray: &lt;code&gt;#2a2a32&lt;/code&gt;, &lt;code&gt;rgb(42, 42, 50)&lt;/code&gt;
* Border (App list): &lt;code&gt;#0d0f2d&lt;/code&gt;, &lt;code&gt;rgb(13, 15, 47)&lt;/code&gt;
* Background (App list): &lt;code&gt;#262a30&lt;/code&gt;, &lt;code&gt;rgb(38, 42, 48)&lt;/code&gt;</text>
      <sha1>tvsx0fhp599m3lbt6s3reow9a4q62on</sha1>
    </revision>
    <revision>
      <id>155</id>
      <parentid>150</parentid>
      <timestamp>2023-09-13T15:31:54Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <comment>Start OAB colors</comment>
      <origin>155</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1411" sha1="2mij4de952ddeuqkvdiwzgyf64dbdj9" xml:space="preserve">[[Category:Game UI]]

A list of the colors used in the stock game UI.

=== Logo ===
[[File:Capture d'écran 2023-08-31 230104.png|alt=KSP2 Logo|thumb|Main Menu Logo]]

* White: &lt;code&gt;#ffffff&lt;/code&gt;, &lt;code&gt;rgb(255, 255, 255)&lt;/code&gt;
* Red: &lt;code&gt;#e01500&lt;/code&gt;, &lt;code&gt;rgb(224, 21, 0)&lt;/code&gt;

== OAB ==

=== Common ===

* Background (dark): &lt;code&gt;#22262e&lt;/code&gt;, &lt;code&gt;rgb(34, 38, 46)&lt;/code&gt;
* Background (light): &lt;code&gt;#2e3540&lt;/code&gt;, &lt;code&gt;rgb(46, 53, 64)&lt;/code&gt;
* Text (dark): &lt;code&gt;#adb6d0&lt;/code&gt;, &lt;code&gt;rgb(173, 182, 208)&lt;/code&gt;
* Text (light): &lt;code&gt;#d6e0ff&lt;/code&gt;, &lt;code&gt;rgb(214, 224, 255)&lt;/code&gt;
* Border (light blue): &lt;code&gt;#696dff&lt;/code&gt;, &lt;code&gt;rgb(105, 109, 255)&lt;/code&gt;
* Border (dark blue): &lt;code&gt;#00002b&lt;/code&gt;, &lt;code&gt;rgb(0, 0, 43)&lt;/code&gt;

== Flight UI ==

=== Common ===
[[File:App.bar UI.png|thumb|App Bar]]

* Border Light: &lt;code&gt;#5356cc&lt;/code&gt;, &lt;code&gt;rgb(83, 86, 204)&lt;/code&gt;
* Border Dark: &lt;code&gt;#2a2a66&lt;/code&gt;, &lt;code&gt;rgb(42, 42, 102)&lt;/code&gt;
* Light Green: &lt;code&gt;#00ff66&lt;/code&gt;, &lt;code&gt;rgb(0, 255, 102)&lt;/code&gt;

=== App Bar ===

* Background (Bar): &lt;code&gt;#141616&lt;/code&gt;, &lt;code&gt;rgb(20, 22, 22)&lt;/code&gt;
* Icon / Light Gray: &lt;code&gt;#aab2cc&lt;/code&gt;, &lt;code&gt;rgb(170, 178, 204)&lt;/code&gt;
* Deselected / Dark Gray: &lt;code&gt;#2a2a32&lt;/code&gt;, &lt;code&gt;rgb(42, 42, 50)&lt;/code&gt;
* Border (App list): &lt;code&gt;#0d0f2d&lt;/code&gt;, &lt;code&gt;rgb(13, 15, 47)&lt;/code&gt;
* Background (App list): &lt;code&gt;#262a30&lt;/code&gt;, &lt;code&gt;rgb(38, 42, 48)&lt;/code&gt;</text>
      <sha1>2mij4de952ddeuqkvdiwzgyf64dbdj9</sha1>
    </revision>
    <revision>
      <id>161</id>
      <parentid>155</parentid>
      <timestamp>2023-10-23T22:02:09Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>161</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1417" sha1="3pl4pmxx2jh7ku4cilvsqy7nqmc0z2s" xml:space="preserve">[[Category:Game UI]]

A list of the colors used in the stock game UI.

=== Logo ===
[[File:Capture d'écran 2023-08-31 230104.png|alt=KSP2 Logo|thumb|Main Menu Logo]]

* White: &lt;code&gt;#ffffff&lt;/code&gt;, &lt;code&gt;rgb(255, 255, 255)&lt;/code&gt;
* Red: &lt;code&gt;#e01500&lt;/code&gt;, &lt;code&gt;rgb(224, 21, 0)&lt;/code&gt;

== OAB ==

=== Common ===

* Background (dark): &lt;code&gt;#22262e&lt;/code&gt;, &lt;code&gt;rgb(34, 38, 46)&lt;/code&gt;
* Background (light): &lt;code&gt;#2e3540&lt;/code&gt;, &lt;code&gt;rgb(46, 53, 64)&lt;/code&gt;
* Text (dark): &lt;code&gt;#adb6d0&lt;/code&gt;, &lt;code&gt;rgb(173, 182, 208)&lt;/code&gt;
* Text (light): &lt;code&gt;#d6e0ff&lt;/code&gt;, &lt;code&gt;rgb(214, 224, 255)&lt;/code&gt;
* Border (light blue): &lt;code&gt;#696dff&lt;/code&gt;, &lt;code&gt;rgb(105, 109, 255)&lt;/code&gt;
* Border (dark blue): &lt;code&gt;#00002b&lt;/code&gt;, &lt;code&gt;rgb(0, 0, 43)&lt;/code&gt;

== Flight UI ==

=== Common ===
[[File:App.bar UI.png|thumb|App Bar]]

* Border Light: &lt;code&gt;#5356cc&lt;/code&gt;, &lt;code&gt;rgb(83, 86, 204)&lt;/code&gt;
* Border Dark: &lt;code&gt;#2a2a66&lt;/code&gt;, &lt;code&gt;rgb(42, 42, 102)&lt;/code&gt;
* Light Green: &lt;code&gt;#00ff66&lt;/code&gt;, &lt;code&gt;rgb(0, 255, 102)&lt;/code&gt;

=== App Bar ===

* Background (Bar): &lt;code&gt;#141616&lt;/code&gt;, &lt;code&gt;rgb(20, 22, 22)&lt;/code&gt;
* Icon / Light Gray: &lt;code&gt;#aab2cc&lt;/code&gt;, &lt;code&gt;rgb(170, 178, 204)&lt;/code&gt;
* Deselected / Dark Gray: &lt;code&gt;#2a2a32&lt;/code&gt;, &lt;code&gt;rgb(42, 42, 50)&lt;/code&gt;
* Border (App list): &lt;code&gt;#0d0f2d&lt;/code&gt;, &lt;code&gt;rgb(13, 15, 47)&lt;/code&gt;
* Background (App list): &lt;code&gt;#262a30&lt;/code&gt;, &lt;code&gt;rgb(38, 42, 48)&lt;/code&gt;

test</text>
      <sha1>3pl4pmxx2jh7ku4cilvsqy7nqmc0z2s</sha1>
    </revision>
    <revision>
      <id>162</id>
      <parentid>161</parentid>
      <timestamp>2023-10-23T22:02:16Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>162</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1411" sha1="2mij4de952ddeuqkvdiwzgyf64dbdj9" xml:space="preserve">[[Category:Game UI]]

A list of the colors used in the stock game UI.

=== Logo ===
[[File:Capture d'écran 2023-08-31 230104.png|alt=KSP2 Logo|thumb|Main Menu Logo]]

* White: &lt;code&gt;#ffffff&lt;/code&gt;, &lt;code&gt;rgb(255, 255, 255)&lt;/code&gt;
* Red: &lt;code&gt;#e01500&lt;/code&gt;, &lt;code&gt;rgb(224, 21, 0)&lt;/code&gt;

== OAB ==

=== Common ===

* Background (dark): &lt;code&gt;#22262e&lt;/code&gt;, &lt;code&gt;rgb(34, 38, 46)&lt;/code&gt;
* Background (light): &lt;code&gt;#2e3540&lt;/code&gt;, &lt;code&gt;rgb(46, 53, 64)&lt;/code&gt;
* Text (dark): &lt;code&gt;#adb6d0&lt;/code&gt;, &lt;code&gt;rgb(173, 182, 208)&lt;/code&gt;
* Text (light): &lt;code&gt;#d6e0ff&lt;/code&gt;, &lt;code&gt;rgb(214, 224, 255)&lt;/code&gt;
* Border (light blue): &lt;code&gt;#696dff&lt;/code&gt;, &lt;code&gt;rgb(105, 109, 255)&lt;/code&gt;
* Border (dark blue): &lt;code&gt;#00002b&lt;/code&gt;, &lt;code&gt;rgb(0, 0, 43)&lt;/code&gt;

== Flight UI ==

=== Common ===
[[File:App.bar UI.png|thumb|App Bar]]

* Border Light: &lt;code&gt;#5356cc&lt;/code&gt;, &lt;code&gt;rgb(83, 86, 204)&lt;/code&gt;
* Border Dark: &lt;code&gt;#2a2a66&lt;/code&gt;, &lt;code&gt;rgb(42, 42, 102)&lt;/code&gt;
* Light Green: &lt;code&gt;#00ff66&lt;/code&gt;, &lt;code&gt;rgb(0, 255, 102)&lt;/code&gt;

=== App Bar ===

* Background (Bar): &lt;code&gt;#141616&lt;/code&gt;, &lt;code&gt;rgb(20, 22, 22)&lt;/code&gt;
* Icon / Light Gray: &lt;code&gt;#aab2cc&lt;/code&gt;, &lt;code&gt;rgb(170, 178, 204)&lt;/code&gt;
* Deselected / Dark Gray: &lt;code&gt;#2a2a32&lt;/code&gt;, &lt;code&gt;rgb(42, 42, 50)&lt;/code&gt;
* Border (App list): &lt;code&gt;#0d0f2d&lt;/code&gt;, &lt;code&gt;rgb(13, 15, 47)&lt;/code&gt;
* Background (App list): &lt;code&gt;#262a30&lt;/code&gt;, &lt;code&gt;rgb(38, 42, 48)&lt;/code&gt;</text>
      <sha1>2mij4de952ddeuqkvdiwzgyf64dbdj9</sha1>
    </revision>
  </page>
  <page>
    <title>File:App.bar UI.png</title>
    <ns>6</ns>
    <id>52</id>
    <revision>
      <id>149</id>
      <timestamp>2023-08-31T21:19:09Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <origin>149</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="18" sha1="lpwgfbqivjsx315roq9c28d086fgyye" xml:space="preserve">App Bar UI buttons</text>
      <sha1>lpwgfbqivjsx315roq9c28d086fgyye</sha1>
    </revision>
  </page>
  <page>
    <title>File:UnityExplorerForKSP2 4.9.1.png</title>
    <ns>6</ns>
    <id>53</id>
    <revision>
      <id>151</id>
      <timestamp>2023-09-03T20:42:33Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <origin>151</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="26" sha1="4dub12hlrmw6gnkd13aam74vgf1nhh2" xml:space="preserve">UnityExplorerForKSP2 4.9.1</text>
      <sha1>4dub12hlrmw6gnkd13aam74vgf1nhh2</sha1>
    </revision>
  </page>
  <page>
    <title>UnityExplorer</title>
    <ns>0</ns>
    <id>54</id>
    <revision>
      <id>152</id>
      <timestamp>2023-09-03T20:55:53Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Initial edit</comment>
      <origin>152</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1094" sha1="lralf2ub7pl6jsvaokdmy8yflx1v3f8" xml:space="preserve">🔍 Unity Explorer is an in-game UI for exploring, debugging and modifying KSP2 (and other Unity games).

=== Get it here: https://github.com/Falki-git/UnityExplorer/releases ===
Mod is forked from original work by sinai - &lt;nowiki&gt;https://github.com/sinai-dev/UnityExplorer&lt;/nowiki&gt; - version 4.9.0

== Features: ==

=== '''Object Explorer''' ===
Use the Scene Explorer tab to traverse the active scenes, as well as the DontDestroyOnLoad and HideAndDontSave objects.

Use the Object Search tab to search for Unity objects (including GameObjects, Components, etc), C# Singletons or Static Classes.

=== '''Inspector''' ===
Used to see detailed information on objects of any type and manipulate their values, as well as to inspect C# Classes with static reflection.

=== '''C# console''' ===
Uses the &lt;code&gt;Mono.CSharp.Evaluator&lt;/code&gt; to define temporary classes or run immediate REPL code

=== KSP2 addition ===
Press "Lock" to disable game input when you type in stuff, so you don't accidently trigger throttle or time warp:



[[File:UnityExplorerForKSP2 4.9.1.png|thumb]]
[[Category:Tools]]</text>
      <sha1>lralf2ub7pl6jsvaokdmy8yflx1v3f8</sha1>
    </revision>
    <revision>
      <id>153</id>
      <parentid>152</parentid>
      <timestamp>2023-09-03T20:57:41Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Format picture</comment>
      <origin>153</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1103" sha1="c8e8xs10fefhn37v49sr0fbzm4vwmxp" xml:space="preserve">🔍 Unity Explorer is an in-game UI for exploring, debugging and modifying KSP2 (and other Unity games).

=== Get it here: https://github.com/Falki-git/UnityExplorer/releases ===
Mod is forked from original work by sinai - &lt;nowiki&gt;https://github.com/sinai-dev/UnityExplorer&lt;/nowiki&gt; - version 4.9.0

== Features: ==

=== '''Object Explorer''' ===
Use the Scene Explorer tab to traverse the active scenes, as well as the DontDestroyOnLoad and HideAndDontSave objects.

Use the Object Search tab to search for Unity objects (including GameObjects, Components, etc), C# Singletons or Static Classes.

=== '''Inspector''' ===
Used to see detailed information on objects of any type and manipulate their values, as well as to inspect C# Classes with static reflection.

=== '''C# console''' ===
Uses the &lt;code&gt;Mono.CSharp.Evaluator&lt;/code&gt; to define temporary classes or run immediate REPL code

=== KSP2 addition ===
Press "Lock" to disable game input when you type in stuff, so you don't accidently trigger throttle or time warp:



[[File:UnityExplorerForKSP2 4.9.1.png|left|800x800px]]
[[Category:Tools]]</text>
      <sha1>c8e8xs10fefhn37v49sr0fbzm4vwmxp</sha1>
    </revision>
    <revision>
      <id>265</id>
      <parentid>153</parentid>
      <timestamp>2023-12-28T20:43:02Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Moved release link to point to KSP2Community and add that it's available on CKAN also</comment>
      <origin>265</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1132" sha1="10to1cli502j82x12r45rkvj6vwyiso" xml:space="preserve">🔍 Unity Explorer is an in-game UI for exploring, debugging and modifying KSP2 (and other Unity games).

=== Get it here: https://github.com/KSP2Community/UnityExplorer/releases (also available on CKAN) ===
Mod is forked from original work by sinai - &lt;nowiki&gt;https://github.com/sinai-dev/UnityExplorer&lt;/nowiki&gt; - version 4.9.0

== Features: ==

=== '''Object Explorer''' ===
Use the Scene Explorer tab to traverse the active scenes, as well as the DontDestroyOnLoad and HideAndDontSave objects.

Use the Object Search tab to search for Unity objects (including GameObjects, Components, etc), C# Singletons or Static Classes.

=== '''Inspector''' ===
Used to see detailed information on objects of any type and manipulate their values, as well as to inspect C# Classes with static reflection.

=== '''C# console''' ===
Uses the &lt;code&gt;Mono.CSharp.Evaluator&lt;/code&gt; to define temporary classes or run immediate REPL code

=== KSP2 addition ===
Press "Lock" to disable game input when you type in stuff, so you don't accidently trigger throttle or time warp:



[[File:UnityExplorerForKSP2 4.9.1.png|left|800x800px]]
[[Category:Tools]]</text>
      <sha1>10to1cli502j82x12r45rkvj6vwyiso</sha1>
    </revision>
  </page>
  <page>
    <title>MediaWiki:Citizen-footer-desc</title>
    <ns>8</ns>
    <id>55</id>
    <revision>
      <id>156</id>
      <timestamp>2023-10-23T14:04:49Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Created page with "Created by members of the Discord server [https://discord.gg/hHW5gpHxfE KSP 2 Modding Society]"</comment>
      <origin>156</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="94" sha1="du640zfwcvn38r0f7ptk0ha5u1lpn6t" xml:space="preserve">Created by members of the Discord server [https://discord.gg/hHW5gpHxfE KSP 2 Modding Society]</text>
      <sha1>du640zfwcvn38r0f7ptk0ha5u1lpn6t</sha1>
    </revision>
    <revision>
      <id>158</id>
      <parentid>156</parentid>
      <timestamp>2023-10-23T14:06:30Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>158</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="54" sha1="ifbo3ayv6x0v5id5knikwtqp555091h" xml:space="preserve">Community wiki for everything related to KSP 2 modding</text>
      <sha1>ifbo3ayv6x0v5id5knikwtqp555091h</sha1>
    </revision>
  </page>
  <page>
    <title>MediaWiki:Citizen-footer-tagline</title>
    <ns>8</ns>
    <id>56</id>
    <revision>
      <id>157</id>
      <timestamp>2023-10-23T14:05:28Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Created page with "Created by members of the Discord server [https://discord.gg/hHW5gpHxfE KSP 2 Modding Society]"</comment>
      <origin>157</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="94" sha1="du640zfwcvn38r0f7ptk0ha5u1lpn6t" xml:space="preserve">Created by members of the Discord server [https://discord.gg/hHW5gpHxfE KSP 2 Modding Society]</text>
      <sha1>du640zfwcvn38r0f7ptk0ha5u1lpn6t</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Messages</title>
    <ns>14</ns>
    <id>57</id>
    <revision>
      <id>165</id>
      <timestamp>2023-10-24T20:27:15Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <comment>Game Messages system category</comment>
      <origin>165</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="108" sha1="3maxgryc7uxudj3y6i3jxrbm1oshz0l" xml:space="preserve">[[Category:Game systems]]
This category contains information related to the game's Messages / Events system.</text>
      <sha1>3maxgryc7uxudj3y6i3jxrbm1oshz0l</sha1>
    </revision>
  </page>
  <page>
    <title>Tutorials Home Page (to be deleted)</title>
    <ns>0</ns>
    <id>58</id>
    <revision>
      <id>171</id>
      <timestamp>2023-10-28T10:43:48Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added summary</comment>
      <origin>171</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="484" sha1="8f7xc5hcskn1ib0m74uh4uxhk7oq63k" xml:space="preserve">Welcome to the KSP2 mod tutorials home page. Follow the instructions to create your first mod!

== How to make a KSP2 mod? ==

# Getting started
## [[Setting up a Development Environment]]
## Initializing your project (TODO)
# Modeling and texturing a new part (TODO)
# Configuring the part in Unity (TODO)
# Adding a part icon (TODO)
# Building and deploying the mode (TODO)
# Debugging the mod in KSP2 (TODO)

== How to read KSP2 source code? ==
How to read KSP2 source code? (TODO)</text>
      <sha1>8f7xc5hcskn1ib0m74uh4uxhk7oq63k</sha1>
    </revision>
    <revision>
      <id>172</id>
      <parentid>171</parentid>
      <timestamp>2023-10-28T10:45:40Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added category</comment>
      <origin>172</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="525" sha1="e61t42lggfck6zvabxc42e7agc6kk0b" xml:space="preserve">Welcome to the KSP2 mod tutorials home page. Follow the instructions to create your first mod!

== How to make a KSP2 mod? ==

# Getting started
## [[Setting up a Development Environment]]
## Initializing your project (TODO)
# Modeling and texturing a new part (TODO)
# Configuring the part in Unity (TODO)
# Adding a part icon (TODO)
# Building and deploying the mode (TODO)
# Debugging the mod in KSP2 (TODO)

== How to read KSP2 source code? ==
How to read KSP2 source code? (TODO)

&lt;nowiki&gt;[[Category:Tutorials]]&lt;/nowiki&gt;</text>
      <sha1>e61t42lggfck6zvabxc42e7agc6kk0b</sha1>
    </revision>
    <revision>
      <id>173</id>
      <parentid>172</parentid>
      <timestamp>2023-10-28T10:47:26Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Added category</comment>
      <origin>173</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="507" sha1="4krdwi8vfez69y1wz2fnis9hd6tr113" xml:space="preserve">Welcome to the KSP2 mod tutorials home page. Follow the instructions to create your first mod!

== How to make a KSP2 mod? ==

# Getting started
## [[Setting up a Development Environment]]
## Initializing your project (TODO)
# Modeling and texturing a new part (TODO)
# Configuring the part in Unity (TODO)
# Adding a part icon (TODO)
# Building and deploying the mode (TODO)
# Debugging the mod in KSP2 (TODO)

== How to read KSP2 source code? ==
How to read KSP2 source code? (TODO)
[[Category:Tutorials]]</text>
      <sha1>4krdwi8vfez69y1wz2fnis9hd6tr113</sha1>
    </revision>
    <revision>
      <id>174</id>
      <parentid>173</parentid>
      <timestamp>2023-10-28T10:49:40Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Added entry to set up Unity</comment>
      <origin>174</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="531" sha1="aii9cyos1xyha0w2y2bftpy2fzljkb7" xml:space="preserve">Welcome to the KSP2 mod tutorials home page. Follow the instructions to create your first mod!

== How to make a KSP2 mod? ==

# Getting started
## [[Setting up Unity]]
## [[Setting up a Development Environment]]
## Initializing your project (TODO)
# Modeling and texturing a new part (TODO)
# Configuring the part in Unity (TODO)
# Adding a part icon (TODO)
# Building and deploying the mode (TODO)
# Debugging the mod in KSP2 (TODO)

== How to read KSP2 source code? ==
How to read KSP2 source code? (TODO)
[[Category:Tutorials]]</text>
      <sha1>aii9cyos1xyha0w2y2bftpy2fzljkb7</sha1>
    </revision>
    <revision>
      <id>180</id>
      <parentid>174</parentid>
      <timestamp>2023-10-28T11:05:27Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added new entry</comment>
      <origin>180</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="556" sha1="myn45a64eka812m8z8w4pfxjgyusu4i" xml:space="preserve">Welcome to the KSP2 mod tutorials home page. Follow the instructions to create your first mod!

== How to make a KSP2 mod? ==

# Getting started
## [[Setting up Unity]]
## [[Setting up a Development Environment]]
## Initializing your project (TODO)
# Modeling and texturing a new part (TODO)
# [[Configuring the part in Unity]]
## [[Configuring the mesh]]
# Adding a part icon (TODO)
# Building and deploying the mode (TODO)
# Debugging the mod in KSP2 (TODO)

== How to read KSP2 source code? ==
How to read KSP2 source code? (TODO)
[[Category:Tutorials]]</text>
      <sha1>myn45a64eka812m8z8w4pfxjgyusu4i</sha1>
    </revision>
    <revision>
      <id>213</id>
      <parentid>180</parentid>
      <timestamp>2023-10-30T11:11:27Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Polo moved page [[Tutorials Home Page]] to [[Tutorials Home Page (to be deleted)]]: Page no longer useful</comment>
      <origin>180</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="556" sha1="myn45a64eka812m8z8w4pfxjgyusu4i" xml:space="preserve">Welcome to the KSP2 mod tutorials home page. Follow the instructions to create your first mod!

== How to make a KSP2 mod? ==

# Getting started
## [[Setting up Unity]]
## [[Setting up a Development Environment]]
## Initializing your project (TODO)
# Modeling and texturing a new part (TODO)
# [[Configuring the part in Unity]]
## [[Configuring the mesh]]
# Adding a part icon (TODO)
# Building and deploying the mode (TODO)
# Debugging the mod in KSP2 (TODO)

== How to read KSP2 source code? ==
How to read KSP2 source code? (TODO)
[[Category:Tutorials]]</text>
      <sha1>myn45a64eka812m8z8w4pfxjgyusu4i</sha1>
    </revision>
  </page>
  <page>
    <title>Setting up Unity</title>
    <ns>0</ns>
    <id>59</id>
    <revision>
      <id>175</id>
      <timestamp>2023-10-28T10:57:36Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added content</comment>
      <origin>175</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1739" sha1="f6525u4zddxmf8qukjbeixvhmmbsduk" xml:space="preserve">This page will help you install everything you need to work your on Unity.

== Installing Unity ==

# Download Unity Hub. https://unity.com/download
# Download Unity 2022.3.5f1. https://unity.com/releases/editor/whats-new/2022.3.5
# Click on “Install this version with Unity Hub”.

== Initializing the Unity project ==
As the Unity project is very large (~4 GB), we will use it for all our mods.

# Follow the instructions on this page : https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Importing ThunderKit ===

# Follow the instructions on this page : https://luxstice.notion.site/Installing-ThunderKit-7e00f13efe804f12a31a9f31d7f9fd6e.

=== Importing Unity KSP tools ===

# Download the package here : https://github.com/SpaceWarpDev/KSP2UnityTools/releases.
# Click on the download file then click on “Import”.

=== Other configurations ===

# In the project explorer, go to Assets &gt; AddressablesAssetData &gt; AssetGroups &gt; Built In Data.
# In the Inspector window, click on “Inspect Top Level Settings”.
# Set the “Shader Bundle Naming Prefix” field to “Default Group GUID”.

&lt;blockquote&gt;Without this manipulation, Unity generates bundles with an ID calculated from the project name. Since we are using the same project for multiple mods, there will be a name conflict for the standard shader that Unity incorporates into all addressables. Using the GUID of the default group will help avoid collisions (you will need to remember to make the mod group the default group).&lt;/blockquote&gt;</text>
      <sha1>f6525u4zddxmf8qukjbeixvhmmbsduk</sha1>
    </revision>
    <revision>
      <id>183</id>
      <parentid>175</parentid>
      <timestamp>2023-10-28T12:15:44Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added category</comment>
      <origin>183</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1768" sha1="gfm7b51rqzuoqx2b9pn2z4w961ta8pp" xml:space="preserve">This page will help you install everything you need to work your on Unity.

== Installing Unity ==

# Download Unity Hub. https://unity.com/download
# Download Unity 2022.3.5f1. https://unity.com/releases/editor/whats-new/2022.3.5
# Click on “Install this version with Unity Hub”.

== Initializing the Unity project ==
As the Unity project is very large (~4 GB), we will use it for all our mods.

# Follow the instructions on this page : https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Importing ThunderKit ===

# Follow the instructions on this page : https://luxstice.notion.site/Installing-ThunderKit-7e00f13efe804f12a31a9f31d7f9fd6e.

=== Importing Unity KSP tools ===

# Download the package here : https://github.com/SpaceWarpDev/KSP2UnityTools/releases.
# Click on the download file then click on “Import”.

=== Other configurations ===

# In the project explorer, go to Assets &gt; AddressablesAssetData &gt; AssetGroups &gt; Built In Data.
# In the Inspector window, click on “Inspect Top Level Settings”.
# Set the “Shader Bundle Naming Prefix” field to “Default Group GUID”.

&lt;blockquote&gt;Without this manipulation, Unity generates bundles with an ID calculated from the project name. Since we are using the same project for multiple mods, there will be a name conflict for the standard shader that Unity incorporates into all addressables. Using the GUID of the default group will help avoid collisions (you will need to remember to make the mod group the default group).&lt;/blockquote&gt;
[[Category:Getting started]]</text>
      <sha1>gfm7b51rqzuoqx2b9pn2z4w961ta8pp</sha1>
    </revision>
    <revision>
      <id>200</id>
      <parentid>183</parentid>
      <timestamp>2023-10-28T16:57:38Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>/* Importing ThunderKit */  Updated text</comment>
      <origin>200</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3166" sha1="oqqucewshi7zio7n08dyaur0rb9jttd" xml:space="preserve">This page will help you install everything you need to work your on Unity.

== Installing Unity ==

# Download Unity Hub. https://unity.com/download
# Download Unity 2022.3.5f1. https://unity.com/releases/editor/whats-new/2022.3.5
# Click on “Install this version with Unity Hub”.

== Initializing the Unity project ==
As the Unity project is very large (~4 GB), we will use it for all our mods.

# Follow the instructions on this page : https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Importing ThunderKit ===
ThunderKit is a package for unity. but its instalation is a bit different from the usual.

# Download the latest version of ThunderKit here : https://github.com/KSP2Community/ThunderKitInstaller/releases.
# Open the file with Unity Hub. When Unity opens, choose "Import" in the import window.
# The ThunderKit Settings window should open, if it doesn’t just go to '''Tools&gt;Thunderkit&gt;Settings''' on the top part of Unity.
# Go to '''Import Configuration''' and on '''Import Project Settings''' change the dropdown to '''Everything.'''
# Go to '''ThunderKit Settings''' and on '''Locate and load game files for project''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported, if asked click '''I made a backup, Go Ahead'''
# If Unity asks you to restart your project, click '''Restart Project'''
# To check if the game was correctly imported, select any game object and on the inspector click '''Add Component''' then search for '''Core Part Data'''.

 Sometimes, the component wont appear right after the import, if so:
 1. Go to your Project window on unity
 2. Open the Packages tree view and scroll to KSP2_x64
 3. Right click and select "Reimport" (DON’T SELECT REIMPORT ALL, it takes way longer)
 4. Wait for the folder to be reimported, once finished you should be good to go
 
 This also fixes if Unity looses track of KSP2’s components like so. If your components look like this, do the same shown above.

=== Importing Unity KSP tools ===

# Download the package here : https://github.com/SpaceWarpDev/KSP2UnityTools/releases.
# Click on the download file then click on “Import”.

=== Other configurations ===

# In the project explorer, go to Assets &gt; AddressablesAssetData &gt; AssetGroups &gt; Built In Data.
# In the Inspector window, click on “Inspect Top Level Settings”.
# Set the “Shader Bundle Naming Prefix” field to “Default Group GUID”.

&lt;blockquote&gt;Without this manipulation, Unity generates bundles with an ID calculated from the project name. Since we are using the same project for multiple mods, there will be a name conflict for the standard shader that Unity incorporates into all addressables. Using the GUID of the default group will help avoid collisions (you will need to remember to make the mod group the default group).&lt;/blockquote&gt;
[[Category:Getting started]]</text>
      <sha1>oqqucewshi7zio7n08dyaur0rb9jttd</sha1>
    </revision>
    <revision>
      <id>202</id>
      <parentid>200</parentid>
      <timestamp>2023-10-28T21:10:06Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <origin>202</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3163" sha1="pj97lud6k9caux5xvdae3cjctkuw312" xml:space="preserve">This page will help you install everything you need to work your on Unity.

== Installing Unity ==

# Download Unity Hub. https://unity.com/download
# Download Unity 2022.3.5f1. https://unity.com/releases/editor/whats-new/2022.3.5
# Click on “Install this version with Unity Hub”.

== Initializing the Unity project ==
As the Unity project is very large (~4 GB), we will use it for all our mods.

# Follow the instructions on this page : https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Importing ThunderKit ===
ThunderKit is a package for unity. but its instalation is a bit different from the usual.

# Download the latest version of ThunderKit here : https://github.com/KSP2Community/ThunderKitInstaller/releases.
# Open the file with Unity Hub. When Unity opens, choose "Import" in the import window.
# The ThunderKit Settings window should open, if it doesn’t just go to '''Tools&gt;Thunderkit&gt;Settings''' on the top part of Unity.
# Go to '''Import Configuration''' and on '''Import Project Settings''' change the dropdown to '''Nothing.'''
# Go to '''ThunderKit Settings''' and on '''Locate and load game files for project''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported, if asked click '''I made a backup, Go Ahead'''
# If Unity asks you to restart your project, click '''Restart Project'''
# To check if the game was correctly imported, select any game object and on the inspector click '''Add Component''' then search for '''Core Part Data'''.

 Sometimes, the component wont appear right after the import, if so:
 1. Go to your Project window on unity
 2. Open the Packages tree view and scroll to KSP2_x64
 3. Right click and select "Reimport" (DON’T SELECT REIMPORT ALL, it takes way longer)
 4. Wait for the folder to be reimported, once finished you should be good to go
 
 This also fixes if Unity looses track of KSP2’s components like so. If your components look like this, do the same shown above.

=== Importing Unity KSP tools ===

# Download the package here : https://github.com/SpaceWarpDev/KSP2UnityTools/releases.
# Click on the download file then click on “Import”.

=== Other configurations ===

# In the project explorer, go to Assets &gt; AddressablesAssetData &gt; AssetGroups &gt; Built In Data.
# In the Inspector window, click on “Inspect Top Level Settings”.
# Set the “Shader Bundle Naming Prefix” field to “Default Group GUID”.

&lt;blockquote&gt;Without this manipulation, Unity generates bundles with an ID calculated from the project name. Since we are using the same project for multiple mods, there will be a name conflict for the standard shader that Unity incorporates into all addressables. Using the GUID of the default group will help avoid collisions (you will need to remember to make the mod group the default group).&lt;/blockquote&gt;
[[Category:Getting started]]</text>
      <sha1>pj97lud6k9caux5xvdae3cjctkuw312</sha1>
    </revision>
    <revision>
      <id>203</id>
      <parentid>202</parentid>
      <timestamp>2023-10-29T13:49:56Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added Installing the addressables</comment>
      <origin>203</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3766" sha1="4jor0pmmgcjjkmzndyhap9ofxpkuqjs" xml:space="preserve">This page will help you install everything you need to work your on Unity.

== Installing Unity ==

# Download Unity Hub. https://unity.com/download
# Download Unity 2022.3.5f1. https://unity.com/releases/editor/whats-new/2022.3.5
# Click on “Install this version with Unity Hub”.

== Initializing the Unity project ==
As the Unity project is very large (~4 GB), we will use it for all our mods.

# Follow the instructions on this page : https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the addressables package ===
Unity doesn’t come with this package natively, so we need to install it. Its easy!

# You start by going into ''Window&gt;Package Manager'' on the top left area of Unity.
# This will open a new window where you can manage '''''almost''''' all the packages inside Unity.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# On the search bar, look for '''Addressables'''. Select it and click install! It will show a couple pop-ups, and once its finished, it will show a green checkmark next to the Addressables’s version.

=== Importing ThunderKit ===
ThunderKit is a package for unity. but its instalation is a bit different from the usual.

# Download the latest version of ThunderKit here : https://github.com/KSP2Community/ThunderKitInstaller/releases.
# Open the file with Unity Hub. When Unity opens, choose "Import" in the import window.
# The ThunderKit Settings window should open, if it doesn’t just go to '''Tools&gt;Thunderkit&gt;Settings''' on the top part of Unity.
# Go to '''Import Configuration''' and on '''Import Project Settings''' change the dropdown to '''Nothing.'''
# Go to '''ThunderKit Settings''' and on '''Locate and load game files for project''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported, if asked click '''I made a backup, Go Ahead'''
# If Unity asks you to restart your project, click '''Restart Project'''
# To check if the game was correctly imported, select any game object and on the inspector click '''Add Component''' then search for '''Core Part Data'''.

 Sometimes, the component wont appear right after the import, if so:
 1. Go to your Project window on unity
 2. Open the Packages tree view and scroll to KSP2_x64
 3. Right click and select "Reimport" (DON’T SELECT REIMPORT ALL, it takes way longer)
 4. Wait for the folder to be reimported, once finished you should be good to go
 
 This also fixes if Unity looses track of KSP2’s components like so. If your components look like this, do the same shown above.

=== Importing Unity KSP tools ===

# Download the package here : https://github.com/SpaceWarpDev/KSP2UnityTools/releases.
# Click on the download file then click on “Import”.

=== Other configurations ===

# In the project explorer, go to Assets &gt; AddressablesAssetData &gt; AssetGroups &gt; Built In Data.
# In the Inspector window, click on “Inspect Top Level Settings”.
# Set the “Shader Bundle Naming Prefix” field to “Default Group GUID”.

&lt;blockquote&gt;Without this manipulation, Unity generates bundles with an ID calculated from the project name. Since we are using the same project for multiple mods, there will be a name conflict for the standard shader that Unity incorporates into all addressables. Using the GUID of the default group will help avoid collisions (you will need to remember to make the mod group the default group).&lt;/blockquote&gt;
[[Category:Getting started]]</text>
      <sha1>4jor0pmmgcjjkmzndyhap9ofxpkuqjs</sha1>
    </revision>
    <revision>
      <id>204</id>
      <parentid>203</parentid>
      <timestamp>2023-10-29T16:34:50Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Updated ThunderKit install</comment>
      <origin>204</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4083" sha1="n3v3kni4h9288pfjjy0j1hmk5nr7xgy" xml:space="preserve">This page will help you install everything you need to work your on Unity.

== Installing Unity ==

# Download Unity Hub. https://unity.com/download
# Download Unity 2022.3.5f1. https://unity.com/releases/editor/whats-new/2022.3.5
# Click on “Install this version with Unity Hub”.

== Initializing the Unity project ==
As the Unity project is very large (~4 GB), we will use it for all our mods.

# Follow the instructions on this page : https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the addressables package ===
Unity doesn’t come with this package natively, so we need to install it. Its easy!

# You start by going into ''Window&gt;Package Manager'' on the top left area of Unity.
# This will open a new window where you can manage '''''almost''''' all the packages inside Unity.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# On the search bar, look for '''Addressables'''. Select it and click install! It will show a couple pop-ups, and once its finished, it will show a green checkmark next to the Addressables’s version.

=== Importing ThunderKit ===
ThunderKit is a package for unity. but its instalation is a bit different from the usual.

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on Add Package from Git URL and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/PassivePicasso/ThunderKit.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
# Download the latest version of ThunderKit Installer here : https://github.com/KSP2Community/ThunderKitInstaller/releases.
# Open the file with Unity Hub. When Unity opens, choose "Import" in the import window.
# Go to '''Tools&gt;Thunderkit&gt;Reinstall'''.
# The ThunderKit Settings window should open, if it doesn’t just go to '''Tools&gt;Thunderkit&gt;Settings''' on the top part of Unity.
# Go to '''Import Configuration''' and on '''Import Project Settings''' change the dropdown to '''Nothing.'''
# Go to '''ThunderKit Settings''' and on '''Locate and load game files for project''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported, if asked click '''I made a backup, Go Ahead'''
# If Unity asks you to restart your project, click '''Restart Project'''
# To check if the game was correctly imported, select any game object and on the inspector click '''Add Component''' then search for '''Core Part Data'''.

 Sometimes, the component wont appear right after the import, if so:
 1. Go to your Project window on unity
 2. Open the Packages tree view and scroll to KSP2_x64
 3. Right click and select "Reimport" (DON’T SELECT REIMPORT ALL, it takes way longer)
 4. Wait for the folder to be reimported, once finished you should be good to go
 
 This also fixes if Unity looses track of KSP2’s components like so. If your components look like this, do the same shown above.

=== Importing Unity KSP tools ===

# Download the package here : https://github.com/SpaceWarpDev/KSP2UnityTools/releases.
# Click on the download file then click on “Import”.

=== Other configurations ===

# In the project explorer, go to Assets &gt; AddressablesAssetData &gt; AssetGroups &gt; Built In Data.
# In the Inspector window, click on “Inspect Top Level Settings”.
# Set the “Shader Bundle Naming Prefix” field to “Default Group GUID”.

&lt;blockquote&gt;Without this manipulation, Unity generates bundles with an ID calculated from the project name. Since we are using the same project for multiple mods, there will be a name conflict for the standard shader that Unity incorporates into all addressables. Using the GUID of the default group will help avoid collisions (you will need to remember to make the mod group the default group).&lt;/blockquote&gt;
[[Category:Getting started]]</text>
      <sha1>n3v3kni4h9288pfjjy0j1hmk5nr7xgy</sha1>
    </revision>
    <revision>
      <id>205</id>
      <parentid>204</parentid>
      <timestamp>2023-10-29T16:40:49Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Updated KSP2UT install</comment>
      <origin>205</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4213" sha1="byi8lizm1i9b7hep4cywqv8r7q9yiar" xml:space="preserve">This page will help you install everything you need to work your on Unity.

== Installing Unity ==

# Download Unity Hub. https://unity.com/download
# Download Unity 2022.3.5f1. https://unity.com/releases/editor/whats-new/2022.3.5
# Click on “Install this version with Unity Hub”.

== Initializing the Unity project ==
As the Unity project is very large (~4 GB), we will use it for all our mods.

# Follow the instructions on this page : https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the addressables package ===
Unity doesn’t come with this package natively, so we need to install it. Its easy!

# You start by going into ''Window&gt;Package Manager'' on the top left area of Unity.
# This will open a new window where you can manage '''''almost''''' all the packages inside Unity.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# On the search bar, look for '''Addressables'''. Select it and click install! It will show a couple pop-ups, and once its finished, it will show a green checkmark next to the Addressables’s version.

=== Importing ThunderKit ===
ThunderKit is a package for unity. but its instalation is a bit different from the usual.

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on Add Package from Git URL and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/PassivePicasso/ThunderKit.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
# Download the latest version of ThunderKit Installer here : https://github.com/KSP2Community/ThunderKitInstaller/releases.
# Open the file with Unity Hub. When Unity opens, choose "Import" in the import window.
# Go to '''Tools&gt;Thunderkit&gt;Reinstall'''.
# The ThunderKit Settings window should open, if it doesn’t just go to '''Tools&gt;Thunderkit&gt;Settings''' on the top part of Unity.
# Go to '''Import Configuration''' and on '''Import Project Settings''' change the dropdown to '''Nothing.'''
# Go to '''ThunderKit Settings''' and on '''Locate and load game files for project''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported, if asked click '''I made a backup, Go Ahead'''
# If Unity asks you to restart your project, click '''Restart Project'''
# To check if the game was correctly imported, select any game object and on the inspector click '''Add Component''' then search for '''Core Part Data'''.

 Sometimes, the component wont appear right after the import, if so:
 1. Go to your Project window on unity
 2. Open the Packages tree view and scroll to KSP2_x64
 3. Right click and select "Reimport" (DON’T SELECT REIMPORT ALL, it takes way longer)
 4. Wait for the folder to be reimported, once finished you should be good to go
 
 This also fixes if Unity looses track of KSP2’s components like so. If your components look like this, do the same shown above.

=== Importing Unity KSP tools ===

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on '''Add Package from Git URL''' and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/KSP2Community/KSP2UnityTools.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.

=== Other configurations ===

# In the project explorer, go to Assets &gt; AddressablesAssetData &gt; AssetGroups &gt; Built In Data.
# In the Inspector window, click on “Inspect Top Level Settings”.
# Set the “Shader Bundle Naming Prefix” field to “Default Group GUID”.

&lt;blockquote&gt;Without this manipulation, Unity generates bundles with an ID calculated from the project name. Since we are using the same project for multiple mods, there will be a name conflict for the standard shader that Unity incorporates into all addressables. Using the GUID of the default group will help avoid collisions (you will need to remember to make the mod group the default group).&lt;/blockquote&gt;
[[Category:Getting started]]</text>
      <sha1>byi8lizm1i9b7hep4cywqv8r7q9yiar</sha1>
    </revision>
    <revision>
      <id>206</id>
      <parentid>205</parentid>
      <timestamp>2023-10-29T16:46:23Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Removed advice to only have one Unity project per mod.</comment>
      <origin>206</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3587" sha1="cli6oic3osskfizz5v7eaaia1cdvru9" xml:space="preserve">This page will help you install everything you need to work your on Unity.

== Installing Unity ==

# Download Unity Hub. https://unity.com/download
# Download Unity 2022.3.5f1. https://unity.com/releases/editor/whats-new/2022.3.5
# Click on “Install this version with Unity Hub”.

== Initializing the Unity project ==
# Follow the instructions on this page: https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the addressables package ===
Unity doesn’t come with this package natively, so we need to install it. Its easy!

# You start by going into ''Window&gt;Package Manager'' on the top left area of Unity.
# This will open a new window where you can manage '''''almost''''' all the packages inside Unity.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# On the search bar, look for '''Addressables'''. Select it and click install! It will show a couple pop-ups, and once its finished, it will show a green checkmark next to the Addressables’s version.

=== Importing ThunderKit ===
ThunderKit is a package for unity. but its instalation is a bit different from the usual.

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on Add Package from Git URL and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/PassivePicasso/ThunderKit.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
# Download the latest version of ThunderKit Installer here : https://github.com/KSP2Community/ThunderKitInstaller/releases.
# Open the file with Unity Hub. When Unity opens, choose "Import" in the import window.
# Go to '''Tools&gt;Thunderkit&gt;Reinstall'''.
# The ThunderKit Settings window should open, if it doesn’t just go to '''Tools&gt;Thunderkit&gt;Settings''' on the top part of Unity.
# Go to '''Import Configuration''' and on '''Import Project Settings''' change the dropdown to '''Nothing.'''
# Go to '''ThunderKit Settings''' and on '''Locate and load game files for project''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported, if asked click '''I made a backup, Go Ahead'''
# If Unity asks you to restart your project, click '''Restart Project'''
# To check if the game was correctly imported, select any game object and on the inspector click '''Add Component''' then search for '''Core Part Data'''.

 Sometimes, the component wont appear right after the import, if so:
 1. Go to your Project window on unity
 2. Open the Packages tree view and scroll to KSP2_x64
 3. Right click and select "Reimport" (DON’T SELECT REIMPORT ALL, it takes way longer)
 4. Wait for the folder to be reimported, once finished you should be good to go
 
 This also fixes if Unity looses track of KSP2’s components like so. If your components look like this, do the same shown above.

=== Importing Unity KSP tools ===

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on '''Add Package from Git URL''' and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/KSP2Community/KSP2UnityTools.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
 If it's already installed, you'll need to delete the whole "KSP2UnityTools" folder from your Assets folder and then do the installation.
[[Category:Getting started]]</text>
      <sha1>cli6oic3osskfizz5v7eaaia1cdvru9</sha1>
    </revision>
    <revision>
      <id>207</id>
      <parentid>206</parentid>
      <timestamp>2023-10-30T10:37:56Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added Setting up swinfo.json and addressables section</comment>
      <origin>207</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4683" sha1="krsulgqk13rwooqhd67jo25qxcldgwl" xml:space="preserve">This page will help you install everything you need to work your on Unity.

== Installing Unity ==

# Download Unity Hub. https://unity.com/download
# Download Unity 2022.3.5f1. https://unity.com/releases/editor/whats-new/2022.3.5
# Click on “Install this version with Unity Hub”.

== Initializing the Unity project ==
# Follow the instructions on this page: https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the addressables package ===
Unity doesn’t come with this package natively, so we need to install it. Its easy!

# You start by going into ''Window&gt;Package Manager'' on the top left area of Unity.
# This will open a new window where you can manage '''''almost''''' all the packages inside Unity.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# On the search bar, look for '''Addressables'''. Select it and click install! It will show a couple pop-ups, and once its finished, it will show a green checkmark next to the Addressables’s version.

=== Importing ThunderKit ===
ThunderKit is a package for unity. but its instalation is a bit different from the usual.

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on Add Package from Git URL and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/PassivePicasso/ThunderKit.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
# Download the latest version of ThunderKit Installer here : https://github.com/KSP2Community/ThunderKitInstaller/releases.
# Open the file with Unity Hub. When Unity opens, choose "Import" in the import window.
# Go to '''Tools&gt;Thunderkit&gt;Reinstall'''.
# The ThunderKit Settings window should open, if it doesn’t just go to '''Tools&gt;Thunderkit&gt;Settings''' on the top part of Unity.
# Go to '''Import Configuration''' and on '''Import Project Settings''' change the dropdown to '''Nothing.'''
# Go to '''ThunderKit Settings''' and on '''Locate and load game files for project''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported, if asked click '''I made a backup, Go Ahead'''
# If Unity asks you to restart your project, click '''Restart Project'''
# To check if the game was correctly imported, select any game object and on the inspector click '''Add Component''' then search for '''Core Part Data'''.

 Sometimes, the component wont appear right after the import, if so:
 1. Go to your Project window on unity
 2. Open the Packages tree view and scroll to KSP2_x64
 3. Right click and select "Reimport" (DON’T SELECT REIMPORT ALL, it takes way longer)
 4. Wait for the folder to be reimported, once finished you should be good to go
 
 This also fixes if Unity looses track of KSP2’s components like so. If your components look like this, do the same shown above.

=== Importing Unity KSP tools ===

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on '''Add Package from Git URL''' and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/KSP2Community/KSP2UnityTools.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
 If it's already installed, you'll need to delete the whole "KSP2UnityTools" folder from your Assets folder and then do the installation.

=== Setting up swinfo.json and addressables ===

# After installing KSP2UnityTools, go to '''Tools&gt;KSP2 Unity Tools.'''
# Do either one of two following steps.
# '''If you have a mod you want to copy addressables into''':
## Select "Copy Addressables Only" as the '''Build Mode'''.
## In the build path select the addressables for your mod.
## At the bottom of the window, press '''Import swinfo.json''' and select your mods swinfo.json.
# '''If you want to build a full mod from Unity''':
## Set '''Build Mode''' to "Everything".
## Set build path to where you want to output your packaged mod (you can set this later, just set it before build).
## If you already have a swinfo, you can skip the next steps using the import swinfo.json as described in the previous section.
## Input your mods ID (this is critically important).
## Setup the rest of your mods info (these correspond to the swinfo).
# After doing one of the previous two processes, press '''Set Up Addressables From Mod Info''', and it should automatically set up everything needed in addressables so you dont need to touch it.

[[Category:Getting started]]</text>
      <sha1>krsulgqk13rwooqhd67jo25qxcldgwl</sha1>
    </revision>
    <revision>
      <id>222</id>
      <parentid>207</parentid>
      <timestamp>2023-10-30T11:33:54Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Added warning about the new Unity version</comment>
      <origin>222</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4716" sha1="sdlq7yyyusqdi8b6e2qzgfh7twz3mwh" xml:space="preserve">This page will help you install everything you need to work your on Unity.

== Installing Unity ==

# Download Unity Hub. https://unity.com/download
# Download Unity 2022.3.5f1. https://unity.com/releases/editor/whats-new/2022.3.5
# Click on “Install this version with Unity Hub”.

== Initializing the Unity project ==
# Follow the instructions on this page: https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3 but use Unity 2022.3.5f1 instead.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the addressables package ===
Unity doesn’t come with this package natively, so we need to install it. Its easy!

# You start by going into ''Window&gt;Package Manager'' on the top left area of Unity.
# This will open a new window where you can manage '''''almost''''' all the packages inside Unity.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# On the search bar, look for '''Addressables'''. Select it and click install! It will show a couple pop-ups, and once its finished, it will show a green checkmark next to the Addressables’s version.

=== Importing ThunderKit ===
ThunderKit is a package for unity. but its instalation is a bit different from the usual.

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on Add Package from Git URL and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/PassivePicasso/ThunderKit.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
# Download the latest version of ThunderKit Installer here : https://github.com/KSP2Community/ThunderKitInstaller/releases.
# Open the file with Unity Hub. When Unity opens, choose "Import" in the import window.
# Go to '''Tools&gt;Thunderkit&gt;Reinstall'''.
# The ThunderKit Settings window should open, if it doesn’t just go to '''Tools&gt;Thunderkit&gt;Settings''' on the top part of Unity.
# Go to '''Import Configuration''' and on '''Import Project Settings''' change the dropdown to '''Nothing.'''
# Go to '''ThunderKit Settings''' and on '''Locate and load game files for project''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported, if asked click '''I made a backup, Go Ahead'''
# If Unity asks you to restart your project, click '''Restart Project'''
# To check if the game was correctly imported, select any game object and on the inspector click '''Add Component''' then search for '''Core Part Data'''.

 Sometimes, the component wont appear right after the import, if so:
 1. Go to your Project window on unity
 2. Open the Packages tree view and scroll to KSP2_x64
 3. Right click and select "Reimport" (DON’T SELECT REIMPORT ALL, it takes way longer)
 4. Wait for the folder to be reimported, once finished you should be good to go
 
 This also fixes if Unity looses track of KSP2’s components like so. If your components look like this, do the same shown above.

=== Importing Unity KSP tools ===

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on '''Add Package from Git URL''' and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/KSP2Community/KSP2UnityTools.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
 If it's already installed, you'll need to delete the whole "KSP2UnityTools" folder from your Assets folder and then do the installation.

=== Setting up swinfo.json and addressables ===

# After installing KSP2UnityTools, go to '''Tools&gt;KSP2 Unity Tools.'''
# Do either one of two following steps.
# '''If you have a mod you want to copy addressables into''':
## Select "Copy Addressables Only" as the '''Build Mode'''.
## In the build path select the addressables for your mod.
## At the bottom of the window, press '''Import swinfo.json''' and select your mods swinfo.json.
# '''If you want to build a full mod from Unity''':
## Set '''Build Mode''' to "Everything".
## Set build path to where you want to output your packaged mod (you can set this later, just set it before build).
## If you already have a swinfo, you can skip the next steps using the import swinfo.json as described in the previous section.
## Input your mods ID (this is critically important).
## Setup the rest of your mods info (these correspond to the swinfo).
# After doing one of the previous two processes, press '''Set Up Addressables From Mod Info''', and it should automatically set up everything needed in addressables so you dont need to touch it.

[[Category:Getting started]]</text>
      <sha1>sdlq7yyyusqdi8b6e2qzgfh7twz3mwh</sha1>
    </revision>
    <revision>
      <id>239</id>
      <parentid>222</parentid>
      <timestamp>2023-11-05T11:43:23Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Fix typo</comment>
      <origin>239</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4710" sha1="phl9wnbrhhjm83ysd9hhe3ehfy5o25a" xml:space="preserve">This page will help you install everything you need to work your on Unity.

== Installing Unity ==

# Download Unity Hub. https://unity.com/download
# Download Unity 2022.3.5f1. https://unity.com/releases/editor/whats-new/2022.3.5
# Click on “Install this version with Unity Hub”.

== Initializing the Unity project ==
# Follow the instructions on this page: https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3 but use Unity 2022.3.5f1 instead.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the addressables package ===
Unity doesn’t come with this package natively, so we need to install it. Its easy!

# You start by going into ''Window&gt;Package Manager'' on the top left area of Unity.
# This will open a new window where you can manage '''''almost''''' all the packages inside Unity.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# On the search bar, look for '''Addressables'''. Select it and click install! It will show a couple pop-ups, and once its finished, it will show a green checkmark next to the Addressables’s version.

=== Importing ThunderKit ===
ThunderKit is a package for unity. but its instalation is a bit different from the usual.

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on Add Package from Git URL and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/PassivePicasso/ThunderKit.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
# Download the latest version of ThunderKit Installer here : https://github.com/KSP2Community/ThunderKitInstaller/releases.
# Open the file with Unity Hub. When Unity opens, choose "Import" in the import window.
# Go to '''Tools&gt;Thunderkit&gt;Reinstall'''.
# The ThunderKit Settings window should open, if it doesn’t just go to '''Tools&gt;Thunderkit&gt;Settings''' on the top part of Unity.
# Go to '''Import Configuration''' and on '''Import Project Settings''' change the dropdown to '''Nothing.'''
# Go to '''ThunderKit Settings''' and on '''Locate and load game files for project''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported, if asked click '''I made a backup, Go Ahead'''
# If Unity asks you to restart your project, click '''Restart Project'''
# To check if the game was correctly imported, select any game object and on the inspector click '''Add Component''' then search for '''Core Part Data'''.

 Sometimes, the component wont appear right after the import, if so:
 1. Go to your Project window on unity
 2. Open the Packages tree view and scroll to KSP2_x64
 3. Right click and select "Reimport" (DON’T SELECT REIMPORT ALL, it takes way longer)
 4. Wait for the folder to be reimported, once finished you should be good to go
 
 This also fixes if Unity looses track of KSP2’s components like so. If your components look like this, do the same shown above.

=== Importing Unity KSP tools ===

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on '''Add Package from Git URL''' and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/KSP2Community/KSP2UnityTools.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
 If it's already installed, you'll need to delete the whole "KSP2UnityTools" folder from your Assets folder and then do the installation.

=== Setting up swinfo.json and addressables ===

# After installing KSP2UnityTools, go to '''Tools&gt;KSP2 Unity Tools.'''
# Do either one of two following steps.
# '''If you have a mod you want to copy addressables into''':
## Select "Copy Assets Only" as the '''Build Mode'''.
## In the build path select the addressables for your mod.
## At the bottom of the window, press '''Import swinfo.json''' and select your mods swinfo.json.
# '''If you want to build a full mod from Unity''':
## Set '''Build Mode''' to "Everything".
## Set build path to where you want to output your packaged mod (you can set this later, just set it before build).
## If you already have a swinfo, you can skip the next steps using the import swinfo.json as described in the previous section.
## Input your mods ID (this is critically important).
## Setup the rest of your mods info (these correspond to the swinfo).
# After doing one of the previous two processes, press '''Set Up Addressables From Mod Info''', and it should automatically set up everything needed in addressables so you dont need to touch it.

[[Category:Getting started]]</text>
      <sha1>phl9wnbrhhjm83ysd9hhe3ehfy5o25a</sha1>
    </revision>
    <revision>
      <id>254</id>
      <parentid>239</parentid>
      <timestamp>2023-12-04T20:41:04Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Made Installing Unity clearer</comment>
      <origin>254</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4741" sha1="98gnikin4ube7x3jv8mmdcuc843ojot" xml:space="preserve">This page will help you install everything you need to work your on Unity.

== Installing Unity ==

# Download Unity Hub from https://unity.com/download.
# Download Unity 2022.3.5f1 by clicking on the “Install this version with Unity Hub” link on this page: https://unity.com/releases/editor/whats-new/2022.3.5.

== Initializing the Unity project ==
# Follow the instructions on this page: https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3 but use Unity 2022.3.5f1 instead.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the addressables package ===
Unity doesn’t come with this package natively, so we need to install it. Its easy!

# You start by going into ''Window&gt;Package Manager'' on the top left area of Unity.
# This will open a new window where you can manage '''''almost''''' all the packages inside Unity.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# On the search bar, look for '''Addressables'''. Select it and click install! It will show a couple pop-ups, and once its finished, it will show a green checkmark next to the Addressables’s version.

=== Importing ThunderKit ===
ThunderKit is a package for unity. but its instalation is a bit different from the usual.

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on Add Package from Git URL and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/PassivePicasso/ThunderKit.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
# Download the latest version of ThunderKit Installer here : https://github.com/KSP2Community/ThunderKitInstaller/releases.
# Open the file with Unity Hub. When Unity opens, choose "Import" in the import window.
# Go to '''Tools&gt;Thunderkit&gt;Reinstall'''.
# The ThunderKit Settings window should open, if it doesn’t just go to '''Tools&gt;Thunderkit&gt;Settings''' on the top part of Unity.
# Go to '''Import Configuration''' and on '''Import Project Settings''' change the dropdown to '''Nothing.'''
# Go to '''ThunderKit Settings''' and on '''Locate and load game files for project''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported, if asked click '''I made a backup, Go Ahead'''
# If Unity asks you to restart your project, click '''Restart Project'''
# To check if the game was correctly imported, select any game object and on the inspector click '''Add Component''' then search for '''Core Part Data'''.

 Sometimes, the component wont appear right after the import, if so:
 1. Go to your Project window on unity
 2. Open the Packages tree view and scroll to KSP2_x64
 3. Right click and select "Reimport" (DON’T SELECT REIMPORT ALL, it takes way longer)
 4. Wait for the folder to be reimported, once finished you should be good to go
 
 This also fixes if Unity looses track of KSP2’s components like so. If your components look like this, do the same shown above.

=== Importing Unity KSP tools ===

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on '''Add Package from Git URL''' and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/KSP2Community/KSP2UnityTools.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
 If it's already installed, you'll need to delete the whole "KSP2UnityTools" folder from your Assets folder and then do the installation.

=== Setting up swinfo.json and addressables ===

# After installing KSP2UnityTools, go to '''Tools&gt;KSP2 Unity Tools.'''
# Do either one of two following steps.
# '''If you have a mod you want to copy addressables into''':
## Select "Copy Assets Only" as the '''Build Mode'''.
## In the build path select the addressables for your mod.
## At the bottom of the window, press '''Import swinfo.json''' and select your mods swinfo.json.
# '''If you want to build a full mod from Unity''':
## Set '''Build Mode''' to "Everything".
## Set build path to where you want to output your packaged mod (you can set this later, just set it before build).
## If you already have a swinfo, you can skip the next steps using the import swinfo.json as described in the previous section.
## Input your mods ID (this is critically important).
## Setup the rest of your mods info (these correspond to the swinfo).
# After doing one of the previous two processes, press '''Set Up Addressables From Mod Info''', and it should automatically set up everything needed in addressables so you dont need to touch it.

[[Category:Getting started]]</text>
      <sha1>98gnikin4ube7x3jv8mmdcuc843ojot</sha1>
    </revision>
    <revision>
      <id>274</id>
      <parentid>254</parentid>
      <timestamp>2023-12-29T18:37:25Z</timestamp>
      <contributor>
        <username>Cheese</username>
        <id>7</id>
      </contributor>
      <comment>Tell people to use KSP2UT to fix unity</comment>
      <origin>274</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4565" sha1="op0xb9ine0qz9ldmdddj1gxoowmjno6" xml:space="preserve">This page will help you install everything you need to work your on Unity.

== Installing Unity ==

# Download Unity Hub from https://unity.com/download.
# Download Unity 2022.3.5f1 by clicking on the “Install this version with Unity Hub” link on this page: https://unity.com/releases/editor/whats-new/2022.3.5.

== Initializing the Unity project ==
# Follow the instructions on this page: https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3 but use Unity 2022.3.5f1 instead.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the addressables package ===
Unity doesn’t come with this package natively, so we need to install it. Its easy!

# You start by going into ''Window&gt;Package Manager'' on the top left area of Unity.
# This will open a new window where you can manage '''''almost''''' all the packages inside Unity.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# On the search bar, look for '''Addressables'''. Select it and click install! It will show a couple pop-ups, and once its finished, it will show a green checkmark next to the Addressables’s version.

=== Importing ThunderKit ===
ThunderKit is a package for unity. but its instalation is a bit different from the usual.

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on Add Package from Git URL and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/PassivePicasso/ThunderKit.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
# Download the latest version of ThunderKit Installer here : https://github.com/KSP2Community/ThunderKitInstaller/releases.
# Open the file with Unity Hub. When Unity opens, choose "Import" in the import window.
# Go to '''Tools&gt;Thunderkit&gt;Reinstall'''.
# The ThunderKit Settings window should open, if it doesn’t just go to '''Tools&gt;Thunderkit&gt;Settings''' on the top part of Unity.
# Go to '''Import Configuration''' and on '''Import Project Settings''' change the dropdown to '''Nothing.'''
# Go to '''ThunderKit Settings''' and on '''Locate and load game files for project''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported, if asked click '''I made a backup, Go Ahead'''
# If Unity asks you to restart your project, click '''Restart Project'''
# To check if the game was correctly imported, select any game object and on the inspector click '''Add Component''' then search for '''Core Part Data'''.

 Sometimes, the component wont appear right after the import, if so:
 1. Skip to the step for Importing KSP2 Unity Tools, and use the Tools/Fix Unity button
 
 This also fixes if Unity looses track of KSP2’s components like so. If your components look like this, do the same shown above.

=== Importing Unity KSP tools ===

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on '''Add Package from Git URL''' and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/KSP2Community/KSP2UnityTools.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
 If it's already installed, you'll need to delete the whole "KSP2UnityTools" folder from your Assets folder and then do the installation.

=== Setting up swinfo.json and addressables ===

# After installing KSP2UnityTools, go to '''Tools&gt;KSP2 Unity Tools.'''
# Do either one of two following steps.
# '''If you have a mod you want to copy addressables into''':
## Select "Copy Assets Only" as the '''Build Mode'''.
## In the build path select the addressables for your mod.
## At the bottom of the window, press '''Import swinfo.json''' and select your mods swinfo.json.
# '''If you want to build a full mod from Unity''':
## Set '''Build Mode''' to "Everything".
## Set build path to where you want to output your packaged mod (you can set this later, just set it before build).
## If you already have a swinfo, you can skip the next steps using the import swinfo.json as described in the previous section.
## Input your mods ID (this is critically important).
## Setup the rest of your mods info (these correspond to the swinfo).
# After doing one of the previous two processes, press '''Set Up Addressables From Mod Info''', and it should automatically set up everything needed in addressables so you dont need to touch it.

[[Category:Getting started]]</text>
      <sha1>op0xb9ine0qz9ldmdddj1gxoowmjno6</sha1>
    </revision>
    <revision>
      <id>275</id>
      <parentid>274</parentid>
      <timestamp>2023-12-31T02:05:55Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Updated Importing ThunderKit</comment>
      <origin>275</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4455" sha1="cwdcyx9xw99k0l0nbp9bjl344kxcryc" xml:space="preserve">This page will help you install everything you need to work your on Unity.

== Installing Unity ==

# Download Unity Hub from https://unity.com/download.
# Download Unity 2022.3.5f1 by clicking on the “Install this version with Unity Hub” link on this page: https://unity.com/releases/editor/whats-new/2022.3.5.

== Initializing the Unity project ==
# Follow the instructions on this page: https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3 but use Unity 2022.3.5f1 instead.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the addressables package ===
Unity doesn’t come with this package natively, so we need to install it. Its easy!

# You start by going into ''Window&gt;Package Manager'' on the top left area of Unity.
# This will open a new window where you can manage '''''almost''''' all the packages inside Unity.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# On the search bar, look for '''Addressables'''. Select it and click install! It will show a couple pop-ups, and once its finished, it will show a green checkmark next to the Addressables’s version.

=== Importing ThunderKit ===
ThunderKit is a package for unity. but its instalation is a bit different from the usual.

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on Add Package from Git URL and paste &lt;code&gt;https://github.com/PassivePicasso/ThunderKit.git#at3-update&lt;/code&gt; and click Add.
#
# The ThunderKit Settings window should open, if it doesn’t just go to '''Tools&gt;Thunderkit&gt;Settings''' on the top part of Unity.
# Go to '''Import Configuration''' and on '''Import Project Settings''' change the dropdown to '''Everything.'''
# Go to '''ThunderKit Settings''' and in '''Locate and load game files for project,''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported, if asked, click '''I made a backup, Go Ahead'''
# If Unity asks you to restart your project to disable the assembly importer, click '''Restart Project'''. It may ask you a second time after the import is finished, this time do not restart.
# To check if the game was correctly imported, select any game object and on the inspector click '''Add Component''' then search for '''Core Part Data'''.

 Sometimes, the component wont appear right after the import, if so:
 1. Skip to the step for Importing KSP2 Unity Tools, and use the Tools/Fix Unity button
 
 This also fixes if Unity looses track of KSP2’s components like so. If your components look like this, do the same shown above.

=== Importing Unity KSP tools ===

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign on the top left corner of the window that opens, after that click on '''Add Package from Git URL''' and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/KSP2Community/KSP2UnityTools.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
 If you already had an earlier version installed, you will need to delete the whole "KSP2UnityTools" folder from your Assets folder and then do the installation.

=== Setting up swinfo.json and addressables ===

# After installing KSP2UnityTools, go to '''Tools&gt;KSP2 Unity Tools.'''
# Do either one of two following steps.
# '''If you have a mod you want to copy addressables into''':
## Select "Copy Assets Only" as the '''Build Mode'''.
## In the build path select the addressables for your mod.
## At the bottom of the window, press '''Import swinfo.json''' and select your mods swinfo.json.
# '''If you want to build a full mod from Unity''':
## Set '''Build Mode''' to "Everything".
## Set build path to where you want to output your packaged mod (you can set this later, just set it before build).
## If you already have a swinfo, you can skip the next steps using the import swinfo.json as described in the previous section.
## Input your mods ID (this is critically important).
## Setup the rest of your mods info (these correspond to the swinfo).
# After doing one of the previous two processes, press '''Set Up Addressables From Mod Info''', and it should automatically set up everything needed in addressables so you dont need to touch it.

[[Category:Getting started]]</text>
      <sha1>cwdcyx9xw99k0l0nbp9bjl344kxcryc</sha1>
    </revision>
    <revision>
      <id>276</id>
      <parentid>275</parentid>
      <timestamp>2023-12-31T02:16:33Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Minor grammar/wording edits</comment>
      <origin>276</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4647" sha1="h7c5os1h14xbyy5tvx313spt1qgw28s" xml:space="preserve">This page will help you install everything you need to use Unity for KSP2 modding.

== Installing Unity ==

# Download Unity Hub from https://unity.com/download.
# Download Unity 2022.3.5f1 by clicking on the “Install this version with Unity Hub” link on this page: https://unity.com/releases/editor/whats-new/2022.3.5.

== Initializing the Unity project ==
# Follow the instructions on this page: https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3 but use Unity 2022.3.5f1 instead.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the addressables package ===
Unity doesn’t come with this package natively, so we need to install it. It's easy!

# You start by going into ''Window&gt;Package Manager'' on the top left area of Unity.
# This will open a new window where you can manage '''''almost''''' all the packages inside Unity.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# In the search bar, look for '''Addressables'''. Select it and click install! It will show a couple pop-ups, and once it is finished, it will show a green checkmark next to the Addressables package version.

=== Importing ThunderKit ===
ThunderKit is a package for Unity, however it is not hosted in the official Unity package repository, so it needs to be installed directly from its GitHub repository.

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign in the top left corner of the window that opens, after that click on Add Package from Git URL and paste &lt;code&gt;https://github.com/PassivePicasso/ThunderKit.git#at3-update&lt;/code&gt; and click Add.
#
# The ThunderKit Settings window should open, if it doesn’t, just go to '''Tools&gt;Thunderkit&gt;Settings''' in the toolbar at the top of Unity.
# Go to '''Import Configuration''' and in '''Import Project Settings,''' change the dropdown to '''Everything.'''
# Go to '''ThunderKit Settings''' and in '''Locate and load game files for project,''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported. If asked, click '''I made a backup, Go Ahead.'''
# If Unity asks you to restart your project to disable the assembly updater, click '''Restart Project'''. It may ask you a second time after the import is finished, this time do not restart.
# To check if the game was correctly imported, select or create any game object, and in the inspector click '''Add Component''' and search for '''Core Part Data'''.

 Sometimes, the component wont appear right after the import, if so:
 Skip to the step for Importing KSP2 Unity Tools, and use the Tools/Fix Unity button.
 You will also need to use this button if the KSP2 components on your objects break, displaying a yellow warning triangle. With Unity 2022, this seems to happen on almost every Unity restart.

=== Importing Unity KSP tools ===

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign in the top left corner of the window that opens, after that click on '''Add Package from Git URL''' and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/KSP2Community/KSP2UnityTools.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
 If you already had an earlier version installed, you will need to delete the whole "KSP2UnityTools" folder from your Assets folder and then do the installation.

=== Setting up swinfo.json and addressables ===

# After installing KSP2UnityTools, go to '''Tools&gt;KSP2 Unity Tools.'''
# Follow one of two following steps, depending on which applies for you:
# '''If you have a mod you want to copy addressables into''':
## Select "Copy Assets Only" as the '''Build Mode'''.
## In the build path select the addressables for your mod.
## At the bottom of the window, press '''Import swinfo.json''' and select your mods swinfo.json.
# '''If you want to build a full mod from Unity''':
## Set '''Build Mode''' to "Everything".
## Set build path to where you want to output your packaged mod (you can set this later, just set it before build).
## If you already have a swinfo.json file, you can skip the next steps using the import swinfo.json button as described in the previous section.
## Input your mod's ID (this is critically important).
## Setup the rest of your mod's info (these correspond to the swinfo).
# After doing one of the previous two processes, press '''Set Up Addressables From Mod Info''', and it should automatically set up the addressables groups for you.

[[Category:Getting started]]</text>
      <sha1>h7c5os1h14xbyy5tvx313spt1qgw28s</sha1>
    </revision>
    <revision>
      <id>277</id>
      <parentid>276</parentid>
      <timestamp>2023-12-31T02:21:53Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>/* Installing the addressables package */</comment>
      <origin>277</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4652" sha1="c6y9x2df0f9ieo71b4pmld7foyr95so" xml:space="preserve">This page will help you install everything you need to use Unity for KSP2 modding.

== Installing Unity ==

# Download Unity Hub from https://unity.com/download.
# Download Unity 2022.3.5f1 by clicking on the “Install this version with Unity Hub” link on this page: https://unity.com/releases/editor/whats-new/2022.3.5.

== Initializing the Unity project ==
# Follow the instructions on this page: https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3 but use Unity 2022.3.5f1 instead.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the addressables package ===
Unity doesn’t come with this package natively, so we need to install it first:

# Open the Package Manager by clicking '''Window&gt;Package Manager''' in the toolbar at the top of Unity.
# This will open a new window where you can manage most of the packages in your project.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# In the search bar, look for '''Addressables'''. Select it and click Install. It will show a couple pop-ups, and once it is finished, it will show a green checkmark next to the Addressables package version.

=== Importing ThunderKit ===
ThunderKit is a package for Unity, however it is not hosted in the official Unity package repository, so it needs to be installed directly from its GitHub repository.

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign in the top left corner of the window that opens, after that click on Add Package from Git URL and paste &lt;code&gt;https://github.com/PassivePicasso/ThunderKit.git#at3-update&lt;/code&gt; and click Add.
#
# The ThunderKit Settings window should open, if it doesn’t, just go to '''Tools&gt;Thunderkit&gt;Settings''' in the toolbar at the top of Unity.
# Go to '''Import Configuration''' and in '''Import Project Settings,''' change the dropdown to '''Everything.'''
# Go to '''ThunderKit Settings''' and in '''Locate and load game files for project,''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported. If asked, click '''I made a backup, Go Ahead.'''
# If Unity asks you to restart your project to disable the assembly updater, click '''Restart Project'''. It may ask you a second time after the import is finished, this time do not restart.
# To check if the game was correctly imported, select or create any game object, and in the inspector click '''Add Component''' and search for '''Core Part Data'''.

 Sometimes, the component wont appear right after the import, if so:
 Skip to the step for Importing KSP2 Unity Tools, and use the Tools/Fix Unity button.
 You will also need to use this button if the KSP2 components on your objects break, displaying a yellow warning triangle. With Unity 2022, this seems to happen on almost every Unity restart.

=== Importing Unity KSP tools ===

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign in the top left corner of the window that opens, after that click on '''Add Package from Git URL''' and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/KSP2Community/KSP2UnityTools.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
 If you already had an earlier version installed, you will need to delete the whole "KSP2UnityTools" folder from your Assets folder and then do the installation.

=== Setting up swinfo.json and addressables ===

# After installing KSP2UnityTools, go to '''Tools&gt;KSP2 Unity Tools.'''
# Follow one of two following steps, depending on which applies for you:
# '''If you have a mod you want to copy addressables into''':
## Select "Copy Assets Only" as the '''Build Mode'''.
## In the build path select the addressables for your mod.
## At the bottom of the window, press '''Import swinfo.json''' and select your mods swinfo.json.
# '''If you want to build a full mod from Unity''':
## Set '''Build Mode''' to "Everything".
## Set build path to where you want to output your packaged mod (you can set this later, just set it before build).
## If you already have a swinfo.json file, you can skip the next steps using the import swinfo.json button as described in the previous section.
## Input your mod's ID (this is critically important).
## Setup the rest of your mod's info (these correspond to the swinfo).
# After doing one of the previous two processes, press '''Set Up Addressables From Mod Info''', and it should automatically set up the addressables groups for you.

[[Category:Getting started]]</text>
      <sha1>c6y9x2df0f9ieo71b4pmld7foyr95so</sha1>
    </revision>
    <revision>
      <id>278</id>
      <parentid>277</parentid>
      <timestamp>2023-12-31T02:23:29Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>/* Importing ThunderKit */</comment>
      <origin>278</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4653" sha1="2aekjihzoiruy6p3iaps6gy6qecni9t" xml:space="preserve">This page will help you install everything you need to use Unity for KSP2 modding.

== Installing Unity ==

# Download Unity Hub from https://unity.com/download.
# Download Unity 2022.3.5f1 by clicking on the “Install this version with Unity Hub” link on this page: https://unity.com/releases/editor/whats-new/2022.3.5.

== Initializing the Unity project ==
# Follow the instructions on this page: https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3 but use Unity 2022.3.5f1 instead.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the addressables package ===
Unity doesn’t come with this package natively, so we need to install it first:

# Open the Package Manager by clicking '''Window&gt;Package Manager''' in the toolbar at the top of Unity.
# This will open a new window where you can manage most of the packages in your project.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# In the search bar, look for '''Addressables'''. Select it and click Install. It will show a couple pop-ups, and once it is finished, it will show a green checkmark next to the Addressables package version.

=== Importing ThunderKit ===
ThunderKit is a package for Unity, however it is not hosted in the official Unity package repository, so it needs to be installed directly from its GitHub repository.

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign in the top left corner of the window that opens, after that click on Add Package from Git URL and paste &lt;code&gt;https://github.com/PassivePicasso/ThunderKit.git#at3-update&lt;/code&gt; and click Add.
#
# The ThunderKit Settings window should open, if it doesn’t, just go to '''Tools&gt;Thunderkit&gt;Settings''' in the toolbar at the top of Unity.
# Go to '''Import Configuration''' and in '''Import Project Settings,''' change the dropdown to '''Everything.'''
# Go to '''ThunderKit Settings''' and in '''Locate and load game files for project,''' click on '''Browse''' and select your '''main''' Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported. If asked, click '''I made a backup, Go Ahead.'''
# If Unity asks you to restart your project to disable the assembly updater, click '''Restart Project'''. It may ask you a second time after the import is finished, this time do not restart.
# To check if the game was correctly imported, select or create any game object, and in the inspector click '''Add Component''' and search for '''Core Part Data'''.

 Sometimes, the component won't appear right after the import, if so:
 Skip to the step for Importing KSP2 Unity Tools, and use the Tools/Fix Unity button.
 You will also need to use this button if the KSP2 components on your objects break, displaying a yellow warning triangle. With Unity 2022, this seems to happen on almost every Unity restart.

=== Importing Unity KSP tools ===

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign in the top left corner of the window that opens, after that click on '''Add Package from Git URL''' and paste &lt;code&gt;&lt;nowiki&gt;https://github.com/KSP2Community/KSP2UnityTools.git&lt;/nowiki&gt;&lt;/code&gt; and click Add.
 If you already had an earlier version installed, you will need to delete the whole "KSP2UnityTools" folder from your Assets folder and then do the installation.

=== Setting up swinfo.json and addressables ===

# After installing KSP2UnityTools, go to '''Tools&gt;KSP2 Unity Tools.'''
# Follow one of two following steps, depending on which applies for you:
# '''If you have a mod you want to copy addressables into''':
## Select "Copy Assets Only" as the '''Build Mode'''.
## In the build path select the addressables for your mod.
## At the bottom of the window, press '''Import swinfo.json''' and select your mods swinfo.json.
# '''If you want to build a full mod from Unity''':
## Set '''Build Mode''' to "Everything".
## Set build path to where you want to output your packaged mod (you can set this later, just set it before build).
## If you already have a swinfo.json file, you can skip the next steps using the import swinfo.json button as described in the previous section.
## Input your mod's ID (this is critically important).
## Setup the rest of your mod's info (these correspond to the swinfo).
# After doing one of the previous two processes, press '''Set Up Addressables From Mod Info''', and it should automatically set up the addressables groups for you.

[[Category:Getting started]]</text>
      <sha1>2aekjihzoiruy6p3iaps6gy6qecni9t</sha1>
    </revision>
    <revision>
      <id>284</id>
      <parentid>278</parentid>
      <timestamp>2024-01-11T12:49:10Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Updated for ThunderKit 8.0.5</comment>
      <origin>284</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4309" sha1="gmuvwagbsbwg6vy0xnr932z9p15sxzj" xml:space="preserve">This page will help you install everything you need to use Unity for KSP2 modding.

== Installing Unity ==

# Download Unity Hub from https://unity.com/download.
# Download Unity 2022.3.5f1 by clicking on the '''Install this version with Unity Hub''' link on this page: https://unity.com/releases/editor/whats-new/2022.3.5.

== Initializing the Unity project ==
# Follow the instructions on this page: https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3 but use Unity 2022.3.5f1 instead.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the addressables package ===
Unity doesn’t come with this package natively, so we need to install it first:

# Open the Package Manager by clicking '''Window&gt;Package Manager''' in the toolbar at the top of Unity.
# This will open a new window where you can manage most of the packages in your project.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# In the search bar, look for '''Addressables'''. Select it and click '''Install'''. It will show a couple pop-ups, and once it is finished, it will show a green checkmark next to the Addressables package version.

=== Importing ThunderKit ===
ThunderKit is a package for Unity, however it is not hosted in the official Unity package repository, so it needs to be installed directly from its GitHub repository.

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign in the top left corner of the window that opens, after that click on '''Add Package from Git URL''' and paste &lt;code&gt;https://github.com/PassivePicasso/ThunderKit.git&lt;/code&gt; and click '''Add'''.
#
# The ThunderKit Settings window should open, if it doesn’t, just go to '''Tools&gt;ThunderKit&gt;Settings''' in the toolbar at the top of Unity.
# Go to '''Import Configuration''' and in '''Import Project Settings,''' change the dropdown value to '''Everything.'''
# Go to '''ThunderKit Settings''' and in '''Locate and load game files for project,''' click on '''Browse''' and select your main Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported. If asked, click '''I made a backup, Go Ahead.'''
# If Unity asks you to restart your project, confirm it by clicking on '''Restart Project'''.
# After the process is finished, to check if the game was correctly imported, select or create any game object, and in the inspector click '''Add Component''' and search for '''Core Part Data'''.

=== Importing Unity KSP tools ===

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign in the top left corner of the window that opens, after that click on '''Add Package from Git URL''', paste &lt;code&gt;&lt;nowiki&gt;https://github.com/KSP2Community/KSP2UnityTools.git&lt;/nowiki&gt;&lt;/code&gt; and click '''Add'''.
 If you have previously installed an older version of KSP2 Unity Tools manually from a .unitypackage file, you will need to delete the whole "KSP2UnityTools" folder from your Assets folder and then do the installation.

=== Setting up swinfo.json and addressables ===

# After installing KSP2UnityTools, go to '''Tools&gt;KSP2 Unity Tools.'''
# Follow one of two following steps, depending on which applies for you:
# '''If you have a mod you want to copy addressables into''':
## Select "Copy Assets Only" as the '''Build Mode'''.
## In the build path select the addressables for your mod.
## At the bottom of the window, press '''Import swinfo.json''' and select your mods swinfo.json.
# '''If you want to build a full mod from Unity''':
## Set '''Build Mode''' to "Everything".
## Set build path to where you want to output your packaged mod (you can set this later, just set it before build).
## If you already have a swinfo.json file, you can skip the next steps using the import swinfo.json button as described in the previous section.
## Input your mod's ID (this is critically important).
## Setup the rest of your mod's info (these correspond to the swinfo).
# After following one of the previous two processes, press '''Set Up Addressables From Mod Info''', and it should automatically set up the addressables groups for you.

[[Category:Getting started]]</text>
      <sha1>gmuvwagbsbwg6vy0xnr932z9p15sxzj</sha1>
    </revision>
    <revision>
      <id>333</id>
      <parentid>284</parentid>
      <timestamp>2024-02-01T12:27:13Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>/* Installing Unity */</comment>
      <origin>333</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4372" sha1="1iq62jhuzi6cv6ul307qj5f9o7d7xc0" xml:space="preserve">This page will help you install everything you need to use Unity for KSP2 modding.

== Installing Unity ==

# Download Unity Hub from https://unity.com/download.
# Download Unity 2022.3.5f1 by clicking on the '''Install this version with Unity Hub''' link on this page: https://unity.com/releases/editor/whats-new/2022.3.5.
# Download and install Git from https://git-scm.com/downloads.

== Initializing the Unity project ==
# Follow the instructions on this page: https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3 but use Unity 2022.3.5f1 instead.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the addressables package ===
Unity doesn’t come with this package natively, so we need to install it first:

# Open the Package Manager by clicking '''Window&gt;Package Manager''' in the toolbar at the top of Unity.
# This will open a new window where you can manage most of the packages in your project.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# In the search bar, look for '''Addressables'''. Select it and click '''Install'''. It will show a couple pop-ups, and once it is finished, it will show a green checkmark next to the Addressables package version.

=== Importing ThunderKit ===
ThunderKit is a package for Unity, however it is not hosted in the official Unity package repository, so it needs to be installed directly from its GitHub repository.

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign in the top left corner of the window that opens, after that click on '''Add Package from Git URL''' and paste &lt;code&gt;https://github.com/PassivePicasso/ThunderKit.git&lt;/code&gt; and click '''Add'''.
#
# The ThunderKit Settings window should open, if it doesn’t, just go to '''Tools&gt;ThunderKit&gt;Settings''' in the toolbar at the top of Unity.
# Go to '''Import Configuration''' and in '''Import Project Settings,''' change the dropdown value to '''Everything.'''
# Go to '''ThunderKit Settings''' and in '''Locate and load game files for project,''' click on '''Browse''' and select your main Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported. If asked, click '''I made a backup, Go Ahead.'''
# If Unity asks you to restart your project, confirm it by clicking on '''Restart Project'''.
# After the process is finished, to check if the game was correctly imported, select or create any game object, and in the inspector click '''Add Component''' and search for '''Core Part Data'''.

=== Importing Unity KSP tools ===

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign in the top left corner of the window that opens, after that click on '''Add Package from Git URL''', paste &lt;code&gt;&lt;nowiki&gt;https://github.com/KSP2Community/KSP2UnityTools.git&lt;/nowiki&gt;&lt;/code&gt; and click '''Add'''.
 If you have previously installed an older version of KSP2 Unity Tools manually from a .unitypackage file, you will need to delete the whole "KSP2UnityTools" folder from your Assets folder and then do the installation.

=== Setting up swinfo.json and addressables ===

# After installing KSP2UnityTools, go to '''Tools&gt;KSP2 Unity Tools.'''
# Follow one of two following steps, depending on which applies for you:
# '''If you have a mod you want to copy addressables into''':
## Select "Copy Assets Only" as the '''Build Mode'''.
## In the build path select the addressables for your mod.
## At the bottom of the window, press '''Import swinfo.json''' and select your mods swinfo.json.
# '''If you want to build a full mod from Unity''':
## Set '''Build Mode''' to "Everything".
## Set build path to where you want to output your packaged mod (you can set this later, just set it before build).
## If you already have a swinfo.json file, you can skip the next steps using the import swinfo.json button as described in the previous section.
## Input your mod's ID (this is critically important).
## Setup the rest of your mod's info (these correspond to the swinfo).
# After following one of the previous two processes, press '''Set Up Addressables From Mod Info''', and it should automatically set up the addressables groups for you.

[[Category:Getting started]]</text>
      <sha1>1iq62jhuzi6cv6ul307qj5f9o7d7xc0</sha1>
    </revision>
    <revision>
      <id>420</id>
      <parentid>333</parentid>
      <timestamp>2024-02-20T03:38:29Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>/* Importing Unity KSP tools */</comment>
      <origin>420</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4375" sha1="q71ud4jhlzk3dw3g6nl143dspjz871z" xml:space="preserve">This page will help you install everything you need to use Unity for KSP2 modding.

== Installing Unity ==

# Download Unity Hub from https://unity.com/download.
# Download Unity 2022.3.5f1 by clicking on the '''Install this version with Unity Hub''' link on this page: https://unity.com/releases/editor/whats-new/2022.3.5.
# Download and install Git from https://git-scm.com/downloads.

== Initializing the Unity project ==
# Follow the instructions on this page: https://luxstice.notion.site/Creating-a-Unity-Project-dae1a51ab2a84fc4b5c5e1eeef4b90b3 but use Unity 2022.3.5f1 instead.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configure the Unity project ==

=== Installing the Addressables package ===
Unity doesn’t come with this package natively, so we need to install it first:

# Open the Package Manager by clicking '''Window&gt;Package Manager''' in the toolbar at the top of Unity.
# This will open a new window where you can manage most of the packages in your project.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry.'''
# In the search bar, look for '''Addressables'''. Select it and click '''Install'''. It will show a couple pop-ups, and once it is finished, it will show a green checkmark next to the Addressables package version.

=== Installing ThunderKit ===
ThunderKit is a package for Unity, however it is not hosted in the official Unity package repository, so it needs to be installed directly from its GitHub repository.

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign in the top left corner of the window that opens, after that click on '''Add Package from Git URL''' and paste &lt;code&gt;https://github.com/PassivePicasso/ThunderKit.git&lt;/code&gt; and click '''Add'''.
#
# The ThunderKit Settings window should open, if it doesn’t, just go to '''Tools&gt;ThunderKit&gt;Settings''' in the toolbar at the top of Unity.
# Go to '''Import Configuration''' and in '''Import Project Settings,''' change the dropdown value to '''Everything.'''
# Go to '''ThunderKit Settings''' and in '''Locate and load game files for project,''' click on '''Browse''' and select your main Kerbal Space Program 2 executable ('''KSP2_x64.exe''').
# Click '''Import''' and wait for KSP2 to be imported. If asked, click '''I made a backup, Go Ahead.'''
# If Unity asks you to restart your project, confirm it by clicking on '''Restart Project'''.
# After the process is finished, to check if the game was correctly imported, select or create any game object, and in the inspector click '''Add Component''' and search for '''Core Part Data'''.

=== Installing KSP2 Unity Tools ===

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign in the top left corner of the window that opens, after that click on '''Add Package from Git URL''', paste &lt;code&gt;&lt;nowiki&gt;https://github.com/KSP2Community/KSP2UnityTools.git&lt;/nowiki&gt;&lt;/code&gt; and click '''Add'''.
 If you have previously installed an older version of KSP2 Unity Tools manually from a .unitypackage file, you will need to delete the whole "KSP2UnityTools" folder from your Assets folder and then do the installation.

=== Setting up swinfo.json and addressables ===

# After installing KSP2UnityTools, go to '''Tools&gt;KSP2 Unity Tools.'''
# Follow one of two following steps, depending on which applies for you:
# '''If you have a mod you want to copy addressables into''':
## Select "Copy Assets Only" as the '''Build Mode'''.
## In the build path select the addressables for your mod.
## At the bottom of the window, press '''Import swinfo.json''' and select your mods swinfo.json.
# '''If you want to build a full mod from Unity''':
## Set '''Build Mode''' to "Everything".
## Set build path to where you want to output your packaged mod (you can set this later, just set it before build).
## If you already have a swinfo.json file, you can skip the next steps using the import swinfo.json button as described in the previous section.
## Input your mod's ID (this is critically important).
## Setup the rest of your mod's info (these correspond to the swinfo).
# After following one of the previous two processes, press '''Set Up Addressables From Mod Info''', and it should automatically set up the addressables groups for you.

[[Category:Getting started]]</text>
      <sha1>q71ud4jhlzk3dw3g6nl143dspjz871z</sha1>
    </revision>
    <revision>
      <id>421</id>
      <parentid>420</parentid>
      <timestamp>2024-02-21T07:58:37Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <comment>Unity project creation instructions and page cleanup</comment>
      <origin>421</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4805" sha1="1xfgx27pd90uslm6qxo316ej6aaz5a1" xml:space="preserve">This page will help you install everything you need to use Unity for KSP2 modding.

== Installing Unity ==

# Download Unity Hub from https://unity.com/download.
# Download Unity 2022.3.5f1 by clicking on the '''Install this version with Unity Hub''' link on this page: https://unity.com/releases/editor/whats-new/2022.3.5.
# Download and install Git from https://git-scm.com/downloads.

== Initializing the Unity project ==
# Open '''Unity Hub'''.
# Click on '''New Project''' at the top right of the window.
# At the top of the new interface, set the '''Editor Version''' to &lt;code&gt;2022.3.5f1&lt;/code&gt;. You can keep the project template set to '''3D (Core)'''.
# Set the '''Project name''', it can be whatever you want like for example &lt;code&gt;MyModId.Unity&lt;/code&gt;.
# Set the '''Location''' to the folder you want the Unity project to be saved in.
# Click '''Create project'''.

&lt;blockquote&gt;For a quick presentation of the Unity interface: https://luxstice.notion.site/Learning-Unity-faf0ab10f24c4925bf4b51a997a41666.&lt;/blockquote&gt;

== Configuring the Unity project ==

=== Installing the Addressables package ===
Unity doesn’t come with this package natively, so we need to install it first:

# Open the Package Manager by clicking '''Window&gt;Package Manager''' in the toolbar at the top of Unity.
# This will open a new window where you can manage most of the packages in your project.
# Go where it says '''Packages: In Project''' and change that to '''Unity Registry'''.
# In the search bar, look for '''Addressables'''. Select it and click '''Install'''. It will show a couple pop-ups, and once it is finished, it will show a green checkmark next to the '''Addressables''' package version.

=== Installing ThunderKit ===
''ThunderKit'' is a package for Unity which we use to import the game's components into the Unity editor. However, it is not hosted in the official Unity package repository and needs to be installed directly from its GitHub repository.

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign in the top left corner of the window that opens, after that click on '''Add Package from Git URL''', paste &lt;code&gt;https://github.com/PassivePicasso/ThunderKit.git&lt;/code&gt; and click '''Add'''.
# The ''ThunderKit'' Settings window should open, if it doesn’t, just go to '''Tools&gt;ThunderKit&gt;Settings''' in the toolbar at the top of Unity.
# Go to '''Import Configuration''' and in '''Import Project Settings,''' change the dropdown value to '''Everything.'''
# Go to '''ThunderKit Settings''' and in '''Locate and load game files for project,''' click on '''Browse''' and select your main Kerbal Space Program 2 executable found at &lt;code&gt;&lt;KSP2 root folder&gt;/KSP2_x64.exe&lt;/code&gt;.
# Click '''Import''' and wait for KSP2 to be imported. If asked, click '''I made a backup, Go Ahead'''.
# If Unity asks you to restart your project, confirm it by clicking on '''Restart Project'''.
# After the process is finished, to check if the game was correctly imported, select or create any game object and in the inspector click '''Add Component''' and search for '''Core Part Data'''.

=== Installing KSP2 Unity Tools ===

# Go to '''Window&gt;Package Manager''' and click on the '''+''' sign in the top left corner of the window that opens, after that click on '''Add Package from Git URL''', paste &lt;code&gt;https://github.com/KSP2Community/KSP2UnityTools.git&lt;/code&gt; and click '''Add'''.
 If you have previously installed an older version of KSP2 Unity Tools manually from a .unitypackage file, you will need to delete the whole "KSP2UnityTools" folder from your Assets folder and then do the installation.

=== Setting up swinfo.json and addressables ===

# After installing KSP2UnityTools, go to '''Tools&gt;KSP2 Unity Tools.'''
# Follow one of two following steps, depending on which applies for you:
# '''If you have a mod you want to copy addressables into''':
## Set '''Build Mode''' to "'''Copy Assets Only'''".
## In the build path select the &lt;code&gt;addressables&lt;/code&gt; folder in your mod's directory.
## At the bottom of the window, press '''Import swinfo.json''' and select your mod's &lt;code&gt;swinfo.json&lt;/code&gt;.
# '''If you want to build a full mod from Unity''':
## Set '''Build Mode''' to "'''Everything'''".
## Set build path to where you want to output your packaged mod (you can set this later, just set it before build).
## If you already have a swinfo.json file, you can skip the next steps using the import swinfo.json button as described in the previous section.
## Input your mod's ID (this is critically important).
## Setup the rest of your mod's info (these correspond to the swinfo).
# After following one of the previous two processes, press '''Set Up Addressables From Mod Info''', and it should automatically set up the addressables groups for you.

[[Category:Getting started]]</text>
      <sha1>1xfgx27pd90uslm6qxo316ej6aaz5a1</sha1>
    </revision>
  </page>
  <page>
    <title>Configuring the part in Unity</title>
    <ns>0</ns>
    <id>60</id>
    <revision>
      <id>176</id>
      <timestamp>2023-10-28T11:01:12Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Page creation</comment>
      <origin>176</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3863" sha1="3x195ea6vpfrkhtsawfg0vaaee40q03" xml:space="preserve">This page is only for part mod. If your mod don't include parts, you can skip what follows.

= Configuring the part in Unity =
&lt;blockquote&gt;Prerequisites

* Having installed Unity
* Having initialized the Unity project
&lt;/blockquote&gt;&lt;blockquote&gt;More resources

* Tutorial for creating a part in Unity : Tutorial: My First Part
* Tutorial for configuring a part in Unity : How to create parts for KSP2
&lt;/blockquote&gt;

== Setting up the scene ==

# Open Unity Hub.
# Open the Unity project.
# Click on the three dots in the Hierarchy menu then “Add a new scene”.
# Right-click on the scene &gt; Save Scene.
# Save the scene in the Asset folder of the Unity project.
# In the Asset folder, create a folder for the mod.
# In this folder, create the “Materials” and “Parts” folders. This is just to keep the folder well organized.
# Delete the camera and light and import the meshes and textures into the corresponding folders.

== Associating textures to the meshes ==

# Create a material in Unity for each material in Substance Painter (right-click on the project window &gt; Create &gt; Material)
# Select all materials. In the Inspector window, in Shader, select KSP &gt; Parts &gt; Paintable.
# For each material, assign the textures to the Albedo, Metallic, Normal, Emissive and Paintable channels.
# For Normal channels, click the “Fix Now” button.
# For each mesh, assign the materials to the corresponding locations. Click on “Apply”.

== Adding meshes to the scene ==

# Create an Empty GameObject. Let's name it &lt;code&gt;myMod_myPart&lt;/code&gt;. The name must be unique to any part in KSP2, including other mods.
# Set its position to 0;0;0.
# Create another empty object as a child of this object and call it &lt;code&gt;model&lt;/code&gt;.
# Drop the mesh as a child of &lt;code&gt;model&lt;/code&gt;.
# Use the “Transform” panel to optionally modify the position, rotation and size of the mesh.
# Right click on the mesh &gt; Prefab &gt; Unpack completely.
# Select all colliders.
# In the Inspector window:
#* Delete the “Mesh Renderer” component.
#* Click on “Add Component” &gt; “Mesh Collider”.
#* Check “Convex”.
# Repeat the operation for all meshes.

&lt;blockquote&gt;Note

Materials should not have shaders.&lt;/blockquote&gt;

== Configuring the mesh ==
Follow this instructions: [[Configuring the mesh]].

== Configuring the addressables ==

=== Creating the addressables ===

# Select all prefabs in the Asset folder and check “Addressable” in the Inspector window.
# Select all JSON in the Asset folder and check “Addressable” in the Inspector window.
# Select all icon images in the Asset folder and check “Addressable” in the Inspector window.

=== Creating a group of addressables ===

# Go to Window &gt; Asset Management &gt; Addressables &gt; Groups.
# Click Create &gt; Group &gt; Packed Asset.
# Rename the group and move the mod elements into it.
# Rename each addressable name to remove the path. The final name must be the same as the part name + extension.
# Add the &lt;code&gt;parts_data&lt;/code&gt; label to the JSON. If it does not exist, create it with “Manage labels” &gt; “+”.

== Creating a build profile ==

# Go to Window &gt; Asset Management &gt; Addressables &gt; Groups.
# Click on Profile &gt; Manage Profiles.
# Click on Create &gt; Profile.
# Rename the new profile.
# For a mod with code, enter the values as follows, where XXX = the namespace of the .NET project previously configured.

{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{XXX.XXXPlugin.Path}/addressables/StandaloneWindows64
|}
For a codeless mod, enter the values as follows, where XXX = the mod's name.
{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{SpaceWarpPaths.XXX}/addressables/StandaloneWindows64
|}</text>
      <sha1>3x195ea6vpfrkhtsawfg0vaaee40q03</sha1>
    </revision>
    <revision>
      <id>177</id>
      <parentid>176</parentid>
      <timestamp>2023-10-28T11:02:12Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Typos</comment>
      <origin>177</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3861" sha1="qttxf6u0qeubv7kj8mxgirfke5ihxfg" xml:space="preserve">This page is only for part mod. If your mod don't include parts, you can skip what follows.

= Configuring the part in Unity =
&lt;blockquote&gt;Prerequisites

* Having installed Unity
* Having initialized the Unity project
&lt;/blockquote&gt;&lt;blockquote&gt;More resources

* Tutorial for creating a part in Unity: Tutorial: My First Part
* Tutorial for configuring a part in Unity: How to create parts for KSP2
&lt;/blockquote&gt;

== Setting up the scene ==

# Open Unity Hub.
# Open the Unity project.
# Click on the three dots in the Hierarchy menu then “Add a new scene”.
# Right-click on the scene &gt; Save Scene.
# Save the scene in the Asset folder of the Unity project.
# In the Asset folder, create a folder for the mod.
# In this folder, create the “Materials” and “Parts” folders. This is just to keep the folder well organized.
# Delete the camera and light and import the meshes and textures into the corresponding folders.

== Associating textures to the meshes ==

# Create a material in Unity for each material in Substance Painter (right-click on the project window &gt; Create &gt; Material)
# Select all materials. In the Inspector window, in Shader, select KSP &gt; Parts &gt; Paintable.
# For each material, assign the textures to the Albedo, Metallic, Normal, Emissive and Paintable channels.
# For Normal channels, click the “Fix Now” button.
# For each mesh, assign the materials to the corresponding locations. Click on “Apply”.

== Adding meshes to the scene ==

# Create an Empty GameObject. Let's name it &lt;code&gt;myMod_myPart&lt;/code&gt;. The name must be unique to any part in KSP2, including other mods.
# Set its position to 0;0;0.
# Create another empty object as a child of this object and call it &lt;code&gt;model&lt;/code&gt;.
# Drop the mesh as a child of &lt;code&gt;model&lt;/code&gt;.
# Use the “Transform” panel to optionally modify the position, rotation and size of the mesh.
# Right click on the mesh &gt; Prefab &gt; Unpack completely.
# Select all colliders.
# In the Inspector window:
#* Delete the “Mesh Renderer” component.
#* Click on “Add Component” &gt; “Mesh Collider”.
#* Check “Convex”.
# Repeat the operation for all meshes.

&lt;blockquote&gt;Note

Materials should not have shaders.&lt;/blockquote&gt;

== Configuring the mesh ==
Follow this instructions: [[Configuring the mesh]].

== Configuring the addressables ==

=== Creating the addressables ===

# Select all prefabs in the Asset folder and check “Addressable” in the Inspector window.
# Select all JSON in the Asset folder and check “Addressable” in the Inspector window.
# Select all icon images in the Asset folder and check “Addressable” in the Inspector window.

=== Creating a group of addressables ===

# Go to Window &gt; Asset Management &gt; Addressables &gt; Groups.
# Click Create &gt; Group &gt; Packed Asset.
# Rename the group and move the mod elements into it.
# Rename each addressable name to remove the path. The final name must be the same as the part name + extension.
# Add the &lt;code&gt;parts_data&lt;/code&gt; label to the JSON. If it does not exist, create it with “Manage labels” &gt; “+”.

== Creating a build profile ==

# Go to Window &gt; Asset Management &gt; Addressables &gt; Groups.
# Click on Profile &gt; Manage Profiles.
# Click on Create &gt; Profile.
# Rename the new profile.
# For a mod with code, enter the values as follows, where XXX = the namespace of the .NET project previously configured.

{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{XXX.XXXPlugin.Path}/addressables/StandaloneWindows64
|}
For a codeless mod, enter the values as follows, where XXX = the mod's name.
{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{SpaceWarpPaths.XXX}/addressables/StandaloneWindows64
|}</text>
      <sha1>qttxf6u0qeubv7kj8mxgirfke5ihxfg</sha1>
    </revision>
    <revision>
      <id>184</id>
      <parentid>177</parentid>
      <timestamp>2023-10-28T12:16:59Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added categories</comment>
      <origin>184</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3911" sha1="b7jeacfk4mmkfr1f4t3oy9dpy730iea" xml:space="preserve">This page is only for part mod. If your mod don't include parts, you can skip what follows.

= Configuring the part in Unity =
&lt;blockquote&gt;Prerequisites

* Having installed Unity
* Having initialized the Unity project
&lt;/blockquote&gt;&lt;blockquote&gt;More resources

* Tutorial for creating a part in Unity: Tutorial: My First Part
* Tutorial for configuring a part in Unity: How to create parts for KSP2
&lt;/blockquote&gt;

== Setting up the scene ==

# Open Unity Hub.
# Open the Unity project.
# Click on the three dots in the Hierarchy menu then “Add a new scene”.
# Right-click on the scene &gt; Save Scene.
# Save the scene in the Asset folder of the Unity project.
# In the Asset folder, create a folder for the mod.
# In this folder, create the “Materials” and “Parts” folders. This is just to keep the folder well organized.
# Delete the camera and light and import the meshes and textures into the corresponding folders.

== Associating textures to the meshes ==

# Create a material in Unity for each material in Substance Painter (right-click on the project window &gt; Create &gt; Material)
# Select all materials. In the Inspector window, in Shader, select KSP &gt; Parts &gt; Paintable.
# For each material, assign the textures to the Albedo, Metallic, Normal, Emissive and Paintable channels.
# For Normal channels, click the “Fix Now” button.
# For each mesh, assign the materials to the corresponding locations. Click on “Apply”.

== Adding meshes to the scene ==

# Create an Empty GameObject. Let's name it &lt;code&gt;myMod_myPart&lt;/code&gt;. The name must be unique to any part in KSP2, including other mods.
# Set its position to 0;0;0.
# Create another empty object as a child of this object and call it &lt;code&gt;model&lt;/code&gt;.
# Drop the mesh as a child of &lt;code&gt;model&lt;/code&gt;.
# Use the “Transform” panel to optionally modify the position, rotation and size of the mesh.
# Right click on the mesh &gt; Prefab &gt; Unpack completely.
# Select all colliders.
# In the Inspector window:
#* Delete the “Mesh Renderer” component.
#* Click on “Add Component” &gt; “Mesh Collider”.
#* Check “Convex”.
# Repeat the operation for all meshes.

&lt;blockquote&gt;Note

Materials should not have shaders.&lt;/blockquote&gt;

== Configuring the mesh ==
Follow this instructions: [[Configuring the mesh]].

== Configuring the addressables ==

=== Creating the addressables ===

# Select all prefabs in the Asset folder and check “Addressable” in the Inspector window.
# Select all JSON in the Asset folder and check “Addressable” in the Inspector window.
# Select all icon images in the Asset folder and check “Addressable” in the Inspector window.

=== Creating a group of addressables ===

# Go to Window &gt; Asset Management &gt; Addressables &gt; Groups.
# Click Create &gt; Group &gt; Packed Asset.
# Rename the group and move the mod elements into it.
# Rename each addressable name to remove the path. The final name must be the same as the part name + extension.
# Add the &lt;code&gt;parts_data&lt;/code&gt; label to the JSON. If it does not exist, create it with “Manage labels” &gt; “+”.

== Creating a build profile ==

# Go to Window &gt; Asset Management &gt; Addressables &gt; Groups.
# Click on Profile &gt; Manage Profiles.
# Click on Create &gt; Profile.
# Rename the new profile.
# For a mod with code, enter the values as follows, where XXX = the namespace of the .NET project previously configured.

{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{XXX.XXXPlugin.Path}/addressables/StandaloneWindows64
|}
For a codeless mod, enter the values as follows, where XXX = the mod's name.
{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{SpaceWarpPaths.XXX}/addressables/StandaloneWindows64
|}
[[Category:Parts modding]]
[[Category:Tutorials]]</text>
      <sha1>b7jeacfk4mmkfr1f4t3oy9dpy730iea</sha1>
    </revision>
    <revision>
      <id>194</id>
      <parentid>184</parentid>
      <timestamp>2023-10-28T12:34:44Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Removed "Tutorials" category</comment>
      <origin>194</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3888" sha1="qfpk9e0jiiweah7zt7tg9d320g6ftli" xml:space="preserve">This page is only for part mod. If your mod don't include parts, you can skip what follows.

= Configuring the part in Unity =
&lt;blockquote&gt;Prerequisites

* Having installed Unity
* Having initialized the Unity project
&lt;/blockquote&gt;&lt;blockquote&gt;More resources

* Tutorial for creating a part in Unity: Tutorial: My First Part
* Tutorial for configuring a part in Unity: How to create parts for KSP2
&lt;/blockquote&gt;

== Setting up the scene ==

# Open Unity Hub.
# Open the Unity project.
# Click on the three dots in the Hierarchy menu then “Add a new scene”.
# Right-click on the scene &gt; Save Scene.
# Save the scene in the Asset folder of the Unity project.
# In the Asset folder, create a folder for the mod.
# In this folder, create the “Materials” and “Parts” folders. This is just to keep the folder well organized.
# Delete the camera and light and import the meshes and textures into the corresponding folders.

== Associating textures to the meshes ==

# Create a material in Unity for each material in Substance Painter (right-click on the project window &gt; Create &gt; Material)
# Select all materials. In the Inspector window, in Shader, select KSP &gt; Parts &gt; Paintable.
# For each material, assign the textures to the Albedo, Metallic, Normal, Emissive and Paintable channels.
# For Normal channels, click the “Fix Now” button.
# For each mesh, assign the materials to the corresponding locations. Click on “Apply”.

== Adding meshes to the scene ==

# Create an Empty GameObject. Let's name it &lt;code&gt;myMod_myPart&lt;/code&gt;. The name must be unique to any part in KSP2, including other mods.
# Set its position to 0;0;0.
# Create another empty object as a child of this object and call it &lt;code&gt;model&lt;/code&gt;.
# Drop the mesh as a child of &lt;code&gt;model&lt;/code&gt;.
# Use the “Transform” panel to optionally modify the position, rotation and size of the mesh.
# Right click on the mesh &gt; Prefab &gt; Unpack completely.
# Select all colliders.
# In the Inspector window:
#* Delete the “Mesh Renderer” component.
#* Click on “Add Component” &gt; “Mesh Collider”.
#* Check “Convex”.
# Repeat the operation for all meshes.

&lt;blockquote&gt;Note

Materials should not have shaders.&lt;/blockquote&gt;

== Configuring the mesh ==
Follow this instructions: [[Configuring the mesh]].

== Configuring the addressables ==

=== Creating the addressables ===

# Select all prefabs in the Asset folder and check “Addressable” in the Inspector window.
# Select all JSON in the Asset folder and check “Addressable” in the Inspector window.
# Select all icon images in the Asset folder and check “Addressable” in the Inspector window.

=== Creating a group of addressables ===

# Go to Window &gt; Asset Management &gt; Addressables &gt; Groups.
# Click Create &gt; Group &gt; Packed Asset.
# Rename the group and move the mod elements into it.
# Rename each addressable name to remove the path. The final name must be the same as the part name + extension.
# Add the &lt;code&gt;parts_data&lt;/code&gt; label to the JSON. If it does not exist, create it with “Manage labels” &gt; “+”.

== Creating a build profile ==

# Go to Window &gt; Asset Management &gt; Addressables &gt; Groups.
# Click on Profile &gt; Manage Profiles.
# Click on Create &gt; Profile.
# Rename the new profile.
# For a mod with code, enter the values as follows, where XXX = the namespace of the .NET project previously configured.

{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{XXX.XXXPlugin.Path}/addressables/StandaloneWindows64
|}
For a codeless mod, enter the values as follows, where XXX = the mod's name.
{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{SpaceWarpPaths.XXX}/addressables/StandaloneWindows64
|}
[[Category:Parts modding]]</text>
      <sha1>qfpk9e0jiiweah7zt7tg9d320g6ftli</sha1>
    </revision>
    <revision>
      <id>195</id>
      <parentid>194</parentid>
      <timestamp>2023-10-28T12:35:50Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Changed category</comment>
      <origin>195</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3889" sha1="49gt44bdxunl5ho2x0d9q54chrbf3t7" xml:space="preserve">This page is only for part mod. If your mod don't include parts, you can skip what follows.

= Configuring the part in Unity =
&lt;blockquote&gt;Prerequisites

* Having installed Unity
* Having initialized the Unity project
&lt;/blockquote&gt;&lt;blockquote&gt;More resources

* Tutorial for creating a part in Unity: Tutorial: My First Part
* Tutorial for configuring a part in Unity: How to create parts for KSP2
&lt;/blockquote&gt;

== Setting up the scene ==

# Open Unity Hub.
# Open the Unity project.
# Click on the three dots in the Hierarchy menu then “Add a new scene”.
# Right-click on the scene &gt; Save Scene.
# Save the scene in the Asset folder of the Unity project.
# In the Asset folder, create a folder for the mod.
# In this folder, create the “Materials” and “Parts” folders. This is just to keep the folder well organized.
# Delete the camera and light and import the meshes and textures into the corresponding folders.

== Associating textures to the meshes ==

# Create a material in Unity for each material in Substance Painter (right-click on the project window &gt; Create &gt; Material)
# Select all materials. In the Inspector window, in Shader, select KSP &gt; Parts &gt; Paintable.
# For each material, assign the textures to the Albedo, Metallic, Normal, Emissive and Paintable channels.
# For Normal channels, click the “Fix Now” button.
# For each mesh, assign the materials to the corresponding locations. Click on “Apply”.

== Adding meshes to the scene ==

# Create an Empty GameObject. Let's name it &lt;code&gt;myMod_myPart&lt;/code&gt;. The name must be unique to any part in KSP2, including other mods.
# Set its position to 0;0;0.
# Create another empty object as a child of this object and call it &lt;code&gt;model&lt;/code&gt;.
# Drop the mesh as a child of &lt;code&gt;model&lt;/code&gt;.
# Use the “Transform” panel to optionally modify the position, rotation and size of the mesh.
# Right click on the mesh &gt; Prefab &gt; Unpack completely.
# Select all colliders.
# In the Inspector window:
#* Delete the “Mesh Renderer” component.
#* Click on “Add Component” &gt; “Mesh Collider”.
#* Check “Convex”.
# Repeat the operation for all meshes.

&lt;blockquote&gt;Note

Materials should not have shaders.&lt;/blockquote&gt;

== Configuring the mesh ==
Follow this instructions: [[Configuring the mesh]].

== Configuring the addressables ==

=== Creating the addressables ===

# Select all prefabs in the Asset folder and check “Addressable” in the Inspector window.
# Select all JSON in the Asset folder and check “Addressable” in the Inspector window.
# Select all icon images in the Asset folder and check “Addressable” in the Inspector window.

=== Creating a group of addressables ===

# Go to Window &gt; Asset Management &gt; Addressables &gt; Groups.
# Click Create &gt; Group &gt; Packed Asset.
# Rename the group and move the mod elements into it.
# Rename each addressable name to remove the path. The final name must be the same as the part name + extension.
# Add the &lt;code&gt;parts_data&lt;/code&gt; label to the JSON. If it does not exist, create it with “Manage labels” &gt; “+”.

== Creating a build profile ==

# Go to Window &gt; Asset Management &gt; Addressables &gt; Groups.
# Click on Profile &gt; Manage Profiles.
# Click on Create &gt; Profile.
# Rename the new profile.
# For a mod with code, enter the values as follows, where XXX = the namespace of the .NET project previously configured.

{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{XXX.XXXPlugin.Path}/addressables/StandaloneWindows64
|}
For a codeless mod, enter the values as follows, where XXX = the mod's name.
{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{SpaceWarpPaths.XXX}/addressables/StandaloneWindows64
|}
[[Category:Creating parts]]</text>
      <sha1>49gt44bdxunl5ho2x0d9q54chrbf3t7</sha1>
    </revision>
    <revision>
      <id>220</id>
      <parentid>195</parentid>
      <timestamp>2023-10-30T11:29:46Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>/* Setting up the scene */ Reformatted content</comment>
      <origin>220</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3871" sha1="ikwv80ht5p32ppgvckive3w9ec2qt5y" xml:space="preserve">This page is only for part mod. If your mod don't include parts, you can skip what follows.

= Configuring the part in Unity =
 Prerequisites
 [[Setting up Unity]]

 Useful links
 
 Tutorial for creating a part in Unity: https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314
 Tutorial for configuring a part in Unity: https://www.youtube.com/watch?v=9fQg-oMqcH8

== Setting up the scene ==

# Open Unity Hub.
# Open the Unity project.
# Click on the three dots in the Hierarchy menu then “Add a new scene”.
# Right-click on the scene &gt; Save Scene.
# Save the scene in the Asset folder of the Unity project.
# In the Asset folder, create a folder for the mod.
# In this folder, create the “Materials” and “Parts” folders. This is just to keep the folder well organized.
# Delete the camera and light and import the meshes and textures into the corresponding folders.

== Associating textures to the meshes ==

# Create a material in Unity for each material in Substance Painter (right-click on the project window &gt; Create &gt; Material)
# Select all materials. In the Inspector window, in Shader, select KSP &gt; Parts &gt; Paintable.
# For each material, assign the textures to the Albedo, Metallic, Normal, Emissive and Paintable channels.
# For Normal channels, click the “Fix Now” button.
# For each mesh, assign the materials to the corresponding locations. Click on “Apply”.

== Adding meshes to the scene ==

# Create an Empty GameObject. Let's name it &lt;code&gt;myMod_myPart&lt;/code&gt;. The name must be unique to any part in KSP2, including other mods.
# Set its position to 0;0;0.
# Create another empty object as a child of this object and call it &lt;code&gt;model&lt;/code&gt;.
# Drop the mesh as a child of &lt;code&gt;model&lt;/code&gt;.
# Use the “Transform” panel to optionally modify the position, rotation and size of the mesh.
# Right click on the mesh &gt; Prefab &gt; Unpack completely.
# Select all colliders.
# In the Inspector window:
#* Delete the “Mesh Renderer” component.
#* Click on “Add Component” &gt; “Mesh Collider”.
#* Check “Convex”.
# Repeat the operation for all meshes.

&lt;blockquote&gt;Note

Materials should not have shaders.&lt;/blockquote&gt;

== Configuring the mesh ==
Follow this instructions: [[Configuring the mesh]].

== Configuring the addressables ==

=== Creating the addressables ===

# Select all prefabs in the Asset folder and check “Addressable” in the Inspector window.
# Select all JSON in the Asset folder and check “Addressable” in the Inspector window.
# Select all icon images in the Asset folder and check “Addressable” in the Inspector window.

=== Creating a group of addressables ===

# Go to Window &gt; Asset Management &gt; Addressables &gt; Groups.
# Click Create &gt; Group &gt; Packed Asset.
# Rename the group and move the mod elements into it.
# Rename each addressable name to remove the path. The final name must be the same as the part name + extension.
# Add the &lt;code&gt;parts_data&lt;/code&gt; label to the JSON. If it does not exist, create it with “Manage labels” &gt; “+”.

== Creating a build profile ==

# Go to Window &gt; Asset Management &gt; Addressables &gt; Groups.
# Click on Profile &gt; Manage Profiles.
# Click on Create &gt; Profile.
# Rename the new profile.
# For a mod with code, enter the values as follows, where XXX = the namespace of the .NET project previously configured.

{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{XXX.XXXPlugin.Path}/addressables/StandaloneWindows64
|}
For a codeless mod, enter the values as follows, where XXX = the mod's name.
{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{SpaceWarpPaths.XXX}/addressables/StandaloneWindows64
|}
[[Category:Creating parts]]</text>
      <sha1>ikwv80ht5p32ppgvckive3w9ec2qt5y</sha1>
    </revision>
    <revision>
      <id>225</id>
      <parentid>220</parentid>
      <timestamp>2023-11-01T10:51:17Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Improved formatting + added good practice</comment>
      <origin>225</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4163" sha1="7m5h44aid32o21xti8jyhiixd0mwrl4" xml:space="preserve">This page is only for part mod. If your mod don't include parts, you can skip what follows.

= Configuring the part in Unity =
 '''Prerequisites'''
 [[Setting up Unity]]
 [[Preparing the mesh for Unity]]

 '''Useful links'''
 Tutorial for creating a part in Unity: https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314
 Tutorial for configuring a part in Unity: https://www.youtube.com/watch?v=9fQg-oMqcH8

== Setting up the scene ==

# Open Unity Hub.
# Open the Unity project.
# Click on the three dots in the Hierarchy menu then “Add a new scene”.
# Right-click on the scene &gt; '''Save Scene'''.
# Save the scene in the Asset folder of the Unity project.
# In the Asset folder, create a folder for the mod.
# In this folder, create the “Materials” and “Parts” folders. This is just to keep the folder well organized.
# Delete the camera and light and import the meshes and textures into the corresponding folders.
 '''Good practice for organizing the Assets folder'''
 Assets
 |
 \-Modname
   |
   \-Parts
     |
     \-(separate folders for the type of parts)
       |
       \-Folder for each part
   |
   \-Materials

== Associating textures to the meshes ==

# Create a material in Unity for each material in Substance Painter (right-click on the project window &gt; '''Create &gt; Material''')
# Select all materials. In the Inspector window, in Shader, select '''KSP &gt; Parts &gt; Paintable'''.
# For each material, assign the textures to the Albedo, Metallic, Normal, Emissive and Paintable channels.
# For Normal channels, click the “Fix Now” button.
# For each mesh, assign the materials to the corresponding locations. Click on “Apply”.

== Adding meshes to the scene ==

# Create an Empty GameObject. Let's name it &lt;code&gt;myMod_myPart&lt;/code&gt;. The name must be unique to any part in KSP2, including other mods.
# Set its position to 0;0;0.
# Create another empty object as a child of this object and call it &lt;code&gt;model&lt;/code&gt;.
# Drop the mesh as a child of &lt;code&gt;model&lt;/code&gt;.
# Use the “Transform” panel to optionally modify the position, rotation and size of the mesh.
# Right click on the mesh &gt; Prefab &gt; Unpack completely.
# Select all colliders.
# In the Inspector window:
#* Delete the “Mesh Renderer” component.
#* Click on '''Add Component &gt; Mesh Collider'''.
#* Check “Convex”.
# Repeat the operation for all meshes.

&lt;blockquote&gt;Note: Materials should not have shaders.&lt;/blockquote&gt;

== Configuring the mesh ==
Follow this instructions: [[Configuring the mesh]].

== Configuring the addressables ==

=== Creating the addressables ===

# Select all prefabs in the Asset folder and check “Addressable” in the Inspector window.
# Select all JSON in the Asset folder and check “Addressable” in the Inspector window.
# Select all icon images in the Asset folder and check “Addressable” in the Inspector window.

=== Creating a group of addressables ===

# Go to '''Window &gt; Asset Management &gt; Addressables &gt; Groups'''.
# Click '''Create &gt; Group &gt; Packed Asset'''.
# Rename the group and move the mod elements into it.
# Rename each addressable name to remove the path. The final name must be the same as the part name + extension.
# Add the &lt;code&gt;parts_data&lt;/code&gt; label to the JSON. If it does not exist, create it with “Manage labels” &gt; “+”.

== Creating a build profile ==

# Go to '''Window &gt; Asset Management &gt; Addressables &gt; Groups'''.
# Click on '''Profile &gt; Manage Profiles'''.
# Click on '''Create &gt; Profile'''.
# Rename the new profile.
# For a mod with code, enter the values as follows, where XXX = the namespace of the .NET project previously configured.

{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{XXX.XXXPlugin.Path}/addressables/StandaloneWindows64
|}
For a codeless mod, enter the values as follows, where XXX = the mod's name.
{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{SpaceWarpPaths.XXX}/addressables/StandaloneWindows64
|}
[[Category:Creating parts]]</text>
      <sha1>7m5h44aid32o21xti8jyhiixd0mwrl4</sha1>
    </revision>
    <revision>
      <id>305</id>
      <parentid>225</parentid>
      <timestamp>2024-01-13T03:16:36Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>/* Configuring the mesh */</comment>
      <origin>305</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4179" sha1="0i6amm4v7mrqidgq2vpq9o6kimfwfhl" xml:space="preserve">This page is only for part mod. If your mod don't include parts, you can skip what follows.

= Configuring the part in Unity =
 '''Prerequisites'''
 [[Setting up Unity]]
 [[Preparing the mesh for Unity]]

 '''Useful links'''
 Tutorial for creating a part in Unity: https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314
 Tutorial for configuring a part in Unity: https://www.youtube.com/watch?v=9fQg-oMqcH8

== Setting up the scene ==

# Open Unity Hub.
# Open the Unity project.
# Click on the three dots in the Hierarchy menu then “Add a new scene”.
# Right-click on the scene &gt; '''Save Scene'''.
# Save the scene in the Asset folder of the Unity project.
# In the Asset folder, create a folder for the mod.
# In this folder, create the “Materials” and “Parts” folders. This is just to keep the folder well organized.
# Delete the camera and light and import the meshes and textures into the corresponding folders.
 '''Good practice for organizing the Assets folder'''
 Assets
 |
 \-Modname
   |
   \-Parts
     |
     \-(separate folders for the type of parts)
       |
       \-Folder for each part
   |
   \-Materials

== Associating textures to the meshes ==

# Create a material in Unity for each material in Substance Painter (right-click on the project window &gt; '''Create &gt; Material''')
# Select all materials. In the Inspector window, in Shader, select '''KSP &gt; Parts &gt; Paintable'''.
# For each material, assign the textures to the Albedo, Metallic, Normal, Emissive and Paintable channels.
# For Normal channels, click the “Fix Now” button.
# For each mesh, assign the materials to the corresponding locations. Click on “Apply”.

== Adding meshes to the scene ==

# Create an Empty GameObject. Let's name it &lt;code&gt;myMod_myPart&lt;/code&gt;. The name must be unique to any part in KSP2, including other mods.
# Set its position to 0;0;0.
# Create another empty object as a child of this object and call it &lt;code&gt;model&lt;/code&gt;.
# Drop the mesh as a child of &lt;code&gt;model&lt;/code&gt;.
# Use the “Transform” panel to optionally modify the position, rotation and size of the mesh.
# Right click on the mesh &gt; Prefab &gt; Unpack completely.
# Select all colliders.
# In the Inspector window:
#* Delete the “Mesh Renderer” component.
#* Click on '''Add Component &gt; Mesh Collider'''.
#* Check “Convex”.
# Repeat the operation for all meshes.

&lt;blockquote&gt;Note: Materials should not have shaders.&lt;/blockquote&gt;

== Configuring the part data ==
Follow these instructions: [[Configuring the core part data]].

== Configuring the addressables ==

=== Creating the addressables ===

# Select all prefabs in the Asset folder and check “Addressable” in the Inspector window.
# Select all JSON in the Asset folder and check “Addressable” in the Inspector window.
# Select all icon images in the Asset folder and check “Addressable” in the Inspector window.

=== Creating a group of addressables ===

# Go to '''Window &gt; Asset Management &gt; Addressables &gt; Groups'''.
# Click '''Create &gt; Group &gt; Packed Asset'''.
# Rename the group and move the mod elements into it.
# Rename each addressable name to remove the path. The final name must be the same as the part name + extension.
# Add the &lt;code&gt;parts_data&lt;/code&gt; label to the JSON. If it does not exist, create it with “Manage labels” &gt; “+”.

== Creating a build profile ==

# Go to '''Window &gt; Asset Management &gt; Addressables &gt; Groups'''.
# Click on '''Profile &gt; Manage Profiles'''.
# Click on '''Create &gt; Profile'''.
# Rename the new profile.
# For a mod with code, enter the values as follows, where XXX = the namespace of the .NET project previously configured.

{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{XXX.XXXPlugin.Path}/addressables/StandaloneWindows64
|}
For a codeless mod, enter the values as follows, where XXX = the mod's name.
{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{SpaceWarpPaths.XXX}/addressables/StandaloneWindows64
|}
[[Category:Creating parts]]</text>
      <sha1>0i6amm4v7mrqidgq2vpq9o6kimfwfhl</sha1>
    </revision>
    <revision>
      <id>306</id>
      <parentid>305</parentid>
      <timestamp>2024-01-13T03:17:52Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>/* Configuring the part in Unity */</comment>
      <origin>306</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4261" sha1="ouaaoee4onyu2es2gnvxm9l4nxui7gu" xml:space="preserve">This page is only for part mod. If your mod don't include parts, you can skip what follows.

= Configuring the part in Unity =
 '''Prerequisites'''
 [[Setting up Unity]]
 [[Modeling the mesh in Blender]]
 [[Texturing the mesh in Substance 3D Painter]]
 [[Preparing the mesh for Unity]]

 '''Useful links'''
 Tutorial for creating a part in Unity: https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314
 Tutorial for configuring a part in Unity: https://www.youtube.com/watch?v=9fQg-oMqcH8

== Setting up the scene ==

# Open Unity Hub.
# Open the Unity project.
# Click on the three dots in the Hierarchy menu then “Add a new scene”.
# Right-click on the scene &gt; '''Save Scene'''.
# Save the scene in the Asset folder of the Unity project.
# In the Asset folder, create a folder for the mod.
# In this folder, create the “Materials” and “Parts” folders. This is just to keep the folder well organized.
# Delete the camera and light and import the meshes and textures into the corresponding folders.
 '''Good practice for organizing the Assets folder'''
 Assets
 |
 \-Modname
   |
   \-Parts
     |
     \-(separate folders for the type of parts)
       |
       \-Folder for each part
   |
   \-Materials

== Associating textures to the meshes ==

# Create a material in Unity for each material in Substance Painter (right-click on the project window &gt; '''Create &gt; Material''')
# Select all materials. In the Inspector window, in Shader, select '''KSP &gt; Parts &gt; Paintable'''.
# For each material, assign the textures to the Albedo, Metallic, Normal, Emissive and Paintable channels.
# For Normal channels, click the “Fix Now” button.
# For each mesh, assign the materials to the corresponding locations. Click on “Apply”.

== Adding meshes to the scene ==

# Create an Empty GameObject. Let's name it &lt;code&gt;myMod_myPart&lt;/code&gt;. The name must be unique to any part in KSP2, including other mods.
# Set its position to 0;0;0.
# Create another empty object as a child of this object and call it &lt;code&gt;model&lt;/code&gt;.
# Drop the mesh as a child of &lt;code&gt;model&lt;/code&gt;.
# Use the “Transform” panel to optionally modify the position, rotation and size of the mesh.
# Right click on the mesh &gt; Prefab &gt; Unpack completely.
# Select all colliders.
# In the Inspector window:
#* Delete the “Mesh Renderer” component.
#* Click on '''Add Component &gt; Mesh Collider'''.
#* Check “Convex”.
# Repeat the operation for all meshes.

&lt;blockquote&gt;Note: Materials should not have shaders.&lt;/blockquote&gt;

== Configuring the part data ==
Follow these instructions: [[Configuring the core part data]].

== Configuring the addressables ==

=== Creating the addressables ===

# Select all prefabs in the Asset folder and check “Addressable” in the Inspector window.
# Select all JSON in the Asset folder and check “Addressable” in the Inspector window.
# Select all icon images in the Asset folder and check “Addressable” in the Inspector window.

=== Creating a group of addressables ===

# Go to '''Window &gt; Asset Management &gt; Addressables &gt; Groups'''.
# Click '''Create &gt; Group &gt; Packed Asset'''.
# Rename the group and move the mod elements into it.
# Rename each addressable name to remove the path. The final name must be the same as the part name + extension.
# Add the &lt;code&gt;parts_data&lt;/code&gt; label to the JSON. If it does not exist, create it with “Manage labels” &gt; “+”.

== Creating a build profile ==

# Go to '''Window &gt; Asset Management &gt; Addressables &gt; Groups'''.
# Click on '''Profile &gt; Manage Profiles'''.
# Click on '''Create &gt; Profile'''.
# Rename the new profile.
# For a mod with code, enter the values as follows, where XXX = the namespace of the .NET project previously configured.

{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{XXX.XXXPlugin.Path}/addressables/StandaloneWindows64
|}
For a codeless mod, enter the values as follows, where XXX = the mod's name.
{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{SpaceWarpPaths.XXX}/addressables/StandaloneWindows64
|}
[[Category:Creating parts]]</text>
      <sha1>ouaaoee4onyu2es2gnvxm9l4nxui7gu</sha1>
    </revision>
    <revision>
      <id>307</id>
      <parentid>306</parentid>
      <timestamp>2024-01-13T03:18:14Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>/* Configuring the part in Unity */</comment>
      <origin>307</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4296" sha1="ex1eh08z24x85wicd8ikupxn8intyo6" xml:space="preserve">This page is only for part mod. If your mod don't include parts, you can skip what follows.

= Configuring the part in Unity =
 '''Prerequisites'''
 [[Setting up Unity]]
 [[Modeling the mesh in Blender]]
 [[Texturing the mesh in Substance 3D Painter]]
 [[Preparing the mesh for Unity]]

 '''Useful links (may contain outdated information)'''
 Tutorial for creating a part in Unity: https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314
 Tutorial for configuring a part in Unity: https://www.youtube.com/watch?v=9fQg-oMqcH8

== Setting up the scene ==

# Open Unity Hub.
# Open the Unity project.
# Click on the three dots in the Hierarchy menu then “Add a new scene”.
# Right-click on the scene &gt; '''Save Scene'''.
# Save the scene in the Asset folder of the Unity project.
# In the Asset folder, create a folder for the mod.
# In this folder, create the “Materials” and “Parts” folders. This is just to keep the folder well organized.
# Delete the camera and light and import the meshes and textures into the corresponding folders.
 '''Good practice for organizing the Assets folder'''
 Assets
 |
 \-Modname
   |
   \-Parts
     |
     \-(separate folders for the type of parts)
       |
       \-Folder for each part
   |
   \-Materials

== Associating textures to the meshes ==

# Create a material in Unity for each material in Substance Painter (right-click on the project window &gt; '''Create &gt; Material''')
# Select all materials. In the Inspector window, in Shader, select '''KSP &gt; Parts &gt; Paintable'''.
# For each material, assign the textures to the Albedo, Metallic, Normal, Emissive and Paintable channels.
# For Normal channels, click the “Fix Now” button.
# For each mesh, assign the materials to the corresponding locations. Click on “Apply”.

== Adding meshes to the scene ==

# Create an Empty GameObject. Let's name it &lt;code&gt;myMod_myPart&lt;/code&gt;. The name must be unique to any part in KSP2, including other mods.
# Set its position to 0;0;0.
# Create another empty object as a child of this object and call it &lt;code&gt;model&lt;/code&gt;.
# Drop the mesh as a child of &lt;code&gt;model&lt;/code&gt;.
# Use the “Transform” panel to optionally modify the position, rotation and size of the mesh.
# Right click on the mesh &gt; Prefab &gt; Unpack completely.
# Select all colliders.
# In the Inspector window:
#* Delete the “Mesh Renderer” component.
#* Click on '''Add Component &gt; Mesh Collider'''.
#* Check “Convex”.
# Repeat the operation for all meshes.

&lt;blockquote&gt;Note: Materials should not have shaders.&lt;/blockquote&gt;

== Configuring the part data ==
Follow these instructions: [[Configuring the core part data]].

== Configuring the addressables ==

=== Creating the addressables ===

# Select all prefabs in the Asset folder and check “Addressable” in the Inspector window.
# Select all JSON in the Asset folder and check “Addressable” in the Inspector window.
# Select all icon images in the Asset folder and check “Addressable” in the Inspector window.

=== Creating a group of addressables ===

# Go to '''Window &gt; Asset Management &gt; Addressables &gt; Groups'''.
# Click '''Create &gt; Group &gt; Packed Asset'''.
# Rename the group and move the mod elements into it.
# Rename each addressable name to remove the path. The final name must be the same as the part name + extension.
# Add the &lt;code&gt;parts_data&lt;/code&gt; label to the JSON. If it does not exist, create it with “Manage labels” &gt; “+”.

== Creating a build profile ==

# Go to '''Window &gt; Asset Management &gt; Addressables &gt; Groups'''.
# Click on '''Profile &gt; Manage Profiles'''.
# Click on '''Create &gt; Profile'''.
# Rename the new profile.
# For a mod with code, enter the values as follows, where XXX = the namespace of the .NET project previously configured.

{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{XXX.XXXPlugin.Path}/addressables/StandaloneWindows64
|}
For a codeless mod, enter the values as follows, where XXX = the mod's name.
{| class="wikitable"
!Field name
!Value
|-
|LocalBuildPath
|Library/com.unity.addressables/aa/Windows/StandaloneWindows64
|-
|LocalLoadedPath
|{SpaceWarpPaths.XXX}/addressables/StandaloneWindows64
|}
[[Category:Creating parts]]</text>
      <sha1>ex1eh08z24x85wicd8ikupxn8intyo6</sha1>
    </revision>
    <revision>
      <id>312</id>
      <parentid>307</parentid>
      <timestamp>2024-01-13T14:24:45Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>312</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3043" sha1="r9n8jwurgmnerzgr7wcf117pwx05bq4" xml:space="preserve">The following page will guide you through setting up a new part inside Unity.

= Configuring the part in Unity =
 '''Prerequisites'''
 [[Setting up Unity]]
 [[Modeling the mesh in Blender]]
 [[Texturing the mesh in Substance 3D Painter]]
 [[Preparing the mesh for Unity]]

 '''Useful links (may contain outdated information)'''
 Tutorial for creating a part in Unity: https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314
 Tutorial for configuring a part in Unity: https://www.youtube.com/watch?v=9fQg-oMqcH8

== Setting up the scene ==

# Open Unity Hub.
# Open the Unity project.
# Click on the three dots in the Hierarchy menu then “Add a new scene”.
# Right-click on the scene &gt; '''Save Scene'''.
# Save the scene in the Asset folder of the Unity project.
# In the Asset folder, create a folder for the mod.
# In this folder, create the “Materials” and “Parts” folders. This is just to keep the folder well organized.
# Delete the camera and light and import the meshes and textures into the corresponding folders.
 '''Good practice for organizing the Assets folder'''
 Assets
 |
 \-Modname
   |
   \-Parts
     |
     \-(separate folders for the type of parts)
       |
       \-Folder for each part
   |
   \-Materials

== Associating textures to the meshes ==

# Create a material in Unity for each material in Substance Painter (right-click on the project window &gt; '''Create &gt; Material''')
# Select all materials. In the Inspector window, in Shader, select '''KSP &gt; Parts &gt; Paintable'''.
# For each material, assign the textures to the Albedo, Metallic, Normal, Emissive and Paintable channels.
# For Normal channels, click the “Fix Now” button.
# For each mesh, assign the materials to the corresponding locations. Click on “Apply”.

== Adding meshes to the scene ==

# Create an Empty GameObject. Let's name it &lt;code&gt;myMod_myPart&lt;/code&gt;. The name must be unique to any part in KSP2, including other mods.
# Set its position to 0;0;0.
# Create another empty object as a child of this object and call it &lt;code&gt;model&lt;/code&gt;.
# Drop the mesh as a child of &lt;code&gt;model&lt;/code&gt;.
# Use the “Transform” panel to optionally modify the position, rotation and size of the mesh.
# Right click on the mesh &gt; Prefab &gt; Unpack completely.
# Select all colliders.
# In the Inspector window:
#* Delete the “Mesh Renderer” component.
#* Click on '''Add Component &gt; Mesh Collider'''.
#* Check “Convex”.
# Repeat the operation for all meshes.

&lt;blockquote&gt;Note: Materials should not have shaders.&lt;/blockquote&gt;

== Configuring the part data ==
Follow these instructions: [[Configuring the core part data]].

== Configuring the addressables ==

=== Creating the addressables ===

# If you followed the "Configuring the core part data" instructions linked above, you should have an addressables group set up for your mod with your prefab and JSON files already added.
# Next, select all icon images in the Asset folder and check "Addressable" in the Inspector window.
[[Category:Creating parts]]</text>
      <sha1>r9n8jwurgmnerzgr7wcf117pwx05bq4</sha1>
    </revision>
    <revision>
      <id>325</id>
      <parentid>312</parentid>
      <timestamp>2024-01-15T02:09:31Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>325</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3046" sha1="as5gfd0576xbvmqvn05lii845s6t9ca" xml:space="preserve">The following page will guide you through setting up a new part inside Unity.

= Configuring the part in Unity =
 '''Prerequisites'''
 [[Setting up Unity]]
 [[Modeling the mesh in Blender]]
 [[Texturing the mesh in Substance 3D Painter]]
 [[Preparing the mesh for Unity]]

 '''Useful links (may contain outdated information)'''
 Tutorial for creating a part in Unity: https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314
 Tutorial for configuring a part in Unity: https://www.youtube.com/watch?v=9fQg-oMqcH8

== Setting up the scene ==

# Open Unity Hub.
# Open the Unity project.
# Click on the three dots in the Hierarchy menu then “Add a new scene”.
# Right-click on the scene &gt; '''Save Scene'''.
# Save the scene in the Asset folder of the Unity project.
# In the Asset folder, create a folder for the mod.
# In this folder, create the “Materials” and “Parts” folders. This is just to keep the folder well organized.
# Delete the camera and light and import the meshes and textures into the corresponding folders.
 '''Good practice for organizing the Assets folder'''
 Assets
 |
 \-Modname
   |
   \-Parts
     |
     \-(separate folders for the type of parts)
       |
       \-Folder for each part
   |
   \-Materials

== Associating textures to the meshes ==

# Create a material in Unity for each material in Substance Painter (right-click on the project window &gt; '''Create &gt; Material''')
# Select all materials. In the Inspector window, in Shader, select '''KSP &gt; Parts &gt; Paintable'''.
# For each material, assign the textures to the Albedo, Metallic, Normal, Emissive and Paintable channels.
# For Normal channels, click the “Fix Now” button.
# For each mesh, assign the materials to the corresponding locations. Click on “Apply”.

== Adding meshes to the scene ==

# Create an Empty GameObject. Let's name it &lt;code&gt;myMod_myPart&lt;/code&gt;. The name must be unique to any part in KSP2, including other mods.
# Set its position to 0;0;0.
# Create another empty object as a child of this object and call it &lt;code&gt;model&lt;/code&gt;.
# Drop the mesh as a child of &lt;code&gt;model&lt;/code&gt;.
# Use the “Transform” panel to optionally modify the position, rotation and size of the mesh.
# Right click on the mesh &gt; Prefab &gt; Unpack completely.
# Select all colliders.
# In the Inspector window:
#* Delete the “Mesh Renderer” component.
#* Click on '''Add Component &gt; Mesh Collider'''.
#* Check “Convex”.
# Repeat the operation for all meshes.

&lt;blockquote&gt;Note: Materials should not have shaders.&lt;/blockquote&gt;

== Configuring the part data ==
Follow these instructions: [[Configuring the core part data]].

== Configuring the addressables ==

=== Creating the addressables ===

# If you followed the "Configuring the core part data" instructions linked above, you should have an addressables group set up for your mod with your prefab and JSON files already added.
# Next, select all icon images in the Asset folder and check "Addressable" in the Inspector window.
[[Category:Parts and modules]]</text>
      <sha1>as5gfd0576xbvmqvn05lii845s6t9ca</sha1>
    </revision>
  </page>
  <page>
    <title>Configuring the core part data</title>
    <ns>0</ns>
    <id>61</id>
    <revision>
      <id>178</id>
      <timestamp>2023-10-28T11:04:05Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Page creation</comment>
      <origin>178</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3637" sha1="cyxh5ebxrp582rabyaqegwz5grlmqfl" xml:space="preserve">= Configuring the mesh =
This part will have to be repeated for each mesh of your mod.&lt;blockquote&gt;Important

The prefab must be updated after adding a component.

In the Inspector panel: Prefab &gt; Overrides &gt; Apply all.

You also have to re-generate the JSON.&lt;/blockquote&gt;

== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Code Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}
sfdgfdgf&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* Decoupler configuration (TODO)
#* Electric Charge Generator configuration (TODO)
#* Crewed part configuration (TODO)
#* Command part configuration (TODO)
#* Reaction Wheel part configuration (TODO)
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”.
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.</text>
      <sha1>cyxh5ebxrp582rabyaqegwz5grlmqfl</sha1>
    </revision>
    <revision>
      <id>179</id>
      <parentid>178</parentid>
      <timestamp>2023-10-28T11:04:30Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Removed unnecessary text</comment>
      <origin>179</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3628" sha1="7spf5obfnbn79xdu2y0de4hxnte5l9y" xml:space="preserve">= Configuring the mesh =
This part will have to be repeated for each mesh of your mod.&lt;blockquote&gt;Important

The prefab must be updated after adding a component.

In the Inspector panel: Prefab &gt; Overrides &gt; Apply all.

You also have to re-generate the JSON.&lt;/blockquote&gt;

== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Code Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* Decoupler configuration (TODO)
#* Electric Charge Generator configuration (TODO)
#* Crewed part configuration (TODO)
#* Command part configuration (TODO)
#* Reaction Wheel part configuration (TODO)
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”.
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.</text>
      <sha1>7spf5obfnbn79xdu2y0de4hxnte5l9y</sha1>
    </revision>
    <revision>
      <id>185</id>
      <parentid>179</parentid>
      <timestamp>2023-10-28T12:18:51Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added categories</comment>
      <origin>185</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3687" sha1="q7nkgf1vp6tb1sg9gi2h6gj5lcznk9m" xml:space="preserve">= Configuring the mesh in Unity =
This part will have to be repeated for each mesh of your mod.&lt;blockquote&gt;Important

The prefab must be updated after adding a component.

In the Inspector panel: Prefab &gt; Overrides &gt; Apply all.

You also have to re-generate the JSON.&lt;/blockquote&gt;

== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Code Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* Decoupler configuration (TODO)
#* Electric Charge Generator configuration (TODO)
#* Crewed part configuration (TODO)
#* Command part configuration (TODO)
#* Reaction Wheel part configuration (TODO)
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”.
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
[[Category:Parts modding]]
[[Category:Tutorials]]</text>
      <sha1>q7nkgf1vp6tb1sg9gi2h6gj5lcznk9m</sha1>
    </revision>
    <revision>
      <id>186</id>
      <parentid>185</parentid>
      <timestamp>2023-10-28T12:28:53Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Changed category</comment>
      <origin>186</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3660" sha1="6nsvwhdqx0twocs2sfxhs0rte5k8lqm" xml:space="preserve">= Configuring the mesh in Unity =
This part will have to be repeated for each mesh of your mod.&lt;blockquote&gt;Important

The prefab must be updated after adding a component.

In the Inspector panel: Prefab &gt; Overrides &gt; Apply all.

You also have to re-generate the JSON.&lt;/blockquote&gt;

== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Code Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* Decoupler configuration (TODO)
#* Electric Charge Generator configuration (TODO)
#* Crewed part configuration (TODO)
#* Command part configuration (TODO)
#* Reaction Wheel part configuration (TODO)
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”.
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
[[Category:Tutorials]]</text>
      <sha1>6nsvwhdqx0twocs2sfxhs0rte5k8lqm</sha1>
    </revision>
    <revision>
      <id>187</id>
      <parentid>186</parentid>
      <timestamp>2023-10-28T12:29:24Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Changed category</comment>
      <origin>187</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3688" sha1="6vanp51sx4sv6jx5z8l5evkpp3fls8z" xml:space="preserve">= Configuring the mesh in Unity =
This part will have to be repeated for each mesh of your mod.&lt;blockquote&gt;Important

The prefab must be updated after adding a component.

In the Inspector panel: Prefab &gt; Overrides &gt; Apply all.

You also have to re-generate the JSON.&lt;/blockquote&gt;

== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Code Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* Decoupler configuration (TODO)
#* Electric Charge Generator configuration (TODO)
#* Crewed part configuration (TODO)
#* Command part configuration (TODO)
#* Reaction Wheel part configuration (TODO)
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”.
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
[[Category:Tutorials]]
[[Category:Creating parts]]</text>
      <sha1>6vanp51sx4sv6jx5z8l5evkpp3fls8z</sha1>
    </revision>
    <revision>
      <id>188</id>
      <parentid>187</parentid>
      <timestamp>2023-10-28T12:30:18Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <origin>188</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3728" sha1="83q01xvvm1c03ezlu18qxc3suub6usq" xml:space="preserve">= Configuring the mesh in Unity =
This part will have to be repeated for each mesh of your mod.&lt;blockquote&gt;Important

The prefab must be updated after adding a component.

In the Inspector panel: Prefab &gt; Overrides &gt; Apply all.

You also have to re-generate the JSON.&lt;/blockquote&gt;

== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Code Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* Decoupler configuration (TODO)
#* Electric Charge Generator configuration (TODO)
#* Crewed part configuration (TODO)
#* Command part configuration (TODO)
#* Reaction Wheel part configuration (TODO)
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”.
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
[[Category:Tutorials]]
[[Category:Creating parts|&lt;nowiki&gt;[[Category:Tutorials]]&lt;/nowiki&gt;]]</text>
      <sha1>83q01xvvm1c03ezlu18qxc3suub6usq</sha1>
    </revision>
    <revision>
      <id>193</id>
      <parentid>188</parentid>
      <timestamp>2023-10-28T12:34:19Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Changed category</comment>
      <origin>193</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3733" sha1="291h20q0vukzbf6siswsa5hf5wtpz1a" xml:space="preserve">= Configuring the mesh in Unity =
This part will have to be repeated for each mesh of your mod.&lt;blockquote&gt;Important

The prefab must be updated after adding a component.

In the Inspector panel: Prefab &gt; Overrides &gt; Apply all.

You also have to re-generate the JSON.&lt;/blockquote&gt;

== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Code Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* Decoupler configuration (TODO)
#* Electric Charge Generator configuration (TODO)
#* Crewed part configuration (TODO)
#* Command part configuration (TODO)
#* Reaction Wheel part configuration (TODO)
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”.
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
[[Category:Creating parts|&lt;nowiki&gt;[[Category:Tutorials]]&lt;/nowiki&gt;]]
[[Category:Creating parts]]</text>
      <sha1>291h20q0vukzbf6siswsa5hf5wtpz1a</sha1>
    </revision>
    <revision>
      <id>226</id>
      <parentid>193</parentid>
      <timestamp>2023-11-01T10:57:53Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Improved formatting</comment>
      <origin>226</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3723" sha1="bzepymwofl8rcnf4n2datd7a8pmqbu2" xml:space="preserve">= Configuring the mesh in Unity =

This part will have to be repeated for each mesh of your mod.
 '''Important'''
 The prefab must be updated after adding a component.
 In the Inspector panel: '''Prefab &gt; Overrides &gt; Apply all'''.
 You also have to re-generate the JSON.

== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Code Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* Decoupler configuration (TODO)
#* Electric Charge Generator configuration (TODO)
#* Crewed part configuration (TODO)
#* Command part configuration (TODO)
#* Reaction Wheel part configuration (TODO)
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”.
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
[[Category:Creating parts|&lt;nowiki&gt;[[Category:Tutorials]]&lt;/nowiki&gt;]]
[[Category:Creating parts]]</text>
      <sha1>bzepymwofl8rcnf4n2datd7a8pmqbu2</sha1>
    </revision>
    <revision>
      <id>228</id>
      <parentid>226</parentid>
      <timestamp>2023-11-01T11:04:32Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Added link to decoupler configuration</comment>
      <origin>228</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3744" sha1="l1b3o2odchoi2ki3kc5gyrjcpvtll12" xml:space="preserve">= Configuring the mesh in Unity =

This part will have to be repeated for each mesh of your mod.
 '''Important'''
 The prefab must be updated after adding a component.
 In the Inspector panel: '''Prefab &gt; Overrides &gt; Apply all'''.
 You also have to re-generate the JSON.

== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Code Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* [[Configuring a decoupler|Decoupler configuration]]
#* Electric Charge Generator configuration (TODO)
#* Crewed part configuration (TODO)
#* Command part configuration (TODO)
#* Reaction Wheel part configuration (TODO)
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”.
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
[[Category:Creating parts|&lt;nowiki&gt;[[Category:Tutorials]]&lt;/nowiki&gt;]]
[[Category:Creating parts]]</text>
      <sha1>l1b3o2odchoi2ki3kc5gyrjcpvtll12</sha1>
    </revision>
    <revision>
      <id>236</id>
      <parentid>228</parentid>
      <timestamp>2023-11-02T22:06:18Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added links to new pages</comment>
      <origin>236</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3837" sha1="5y5lxit3jtokxq8aqk6dkoka3h74vd2" xml:space="preserve">= Configuring the mesh in Unity =

This part will have to be repeated for each mesh of your mod.
 '''Important'''
 The prefab must be updated after adding a component.
 In the Inspector panel: '''Prefab &gt; Overrides &gt; Apply all'''.
 You also have to re-generate the JSON.

== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Code Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* [[Configuring a decoupler|Decoupler configuration]]
#* [[Configuring an Electric Charge Generator|Electric Charge Generator configuration]]
#* Crewed part configuration (TODO)
#* [[Configuring a command part|Command part configuration]]
#* [[Configuring a Reaction Wheel part|Reaction Wheel part configuration]]
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”.
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
[[Category:Creating parts|&lt;nowiki&gt;[[Category:Tutorials]]&lt;/nowiki&gt;]]
[[Category:Creating parts]]</text>
      <sha1>5y5lxit3jtokxq8aqk6dkoka3h74vd2</sha1>
    </revision>
    <revision>
      <id>250</id>
      <parentid>236</parentid>
      <timestamp>2023-11-20T23:39:06Z</timestamp>
      <contributor>
        <username>Coldrifting</username>
        <id>16</id>
      </contributor>
      <comment>Added link to docking port configuration</comment>
      <origin>250</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3898" sha1="k62pc5rrk7xcoxa128b2ijgj5htx49r" xml:space="preserve">= Configuring the mesh in Unity =

This part will have to be repeated for each mesh of your mod.
 '''Important'''
 The prefab must be updated after adding a component.
 In the Inspector panel: '''Prefab &gt; Overrides &gt; Apply all'''.
 You also have to re-generate the JSON.

== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Code Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* [[Configuring a decoupler|Decoupler configuration]]
#* [[Configuring an Electric Charge Generator|Electric Charge Generator configuration]]
#* Crewed part configuration (TODO)
#* [[Configuring a command part|Command part configuration]]
#* [[Configuring a Reaction Wheel part|Reaction Wheel part configuration]]
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
#* [[Configuring a docking port|Docking Port configuration]]
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”.
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
[[Category:Creating parts|&lt;nowiki&gt;[[Category:Tutorials]]&lt;/nowiki&gt;]]
[[Category:Creating parts]]</text>
      <sha1>k62pc5rrk7xcoxa128b2ijgj5htx49r</sha1>
    </revision>
    <revision>
      <id>302</id>
      <parentid>250</parentid>
      <timestamp>2024-01-13T03:15:13Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>302</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3908" sha1="cldo21vqftsguhpncbvy4q6o9nfj4m8" xml:space="preserve">= Configuring the core part data in Unity =

This part will have to be repeated for each mesh of your mod.
 '''Important'''
 The prefab must be updated after adding a component.
 In the Inspector panel: '''Prefab &gt; Overrides &gt; Apply all'''.
 You also have to re-generate the JSON.

== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Code Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* [[Configuring a decoupler|Decoupler configuration]]
#* [[Configuring an Electric Charge Generator|Electric Charge Generator configuration]]
#* Crewed part configuration (TODO)
#* [[Configuring a command part|Command part configuration]]
#* [[Configuring a Reaction Wheel part|Reaction Wheel part configuration]]
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
#* [[Configuring a docking port|Docking Port configuration]]
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”.
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
[[Category:Creating parts|&lt;nowiki&gt;[[Category:Tutorials]]&lt;/nowiki&gt;]]
[[Category:Creating parts]]</text>
      <sha1>cldo21vqftsguhpncbvy4q6o9nfj4m8</sha1>
    </revision>
    <revision>
      <id>303</id>
      <parentid>302</parentid>
      <timestamp>2024-01-13T03:15:54Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <minor/>
      <comment>Munix moved page [[Configuring the mesh]] to [[Configuring the core part data]]: misleading title</comment>
      <origin>302</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3908" sha1="cldo21vqftsguhpncbvy4q6o9nfj4m8" xml:space="preserve">= Configuring the core part data in Unity =

This part will have to be repeated for each mesh of your mod.
 '''Important'''
 The prefab must be updated after adding a component.
 In the Inspector panel: '''Prefab &gt; Overrides &gt; Apply all'''.
 You also have to re-generate the JSON.

== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Code Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* [[Configuring a decoupler|Decoupler configuration]]
#* [[Configuring an Electric Charge Generator|Electric Charge Generator configuration]]
#* Crewed part configuration (TODO)
#* [[Configuring a command part|Command part configuration]]
#* [[Configuring a Reaction Wheel part|Reaction Wheel part configuration]]
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
#* [[Configuring a docking port|Docking Port configuration]]
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”.
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
[[Category:Creating parts|&lt;nowiki&gt;[[Category:Tutorials]]&lt;/nowiki&gt;]]
[[Category:Creating parts]]</text>
      <sha1>cldo21vqftsguhpncbvy4q6o9nfj4m8</sha1>
    </revision>
    <revision>
      <id>310</id>
      <parentid>303</parentid>
      <timestamp>2024-01-13T14:19:00Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>/* Additional configuration */</comment>
      <origin>310</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4111" sha1="roqjtprzmsyknfnm4xmwbx9ggamsmmf" xml:space="preserve">= Configuring the core part data in Unity =

This part will have to be repeated for each mesh of your mod.
 '''Important'''
 The prefab must be updated after adding a component.
 In the Inspector panel: '''Prefab &gt; Overrides &gt; Apply all'''.
 You also have to re-generate the JSON.

== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Code Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* [[Configuring a decoupler|Decoupler configuration]]
#* [[Configuring an Electric Charge Generator|Electric Charge Generator configuration]]
#* Crewed part configuration (TODO)
#* [[Configuring a command part|Command part configuration]]
#* [[Configuring a Reaction Wheel part|Reaction Wheel part configuration]]
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
#* [[Configuring a docking port|Docking Port configuration]]
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”. Note
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
'''Note: It is important to remember that whenever you make any changes to the prefab or its components, you will need to re-apply the overrides (step 3) and save the updated JSON file (step 4).'''
[[Category:Creating parts|&lt;nowiki&gt;[[Category:Tutorials]]&lt;/nowiki&gt;]]
[[Category:Creating parts]]</text>
      <sha1>roqjtprzmsyknfnm4xmwbx9ggamsmmf</sha1>
    </revision>
    <revision>
      <id>311</id>
      <parentid>310</parentid>
      <timestamp>2024-01-13T14:20:47Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>/* Configuring the core part data in Unity */</comment>
      <origin>311</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3939" sha1="9k8yi44fljwxckc5nhm1shdg9urtpen" xml:space="preserve">= Configuring the core part data in Unity =

This process will have to be repeated for each part of your mod.
== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Core Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* [[Configuring a decoupler|Decoupler configuration]]
#* [[Configuring an Electric Charge Generator|Electric Charge Generator configuration]]
#* Crewed part configuration (TODO)
#* [[Configuring a command part|Command part configuration]]
#* [[Configuring a Reaction Wheel part|Reaction Wheel part configuration]]
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
#* [[Configuring a docking port|Docking Port configuration]]
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”. Note
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
'''Note: It is important to remember that whenever you make any changes to the prefab or its components, you will need to re-apply the overrides (step 3) and save the updated JSON file (step 4).'''
[[Category:Creating parts|&lt;nowiki&gt;[[Category:Tutorials]]&lt;/nowiki&gt;]]
[[Category:Creating parts]]</text>
      <sha1>9k8yi44fljwxckc5nhm1shdg9urtpen</sha1>
    </revision>
    <revision>
      <id>324</id>
      <parentid>311</parentid>
      <timestamp>2024-01-15T02:09:18Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>324</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3874" sha1="t00b6zg14mccjui9dhcl6nblhxqshxq" xml:space="preserve">= Configuring the core part data in Unity =

This process will have to be repeated for each part of your mod.
== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Core Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* [[Configuring a decoupler|Decoupler configuration]]
#* [[Configuring an Electric Charge Generator|Electric Charge Generator configuration]]
#* Crewed part configuration (TODO)
#* [[Configuring a command part|Command part configuration]]
#* [[Configuring a Reaction Wheel part|Reaction Wheel part configuration]]
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
#* [[Configuring a docking port|Docking Port configuration]]
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”. Note
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
'''Note: It is important to remember that whenever you make any changes to the prefab or its components, you will need to re-apply the overrides (step 3) and save the updated JSON file (step 4).'''
[[Category:Parts and modules]]</text>
      <sha1>t00b6zg14mccjui9dhcl6nblhxqshxq</sha1>
    </revision>
    <revision>
      <id>334</id>
      <parentid>324</parentid>
      <timestamp>2024-02-01T18:54:00Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>/* Additional configuration */</comment>
      <origin>334</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3874" sha1="iajzfe3bbvyzznebd8ehk2vbrx1qlau" xml:space="preserve">= Configuring the core part data in Unity =

This process will have to be repeated for each part of your mod.
== General configuration ==

# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; &gt; “Add Component” &gt; “Core Part Data”.
# If this option is not available, right-click on the KSP2 package &gt; Reimport.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* [[Configuring a decoupler|Decoupler configuration]]
#* [[Configuring an Electric Charge Generator|Electric Charge Generator configuration]]
#* Crewed part configuration (TODO)
#* [[Configuring a command part|Command part configuration]]
#* [[Configuring a Reaction Wheel part|Reaction Wheel part configuration]]
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
#* [[Configuring a docking port|Docking Port configuration]]
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”. Note
'''Note: It is important to remember that whenever you make any changes to the prefab or its components, you will need to re-apply the overrides (step 4) and save the updated JSON file (step 5).'''
[[Category:Parts and modules]]</text>
      <sha1>iajzfe3bbvyzznebd8ehk2vbrx1qlau</sha1>
    </revision>
    <revision>
      <id>438</id>
      <parentid>334</parentid>
      <timestamp>2024-02-24T11:46:14Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <origin>438</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3835" sha1="i00jgku991uurzlpi1oh1rl1zqdbjaf" xml:space="preserve">This process will have to be repeated for each part of your mod.

== General configuration ==
# Add Code Part Data: click on the root object &lt;code&gt;myMod_myPart&lt;/code&gt; '''&gt; Add Component &gt; Core Part Data'''.
# If this option is not available, right-click on the KSP2 package '''&gt;''' '''Reimport'''.
# Fill in the form.

=== Meta Data ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Part Name
|It has to be the same thing as the root game object: &lt;code&gt;myMod_myPart&lt;/code&gt;
|-
|Author
|Your modder name
|}

=== Descriptors ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Category
|See List of categories/families
|-
|Family
|See List of categories/families
|-
|Size Category
|Choose a size
|}

=== (no name) ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Tags
|Keywords allowing you to find the part in the VAB search (eg: "Apollo")
|}

=== Properties ===
{| class="wikitable"
!Field name
!Value/comment
|-
|Fuel Cross Feed
|Check it to allow the propellants to pass through the part
|-
|Mass
|In metric tons
|-
|Attach Rules
|Check the desired attachment types.
|}&lt;blockquote&gt;Note

'''Stack''': allows the part to be stacked to another part

'''Srf Attach''': allows the part to be attached to a surface

'''Allow Stack''': allows another part to be stacked to this part

'''Allow Srf Attach''': allows another part to be attached to the surface of this part

The other options do not seem to have any influence on the game.&lt;/blockquote&gt;

=== Attach Nodes ===
If “Stack” was checked, you must add a &lt;code&gt;top&lt;/code&gt; node and a &lt;code&gt;bottom&lt;/code&gt; node. If “Srf Attach” was checked, you must add a &lt;code&gt;srfAttach&lt;/code&gt; node.
{| class="wikitable"
!Field name
!Value/comment
|-
|Node ID
|“top”, “bottom”, “srfAttach”, etc. (case sensitive!)
|-
|Node Type
|Select the appropriate value.
|-
|Attach Method
|Fixed_Joint for Stack. Hinge_Joint for Surface Attach.
|-
|Is Multi Joint
|Checked
|-
|Multi Joint Max Joint
|3
|-
|Position
|Enter the node's coordinates. You can pick theme up in Blender. For easier set up, check “Gizmo” in Unity and display the meshes as wireframes.
|-
|Orientation
|Enter the coordinates of the vector in normalized base (length = 1).
|-
|Size
|1
|-
|Visual Size
|1
|-
|Is Resource Crossfeed
|True
|-
|Is Rigid
|True
|}

== Additional configuration ==

# Add Module Drag: click on “Add Component” &gt; “Module_Drag”.
# Depending on what kind of part you are making, you may also want to check one or more of the following pages.
#* Engine configuration (TODO)
#* RCS Port configuration (TODO)
#* Resource Holder configuration (TODO)
#* [[Configuring a decoupler|Decoupler configuration]]
#* [[Configuring an Electric Charge Generator|Electric Charge Generator configuration]]
#* Crewed part configuration (TODO)
#* [[Configuring a command part|Command part configuration]]
#* [[Configuring a Reaction Wheel part|Reaction Wheel part configuration]]
#* Antenna part configuration (TODO)
#* Light caster part configuration (TODO)
#* Solar panel part configuration (TODO)
#* Heatshield configuration (TODO)
#* [[Configuring a docking port|Docking Port configuration]]
# Generate prefab: move the root object to the Asset folder in the project window. This generates a prefab.
# Apply Options: select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and choose “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# Save JSON: at the bottom of the “Core Part Data” panel, click on “Save Part JSON”. Note
'''Note: It is important to remember that whenever you make any changes to the prefab or its components, you will need to re-apply the overrides (step 4) and save the updated JSON file (step 5).'''
[[Category:Parts and modules]]</text>
      <sha1>i00jgku991uurzlpi1oh1rl1zqdbjaf</sha1>
    </revision>
  </page>
  <page>
    <title>Configuring Substance Painter</title>
    <ns>0</ns>
    <id>62</id>
    <revision>
      <id>181</id>
      <timestamp>2023-10-28T12:13:59Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Created page</comment>
      <origin>181</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1078" sha1="c9tfm19ql1puprxh5s51b6hdtpbfejr" xml:space="preserve"># Download all files at this location : https://github.com/KSP2Community/CommunityPartsPack/tree/main/Textures/Lux's%20stock-alike%20textures
# Make sure the &lt;code&gt;Kerbal_Space_Program_2_Parts_Paintable.spt&lt;/code&gt; file is in your “Documents&gt;Adobe&gt;Substance Painter&gt;Assets&gt;templates” folder. If the templates folder doesn’t exist yet, then create one under Assets and drop that file in it.
# Use the File &gt; Import resources… menu to bring up the Import Resources dialog and click on the Add Resource button to bring in the &lt;code&gt;KSP2_Part.spsm&lt;/code&gt; file. Repeat this step for the &lt;code&gt;Kerbal Space Program 2 - Standard Damaged.spexp&lt;/code&gt; file. Both of these should go into your library as you’re going to need them with every part you make.
## Use the Add Resources button to find the resource you want to import
## b. Select the file and click the Open button
## c. Repeat steps (a) and (b) above for as many things as you would like to import
## Select the destination to Import your resources to (hint: library ‘your_assests’ for these!)
## e. Click Import.</text>
      <sha1>c9tfm19ql1puprxh5s51b6hdtpbfejr</sha1>
    </revision>
    <revision>
      <id>182</id>
      <parentid>181</parentid>
      <timestamp>2023-10-28T12:14:48Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added category</comment>
      <origin>182</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1107" sha1="5prk1766s2bf81y9ehg74xi1wi96pvm" xml:space="preserve"># Download all files at this location : https://github.com/KSP2Community/CommunityPartsPack/tree/main/Textures/Lux's%20stock-alike%20textures
# Make sure the &lt;code&gt;Kerbal_Space_Program_2_Parts_Paintable.spt&lt;/code&gt; file is in your “Documents&gt;Adobe&gt;Substance Painter&gt;Assets&gt;templates” folder. If the templates folder doesn’t exist yet, then create one under Assets and drop that file in it.
# Use the File &gt; Import resources… menu to bring up the Import Resources dialog and click on the Add Resource button to bring in the &lt;code&gt;KSP2_Part.spsm&lt;/code&gt; file. Repeat this step for the &lt;code&gt;Kerbal Space Program 2 - Standard Damaged.spexp&lt;/code&gt; file. Both of these should go into your library as you’re going to need them with every part you make.
## Use the Add Resources button to find the resource you want to import
## b. Select the file and click the Open button
## c. Repeat steps (a) and (b) above for as many things as you would like to import
## Select the destination to Import your resources to (hint: library ‘your_assests’ for these!)
## e. Click Import.
[[Category:Getting started]]</text>
      <sha1>5prk1766s2bf81y9ehg74xi1wi96pvm</sha1>
    </revision>
    <revision>
      <id>196</id>
      <parentid>182</parentid>
      <timestamp>2023-10-28T13:26:18Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Changed url</comment>
      <origin>196</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1118" sha1="r5t15jbv4o6y7qrk7t5811q1iayvgoe" xml:space="preserve"># Download all files at this location : https://github.com/KSP2Community/CommunityPartsPack/tree/main/Textures/Community%20Substance%20Painter%20presets
# Make sure the &lt;code&gt;Kerbal_Space_Program_2_Parts_Paintable.spt&lt;/code&gt; file is in your “Documents&gt;Adobe&gt;Substance Painter&gt;Assets&gt;templates” folder. If the templates folder doesn’t exist yet, then create one under Assets and drop that file in it.
# Use the File &gt; Import resources… menu to bring up the Import Resources dialog and click on the Add Resource button to bring in the &lt;code&gt;KSP2_Part.spsm&lt;/code&gt; file. Repeat this step for the &lt;code&gt;Kerbal Space Program 2 - Standard Damaged.spexp&lt;/code&gt; file. Both of these should go into your library as you’re going to need them with every part you make.
## Use the Add Resources button to find the resource you want to import
## b. Select the file and click the Open button
## c. Repeat steps (a) and (b) above for as many things as you would like to import
## Select the destination to Import your resources to (hint: library ‘your_assests’ for these!)
## e. Click Import.
[[Category:Getting started]]</text>
      <sha1>r5t15jbv4o6y7qrk7t5811q1iayvgoe</sha1>
    </revision>
    <revision>
      <id>208</id>
      <parentid>196</parentid>
      <timestamp>2023-10-30T10:52:58Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added partial description of SP preset files</comment>
      <origin>208</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1686" sha1="nrpzn8536sl0ukaqw9hs0tyisl9k1ey" xml:space="preserve"># Download all files at this location : https://github.com/KSP2Community/CommunityPartsPack/tree/main/Textures/Community%20Substance%20Painter%20presets
# Make sure the &lt;code&gt;Kerbal_Space_Program_2_Parts_Paintable.spt&lt;/code&gt; file is in your “Documents&gt;Adobe&gt;Substance Painter&gt;Assets&gt;templates” folder. If the templates folder doesn’t exist yet, then create one under Assets and drop that file in it.
# Use the File &gt; Import resources… menu to bring up the Import Resources dialog and click on the Add Resource button to bring in the &lt;code&gt;KSP2_Part.spsm&lt;/code&gt; file. Repeat this step for the &lt;code&gt;Kerbal Space Program 2 - Standard Damaged.spexp&lt;/code&gt; file. Both of these should go into your library as you’re going to need them with every part you make.
## Use the Add Resources button to find the resource you want to import
## b. Select the file and click the Open button
## c. Repeat steps (a) and (b) above for as many things as you would like to import
## Select the destination to Import your resources to (hint: library ‘your_assests’ for these!)
## e. Click Import.
 What are those files for?
 
 KSP2_DarkSteel.sppr: TODO
 
 KSP2_Part.spsm: TODO
 
 KSP2_Steel.sppr: TODO
 
 KSP2_Tank.sppr: TODO
 
 KSP_Gray_Steel.sppr: TODO
 
 Kerbal_Space_Program_2_-_Standard_Damaged.spexp: the project export model, which will generate all the necessary texture layers (albedo, normal, paint map, emissive and ambiant occlusion).
 
 Kerbal_Space_Program_2_Parts_Paintable.spt: that one you need so that in SP you can create a new project using the template. This sets things up so that when you bake and export textures they'll be all set for KSP.
[[Category:Getting started]]</text>
      <sha1>nrpzn8536sl0ukaqw9hs0tyisl9k1ey</sha1>
    </revision>
    <revision>
      <id>424</id>
      <parentid>208</parentid>
      <timestamp>2024-02-23T23:30:39Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <origin>424</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1678" sha1="oc1gc7ohkwmy5h353xxe8shi5cko5j9" xml:space="preserve"># Download all files at this location : https://github.com/KSP2Community/CommunityPartsPack/tree/main/Textures/Community%20Substance%20Painter%20presets
# Make sure the &lt;code&gt;Kerbal_Space_Program_2_Parts_Paintable.spt&lt;/code&gt; file is in your “Documents&gt;Adobe&gt;Substance Painter&gt;Assets&gt;templates” folder. If the templates folder doesn’t exist yet, then create one under Assets and drop that file in it.
# Use the File &gt; Import resources… menu to bring up the Import Resources dialog and click on the Add Resource button to bring in the &lt;code&gt;KSP2_Part.spsm&lt;/code&gt; file. Repeat this step for the &lt;code&gt;Kerbal Space Program 2 - Standard Damaged.spexp&lt;/code&gt; file. Both of these should go into your library as you’re going to need them with every part you make.
## Use the Add Resources button to find the resource you want to import
## Select the file and click the Open button
## Repeat steps (1.) and (2.) above for as many things as you would like to import
## Select the destination to Import your resources to (hint: library ‘your_assets’ for these!)
## Click Import.
 What are those files for?
 
 KSP2_DarkSteel.sppr: TODO
 
 KSP2_Part.spsm: TODO
 
 KSP2_Steel.sppr: TODO
 
 KSP2_Tank.sppr: TODO
 
 KSP_Gray_Steel.sppr: TODO
 
 Kerbal_Space_Program_2_-_Standard_Damaged.spexp: the project export model, which will generate all the necessary texture layers (albedo, normal, paint map, emissive and ambiant occlusion).
 
 Kerbal_Space_Program_2_Parts_Paintable.spt: that one you need so that in SP you can create a new project using the template. This sets things up so that when you bake and export textures they'll be all set for KSP.
[[Category:Getting started]]</text>
      <sha1>oc1gc7ohkwmy5h353xxe8shi5cko5j9</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Parts and modules</title>
    <ns>14</ns>
    <id>63</id>
    <revision>
      <id>189</id>
      <timestamp>2023-10-28T12:30:49Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Made subcategory of "Tutorials"</comment>
      <origin>189</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="39" sha1="hmvd9r6b7edy722r9lrgsmdc7xvd4w8" xml:space="preserve">&lt;nowiki&gt;[[Category:Tutorials]]&lt;/nowiki&gt;</text>
      <sha1>hmvd9r6b7edy722r9lrgsmdc7xvd4w8</sha1>
    </revision>
    <revision>
      <id>190</id>
      <parentid>189</parentid>
      <timestamp>2023-10-28T12:32:10Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Made subcategory of "Tutorials"</comment>
      <origin>190</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="22" sha1="jt4mo6t18f2g3ya2mtbqtvf0rbsqqi9" xml:space="preserve">[[Category:Tutorials]]</text>
      <sha1>jt4mo6t18f2g3ya2mtbqtvf0rbsqqi9</sha1>
    </revision>
    <revision>
      <id>315</id>
      <parentid>190</parentid>
      <timestamp>2024-01-15T02:05:15Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <minor/>
      <comment>Munix moved page [[Category:Creating parts]] to [[Category:Parts and modules]]</comment>
      <origin>190</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="22" sha1="jt4mo6t18f2g3ya2mtbqtvf0rbsqqi9" xml:space="preserve">[[Category:Tutorials]]</text>
      <sha1>jt4mo6t18f2g3ya2mtbqtvf0rbsqqi9</sha1>
    </revision>
  </page>
  <page>
    <title>Creating a part icon</title>
    <ns>0</ns>
    <id>64</id>
    <revision>
      <id>197</id>
      <timestamp>2023-10-28T14:14:00Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Formatted page</comment>
      <origin>197</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1180" sha1="q82dg165jjb3e8rfh022i94vmare1e0" xml:space="preserve">== In Blender ==

# Download the &lt;code&gt;KSP2_IconGenerator.blend&lt;/code&gt; file from this location: https://github.com/KSP2Community/CommunityPartsPack/tree/main/Parts.
# Copy then open the &lt;code&gt;KSP2_IconGenerator.blend&lt;/code&gt; file.
# Click File &gt; Import &gt; FBX and import the part.
# In “Scene Collection” on the right, drag and drop the “KSP2 Paintable material” (present in “ADD YOUR MODEL HERE!”) onto the model.
# In the shader editor, import the part textures.
## Diffuse = Albedo
## Set the “Color Space” field to “Non-Color” for Metallic, Normal, and Ambient Occlusion
## If no occlusion, set the “Occlusion Strength” value to 0.
# Select the camera (press 0 to preview the rendering)
# Resize and move the model if necessary.
# Remove the “ADD MODEL HERE!” item.
# Press F12.
# Save the image (Alt + S) as &lt;part name&gt;_icon.png.

== In Unity ==

# Open the mod's Unity project.
# Move the file to the Asset folder in Unity.
# Make the file addressable. The name of the addressable must be &lt;part name&gt;_icon.png.
# Select the picture in Unity. In the Inspector window, set the value “Sprite” to the “Texture Type” field. Click on “Apply”.</text>
      <sha1>q82dg165jjb3e8rfh022i94vmare1e0</sha1>
    </revision>
    <revision>
      <id>198</id>
      <parentid>197</parentid>
      <timestamp>2023-10-28T14:14:20Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added category</comment>
      <origin>198</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1208" sha1="o1orzebr3winc74kz0a6vpn91udn2e6" xml:space="preserve">== In Blender ==

# Download the &lt;code&gt;KSP2_IconGenerator.blend&lt;/code&gt; file from this location: https://github.com/KSP2Community/CommunityPartsPack/tree/main/Parts.
# Copy then open the &lt;code&gt;KSP2_IconGenerator.blend&lt;/code&gt; file.
# Click File &gt; Import &gt; FBX and import the part.
# In “Scene Collection” on the right, drag and drop the “KSP2 Paintable material” (present in “ADD YOUR MODEL HERE!”) onto the model.
# In the shader editor, import the part textures.
## Diffuse = Albedo
## Set the “Color Space” field to “Non-Color” for Metallic, Normal, and Ambient Occlusion
## If no occlusion, set the “Occlusion Strength” value to 0.
# Select the camera (press 0 to preview the rendering)
# Resize and move the model if necessary.
# Remove the “ADD MODEL HERE!” item.
# Press F12.
# Save the image (Alt + S) as &lt;part name&gt;_icon.png.

== In Unity ==

# Open the mod's Unity project.
# Move the file to the Asset folder in Unity.
# Make the file addressable. The name of the addressable must be &lt;part name&gt;_icon.png.
# Select the picture in Unity. In the Inspector window, set the value “Sprite” to the “Texture Type” field. Click on “Apply”.
[[Category:Creating parts]]</text>
      <sha1>o1orzebr3winc74kz0a6vpn91udn2e6</sha1>
    </revision>
    <revision>
      <id>199</id>
      <parentid>198</parentid>
      <timestamp>2023-10-28T14:24:45Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added instructions to assign a material to several objets</comment>
      <origin>199</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1562" sha1="ls2rzh1llc5187y1ne42n434nen3ahj" xml:space="preserve">== In Blender ==

# Download the &lt;code&gt;KSP2_IconGenerator.blend&lt;/code&gt; file from this location: https://github.com/KSP2Community/CommunityPartsPack/tree/main/Parts.
# Copy then open the &lt;code&gt;KSP2_IconGenerator.blend&lt;/code&gt; file.
# Click File &gt; Import &gt; FBX and import the part.
# In “Scene Collection” on the right, drag and drop the “KSP2 Paintable material” (present in “ADD YOUR MODEL HERE!”) onto the model.
# In the shader editor, import the part textures.
## Diffuse = Albedo
## Set the “Color Space” field to “Non-Color” for Metallic, Normal, and Ambient Occlusion
## If no occlusion, set the “Occlusion Strength” value to 0.
# Select the camera (press 0 to preview the rendering)
# Resize and move the model if necessary.
# Remove the “ADD MODEL HERE!” item.
# Press F12.
# Save the image (Alt + S) as &lt;part name&gt;_icon.png.
 '''How to assign materials to multiple objects in Blender?'''
 1. Go to object mode.
 2. Prepare one object with the materials you want assigned to multiple objects.
 3. Select all objects you want to copy the materials to.
 4. Hold shift and click the object you prepared last to make it the active object.
 5. Press Ctrl+L.
 6. Choose link materials.

== In Unity ==

# Open the mod's Unity project.
# Move the file to the Asset folder in Unity.
# Make the file addressable. The name of the addressable must be &lt;part name&gt;_icon.png.
# Select the picture in Unity. In the Inspector window, set the value “Sprite” to the “Texture Type” field. Click on “Apply”.
[[Category:Creating parts]]</text>
      <sha1>ls2rzh1llc5187y1ne42n434nen3ahj</sha1>
    </revision>
    <revision>
      <id>215</id>
      <parentid>199</parentid>
      <timestamp>2023-10-30T11:12:26Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Polo moved page [[Part icon creation]] to [[Creating a part icon]]: Page title does not begin with a verb</comment>
      <origin>199</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1562" sha1="ls2rzh1llc5187y1ne42n434nen3ahj" xml:space="preserve">== In Blender ==

# Download the &lt;code&gt;KSP2_IconGenerator.blend&lt;/code&gt; file from this location: https://github.com/KSP2Community/CommunityPartsPack/tree/main/Parts.
# Copy then open the &lt;code&gt;KSP2_IconGenerator.blend&lt;/code&gt; file.
# Click File &gt; Import &gt; FBX and import the part.
# In “Scene Collection” on the right, drag and drop the “KSP2 Paintable material” (present in “ADD YOUR MODEL HERE!”) onto the model.
# In the shader editor, import the part textures.
## Diffuse = Albedo
## Set the “Color Space” field to “Non-Color” for Metallic, Normal, and Ambient Occlusion
## If no occlusion, set the “Occlusion Strength” value to 0.
# Select the camera (press 0 to preview the rendering)
# Resize and move the model if necessary.
# Remove the “ADD MODEL HERE!” item.
# Press F12.
# Save the image (Alt + S) as &lt;part name&gt;_icon.png.
 '''How to assign materials to multiple objects in Blender?'''
 1. Go to object mode.
 2. Prepare one object with the materials you want assigned to multiple objects.
 3. Select all objects you want to copy the materials to.
 4. Hold shift and click the object you prepared last to make it the active object.
 5. Press Ctrl+L.
 6. Choose link materials.

== In Unity ==

# Open the mod's Unity project.
# Move the file to the Asset folder in Unity.
# Make the file addressable. The name of the addressable must be &lt;part name&gt;_icon.png.
# Select the picture in Unity. In the Inspector window, set the value “Sprite” to the “Texture Type” field. Click on “Apply”.
[[Category:Creating parts]]</text>
      <sha1>ls2rzh1llc5187y1ne42n434nen3ahj</sha1>
    </revision>
    <revision>
      <id>326</id>
      <parentid>215</parentid>
      <timestamp>2024-01-15T02:09:36Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>326</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1565" sha1="rbjr3bve1j297khoapqcz40vfk0uvaj" xml:space="preserve">== In Blender ==

# Download the &lt;code&gt;KSP2_IconGenerator.blend&lt;/code&gt; file from this location: https://github.com/KSP2Community/CommunityPartsPack/tree/main/Parts.
# Copy then open the &lt;code&gt;KSP2_IconGenerator.blend&lt;/code&gt; file.
# Click File &gt; Import &gt; FBX and import the part.
# In “Scene Collection” on the right, drag and drop the “KSP2 Paintable material” (present in “ADD YOUR MODEL HERE!”) onto the model.
# In the shader editor, import the part textures.
## Diffuse = Albedo
## Set the “Color Space” field to “Non-Color” for Metallic, Normal, and Ambient Occlusion
## If no occlusion, set the “Occlusion Strength” value to 0.
# Select the camera (press 0 to preview the rendering)
# Resize and move the model if necessary.
# Remove the “ADD MODEL HERE!” item.
# Press F12.
# Save the image (Alt + S) as &lt;part name&gt;_icon.png.
 '''How to assign materials to multiple objects in Blender?'''
 1. Go to object mode.
 2. Prepare one object with the materials you want assigned to multiple objects.
 3. Select all objects you want to copy the materials to.
 4. Hold shift and click the object you prepared last to make it the active object.
 5. Press Ctrl+L.
 6. Choose link materials.

== In Unity ==

# Open the mod's Unity project.
# Move the file to the Asset folder in Unity.
# Make the file addressable. The name of the addressable must be &lt;part name&gt;_icon.png.
# Select the picture in Unity. In the Inspector window, set the value “Sprite” to the “Texture Type” field. Click on “Apply”.
[[Category:Parts and modules]]</text>
      <sha1>rbjr3bve1j297khoapqcz40vfk0uvaj</sha1>
    </revision>
    <revision>
      <id>435</id>
      <parentid>326</parentid>
      <timestamp>2024-02-24T11:23:40Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <origin>435</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1696" sha1="j8cwdsglyjuwvmhjww3gyy2vqitvgu1" xml:space="preserve">== In Blender ==

# Download the &lt;code&gt;KSP2_IconGenerator.blend&lt;/code&gt; file from this location: https://github.com/KSP2Community/CommunityPartsPack/tree/main/Parts.
# Copy then open the &lt;code&gt;KSP2_IconGenerator.blend&lt;/code&gt; file.
# Click '''File &gt; Import &gt; FBX''' and import the part.
# In '''Scene Collection''' on the right, drag and drop the &lt;code&gt;KSP2 Paintable material&lt;/code&gt; (present in &lt;code&gt;ADD YOUR MODEL HERE!&lt;/code&gt;) onto the model.
# In the '''Shader editor''', import the part textures:
## '''Diffuse''' = '''Albedo'''
## Set the '''Color Space''' field to '''Non-Color''' for '''Metallic''', '''Normal''', and '''Ambient Occlusion'''
## If no occlusion, set the '''Occlusion Strength''' value to 0.
# Select the camera (press 0 to preview the rendering)
# Resize and move the model if necessary.
# Remove the &lt;code&gt;ADD MODEL HERE!&lt;/code&gt; item.
# Press '''F12'''.
# Save the image ('''Alt + S''') as &lt;code&gt;&lt;part name&gt;_icon.png&lt;/code&gt;.
 '''How to assign materials to multiple objects in Blender?'''
 1. Go to '''object mode'''.
 2. Prepare one object with the materials you want assigned to multiple objects.
 3. Select all objects you want to copy the materials to.
 4. Hold '''shift''' and '''click''' the object you prepared last to make it the active object.
 5. Press '''Ctrl+L'''.
 6. Choose '''link materials'''.

== In Unity ==

# Open the mod's Unity project.
# Move the file to the Asset folder in Unity.
# Make the file addressable. The name of the addressable must be &lt;code&gt;&lt;part name&gt;_icon.png&lt;/code&gt;.
# Select the picture in Unity. In the Inspector window, set the value '''Sprite''' to the '''Texture Type''' field. Click on '''Apply'''.
[[Category:Parts and modules]]</text>
      <sha1>j8cwdsglyjuwvmhjww3gyy2vqitvgu1</sha1>
    </revision>
  </page>
  <page>
    <title>Modeling the mesh in Blender</title>
    <ns>0</ns>
    <id>65</id>
    <revision>
      <id>209</id>
      <timestamp>2023-10-30T11:03:08Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added instructions</comment>
      <origin>209</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1158" sha1="2a2o3zmxez8lr5hyb3m3qg61zzh0z2o" xml:space="preserve">This page is not going to teach you how to use Blender. There are plenty of resources on the internet to help you in this area.

This page will describe the rules you have to follow in order to mod for KSP2.

# Model the mesh.
# Position the mesh as if it's sitting on the ground. This will help you set up the attach nodes later.
# Create a new material named &lt;code&gt;myMod_myPart&lt;/code&gt; and assign it to the part.
# The following steps might help you generate seams in order to set up the UV map. You can do differently. The important thing is to have a only one UV map for the entire mesh. The less empty space in the map, the better.
## Press '''Tab''' to enter Edit Mode.
## Click '''Select &gt; Select Sharp Edges''' (the angle should be 30°).
## Press '''Ctrl + E &gt; Mark Seams'''.
## Manually remove excess seams, trying to have only one seam for each series of continuous faces: '''Ctrl + E &gt; Clear Seams'''.
# Press '''A''' to select the entire mesh.
# Click '''UV''' (on the right menu) &gt; '''Smart UV project''', with a margin of 0.003.
# Click '''UV''' (on the left menu) '''&gt; Pack islands''', with a margin of 0.003.
# Export the model in FBX format.</text>
      <sha1>2a2o3zmxez8lr5hyb3m3qg61zzh0z2o</sha1>
    </revision>
    <revision>
      <id>210</id>
      <parentid>209</parentid>
      <timestamp>2023-10-30T11:03:51Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added category</comment>
      <origin>210</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1186" sha1="m6pzfz2qxar9n5soa3fjzjf28d08qi4" xml:space="preserve">This page is not going to teach you how to use Blender. There are plenty of resources on the internet to help you in this area.

This page will describe the rules you have to follow in order to mod for KSP2.

# Model the mesh.
# Position the mesh as if it's sitting on the ground. This will help you set up the attach nodes later.
# Create a new material named &lt;code&gt;myMod_myPart&lt;/code&gt; and assign it to the part.
# The following steps might help you generate seams in order to set up the UV map. You can do differently. The important thing is to have a only one UV map for the entire mesh. The less empty space in the map, the better.
## Press '''Tab''' to enter Edit Mode.
## Click '''Select &gt; Select Sharp Edges''' (the angle should be 30°).
## Press '''Ctrl + E &gt; Mark Seams'''.
## Manually remove excess seams, trying to have only one seam for each series of continuous faces: '''Ctrl + E &gt; Clear Seams'''.
# Press '''A''' to select the entire mesh.
# Click '''UV''' (on the right menu) &gt; '''Smart UV project''', with a margin of 0.003.
# Click '''UV''' (on the left menu) '''&gt; Pack islands''', with a margin of 0.003.
# Export the model in FBX format.
[[Category:Creating parts]]</text>
      <sha1>m6pzfz2qxar9n5soa3fjzjf28d08qi4</sha1>
    </revision>
    <revision>
      <id>211</id>
      <parentid>210</parentid>
      <timestamp>2023-10-30T11:07:26Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Added useful links</comment>
      <origin>211</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1659" sha1="qimhjpkla6grud5u3cu0qa0qqe6ost9" xml:space="preserve">This page is not going to teach you how to use Blender. There are plenty of resources on the internet to help you in this area.

This page will describe the rules you have to follow in order to mod for KSP2.

# Model the mesh.
# Position the mesh as if it's sitting on the ground. This will help you set up the attach nodes later.
# Create a new material named &lt;code&gt;myMod_myPart&lt;/code&gt; and assign it to the part.
# The following steps might help you generate seams in order to set up the UV map. You can do differently. The important thing is to have a only one UV map for the entire mesh. The less empty space in the map, the better.
## Press '''Tab''' to enter Edit Mode.
## Click '''Select &gt; Select Sharp Edges''' (the angle should be 30°).
## Press '''Ctrl + E &gt; Mark Seams'''.
## Manually remove excess seams, trying to have only one seam for each series of continuous faces: '''Ctrl + E &gt; Clear Seams'''.
# Press '''A''' to select the entire mesh.
# Click '''UV''' (on the right menu) &gt; '''Smart UV project''', with a margin of 0.003.
# Click '''UV''' (on the left menu) '''&gt; Pack islands''', with a margin of 0.003.
# Export the model in FBX format.
 Useful links
 Blender tutorial fuel tank KSP1 : https://www.youtube.com/watch?v=VJy5cXd04uk
 Blender tutorial for modeling a pod for KSP1 (series): https://www.youtube.com/watch?v=rUXDb8mcW-A
 Setting up seams and UV unwrap: https://www.youtube.com/watch?v=Fr2SX1rZZM0

* Tutoriel Blender fuel tank KSP1 : Kerbal Space Program Modding Tutorial | Using Blender only!
* Série de tutoriels CST-100 KSP1 : Blender - Modeling a Pod-like Spacecraft (CST-100 Starliner) Part 1

[[Category:Creating parts]]</text>
      <sha1>qimhjpkla6grud5u3cu0qa0qqe6ost9</sha1>
    </revision>
    <revision>
      <id>212</id>
      <parentid>211</parentid>
      <timestamp>2023-10-30T11:07:39Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Fix</comment>
      <origin>212</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1457" sha1="11tutg8zsn8n260hx5tj5ttenloecj9" xml:space="preserve">This page is not going to teach you how to use Blender. There are plenty of resources on the internet to help you in this area.

This page will describe the rules you have to follow in order to mod for KSP2.

# Model the mesh.
# Position the mesh as if it's sitting on the ground. This will help you set up the attach nodes later.
# Create a new material named &lt;code&gt;myMod_myPart&lt;/code&gt; and assign it to the part.
# The following steps might help you generate seams in order to set up the UV map. You can do differently. The important thing is to have a only one UV map for the entire mesh. The less empty space in the map, the better.
## Press '''Tab''' to enter Edit Mode.
## Click '''Select &gt; Select Sharp Edges''' (the angle should be 30°).
## Press '''Ctrl + E &gt; Mark Seams'''.
## Manually remove excess seams, trying to have only one seam for each series of continuous faces: '''Ctrl + E &gt; Clear Seams'''.
# Press '''A''' to select the entire mesh.
# Click '''UV''' (on the right menu) &gt; '''Smart UV project''', with a margin of 0.003.
# Click '''UV''' (on the left menu) '''&gt; Pack islands''', with a margin of 0.003.
# Export the model in FBX format.
 Useful links
 Blender tutorial fuel tank KSP1 : https://www.youtube.com/watch?v=VJy5cXd04uk
 Blender tutorial for modeling a pod for KSP1 (series): https://www.youtube.com/watch?v=rUXDb8mcW-A
 Setting up seams and UV unwrap: https://www.youtube.com/watch?v=Fr2SX1rZZM0

[[Category:Creating parts]]</text>
      <sha1>11tutg8zsn8n260hx5tj5ttenloecj9</sha1>
    </revision>
    <revision>
      <id>313</id>
      <parentid>212</parentid>
      <timestamp>2024-01-13T14:26:57Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>313</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1513" sha1="m1ft3cf8aatk0wkr9zn7108vnwj1ueb" xml:space="preserve">This page is not going to teach you how to use Blender. There are plenty of resources on the internet to help you in this area.

This page will describe the rules you have to follow in order to mod for KSP2.

# Model the mesh.
# Position the mesh as if it's sitting on the ground. This will help you set up the attach nodes later.
# When the mesh is finished, apply all transformations.
# Create a new material named &lt;code&gt;myMod_myPart&lt;/code&gt; and assign it to the part.
# The following steps might help you generate seams in order to set up the UV map. You can do differently. The important thing is to have a only one UV map for the entire mesh. The less empty space in the map, the better.
## Press '''Tab''' to enter Edit Mode.
## Click '''Select &gt; Select Sharp Edges''' (the angle should be 30°).
## Press '''Ctrl + E &gt; Mark Seams'''.
## Manually remove excess seams, trying to have only one seam for each series of continuous faces: '''Ctrl + E &gt; Clear Seams'''.
# Press '''A''' to select the entire mesh.
# Click '''UV''' (on the right menu) &gt; '''Smart UV project''', with a margin of 0.003.
# Click '''UV''' (on the left menu) '''&gt; Pack islands''', with a margin of 0.003.
# Export the model in FBX format.
 Useful links
 Blender tutorial fuel tank KSP1 : https://www.youtube.com/watch?v=VJy5cXd04uk
 Blender tutorial for modeling a pod for KSP1 (series): https://www.youtube.com/watch?v=rUXDb8mcW-A
 Setting up seams and UV unwrap: https://www.youtube.com/watch?v=Fr2SX1rZZM0

[[Category:Creating parts]]</text>
      <sha1>m1ft3cf8aatk0wkr9zn7108vnwj1ueb</sha1>
    </revision>
    <revision>
      <id>327</id>
      <parentid>313</parentid>
      <timestamp>2024-01-15T02:10:05Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>327</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1516" sha1="3ak14pg8bxhjrkyt3rh60gvyvw0x109" xml:space="preserve">This page is not going to teach you how to use Blender. There are plenty of resources on the internet to help you in this area.

This page will describe the rules you have to follow in order to mod for KSP2.

# Model the mesh.
# Position the mesh as if it's sitting on the ground. This will help you set up the attach nodes later.
# When the mesh is finished, apply all transformations.
# Create a new material named &lt;code&gt;myMod_myPart&lt;/code&gt; and assign it to the part.
# The following steps might help you generate seams in order to set up the UV map. You can do differently. The important thing is to have a only one UV map for the entire mesh. The less empty space in the map, the better.
## Press '''Tab''' to enter Edit Mode.
## Click '''Select &gt; Select Sharp Edges''' (the angle should be 30°).
## Press '''Ctrl + E &gt; Mark Seams'''.
## Manually remove excess seams, trying to have only one seam for each series of continuous faces: '''Ctrl + E &gt; Clear Seams'''.
# Press '''A''' to select the entire mesh.
# Click '''UV''' (on the right menu) &gt; '''Smart UV project''', with a margin of 0.003.
# Click '''UV''' (on the left menu) '''&gt; Pack islands''', with a margin of 0.003.
# Export the model in FBX format.
 Useful links
 Blender tutorial fuel tank KSP1 : https://www.youtube.com/watch?v=VJy5cXd04uk
 Blender tutorial for modeling a pod for KSP1 (series): https://www.youtube.com/watch?v=rUXDb8mcW-A
 Setting up seams and UV unwrap: https://www.youtube.com/watch?v=Fr2SX1rZZM0

[[Category:Parts and modules]]</text>
      <sha1>3ak14pg8bxhjrkyt3rh60gvyvw0x109</sha1>
    </revision>
    <revision>
      <id>422</id>
      <parentid>327</parentid>
      <timestamp>2024-02-23T23:28:43Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <comment>Cleanup</comment>
      <origin>422</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2792" sha1="dj0cuge9orc4n59mxqqxchqdae8aznt" xml:space="preserve">This page does not aim at teaching you the basics of 3D modelling in Blender, you can find plenty of resources on the internet to help you in this area. This page aims at providing you a few guidelines to help you in your part making journey. Those are not hard rules, just little tips that might help you have an easier time with KSP2 modding.

=== UV Unwrapping ===
[[wikipedia:UV_mapping#UV_unwrapping|UV unwrapping]] is the process of mapping parts of your 3D mesh to a flat "UV map" which will tell what part of the model a pixel on a texture corresponds to. As with modelling, there are a lot of resources online about UV unwrapping in Blender but here are a few steps you can follow to quickly unwrap a part's model:

#Mark "hard" edges as '''Seams''', this means that the automatic UV unwrapping algorithms will treat those edges as "borders" for islands of faces in the UV map.
## Press '''Tab''' to enter Edit Mode.
## Click '''Select &gt; Select Sharp Edges''' (the angle should be 30°).
## Press '''Ctrl+E &gt; Mark Seams'''.
## Manually remove excess seams: try to have only one seam for each series of continuous faces: '''Ctrl+E &gt; Clear Seams'''.
# Press '''A''' to select the entire mesh.
# Click '''UV''' (on the right menu) &gt; '''Smart UV project''', with a margin of 0.003.
# Click '''UV''' (on the left menu) '''&gt; Pack islands''', with a margin of 0.003.

The main thing to keep in mind when UV unwrapping is that you want to avoid faces overlapping in the UV map and you want the map to be as dense as possible to make full use of your textures' resolution.

=== Material ===
We recommend assigning the same single material to all objects in your mesh and giving this material a relevant name. This will make things cleaner when importing the mesh in a texturing software such as Substance Painter.

=== Transformations &amp; Modifiers ===
Make sure to apply all transformations to your mesh by selecting it and pressing '''Ctrl+A &gt; All Transforms'''.

Also make sure to apply all '''Boolean''' modifiers, you can leave '''Array''' and '''Mirror''' modifiers not applied (this means however that the mirrored/arrayed objects will share the same texture).

=== Miscellaneous ===
If you’re making an engine, put an empty single arrow at the world origin facing in the direction your engine will fire, then move it along the axis of the engine so that it’s at the exit of the engine. Name this object '''thrustTransform''', and keep in mind that size does not matter.

=== Useful links ===

* Blender tutorial fuel tank KSP1: https://www.youtube.com/watch?v=VJy5cXd04uk
* Blender tutorial for modeling a pod for KSP1 (series): https://www.youtube.com/watch?v=rUXDb8mcW-A
* Setting up seams and UV unwrap: https://www.youtube.com/watch?v=Fr2SX1rZZM0

[[Category:Parts and modules]]</text>
      <sha1>dj0cuge9orc4n59mxqqxchqdae8aznt</sha1>
    </revision>
    <revision>
      <id>425</id>
      <parentid>422</parentid>
      <timestamp>2024-02-23T23:44:30Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <origin>425</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2781" sha1="1yboh5wjmleheoj9xjlxotaskqob8u9" xml:space="preserve">This page does not aim at teaching you the basics of 3D modelling in Blender, you can find plenty of resources on the internet to help you in this area. This page aims at providing you a few guidelines to help you in your part making journey. Those are not hard rules, just little tips that might help you have an easier time with KSP2 modding.

== UV Unwrapping ==
[[wikipedia:UV_mapping#UV_unwrapping|UV unwrapping]] is the process of mapping parts of your 3D mesh to a flat "UV map" which will tell what part of the model a pixel on a texture corresponds to. As with modelling, there are a lot of resources online about UV unwrapping in Blender but here are a few steps you can follow to quickly unwrap a part's model:

#Mark "hard" edges as '''Seams''', this means that the automatic UV unwrapping algorithms will treat those edges as "borders" for islands of faces in the UV map.
## Press '''Tab''' to enter Edit Mode.
## Click '''Select &gt; Select Sharp Edges''' (the angle should be 30°).
## Press '''Ctrl+E &gt; Mark Seams'''.
## Manually remove excess seams: try to have only one seam for each series of continuous faces: '''Ctrl+E &gt; Clear Seams'''.
# Press '''A''' to select the entire mesh.
# Click '''UV''' (on the right menu) &gt; '''Smart UV project''', with a margin of 0.003.
# Click '''UV''' (on the left menu) '''&gt; Pack islands''', with a margin of 0.003.

The main thing to keep in mind when UV unwrapping is that you want to avoid faces overlapping in the UV map and you want the map to be as dense as possible to make full use of your textures' resolution.

== Material ==
We recommend assigning the same single material to all objects in your mesh and giving this material a relevant name. This will make things cleaner when importing the mesh in a texturing software such as Substance Painter.

== Transformations &amp; Modifiers ==
Make sure to apply all transformations to your mesh by selecting it and pressing '''Ctrl+A &gt; All Transforms'''.

Also make sure to apply all '''Boolean''' modifiers, you can leave '''Array''' and '''Mirror''' modifiers not applied (this means however that the mirrored/arrayed objects will share the same texture).

== Miscellaneous ==
If you’re making an engine, put an empty single arrow at the world origin facing in the direction your engine will fire, then move it along the axis of the engine so that it’s at the exit of the engine. Name this object '''thrustTransform''', and keep in mind that size does not matter.

== Useful links ==
* Blender tutorial fuel tank KSP1: https://www.youtube.com/watch?v=VJy5cXd04uk
* Blender tutorial for modeling a pod for KSP1 (series): https://www.youtube.com/watch?v=rUXDb8mcW-A
* Setting up seams and UV unwrap: https://www.youtube.com/watch?v=Fr2SX1rZZM0

[[Category:Parts and modules]]</text>
      <sha1>1yboh5wjmleheoj9xjlxotaskqob8u9</sha1>
    </revision>
    <revision>
      <id>433</id>
      <parentid>425</parentid>
      <timestamp>2024-02-24T11:18:07Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <origin>433</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3656" sha1="fy53coslqzxhlpq6jx6lr32qpqd7dca" xml:space="preserve">This page does not aim at teaching you the basics of 3D modelling in Blender, you can find plenty of resources on the internet to help you in this area. This page aims at providing you a few guidelines to help you in your part making journey. Those are not hard rules, just little tips that might help you have an easier time with KSP2 modding.

== UV Unwrapping ==
[[wikipedia:UV_mapping#UV_unwrapping|UV unwrapping]] is the process of mapping parts of your 3D mesh to a flat "UV map" which will tell what part of the model a pixel on a texture corresponds to. As with modelling, there are a lot of resources online about UV unwrapping in Blender but here are a few steps you can follow to quickly unwrap a part's model:
[[File:Blender UV map example.png|alt=Screenshot of an UV map for a KSP2 part in Blender|thumb|Example of an '''UV map''' for a KSP2 part. The '''marked seams''' are visible in red.]]
#Mark "hard" edges as '''Seams''', this means that the UV unwrapping algorithms will treat those edges as "borders" for islands of faces in the UV map:
## Press '''Tab''' to enter Edit Mode.
## Click '''Select &gt; Select Sharp Edges''' (the angle should be 30°).
## Press '''Ctrl+E &gt; Mark Seams'''.
## Manually remove excess seams: try to have only one seam for each series of continuous faces: '''Ctrl+E &gt; Clear Seams'''.
# Press '''A''' to select the entire mesh.
# Click '''UV''' (on the right menu) &gt; '''Smart UV project''', with a margin of 0.003.
# Click '''UV''' (on the left menu) '''&gt; Pack islands''', with a margin of 0.003.

The main thing to keep in mind when UV unwrapping is that you want to avoid faces overlapping in the UV map and you want the map to be as dense as possible to make full use of your textures' resolution.

== Material ==
We recommend assigning the same single material to all objects in your mesh and giving this material a relevant name. This will make things cleaner when importing the mesh in a texturing software such as Substance Painter.

== Exporting the mesh ==
[[File:Blender FBX export settings for KSP2.png|alt=Screenshot of Blender FBX export settings.|thumb|FBX export settings used for KSP2 parts.]]
Make sure the '''origin''' of the mesh is near where you want the '''Center of Mass''' to be. Make sure the mesh rests at the world origin &lt;code&gt;(0, 0, 0)&lt;/code&gt;.

Make sure to apply all transformations to your mesh by selecting it and pressing '''Ctrl+A &gt; All Transforms'''.

Also make sure to apply all '''Boolean''' modifiers, you can leave '''Array''' and '''Mirror''' modifiers not applied (this means however that the mirrored/arrayed objects will share the same texture).

The export procedure is then as follows:

# Select all objects in the mesh you want to be part of your asset.
# Click on '''File &gt; Export &gt; FBX (.fbx)'''. Give a specific name to the file, for example: &lt;code&gt;my_mod_my_part.fbx&lt;/code&gt;
# On the right of the window click on '''Selected Objects''' to make sure only stuff you want is exported.
# Uncheck '''Bake Animation'''.
# Click on '''Export FBX'''.

== Miscellaneous ==
If you’re making an engine, put an empty single arrow at the world origin facing in the direction your engine will fire, then move it along the axis of the engine so that it’s at the exit of the engine. Name this object '''thrustTransform''', and keep in mind that size does not matter.

== Useful links ==
* Blender tutorial fuel tank KSP1: https://www.youtube.com/watch?v=VJy5cXd04uk
* Blender tutorial for modeling a pod for KSP1 (series): https://www.youtube.com/watch?v=rUXDb8mcW-A
* Setting up seams and UV unwrap: https://www.youtube.com/watch?v=Fr2SX1rZZM0

[[Category:Parts and modules]]</text>
      <sha1>fy53coslqzxhlpq6jx6lr32qpqd7dca</sha1>
    </revision>
  </page>
  <page>
    <title>Tutorials Home Page</title>
    <ns>0</ns>
    <id>66</id>
    <redirect title="Tutorials Home Page (to be deleted)" />
    <revision>
      <id>214</id>
      <timestamp>2023-10-30T11:11:27Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Polo moved page [[Tutorials Home Page]] to [[Tutorials Home Page (to be deleted)]]: Page no longer useful</comment>
      <origin>214</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="49" sha1="hty1tjf9le6qlfty6mhdep132y1uf9w" xml:space="preserve">#REDIRECT [[Tutorials Home Page (to be deleted)]]</text>
      <sha1>hty1tjf9le6qlfty6mhdep132y1uf9w</sha1>
    </revision>
  </page>
  <page>
    <title>Part icon creation</title>
    <ns>0</ns>
    <id>67</id>
    <redirect title="Creating a part icon" />
    <revision>
      <id>216</id>
      <timestamp>2023-10-30T11:12:26Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Polo moved page [[Part icon creation]] to [[Creating a part icon]]: Page title does not begin with a verb</comment>
      <origin>216</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="34" sha1="cxo1gxrc1dhk4u294x507bs6hseidei" xml:space="preserve">#REDIRECT [[Creating a part icon]]</text>
      <sha1>cxo1gxrc1dhk4u294x507bs6hseidei</sha1>
    </revision>
  </page>
  <page>
    <title>Texturing the mesh in Substance 3D Painter</title>
    <ns>0</ns>
    <id>68</id>
    <revision>
      <id>217</id>
      <timestamp>2023-10-30T11:23:02Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added content</comment>
      <origin>217</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4943" sha1="4tl9p9i7zt2j0b4nfi2u6aeu9ivrjej" xml:space="preserve"> Prerequisites
 [[Configuring Substance Painter]]
 [[Modeling the mesh in Blender]]

== General texturing ==

# Open a new project
## Select 4K textures
## Select the &lt;code&gt;Kerbal_Space_Program_2_Parts_Paintable&lt;/code&gt; template.
## Import the FBX
# Find the &lt;code&gt;KSP2_Part&lt;/code&gt; Smart Material and apply it to the mesh.
# For some reason doing this will bring in some stuff already on the Edges layer that applies to the Heightmap (thus the orange bar under it). You should clear the black mask on Edges to get rid of those. Just right click on the black mask and select Clear Mask.
# You can drop any materials (smart or otherwise) into the Base Material folder inside the KSP2_Part folder. These are what you use for most details, with the exceptions being some things you'll do on Nails, or Edges, or Emissivity. Since applying the KSP2 smart material to the whole thing includes applying a KSP2 Steel material without a mask inside the Base Material folder, everything will start out as a shiny steel. I leave this as the last layer in that stack to catch anything I don't otherwise paint, and put other painting layers above it with masks.
# For paint map, just open up the PaintMap folder and apply whatever strength you need to the black masks for Base and Accent. This works just like painting on any other black mask. Mostly, you'll just apply full strength to indicate (yes, please apply the player's base or accent paint color here). Using anything less would result in the player's attempt to paint the part being diluted. You need to paint Base everywhere you want any color (accent or base), and then also paint Accent where you want the accent paint to be applied. If there is no base paint somewhere, then whatever you paint in Substance Painter will be what the player gets and they can't change it.

 Did you know?
 
 The height channel induces a real deformation of the mesh (works well with a lot of polygons) while the normal channel is a bumb map.
 
 Substance 3D Painter converts Roughness to Glossiness automatically. The export template uses the Glossiness channel.

== Creating gradients ==

# You must bake at some point before this, and your bake must include Position as we'll need that. If you've already baked your model in SP, you don't need to do it again.
# Starting with an Emissive layer (you can have more than one if you need more than one color - just duplicate and customize), paint at full strength (1.0) on the black mask everywhere you want the gradient to be.
# Right Click the black mask and pick the &lt;code&gt;add generator&lt;/code&gt; option.
# Click on the resulting &lt;code&gt;Generator (no generator selected)&lt;/code&gt; button, and pick the second option from the left for &lt;code&gt;3D Linear Gradient&lt;/code&gt;.
# The Image inputs should default to Position, so just switch your display from Material or whatever to Position and orient your part so you can see the point where you want the 0 for the gradient to be like this (the display picker is in the upper right corner of the panel with your 3D view).
# Take the eye dropper from the &lt;code&gt;3D Position End&lt;/code&gt; and click on the place you want the End to be. This assumes that the &lt;code&gt;Start&lt;/code&gt; is already where you want one endpoint of the gradiant to be, as it is in the view above. If you oriented your model so that the &lt;code&gt;End&lt;/code&gt; is already where you want it, then use the other eye dropper and set the start. The objective is that you've got the Position mapped colors pinning down the range across which you want the gradient to go. Don't worry if &lt;code&gt;Start&lt;/code&gt; and &lt;code&gt;End&lt;/code&gt; are reversed from what you want because...
# Set Invert to be &lt;code&gt;True&lt;/code&gt; if the gradient is going the wrong way! (as it is in the example above).
# ''Most Important!'' Set the generator to apply as &lt;code&gt;Multiply&lt;/code&gt; (it will default to &lt;code&gt;Normal&lt;/code&gt;). This is the part where the work done on Step 2 will help you as it will then correctly constrain where the gradient is applied.
# When you're all done, you can set your display to &lt;code&gt;Mask&lt;/code&gt; so you can see how the gradient will be applied to whatever color you set for your Emissive. BTW, there's nothing magical or special about the name for the layer. If you chance it to &lt;code&gt;Engine Glow&lt;/code&gt; or &lt;code&gt;Emissive 1&lt;/code&gt; or whatever it will still add to the emissive &lt;code&gt;*_e.png&lt;/code&gt; texture as that is how the Emissive layer was setup when you applied the KSP2 Smart Material.

== Exporting the textures ==

# Press '''Ctrl+Shift+E''' to open the export window.
# Select the &lt;code&gt;Kerbal_Space_program_2_Parts_Paintable&lt;/code&gt; output template.

 Uneful links
 Substance 3D Painter tutorial: https://www.youtube.com/watch?v=_j27AS0VQOw
 Free materials: https://substance3d.adobe.com/community-assets/
 Paid materials: https://www.artstation.com/
 Lux's notes on Paint Map: https://luxstice.notion.site/How-to-create-a-paintmap-texture-59c51441f4d048a5803c0b2b108cd041</text>
      <sha1>4tl9p9i7zt2j0b4nfi2u6aeu9ivrjej</sha1>
    </revision>
    <revision>
      <id>218</id>
      <parentid>217</parentid>
      <timestamp>2023-10-30T11:23:25Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added category</comment>
      <origin>218</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4971" sha1="iq1db8nkuahaiurzv7jfh6bse2r1vy4" xml:space="preserve"> Prerequisites
 [[Configuring Substance Painter]]
 [[Modeling the mesh in Blender]]

== General texturing ==

# Open a new project
## Select 4K textures
## Select the &lt;code&gt;Kerbal_Space_Program_2_Parts_Paintable&lt;/code&gt; template.
## Import the FBX
# Find the &lt;code&gt;KSP2_Part&lt;/code&gt; Smart Material and apply it to the mesh.
# For some reason doing this will bring in some stuff already on the Edges layer that applies to the Heightmap (thus the orange bar under it). You should clear the black mask on Edges to get rid of those. Just right click on the black mask and select Clear Mask.
# You can drop any materials (smart or otherwise) into the Base Material folder inside the KSP2_Part folder. These are what you use for most details, with the exceptions being some things you'll do on Nails, or Edges, or Emissivity. Since applying the KSP2 smart material to the whole thing includes applying a KSP2 Steel material without a mask inside the Base Material folder, everything will start out as a shiny steel. I leave this as the last layer in that stack to catch anything I don't otherwise paint, and put other painting layers above it with masks.
# For paint map, just open up the PaintMap folder and apply whatever strength you need to the black masks for Base and Accent. This works just like painting on any other black mask. Mostly, you'll just apply full strength to indicate (yes, please apply the player's base or accent paint color here). Using anything less would result in the player's attempt to paint the part being diluted. You need to paint Base everywhere you want any color (accent or base), and then also paint Accent where you want the accent paint to be applied. If there is no base paint somewhere, then whatever you paint in Substance Painter will be what the player gets and they can't change it.

 Did you know?
 
 The height channel induces a real deformation of the mesh (works well with a lot of polygons) while the normal channel is a bumb map.
 
 Substance 3D Painter converts Roughness to Glossiness automatically. The export template uses the Glossiness channel.

== Creating gradients ==

# You must bake at some point before this, and your bake must include Position as we'll need that. If you've already baked your model in SP, you don't need to do it again.
# Starting with an Emissive layer (you can have more than one if you need more than one color - just duplicate and customize), paint at full strength (1.0) on the black mask everywhere you want the gradient to be.
# Right Click the black mask and pick the &lt;code&gt;add generator&lt;/code&gt; option.
# Click on the resulting &lt;code&gt;Generator (no generator selected)&lt;/code&gt; button, and pick the second option from the left for &lt;code&gt;3D Linear Gradient&lt;/code&gt;.
# The Image inputs should default to Position, so just switch your display from Material or whatever to Position and orient your part so you can see the point where you want the 0 for the gradient to be like this (the display picker is in the upper right corner of the panel with your 3D view).
# Take the eye dropper from the &lt;code&gt;3D Position End&lt;/code&gt; and click on the place you want the End to be. This assumes that the &lt;code&gt;Start&lt;/code&gt; is already where you want one endpoint of the gradiant to be, as it is in the view above. If you oriented your model so that the &lt;code&gt;End&lt;/code&gt; is already where you want it, then use the other eye dropper and set the start. The objective is that you've got the Position mapped colors pinning down the range across which you want the gradient to go. Don't worry if &lt;code&gt;Start&lt;/code&gt; and &lt;code&gt;End&lt;/code&gt; are reversed from what you want because...
# Set Invert to be &lt;code&gt;True&lt;/code&gt; if the gradient is going the wrong way! (as it is in the example above).
# ''Most Important!'' Set the generator to apply as &lt;code&gt;Multiply&lt;/code&gt; (it will default to &lt;code&gt;Normal&lt;/code&gt;). This is the part where the work done on Step 2 will help you as it will then correctly constrain where the gradient is applied.
# When you're all done, you can set your display to &lt;code&gt;Mask&lt;/code&gt; so you can see how the gradient will be applied to whatever color you set for your Emissive. BTW, there's nothing magical or special about the name for the layer. If you chance it to &lt;code&gt;Engine Glow&lt;/code&gt; or &lt;code&gt;Emissive 1&lt;/code&gt; or whatever it will still add to the emissive &lt;code&gt;*_e.png&lt;/code&gt; texture as that is how the Emissive layer was setup when you applied the KSP2 Smart Material.

== Exporting the textures ==

# Press '''Ctrl+Shift+E''' to open the export window.
# Select the &lt;code&gt;Kerbal_Space_program_2_Parts_Paintable&lt;/code&gt; output template.

 Uneful links
 Substance 3D Painter tutorial: https://www.youtube.com/watch?v=_j27AS0VQOw
 Free materials: https://substance3d.adobe.com/community-assets/
 Paid materials: https://www.artstation.com/
 Lux's notes on Paint Map: https://luxstice.notion.site/How-to-create-a-paintmap-texture-59c51441f4d048a5803c0b2b108cd041
[[Category:Creating parts]]</text>
      <sha1>iq1db8nkuahaiurzv7jfh6bse2r1vy4</sha1>
    </revision>
    <revision>
      <id>219</id>
      <parentid>218</parentid>
      <timestamp>2023-10-30T11:26:28Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Corrected typo</comment>
      <origin>219</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4971" sha1="azo6qlmeskowgbe1qdynxj1xt6j5lzj" xml:space="preserve"> Prerequisites
 [[Configuring Substance Painter]]
 [[Modeling the mesh in Blender]]

== General texturing ==

# Open a new project
## Select 4K textures
## Select the &lt;code&gt;Kerbal_Space_Program_2_Parts_Paintable&lt;/code&gt; template.
## Import the FBX
# Find the &lt;code&gt;KSP2_Part&lt;/code&gt; Smart Material and apply it to the mesh.
# For some reason doing this will bring in some stuff already on the Edges layer that applies to the Heightmap (thus the orange bar under it). You should clear the black mask on Edges to get rid of those. Just right click on the black mask and select Clear Mask.
# You can drop any materials (smart or otherwise) into the Base Material folder inside the KSP2_Part folder. These are what you use for most details, with the exceptions being some things you'll do on Nails, or Edges, or Emissivity. Since applying the KSP2 smart material to the whole thing includes applying a KSP2 Steel material without a mask inside the Base Material folder, everything will start out as a shiny steel. I leave this as the last layer in that stack to catch anything I don't otherwise paint, and put other painting layers above it with masks.
# For paint map, just open up the PaintMap folder and apply whatever strength you need to the black masks for Base and Accent. This works just like painting on any other black mask. Mostly, you'll just apply full strength to indicate (yes, please apply the player's base or accent paint color here). Using anything less would result in the player's attempt to paint the part being diluted. You need to paint Base everywhere you want any color (accent or base), and then also paint Accent where you want the accent paint to be applied. If there is no base paint somewhere, then whatever you paint in Substance Painter will be what the player gets and they can't change it.

 Did you know?
 
 The height channel induces a real deformation of the mesh (works well with a lot of polygons) while the normal channel is a bumb map.
 
 Substance 3D Painter converts Roughness to Glossiness automatically. The export template uses the Glossiness channel.

== Creating gradients ==

# You must bake at some point before this, and your bake must include Position as we'll need that. If you've already baked your model in SP, you don't need to do it again.
# Starting with an Emissive layer (you can have more than one if you need more than one color - just duplicate and customize), paint at full strength (1.0) on the black mask everywhere you want the gradient to be.
# Right Click the black mask and pick the &lt;code&gt;add generator&lt;/code&gt; option.
# Click on the resulting &lt;code&gt;Generator (no generator selected)&lt;/code&gt; button, and pick the second option from the left for &lt;code&gt;3D Linear Gradient&lt;/code&gt;.
# The Image inputs should default to Position, so just switch your display from Material or whatever to Position and orient your part so you can see the point where you want the 0 for the gradient to be like this (the display picker is in the upper right corner of the panel with your 3D view).
# Take the eye dropper from the &lt;code&gt;3D Position End&lt;/code&gt; and click on the place you want the End to be. This assumes that the &lt;code&gt;Start&lt;/code&gt; is already where you want one endpoint of the gradiant to be, as it is in the view above. If you oriented your model so that the &lt;code&gt;End&lt;/code&gt; is already where you want it, then use the other eye dropper and set the start. The objective is that you've got the Position mapped colors pinning down the range across which you want the gradient to go. Don't worry if &lt;code&gt;Start&lt;/code&gt; and &lt;code&gt;End&lt;/code&gt; are reversed from what you want because...
# Set Invert to be &lt;code&gt;True&lt;/code&gt; if the gradient is going the wrong way! (as it is in the example above).
# ''Most Important!'' Set the generator to apply as &lt;code&gt;Multiply&lt;/code&gt; (it will default to &lt;code&gt;Normal&lt;/code&gt;). This is the part where the work done on Step 2 will help you as it will then correctly constrain where the gradient is applied.
# When you're all done, you can set your display to &lt;code&gt;Mask&lt;/code&gt; so you can see how the gradient will be applied to whatever color you set for your Emissive. BTW, there's nothing magical or special about the name for the layer. If you chance it to &lt;code&gt;Engine Glow&lt;/code&gt; or &lt;code&gt;Emissive 1&lt;/code&gt; or whatever it will still add to the emissive &lt;code&gt;*_e.png&lt;/code&gt; texture as that is how the Emissive layer was setup when you applied the KSP2 Smart Material.

== Exporting the textures ==

# Press '''Ctrl+Shift+E''' to open the export window.
# Select the &lt;code&gt;Kerbal_Space_program_2_Parts_Paintable&lt;/code&gt; output template.

 Useful links
 Substance 3D Painter tutorial: https://www.youtube.com/watch?v=_j27AS0VQOw
 Free materials: https://substance3d.adobe.com/community-assets/
 Paid materials: https://www.artstation.com/
 Lux's notes on Paint Map: https://luxstice.notion.site/How-to-create-a-paintmap-texture-59c51441f4d048a5803c0b2b108cd041
[[Category:Creating parts]]</text>
      <sha1>azo6qlmeskowgbe1qdynxj1xt6j5lzj</sha1>
    </revision>
    <revision>
      <id>330</id>
      <parentid>219</parentid>
      <timestamp>2024-01-15T02:10:55Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>330</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4974" sha1="bddx6su5xptl52ob03bpz2qwmakp513" xml:space="preserve"> Prerequisites
 [[Configuring Substance Painter]]
 [[Modeling the mesh in Blender]]

== General texturing ==

# Open a new project
## Select 4K textures
## Select the &lt;code&gt;Kerbal_Space_Program_2_Parts_Paintable&lt;/code&gt; template.
## Import the FBX
# Find the &lt;code&gt;KSP2_Part&lt;/code&gt; Smart Material and apply it to the mesh.
# For some reason doing this will bring in some stuff already on the Edges layer that applies to the Heightmap (thus the orange bar under it). You should clear the black mask on Edges to get rid of those. Just right click on the black mask and select Clear Mask.
# You can drop any materials (smart or otherwise) into the Base Material folder inside the KSP2_Part folder. These are what you use for most details, with the exceptions being some things you'll do on Nails, or Edges, or Emissivity. Since applying the KSP2 smart material to the whole thing includes applying a KSP2 Steel material without a mask inside the Base Material folder, everything will start out as a shiny steel. I leave this as the last layer in that stack to catch anything I don't otherwise paint, and put other painting layers above it with masks.
# For paint map, just open up the PaintMap folder and apply whatever strength you need to the black masks for Base and Accent. This works just like painting on any other black mask. Mostly, you'll just apply full strength to indicate (yes, please apply the player's base or accent paint color here). Using anything less would result in the player's attempt to paint the part being diluted. You need to paint Base everywhere you want any color (accent or base), and then also paint Accent where you want the accent paint to be applied. If there is no base paint somewhere, then whatever you paint in Substance Painter will be what the player gets and they can't change it.

 Did you know?
 
 The height channel induces a real deformation of the mesh (works well with a lot of polygons) while the normal channel is a bumb map.
 
 Substance 3D Painter converts Roughness to Glossiness automatically. The export template uses the Glossiness channel.

== Creating gradients ==

# You must bake at some point before this, and your bake must include Position as we'll need that. If you've already baked your model in SP, you don't need to do it again.
# Starting with an Emissive layer (you can have more than one if you need more than one color - just duplicate and customize), paint at full strength (1.0) on the black mask everywhere you want the gradient to be.
# Right Click the black mask and pick the &lt;code&gt;add generator&lt;/code&gt; option.
# Click on the resulting &lt;code&gt;Generator (no generator selected)&lt;/code&gt; button, and pick the second option from the left for &lt;code&gt;3D Linear Gradient&lt;/code&gt;.
# The Image inputs should default to Position, so just switch your display from Material or whatever to Position and orient your part so you can see the point where you want the 0 for the gradient to be like this (the display picker is in the upper right corner of the panel with your 3D view).
# Take the eye dropper from the &lt;code&gt;3D Position End&lt;/code&gt; and click on the place you want the End to be. This assumes that the &lt;code&gt;Start&lt;/code&gt; is already where you want one endpoint of the gradiant to be, as it is in the view above. If you oriented your model so that the &lt;code&gt;End&lt;/code&gt; is already where you want it, then use the other eye dropper and set the start. The objective is that you've got the Position mapped colors pinning down the range across which you want the gradient to go. Don't worry if &lt;code&gt;Start&lt;/code&gt; and &lt;code&gt;End&lt;/code&gt; are reversed from what you want because...
# Set Invert to be &lt;code&gt;True&lt;/code&gt; if the gradient is going the wrong way! (as it is in the example above).
# ''Most Important!'' Set the generator to apply as &lt;code&gt;Multiply&lt;/code&gt; (it will default to &lt;code&gt;Normal&lt;/code&gt;). This is the part where the work done on Step 2 will help you as it will then correctly constrain where the gradient is applied.
# When you're all done, you can set your display to &lt;code&gt;Mask&lt;/code&gt; so you can see how the gradient will be applied to whatever color you set for your Emissive. BTW, there's nothing magical or special about the name for the layer. If you chance it to &lt;code&gt;Engine Glow&lt;/code&gt; or &lt;code&gt;Emissive 1&lt;/code&gt; or whatever it will still add to the emissive &lt;code&gt;*_e.png&lt;/code&gt; texture as that is how the Emissive layer was setup when you applied the KSP2 Smart Material.

== Exporting the textures ==

# Press '''Ctrl+Shift+E''' to open the export window.
# Select the &lt;code&gt;Kerbal_Space_program_2_Parts_Paintable&lt;/code&gt; output template.

 Useful links
 Substance 3D Painter tutorial: https://www.youtube.com/watch?v=_j27AS0VQOw
 Free materials: https://substance3d.adobe.com/community-assets/
 Paid materials: https://www.artstation.com/
 Lux's notes on Paint Map: https://luxstice.notion.site/How-to-create-a-paintmap-texture-59c51441f4d048a5803c0b2b108cd041
[[Category:Parts and modules]]</text>
      <sha1>bddx6su5xptl52ob03bpz2qwmakp513</sha1>
    </revision>
    <revision>
      <id>426</id>
      <parentid>330</parentid>
      <timestamp>2024-02-23T23:50:59Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <origin>426</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8705" sha1="tq9i63txklwzy2vx8jozg3q0fekgwos" xml:space="preserve"> Prerequisites
 [[Configuring Substance Painter]]
 [[Modeling the mesh in Blender]]

== Setup ==

# Create a '''New Project'''.
## Select the &lt;code&gt;Kerbal_Space_Program_2_Parts_Paintable&lt;/code&gt; template.
## Select your part model's '''FBX''' file.
## Choose a '''Document Resolution''', for small parts 2048 should be enough but for anything larger 4096 is recommended.
## Press '''OK''' to create your project.
# Make sure the UV map looks ok in Substance Painter, if you spot any errors, overlapping faces, etc... You need to go back to UV unwrapping in [[Modeling the mesh in Blender]].
# Import any 3rd party resources you might want to use, you can do so by following the steps in [[Configuring Substance Painter]].

== General texturing tips ==

# Find the &lt;code&gt;KSP2_Part&lt;/code&gt; '''Smart Material''' and apply it to the mesh. You can delete the default layer.
# Locate the '''Bake''' button (looks like a croissant) in the upper right of Substance Painter and click it.
## '''Uncheck''' the option to make an '''Opacity Mesh Map'''.
## Click the large blue '''Back Selected Textures''' button.
## When baking is done, click the '''Return to Painting Mode''' button.
# Expand the folder by the &lt;code&gt;KSP2_Part&lt;/code&gt; smart material in the '''Layers''' panel and the &lt;code&gt;Base Material&lt;/code&gt; smart material within.
# Some stuff might already be on the Edges layer that applies to the Heightmap (thus the orange bar under it). You should clear the black mask on Edges to get rid of those. Just right click on the black mask and select Clear Mask.

=== Simple material ===
You can drop any materials (smart or otherwise) into the Base Material folder inside the KSP2_Part folder. These are what you use for most details, with the exceptions being some things you'll do on Nails, or Edges, or Emissivity. Since applying the KSP2 smart material to the whole thing includes applying a KSP2 Steel material without a mask inside the Base Material folder, everything will start out as a shiny steel. Leave this as the last layer in that stack to catch anything not otherwise painted, and put other painting layers above it with masks.
Example ''"white boron nitride ceramic"'':

# Click the Add Fill Layer button (paint can) ''&lt;INSERT GRAPHIC HERE&gt;''.
# Drag the new fill layer onto the Base Material folder.
# In the Propertied panel under Materials, leave only color, roughness, and metal selected.
# In the Properties panel set the base color to what you need (white in this case).
# Set the metallic slider to 1.0.
# Set the roughness slider to 0.3.
# Add a black mask to the fill layer.
# Paint like a pro.

=== Paint map ===
For paint map, just open up the PaintMap folder and apply whatever strength you need to the black masks for Base and Accent.

This works just like painting on any other black mask. Mostly, you'll just apply full strength to indicate (yes, please apply the player's base or accent paint color here). Using anything less would result in the player's attempt to paint the part being diluted. You need to paint Base everywhere you want any color (accent or base), and then also paint Accent where you want the accent paint to be applied.

If there is no base paint somewhere, then whatever you paint in Substance Painter will be what the player gets and they can't change it.
 Did you know?
 
 The height channel induces a real deformation of the mesh (works well with a lot of polygons) while the normal channel is a bumb map.
 
 Substance 3D Painter converts Roughness to Glossiness automatically. The export template uses the Glossiness channel.

=== Creating gradients ===
# You must bake at some point before this, and your bake must include Position as we'll need that. If you've already baked your model in SP, you don't need to do it again.
# Starting with an Emissive layer (you can have more than one if you need more than one color - just duplicate and customize), paint at full strength (1.0) on the black mask everywhere you want the gradient to be.
# Right Click the black mask and pick the &lt;code&gt;add generator&lt;/code&gt; option.
# Click on the resulting &lt;code&gt;Generator (no generator selected)&lt;/code&gt; button, and pick the second option from the left for &lt;code&gt;3D Linear Gradient&lt;/code&gt;.
# The Image inputs should default to Position, so just switch your display from Material or whatever to Position and orient your part so you can see the point where you want the 0 for the gradient to be like this (the display picker is in the upper right corner of the panel with your 3D view).
# Take the eye dropper from the &lt;code&gt;3D Position End&lt;/code&gt; and click on the place you want the End to be. This assumes that the &lt;code&gt;Start&lt;/code&gt; is already where you want one endpoint of the gradiant to be, as it is in the view above. If you oriented your model so that the &lt;code&gt;End&lt;/code&gt; is already where you want it, then use the other eye dropper and set the start. The objective is that you've got the Position mapped colors pinning down the range across which you want the gradient to go. Don't worry if &lt;code&gt;Start&lt;/code&gt; and &lt;code&gt;End&lt;/code&gt; are reversed from what you want because...
# Set Invert to be &lt;code&gt;True&lt;/code&gt; if the gradient is going the wrong way! (as it is in the example above).
# ''Most Important!'' Set the generator to apply as &lt;code&gt;Multiply&lt;/code&gt; (it will default to &lt;code&gt;Normal&lt;/code&gt;). This is the part where the work done on Step 2 will help you as it will then correctly constrain where the gradient is applied.
# When you're all done, you can set your display to &lt;code&gt;Mask&lt;/code&gt; so you can see how the gradient will be applied to whatever color you set for your Emissive. BTW, there's nothing magical or special about the name for the layer. If you chance it to &lt;code&gt;Engine Glow&lt;/code&gt; or &lt;code&gt;Emissive 1&lt;/code&gt; or whatever it will still add to the emissive &lt;code&gt;*_e.png&lt;/code&gt; texture as that is how the Emissive layer was setup when you applied the KSP2 Smart Material.

=== Nails ===
This is where you add various surface details via the height map, and works for painting on nuts, bolts, fasteners, etc. All of these can be added as “alphas” like this:

# Import your alpha(s)!
# In Layers, select the black mask for Nails in the Heightmap.
# Select Radial Symmetry (for applications around radially symmetric parts like I've got here).
# Set your X, Y, Z point about which things will be symmetric, where Y is the vertical. (Switch the Show/Hide Manipulator on to help see where this point is in your model).
# Set Mirror Y, the count you want, and the angular span the radial pattern should follow (360 for all the way around).
# With the brush tool active, select your alpha.
# Move your cursor onto the part and see the red dots where the "Nails" will be placed.
# Adjust the size of the "Nail" using [ and ] to make it smaller or larger respectively.
# Click where you want the first "Nail" to appear, this will place them all.

=== Stickers ===
This is where you add signs, stickers, decals, etc., where the sticker has a uniform color (like a radiation symbol, etc.).

# Import your alpha(s)!
# In Layers, under Base Material, add a fill layer for the sticker.
## Uncheck all material properties for the layer except color, metal, and rough.
## Set the fill color to be what you want the sticker to look like.
## Move the layer to be above any other Base Material layer that impacts the part(s) you’re going to apply stickers to (or it will be overwritten and you won’t see your stickers!)
# Select Radial Symmetry (for applications around radially symmetric parts like I've got here).
# Set your X, Y, Z point about which things will be symmetric, where Y is the vertical. (Switch the Show/Hide Manipulator on to help see where this point is in your model).
# Set Mirror Y, the count you want, and the angular span the radial pattern should follow (360 for all the way around).
# With the brush tool active, select your alpha.
# Move your cursor onto the part and see the red dots where the "Stickers" will be placed.
# Adjust the size of the "Sticker" using [ and ] to make it smaller or larger respectively.
# Click where you want the first "Sticker" to appear, this will place them all.

== Exporting the textures ==

# Press '''Ctrl+Shift+E''' to open the export window.
# Select the &lt;code&gt;Kerbal_Space_program_2_Parts_Paintable&lt;/code&gt; output template.

== Useful links ==

* Substance 3D Painter tutorial: https://www.youtube.com/watch?v=_j27AS0VQOw
* Free materials: https://substance3d.adobe.com/community-assets/
* Paid materials: https://www.artstation.com/
* Lux's notes on Paint Map: https://luxstice.notion.site/How-to-create-a-paintmap-texture-59c51441f4d048a5803c0b2b108cd041
[[Category:Parts and modules]]</text>
      <sha1>tq9i63txklwzy2vx8jozg3q0fekgwos</sha1>
    </revision>
  </page>
  <page>
    <title>Preparing the mesh for Unity</title>
    <ns>0</ns>
    <id>71</id>
    <redirect title="Modeling the mesh in Blender" />
    <revision>
      <id>224</id>
      <timestamp>2023-11-01T10:44:21Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Created page</comment>
      <origin>224</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="759" sha1="5lsm2yenzf4lgvnne9z654cojjaoktw" xml:space="preserve"> Prerequisites
 [[Setting up Unity]]
 [[Modeling the mesh in Blender]]
 [[Texturing the mesh in Substance 3D Painter]]

# In Blender, make sure that the origin of the object is where its center of mass would be.
# Move the object along the vertical axis so that it rests at 0;0.
# Rhe object must be at scale 1 (otherwise the shape will not be preserved in Unity). If not: '''Ctrl+A &gt; Apply Scale'''.
# You might as well apply rotation while you're at it.
# Right click on the object name &gt; '''Select hierarchy'''.
# Click on '''File &gt; Export &gt; FBX'''. Give a specific name to the file (eg: my_mod_engine.fbx).
# Check “Selected objects”.
# Uncheck “Precalculate animation” (“Bake animation”).
# Click on “Export”.

[[Category:Creating parts]]</text>
      <sha1>5lsm2yenzf4lgvnne9z654cojjaoktw</sha1>
    </revision>
    <revision>
      <id>314</id>
      <parentid>224</parentid>
      <timestamp>2024-01-13T14:30:06Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>314</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="772" sha1="74hwepskoa9ofwyq30bvn2ayh0l2j2o" xml:space="preserve"> Prerequisites
 [[Setting up Unity]]
 [[Modeling the mesh in Blender]]
 [[Texturing the mesh in Substance 3D Painter]]

# In Blender, make sure that the origin of the object is where its center of mass would be.
# Move the object along the vertical axis so that it rests at 0;0.
# The object must be at scale 1 (otherwise the shape will not be preserved in Unity). If not: '''Ctrl+A &gt; Apply Scale'''.
# Also '''Apply Rotation''' in order to prevent issues in the game.
# Right click on the object name &gt; '''Select hierarchy'''.
# Click on '''File &gt; Export &gt; FBX'''. Give a specific name to the file (eg: my_mod_engine.fbx).
# Check '''Selected objects'''.
# Uncheck '''Precalculate animation''' (“Bake animation”).
# Click on '''Export'''.

[[Category:Creating parts]]</text>
      <sha1>74hwepskoa9ofwyq30bvn2ayh0l2j2o</sha1>
    </revision>
    <revision>
      <id>329</id>
      <parentid>314</parentid>
      <timestamp>2024-01-15T02:10:32Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>329</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="775" sha1="appat0u1gmmhi9d08yghwumc7jaiyra" xml:space="preserve"> Prerequisites
 [[Setting up Unity]]
 [[Modeling the mesh in Blender]]
 [[Texturing the mesh in Substance 3D Painter]]

# In Blender, make sure that the origin of the object is where its center of mass would be.
# Move the object along the vertical axis so that it rests at 0;0.
# The object must be at scale 1 (otherwise the shape will not be preserved in Unity). If not: '''Ctrl+A &gt; Apply Scale'''.
# Also '''Apply Rotation''' in order to prevent issues in the game.
# Right click on the object name &gt; '''Select hierarchy'''.
# Click on '''File &gt; Export &gt; FBX'''. Give a specific name to the file (eg: my_mod_engine.fbx).
# Check '''Selected objects'''.
# Uncheck '''Precalculate animation''' (“Bake animation”).
# Click on '''Export'''.

[[Category:Parts and modules]]</text>
      <sha1>appat0u1gmmhi9d08yghwumc7jaiyra</sha1>
    </revision>
    <revision>
      <id>423</id>
      <parentid>329</parentid>
      <timestamp>2024-02-23T23:29:16Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <origin>423</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="705" sha1="0cs79uuizllvltvi2017mcrihll2rdu" xml:space="preserve"> Prerequisites
 [[Modeling the mesh in Blender]]

# In Blender, make sure that the origin of the object is where its center of mass would be.
# Move the object along the vertical axis so that it rests at 0;0.
# The object must be at scale 1 (otherwise the shape will not be preserved in Unity). If not: '''Ctrl+A &gt; Apply Scale'''.
# Also '''Apply Rotation''' in order to prevent issues in the game.
# Right click on the object name &gt; '''Select hierarchy'''.
# Click on '''File &gt; Export &gt; FBX'''. Give a specific name to the file (eg: my_mod_engine.fbx).
# Check '''Selected objects'''.
# Uncheck '''Precalculate animation''' (“Bake animation”).
# Click on '''Export'''.

[[Category:Parts and modules]]</text>
      <sha1>0cs79uuizllvltvi2017mcrihll2rdu</sha1>
    </revision>
    <revision>
      <id>436</id>
      <parentid>423</parentid>
      <timestamp>2024-02-24T11:23:51Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Redirected page to [[Modeling the mesh in Blender]]</comment>
      <origin>436</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="42" sha1="km37v043txn6aa0wt3d87ifnmrteh15" xml:space="preserve">#REDIRECT [[Modeling the mesh in Blender]]</text>
      <sha1>km37v043txn6aa0wt3d87ifnmrteh15</sha1>
    </revision>
  </page>
  <page>
    <title>Configuring a decoupler</title>
    <ns>0</ns>
    <id>72</id>
    <revision>
      <id>227</id>
      <timestamp>2023-11-01T11:03:31Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Created page</comment>
      <origin>227</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="903" sha1="9qhhbl7vs421qz2xyx1pzm3zutxxjr5" xml:space="preserve"># Click on '''Add Component &gt; Module_Decouple'''.
# Fill in the fields.

{| class="wikitable"
! colspan="1" rowspan="1" |'''Field'''
! colspan="1" rowspan="1" |'''Value/Comment'''
|-
| colspan="2" rowspan="1" |'''Core Part Data'''
|-
| colspan="1" rowspan="1" |Stage Type
| colspan="1" rowspan="1" |Decoupler Horizontal

Decoupler Vertical
|-
| colspan="1" rowspan="1" |Staging Icon Asset Address
| colspan="1" rowspan="1" |“Staging-Icon-Inline.png”
|-
| colspan="1" rowspan="1" |Tags
| colspan="1" rowspan="1" |Ex : “break decouple separat split stag”
|-
| colspan="2" rowspan="1" |'''Module_Decouple'''
|-
| colspan="1" rowspan="1" |Explosive Node ID
| colspan="1" rowspan="1" |“top” or “bottom”
|-
| colspan="1" rowspan="1" |Explosive Dir
| colspan="1" rowspan="1" |0;-1;0 so that the decoupler goes downwards

0;1;0 so that the decoupler goes upwards
|}


[[Category:Creating parts]]</text>
      <sha1>9qhhbl7vs421qz2xyx1pzm3zutxxjr5</sha1>
    </revision>
    <revision>
      <id>229</id>
      <parentid>227</parentid>
      <timestamp>2023-11-01T11:05:07Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added prerequisites</comment>
      <origin>229</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="950" sha1="7uoyn5g88e4jrcgxs8b3nu8u955w2ey" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]
# Click on '''Add Component &gt; Module_Decouple'''.
# Fill in the fields.

{| class="wikitable"
! colspan="1" rowspan="1" |'''Field'''
! colspan="1" rowspan="1" |'''Value/Comment'''
|-
| colspan="2" rowspan="1" |'''Core Part Data'''
|-
| colspan="1" rowspan="1" |Stage Type
| colspan="1" rowspan="1" |Decoupler Horizontal

Decoupler Vertical
|-
| colspan="1" rowspan="1" |Staging Icon Asset Address
| colspan="1" rowspan="1" |“Staging-Icon-Inline.png”
|-
| colspan="1" rowspan="1" |Tags
| colspan="1" rowspan="1" |Ex : “break decouple separat split stag”
|-
| colspan="2" rowspan="1" |'''Module_Decouple'''
|-
| colspan="1" rowspan="1" |Explosive Node ID
| colspan="1" rowspan="1" |“top” or “bottom”
|-
| colspan="1" rowspan="1" |Explosive Dir
| colspan="1" rowspan="1" |0;-1;0 so that the decoupler goes downwards

0;1;0 so that the decoupler goes upwards
|}


[[Category:Creating parts]]</text>
      <sha1>7uoyn5g88e4jrcgxs8b3nu8u955w2ey</sha1>
    </revision>
    <revision>
      <id>320</id>
      <parentid>229</parentid>
      <timestamp>2024-01-15T02:08:23Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>320</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="953" sha1="3c6jtdomvxb7ipufmvnwudryu9cxnx8" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]
# Click on '''Add Component &gt; Module_Decouple'''.
# Fill in the fields.

{| class="wikitable"
! colspan="1" rowspan="1" |'''Field'''
! colspan="1" rowspan="1" |'''Value/Comment'''
|-
| colspan="2" rowspan="1" |'''Core Part Data'''
|-
| colspan="1" rowspan="1" |Stage Type
| colspan="1" rowspan="1" |Decoupler Horizontal

Decoupler Vertical
|-
| colspan="1" rowspan="1" |Staging Icon Asset Address
| colspan="1" rowspan="1" |“Staging-Icon-Inline.png”
|-
| colspan="1" rowspan="1" |Tags
| colspan="1" rowspan="1" |Ex : “break decouple separat split stag”
|-
| colspan="2" rowspan="1" |'''Module_Decouple'''
|-
| colspan="1" rowspan="1" |Explosive Node ID
| colspan="1" rowspan="1" |“top” or “bottom”
|-
| colspan="1" rowspan="1" |Explosive Dir
| colspan="1" rowspan="1" |0;-1;0 so that the decoupler goes downwards

0;1;0 so that the decoupler goes upwards
|}


[[Category:Parts and modules]]</text>
      <sha1>3c6jtdomvxb7ipufmvnwudryu9cxnx8</sha1>
    </revision>
  </page>
  <page>
    <title>Configuring an Electric Charge Generator</title>
    <ns>0</ns>
    <id>73</id>
    <revision>
      <id>230</id>
      <timestamp>2023-11-02T21:55:55Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Created page</comment>
      <origin>230</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="522" sha1="6f44cd7r2rb130h7av9s88h3y6rmuik" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Generator'''.
# Fill in the fields.

{| class="wikitable"
! colspan="1" rowspan="1" |'''Field'''
! colspan="1" rowspan="1" |'''Value/Comment'''
|-
| colspan="2" rowspan="1" |'''Core Part Data'''
|-
| colspan="1" rowspan="1" |Rate
| colspan="1" rowspan="1" |Ex: 5.5
|-
| colspan="1" rowspan="1" |Resource
| colspan="1" rowspan="1" |"Electric Charge"
|-
| colspan="1" rowspan="1" |Acceptance Threshold
| colspan="1" rowspan="1" |Ex: 5.5
|}</text>
      <sha1>6f44cd7r2rb130h7av9s88h3y6rmuik</sha1>
    </revision>
    <revision>
      <id>237</id>
      <parentid>230</parentid>
      <timestamp>2023-11-02T22:06:43Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added category</comment>
      <origin>237</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="550" sha1="cvwhn94265q0pal1k0iptt6q54yu7yy" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Generator'''.
# Fill in the fields.

{| class="wikitable"
! colspan="1" rowspan="1" |'''Field'''
! colspan="1" rowspan="1" |'''Value/Comment'''
|-
| colspan="2" rowspan="1" |'''Core Part Data'''
|-
| colspan="1" rowspan="1" |Rate
| colspan="1" rowspan="1" |Ex: 5.5
|-
| colspan="1" rowspan="1" |Resource
| colspan="1" rowspan="1" |"Electric Charge"
|-
| colspan="1" rowspan="1" |Acceptance Threshold
| colspan="1" rowspan="1" |Ex: 5.5
|}
[[Category:Creating parts]]</text>
      <sha1>cvwhn94265q0pal1k0iptt6q54yu7yy</sha1>
    </revision>
    <revision>
      <id>323</id>
      <parentid>237</parentid>
      <timestamp>2024-01-15T02:09:08Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>323</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="553" sha1="1p7oeve7au6l0rsdep031j8lrz4v5o9" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Generator'''.
# Fill in the fields.

{| class="wikitable"
! colspan="1" rowspan="1" |'''Field'''
! colspan="1" rowspan="1" |'''Value/Comment'''
|-
| colspan="2" rowspan="1" |'''Core Part Data'''
|-
| colspan="1" rowspan="1" |Rate
| colspan="1" rowspan="1" |Ex: 5.5
|-
| colspan="1" rowspan="1" |Resource
| colspan="1" rowspan="1" |"Electric Charge"
|-
| colspan="1" rowspan="1" |Acceptance Threshold
| colspan="1" rowspan="1" |Ex: 5.5
|}
[[Category:Parts and modules]]</text>
      <sha1>1p7oeve7au6l0rsdep031j8lrz4v5o9</sha1>
    </revision>
  </page>
  <page>
    <title>Configuring a command part</title>
    <ns>0</ns>
    <id>74</id>
    <revision>
      <id>231</id>
      <timestamp>2023-11-02T22:00:17Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Created page</comment>
      <origin>231</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="689" sha1="e8qrrmonezrghp65imtf0ur257odeyv" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Command'''.
# Fill in the fields.

{| class="wikitable"
! colspan="1" rowspan="1" |'''Field'''
! colspan="1" rowspan="1" |'''Value/Comment'''
|-
| colspan="2" rowspan="1" |'''Module_Command'''
|-
| colspan="1" rowspan="1" |Minimum Crew
| colspan="1" rowspan="1" |1 for pods
0 for probes
|-
| colspan="1" rowspan="1" |Has Hibernation
| colspan="1" rowspan="1" |False for pods
True for probes
|-
| colspan="1" rowspan="1" |Requires Comm Net
| colspan="1" rowspan="1" |False for pods
True for probes
|-
| rowspan="1" |Alternate Control Orientations
|Id : "Reversed"
Orientation : 0;0;180
Position : 0;0;0
|}</text>
      <sha1>e8qrrmonezrghp65imtf0ur257odeyv</sha1>
    </revision>
    <revision>
      <id>232</id>
      <parentid>231</parentid>
      <timestamp>2023-11-02T22:01:00Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Fix</comment>
      <origin>232</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="687" sha1="h75fzdv9wh88zkgfhhn5a2vuznvfiog" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Command'''.
# Fill in the fields.

{| class="wikitable"
! colspan="1" rowspan="1" |'''Field'''
! colspan="1" rowspan="1" |'''Value/Comment'''
|-
| colspan="2" rowspan="1" |'''Module_Command'''
|-
| colspan="1" rowspan="1" |Minimum Crew
| colspan="1" rowspan="1" |1 for pods
0 for probes
|-
| colspan="1" rowspan="1" |Has Hibernation
| colspan="1" rowspan="1" |False for pods
True for probes
|-
| colspan="1" rowspan="1" |Requires Comm Net
| colspan="1" rowspan="1" |False for pods
True for probes
|-
| rowspan="1" |Alternate Control Orientations
|Id: "Reversed"
Orientation: 0;0;180

Position: 0;0;0
|}</text>
      <sha1>h75fzdv9wh88zkgfhhn5a2vuznvfiog</sha1>
    </revision>
    <revision>
      <id>233</id>
      <parentid>232</parentid>
      <timestamp>2023-11-02T22:01:18Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <minor/>
      <comment>Fix</comment>
      <origin>233</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="686" sha1="j753hp3knq9o364okrhpa0pp08k9ixt" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Command'''.
# Fill in the fields.

{| class="wikitable"
! colspan="1" rowspan="1" |'''Field'''
! colspan="1" rowspan="1" |'''Value/Comment'''
|-
| colspan="2" rowspan="1" |'''Module_Command'''
|-
| colspan="1" rowspan="1" |Minimum Crew
| colspan="1" rowspan="1" |1 for pods
0 for probes
|-
| colspan="1" rowspan="1" |Has Hibernation
| colspan="1" rowspan="1" |False for pods
True for probes
|-
| colspan="1" rowspan="1" |Requires Comm Net
| colspan="1" rowspan="1" |False for pods
True for probes
|-
| rowspan="1" |Alternate Control Orientations
|Id: "Reversed"
Orientation: 0;0;180
Position: 0;0;0
|}</text>
      <sha1>j753hp3knq9o364okrhpa0pp08k9ixt</sha1>
    </revision>
    <revision>
      <id>234</id>
      <parentid>233</parentid>
      <timestamp>2023-11-02T22:01:36Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Fix</comment>
      <origin>234</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="691" sha1="t39mdrluybx7p7kb7t4can86o0jcabn" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Command'''.
# Fill in the fields.

{| class="wikitable"
! colspan="1" rowspan="1" |'''Field'''
! colspan="1" rowspan="1" |'''Value/Comment'''
|-
| colspan="2" rowspan="1" |'''Module_Command'''
|-
| colspan="1" rowspan="1" |Minimum Crew
| colspan="1" rowspan="1" |1 for pods
0 for probes
|-
| colspan="1" rowspan="1" |Has Hibernation
| colspan="1" rowspan="1" |False for pods
True for probes
|-
| colspan="1" rowspan="1" |Requires Comm Net
| colspan="1" rowspan="1" |False for pods
True for probes
|-
| rowspan="1" |Alternate Control Orientations
|Id: "Reversed"  
Orientation: 0;0;180  

Position: 0;0;0
|}</text>
      <sha1>t39mdrluybx7p7kb7t4can86o0jcabn</sha1>
    </revision>
    <revision>
      <id>238</id>
      <parentid>234</parentid>
      <timestamp>2023-11-02T22:06:59Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added category</comment>
      <origin>238</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="719" sha1="tt11va669m83jnxnuzqzdids0smyy1o" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Command'''.
# Fill in the fields.

{| class="wikitable"
! colspan="1" rowspan="1" |'''Field'''
! colspan="1" rowspan="1" |'''Value/Comment'''
|-
| colspan="2" rowspan="1" |'''Module_Command'''
|-
| colspan="1" rowspan="1" |Minimum Crew
| colspan="1" rowspan="1" |1 for pods
0 for probes
|-
| colspan="1" rowspan="1" |Has Hibernation
| colspan="1" rowspan="1" |False for pods
True for probes
|-
| colspan="1" rowspan="1" |Requires Comm Net
| colspan="1" rowspan="1" |False for pods
True for probes
|-
| rowspan="1" |Alternate Control Orientations
|Id: "Reversed"  
Orientation: 0;0;180  

Position: 0;0;0
|}
[[Category:Creating parts]]</text>
      <sha1>tt11va669m83jnxnuzqzdids0smyy1o</sha1>
    </revision>
    <revision>
      <id>319</id>
      <parentid>238</parentid>
      <timestamp>2024-01-15T02:08:14Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>319</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="722" sha1="8gblq7a3q76p63pazosx311gnrdahmp" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Command'''.
# Fill in the fields.

{| class="wikitable"
! colspan="1" rowspan="1" |'''Field'''
! colspan="1" rowspan="1" |'''Value/Comment'''
|-
| colspan="2" rowspan="1" |'''Module_Command'''
|-
| colspan="1" rowspan="1" |Minimum Crew
| colspan="1" rowspan="1" |1 for pods
0 for probes
|-
| colspan="1" rowspan="1" |Has Hibernation
| colspan="1" rowspan="1" |False for pods
True for probes
|-
| colspan="1" rowspan="1" |Requires Comm Net
| colspan="1" rowspan="1" |False for pods
True for probes
|-
| rowspan="1" |Alternate Control Orientations
|Id: "Reversed"  
Orientation: 0;0;180  

Position: 0;0;0
|}
[[Category:Parts and modules]]</text>
      <sha1>8gblq7a3q76p63pazosx311gnrdahmp</sha1>
    </revision>
  </page>
  <page>
    <title>Configuring a Reaction Wheel part</title>
    <ns>0</ns>
    <id>75</id>
    <revision>
      <id>235</id>
      <timestamp>2023-11-02T22:05:12Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Created page</comment>
      <origin>235</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="738" sha1="9opc3pmap4qk1v3f8rfkf1w3o2xjua0" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_ReactionWheel'''.
# Fill in the fields.

{| class="wikitable"
! colspan="1" rowspan="1" |'''Field'''
! colspan="1" rowspan="1" |'''Value/Comment'''
|-
| colspan="2" rowspan="1" |'''Module_ReactionWheel'''
|-
| colspan="1" rowspan="1" |Pitch Torque
| colspan="1" rowspan="1" |Ex: 5
|-
| colspan="1" rowspan="1" |Yaw Torque
| colspan="1" rowspan="1" |Ex: 5
|-
| colspan="1" rowspan="1" |Roll Torque
| colspan="1" rowspan="1" |Ex: 5
|-
| rowspan="1" |Torque Response Speed
|Ex: 30
|-
| colspan="1" rowspan="1" |RequiredResources
| colspan="1" rowspan="1" |Rate: 0.025
ResourceName: "ElectricCharge"

AcceptanceThreshold: 0.01
|}
[[Category:Creating parts]]</text>
      <sha1>9opc3pmap4qk1v3f8rfkf1w3o2xjua0</sha1>
    </revision>
    <revision>
      <id>318</id>
      <parentid>235</parentid>
      <timestamp>2024-01-15T02:08:07Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>318</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="741" sha1="oo4wzo9893fitqetv4sv0x6eugyhvhu" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_ReactionWheel'''.
# Fill in the fields.

{| class="wikitable"
! colspan="1" rowspan="1" |'''Field'''
! colspan="1" rowspan="1" |'''Value/Comment'''
|-
| colspan="2" rowspan="1" |'''Module_ReactionWheel'''
|-
| colspan="1" rowspan="1" |Pitch Torque
| colspan="1" rowspan="1" |Ex: 5
|-
| colspan="1" rowspan="1" |Yaw Torque
| colspan="1" rowspan="1" |Ex: 5
|-
| colspan="1" rowspan="1" |Roll Torque
| colspan="1" rowspan="1" |Ex: 5
|-
| rowspan="1" |Torque Response Speed
|Ex: 30
|-
| colspan="1" rowspan="1" |RequiredResources
| colspan="1" rowspan="1" |Rate: 0.025
ResourceName: "ElectricCharge"

AcceptanceThreshold: 0.01
|}
[[Category:Parts and modules]]</text>
      <sha1>oo4wzo9893fitqetv4sv0x6eugyhvhu</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Developing basics</title>
    <ns>14</ns>
    <id>77</id>
    <revision>
      <id>242</id>
      <timestamp>2023-11-06T20:37:07Z</timestamp>
      <contributor>
        <username>Polo</username>
        <id>15</id>
      </contributor>
      <comment>Added category</comment>
      <origin>242</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="22" sha1="jt4mo6t18f2g3ya2mtbqtvf0rbsqqi9" xml:space="preserve">[[Category:Tutorials]]</text>
      <sha1>jt4mo6t18f2g3ya2mtbqtvf0rbsqqi9</sha1>
    </revision>
    <revision>
      <id>244</id>
      <parentid>242</parentid>
      <timestamp>2023-11-06T20:47:05Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <minor/>
      <comment>Munix moved page [[Category:Developping basics]] to [[Category:Developing basics]] without leaving a redirect: Misspelled title: Typo: DevelopPing</comment>
      <origin>242</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="22" sha1="jt4mo6t18f2g3ya2mtbqtvf0rbsqqi9" xml:space="preserve">[[Category:Tutorials]]</text>
      <sha1>jt4mo6t18f2g3ya2mtbqtvf0rbsqqi9</sha1>
    </revision>
  </page>
  <page>
    <title>Configuring a docking port</title>
    <ns>0</ns>
    <id>78</id>
    <revision>
      <id>249</id>
      <timestamp>2023-11-20T23:37:20Z</timestamp>
      <contributor>
        <username>Coldrifting</username>
        <id>16</id>
      </contributor>
      <comment>Added module docking port details</comment>
      <origin>249</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2695" sha1="n7yypt82a725v4n1mxnswd4zfhvp3cc" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Docking Node'''.
# Fill in the fields.

{| class="wikitable"
|+
!Field
!Value/Comment
|-
| colspan="2" |'''Module_Docking Node'''
|-
|Docking Transform Name
|The name of your game object that defines where the docking port should attach to other docking ports.
Remember that foward in Unity is along the blue axis, so point the game object (usually a Empty object) along that direction
|-
|Control Transform Name
|The direction to change to when clicking on Control from Here in the Parts action menu in game. 
Again, point the blue axis in the direction you want
|-
|Attachment Node id
|The node to connect to when docking (I think)
|-
|'''Node Types'''
|Any array of node sizes that determines which types of docking ports yours can dock to. 
For example, size0 is stock 0.625m diameter docking ports, size1 is 1.25m, and so on.
Since this is an array, you can list multiple different types that the port can dock to
|-
|Undock Ejection Force
|How much force to use when undocking. The default 10 is probably too much for smaller ports.
The stock 1.25m port uses a value of 0.4
|-
|Min Distance To Reengage
|How far away the ship should get before the docking port will dock again
|-
|Acquire Range
|How close the docking port needs to get to 
|-
|Acquire Torque
|How much torque the docking port can apply to align the connection in the non-roll axis?
|-
|Acquire TorqueRoll
|How much torque the docking port can apply to align the connection in the roll axis?
|-
|Capture Range
|How far away the two docking ports need to be before they will lock together
|-
|Capture Min Fwd 
|This value determines how much of a difference there can be in the dot product of the two docking transforms 
of both docking ports that are currently attempting to dock.
|-
|Capture Min Roll Dot
|Not sure
|-
|Capture Max Rvel
|Not sure
|-
|fx Dock Prefab Name
|The effect to use when docking
|-
|fx Undock Prefab Name
|The effect to use when undocking
|-
|Is Gendered
|Se to true to make this docking port gendered, which means that you need a male and female port to dock.
This could be useful for recreating soviet style drogue and probe docking ports, for example
|-
|Is Gender Female
|If using gendered docking ports, marking this true creates a female docking port
|-
|Snap Rotation
|Set to true if the docking port should snap to angles
|-
|Snap Offset
|The angle to snap to when using Snap Rotation
|-
|Current State
|The default state of the port. You probably want to leave this at Ready
|-
|Is Deployable Docking Port
|Set to true if this is a deployable docking port, like the stock MK1/2 deployable docking ports
|}</text>
      <sha1>n7yypt82a725v4n1mxnswd4zfhvp3cc</sha1>
    </revision>
    <revision>
      <id>251</id>
      <parentid>249</parentid>
      <timestamp>2023-11-20T23:40:54Z</timestamp>
      <contributor>
        <username>Cheese</username>
        <id>7</id>
      </contributor>
      <comment>Mention custom docking port sizes</comment>
      <origin>251</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2808" sha1="fhbpwntrx8yrtubjjwudu60vhypunq1" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Docking Node'''.
# Fill in the fields.

{| class="wikitable"
|+
!Field
!Value/Comment
|-
| colspan="2" |'''Module_Docking Node'''
|-
|Docking Transform Name
|The name of your game object that defines where the docking port should attach to other docking ports.
Remember that foward in Unity is along the blue axis, so point the game object (usually a Empty object) along that direction
|-
|Control Transform Name
|The direction to change to when clicking on Control from Here in the Parts action menu in game. 
Again, point the blue axis in the direction you want
|-
|Attachment Node id
|The node to connect to when docking (I think)
|-
|'''Node Types'''
|Any array of node sizes that determines which types of docking ports yours can dock to. 
For example, size0 is stock 0.625m diameter docking ports, size1 is 1.25m, and so on.

Since this is an array, you can list multiple different types that the port can dock to.

You can also use this to create custom docking port sizes, since it is an array of strings rather than enums.
|-
|Undock Ejection Force
|How much force to use when undocking. The default 10 is probably too much for smaller ports.
The stock 1.25m port uses a value of 0.4
|-
|Min Distance To Reengage
|How far away the ship should get before the docking port will dock again
|-
|Acquire Range
|How close the docking port needs to get to 
|-
|Acquire Torque
|How much torque the docking port can apply to align the connection in the non-roll axis?
|-
|Acquire TorqueRoll
|How much torque the docking port can apply to align the connection in the roll axis?
|-
|Capture Range
|How far away the two docking ports need to be before they will lock together
|-
|Capture Min Fwd 
|This value determines how much of a difference there can be in the dot product of the two docking transforms 
of both docking ports that are currently attempting to dock.
|-
|Capture Min Roll Dot
|Not sure
|-
|Capture Max Rvel
|Not sure
|-
|fx Dock Prefab Name
|The effect to use when docking
|-
|fx Undock Prefab Name
|The effect to use when undocking
|-
|Is Gendered
|Se to true to make this docking port gendered, which means that you need a male and female port to dock.
This could be useful for recreating soviet style drogue and probe docking ports, for example
|-
|Is Gender Female
|If using gendered docking ports, marking this true creates a female docking port
|-
|Snap Rotation
|Set to true if the docking port should snap to angles
|-
|Snap Offset
|The angle to snap to when using Snap Rotation
|-
|Current State
|The default state of the port. You probably want to leave this at Ready
|-
|Is Deployable Docking Port
|Set to true if this is a deployable docking port, like the stock MK1/2 deployable docking ports
|}</text>
      <sha1>fhbpwntrx8yrtubjjwudu60vhypunq1</sha1>
    </revision>
    <revision>
      <id>252</id>
      <parentid>251</parentid>
      <timestamp>2023-11-20T23:41:36Z</timestamp>
      <contributor>
        <username>Coldrifting</username>
        <id>16</id>
      </contributor>
      <minor/>
      <origin>252</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2861" sha1="kgqxx4fps5jaerqf9sp5vvohow9gobx" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Docking Node'''.
# Fill in the fields.

{| class="wikitable"
|+
!Field
!Value/Comment
|-
| colspan="2" |'''Module_Docking Node'''
|-
|Docking Transform Name
|The name of your game object that defines where the docking port should attach to other docking ports.
Remember that foward in Unity is along the blue axis, so point the game object (usually a Empty object) along that direction
|-
|Control Transform Name
|The direction to change to when clicking on Control from Here in the Parts action menu in game. 
Again, point the blue axis in the direction you want
|-
|Attachment Node id
|The node to connect to when docking (I think)
|-
|'''Node Types'''
|Any array of node sizes that determines which types of docking ports yours can dock to. 
For example, size0 is stock 0.625m diameter docking ports, size1 is 1.25m, and so on.

Since this is an array, you can list multiple different types that the port can dock to.

You can also use this to create custom docking port sizes, since it is an array of strings rather than enums.
|-
|Undock Ejection Force
|How much force to use when undocking. The default 10 is probably too much for smaller ports.
The stock 1.25m port uses a value of 0.4
|-
|Min Distance To Reengage
|How far away the ship should get before the docking port will dock again
|-
|Acquire Range
|How close the docking port needs to get to the other port before they will magnetically attract 
|-
|Acquire Torque
|How much torque the docking port can apply to align the connection in the non-roll axis?
|-
|Acquire TorqueRoll
|How much torque the docking port can apply to align the connection in the roll axis?
|-
|Capture Range
|How far away the two docking ports need to be before they will lock together
|-
|Capture Min Fwd 
|This value determines how much of a difference there can be in the dot product of the two docking transforms 
of both docking ports that are currently attempting to dock.
|-
|Capture Min Roll Dot
|Not sure
|-
|Capture Max Rvel
|Not sure
|-
|fx Dock Prefab Name
|The effect to use when docking
|-
|fx Undock Prefab Name
|The effect to use when undocking
|-
|Is Gendered
|Se to true to make this docking port gendered, which means that you need a male and female port to dock.
This could be useful for recreating soviet style drogue and probe docking ports, for example
|-
|Is Gender Female
|If using gendered docking ports, marking this true creates a female docking port
|-
|Snap Rotation
|Set to true if the docking port should snap to angles
|-
|Snap Offset
|The angle to snap to when using Snap Rotation
|-
|Current State
|The default state of the port. You probably want to leave this at Ready
|-
|Is Deployable Docking Port
|Set to true if this is a deployable docking port, like the stock MK1/2 deployable docking ports
|}</text>
      <sha1>kgqxx4fps5jaerqf9sp5vvohow9gobx</sha1>
    </revision>
    <revision>
      <id>253</id>
      <parentid>252</parentid>
      <timestamp>2023-11-20T23:41:40Z</timestamp>
      <contributor>
        <username>Cheese</username>
        <id>7</id>
      </contributor>
      <comment>Add category</comment>
      <origin>253</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2958" sha1="rzvkh6rm5fvasuhoa6pp7aufktnzrsy" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Docking Node'''.
# Fill in the fields.

{| class="wikitable"
|+
!Field
!Value/Comment
|-
| colspan="2" |'''Module_Docking Node'''
|-
|Docking Transform Name
|The name of your game object that defines where the docking port should attach to other docking ports.
Remember that foward in Unity is along the blue axis, so point the game object (usually a Empty object) along that direction
|-
|Control Transform Name
|The direction to change to when clicking on Control from Here in the Parts action menu in game. 
Again, point the blue axis in the direction you want
|-
|Attachment Node id
|The node to connect to when docking (I think)
|-
|'''Node Types'''
|Any array of node sizes that determines which types of docking ports yours can dock to. 
For example, size0 is stock 0.625m diameter docking ports, size1 is 1.25m, and so on.

Since this is an array, you can list multiple different types that the port can dock to.

You can also use this to create custom docking port sizes, since it is an array of strings rather than enums.
|-
|Undock Ejection Force
|How much force to use when undocking. The default 10 is probably too much for smaller ports.
The stock 1.25m port uses a value of 0.4
|-
|Min Distance To Reengage
|How far away the ship should get before the docking port will dock again
|-
|Acquire Range
|How close the docking port needs to get to the other port before they will magnetically attract 
|-
|Acquire Torque
|How much torque the docking port can apply to align the connection in the non-roll axis?
|-
|Acquire TorqueRoll
|How much torque the docking port can apply to align the connection in the roll axis?
|-
|Capture Range
|How far away the two docking ports need to be before they will lock together
|-
|Capture Min Fwd 
|This value determines how much of a difference there can be in the dot product of the two docking transforms 
of both docking ports that are currently attempting to dock.
|-
|Capture Min Roll Dot
|Not sure
|-
|Capture Max Rvel
|Not sure
|-
|fx Dock Prefab Name
|The effect to use when docking
|-
|fx Undock Prefab Name
|The effect to use when undocking
|-
|Is Gendered
|Se to true to make this docking port gendered, which means that you need a male and female port to dock.
This could be useful for recreating soviet style drogue and probe docking ports, for example
|-
|Is Gender Female
|If using gendered docking ports, marking this true creates a female docking port
|-
|Snap Rotation
|Set to true if the docking port should snap to angles
|-
|Snap Offset
|The angle to snap to when using Snap Rotation
|-
|Current State
|The default state of the port. You probably want to leave this at Ready
|-
|Is Deployable Docking Port
|Set to true if this is a deployable docking port, like the stock MK1/2 deployable docking ports
|}

[[Category:Creating parts|&lt;nowiki&gt;[[Category:Tutorials]]&lt;/nowiki&gt;]]
[[Category:Creating parts]]</text>
      <sha1>rzvkh6rm5fvasuhoa6pp7aufktnzrsy</sha1>
    </revision>
    <revision>
      <id>321</id>
      <parentid>253</parentid>
      <timestamp>2024-01-15T02:08:49Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>321</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2961" sha1="jkafdhfhxpxsyvlex27fxda3z4v49hv" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Docking Node'''.
# Fill in the fields.

{| class="wikitable"
|+
!Field
!Value/Comment
|-
| colspan="2" |'''Module_Docking Node'''
|-
|Docking Transform Name
|The name of your game object that defines where the docking port should attach to other docking ports.
Remember that foward in Unity is along the blue axis, so point the game object (usually a Empty object) along that direction
|-
|Control Transform Name
|The direction to change to when clicking on Control from Here in the Parts action menu in game. 
Again, point the blue axis in the direction you want
|-
|Attachment Node id
|The node to connect to when docking (I think)
|-
|'''Node Types'''
|Any array of node sizes that determines which types of docking ports yours can dock to. 
For example, size0 is stock 0.625m diameter docking ports, size1 is 1.25m, and so on.

Since this is an array, you can list multiple different types that the port can dock to.

You can also use this to create custom docking port sizes, since it is an array of strings rather than enums.
|-
|Undock Ejection Force
|How much force to use when undocking. The default 10 is probably too much for smaller ports.
The stock 1.25m port uses a value of 0.4
|-
|Min Distance To Reengage
|How far away the ship should get before the docking port will dock again
|-
|Acquire Range
|How close the docking port needs to get to the other port before they will magnetically attract 
|-
|Acquire Torque
|How much torque the docking port can apply to align the connection in the non-roll axis?
|-
|Acquire TorqueRoll
|How much torque the docking port can apply to align the connection in the roll axis?
|-
|Capture Range
|How far away the two docking ports need to be before they will lock together
|-
|Capture Min Fwd 
|This value determines how much of a difference there can be in the dot product of the two docking transforms 
of both docking ports that are currently attempting to dock.
|-
|Capture Min Roll Dot
|Not sure
|-
|Capture Max Rvel
|Not sure
|-
|fx Dock Prefab Name
|The effect to use when docking
|-
|fx Undock Prefab Name
|The effect to use when undocking
|-
|Is Gendered
|Se to true to make this docking port gendered, which means that you need a male and female port to dock.
This could be useful for recreating soviet style drogue and probe docking ports, for example
|-
|Is Gender Female
|If using gendered docking ports, marking this true creates a female docking port
|-
|Snap Rotation
|Set to true if the docking port should snap to angles
|-
|Snap Offset
|The angle to snap to when using Snap Rotation
|-
|Current State
|The default state of the port. You probably want to leave this at Ready
|-
|Is Deployable Docking Port
|Set to true if this is a deployable docking port, like the stock MK1/2 deployable docking ports
|}

[[Category:Creating parts|&lt;nowiki&gt;[[Category:Tutorials]]&lt;/nowiki&gt;]]
[[Category:Parts and modules]]</text>
      <sha1>jkafdhfhxpxsyvlex27fxda3z4v49hv</sha1>
    </revision>
    <revision>
      <id>322</id>
      <parentid>321</parentid>
      <timestamp>2024-01-15T02:09:02Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>322</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2893" sha1="6etvohpa1it8ciae3h473x8gbouhwm2" xml:space="preserve"> '''Prerequisites'''
 [[Configuring the mesh]]

# Click on '''Add Component &gt; Module_Docking Node'''.
# Fill in the fields.

{| class="wikitable"
|+
!Field
!Value/Comment
|-
| colspan="2" |'''Module_Docking Node'''
|-
|Docking Transform Name
|The name of your game object that defines where the docking port should attach to other docking ports.
Remember that foward in Unity is along the blue axis, so point the game object (usually a Empty object) along that direction
|-
|Control Transform Name
|The direction to change to when clicking on Control from Here in the Parts action menu in game. 
Again, point the blue axis in the direction you want
|-
|Attachment Node id
|The node to connect to when docking (I think)
|-
|'''Node Types'''
|Any array of node sizes that determines which types of docking ports yours can dock to. 
For example, size0 is stock 0.625m diameter docking ports, size1 is 1.25m, and so on.

Since this is an array, you can list multiple different types that the port can dock to.

You can also use this to create custom docking port sizes, since it is an array of strings rather than enums.
|-
|Undock Ejection Force
|How much force to use when undocking. The default 10 is probably too much for smaller ports.
The stock 1.25m port uses a value of 0.4
|-
|Min Distance To Reengage
|How far away the ship should get before the docking port will dock again
|-
|Acquire Range
|How close the docking port needs to get to the other port before they will magnetically attract 
|-
|Acquire Torque
|How much torque the docking port can apply to align the connection in the non-roll axis?
|-
|Acquire TorqueRoll
|How much torque the docking port can apply to align the connection in the roll axis?
|-
|Capture Range
|How far away the two docking ports need to be before they will lock together
|-
|Capture Min Fwd 
|This value determines how much of a difference there can be in the dot product of the two docking transforms 
of both docking ports that are currently attempting to dock.
|-
|Capture Min Roll Dot
|Not sure
|-
|Capture Max Rvel
|Not sure
|-
|fx Dock Prefab Name
|The effect to use when docking
|-
|fx Undock Prefab Name
|The effect to use when undocking
|-
|Is Gendered
|Se to true to make this docking port gendered, which means that you need a male and female port to dock.
This could be useful for recreating soviet style drogue and probe docking ports, for example
|-
|Is Gender Female
|If using gendered docking ports, marking this true creates a female docking port
|-
|Snap Rotation
|Set to true if the docking port should snap to angles
|-
|Snap Offset
|The angle to snap to when using Snap Rotation
|-
|Current State
|The default state of the port. You probably want to leave this at Ready
|-
|Is Deployable Docking Port
|Set to true if this is a deployable docking port, like the stock MK1/2 deployable docking ports
|}

[[Category:Parts and modules]]</text>
      <sha1>6etvohpa1it8ciae3h473x8gbouhwm2</sha1>
    </revision>
  </page>
  <page>
    <title>File:Example Fake and real height.png</title>
    <ns>6</ns>
    <id>79</id>
    <revision>
      <id>257</id>
      <timestamp>2023-12-25T14:25:28Z</timestamp>
      <contributor>
        <username>StanWildin</username>
        <id>17</id>
      </contributor>
      <origin>257</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="28" sha1="l2n4oxlgfgjgmsj847ej3zueyozzdwb" xml:space="preserve">Example Fake and real height</text>
      <sha1>l2n4oxlgfgjgmsj847ej3zueyozzdwb</sha1>
    </revision>
  </page>
  <page>
    <title>File:Pasted image 1.png</title>
    <ns>6</ns>
    <id>80</id>
    <revision>
      <id>258</id>
      <timestamp>2023-12-25T14:28:56Z</timestamp>
      <contributor>
        <username>StanWildin</username>
        <id>17</id>
      </contributor>
      <origin>258</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7" sha1="mt81m2lgi9h5hcuhn42ft0o9f7gg68f" xml:space="preserve">example</text>
      <sha1>mt81m2lgi9h5hcuhn42ft0o9f7gg68f</sha1>
    </revision>
  </page>
  <page>
    <title>File:Pasted image 0.png</title>
    <ns>6</ns>
    <id>81</id>
    <revision>
      <id>259</id>
      <timestamp>2023-12-25T14:29:58Z</timestamp>
      <contributor>
        <username>StanWildin</username>
        <id>17</id>
      </contributor>
      <origin>259</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7" sha1="mt81m2lgi9h5hcuhn42ft0o9f7gg68f" xml:space="preserve">example</text>
      <sha1>mt81m2lgi9h5hcuhn42ft0o9f7gg68f</sha1>
    </revision>
  </page>
  <page>
    <title>File:UE menu.png</title>
    <ns>6</ns>
    <id>82</id>
    <revision>
      <id>266</id>
      <timestamp>2023-12-29T16:27:50Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <origin>266</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="22" sha1="537fwxwbbdejevli41zonytnlqg8mu3" xml:space="preserve">Menu of Unity Explorer</text>
      <sha1>537fwxwbbdejevli41zonytnlqg8mu3</sha1>
    </revision>
  </page>
  <page>
    <title>File:UE inspector blank.png</title>
    <ns>6</ns>
    <id>83</id>
    <revision>
      <id>267</id>
      <timestamp>2023-12-29T16:30:35Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <origin>267</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="18" sha1="rxc7l1gls8elbf75kddkjw5mh6k3hzz" xml:space="preserve">UE inspector blank</text>
      <sha1>rxc7l1gls8elbf75kddkjw5mh6k3hzz</sha1>
    </revision>
  </page>
  <page>
    <title>File:UE inspector blank dropdown.png</title>
    <ns>6</ns>
    <id>84</id>
    <revision>
      <id>268</id>
      <timestamp>2023-12-29T16:32:15Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <origin>268</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="27" sha1="t56yzl3gkq539xr1xvqc6pxto5f9if2" xml:space="preserve">UE inspector blank dropdown</text>
      <sha1>t56yzl3gkq539xr1xvqc6pxto5f9if2</sha1>
    </revision>
  </page>
  <page>
    <title>File:Box following cursor .png</title>
    <ns>6</ns>
    <id>85</id>
    <revision>
      <id>269</id>
      <timestamp>2023-12-29T16:34:05Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <origin>269</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="20" sha1="ppv13ya3tutvmr1ve9kwjm7lx2sf23x" xml:space="preserve">box following cursor</text>
      <sha1>ppv13ya3tutvmr1ve9kwjm7lx2sf23x</sha1>
    </revision>
  </page>
  <page>
    <title>File:What to look for.png</title>
    <ns>6</ns>
    <id>86</id>
    <revision>
      <id>270</id>
      <timestamp>2023-12-29T16:36:43Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <origin>270</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="16" sha1="bg261p9zookrsx8q589aic8b40jv3uh" xml:space="preserve">what to look for</text>
      <sha1>bg261p9zookrsx8q589aic8b40jv3uh</sha1>
    </revision>
  </page>
  <page>
    <title>File:Inspector filled.png</title>
    <ns>6</ns>
    <id>87</id>
    <revision>
      <id>271</id>
      <timestamp>2023-12-29T16:39:37Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <origin>271</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="16" sha1="61ls3233s34rvh69drtpa7eo00py6nk" xml:space="preserve">inspector filled</text>
      <sha1>61ls3233s34rvh69drtpa7eo00py6nk</sha1>
    </revision>
  </page>
  <page>
    <title>File:KSCbutton.png</title>
    <ns>6</ns>
    <id>88</id>
    <revision>
      <id>272</id>
      <timestamp>2023-12-29T16:43:50Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <origin>272</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="9" sha1="bzu8ls2b31m9h5qjyu7nop9w83a1aer" xml:space="preserve">KSCbutton</text>
      <sha1>bzu8ls2b31m9h5qjyu7nop9w83a1aer</sha1>
    </revision>
  </page>
  <page>
    <title>How to use Unity Explorer and Object Browser</title>
    <ns>0</ns>
    <id>89</id>
    <revision>
      <id>273</id>
      <timestamp>2023-12-29T18:34:49Z</timestamp>
      <contributor>
        <username>ShadowDev</username>
        <id>5</id>
      </contributor>
      <comment>Tutorial on how to use Unity Explorer and Object Browser</comment>
      <origin>273</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1775" sha1="leliw5vbekr7eomjau1vga0lozkizji" xml:space="preserve">In this tutorial you will be shown how to use unity explorer and the visual studio 2022 object browser.

The example that is used will be finding out where the KSC menu selects the vab from. 

# Make sure you have unity explorer mod installed
# Make sure you have visual studio 2022 installed
# Have a mod project setup



First step is to open the game and start a new save. you should see the Unity Explorer menu at the top of the game, if not press F7
[[File:UE menu.png|center|frame|Unity Explorer Menu]]
Click on the button that says Inspector. This should pop up with a blank page.
[[File:UE inspector blank.png|center|thumb]]
At the top of the page you should see a drop down button with the words mouse inspect. click that button

that should drop down into 3 options. Click the UI option 
[[File:UE inspector blank dropdown.png|center|thumb]]
you should have a box following your mouse cursor, click on the KSC menu VAB 
[[File:Box following cursor .png|center|thumb]]
after clicking that you should have another menu popup. on that menu we are looking for 3 main things

The buttons name (Vehicle Assembly Building)

The main canvas

The KSC menu
[[File:What to look for.png|center|frame]]
once you have found the menu item click on it and that should open it up in the inspector

with the inspector we can see what makes up the game object.

the left menu has the objects children and the right menu has the components
[[File:Inspector filled.png|center|frame]]
when looking at the components you will see 2 items that stand out. UIAction_Void_Button and KSP.UI.KSCButton

we will take a look at the component KSP.UI.KSCButton by clicking on that component

after clicking on that it will open it up in the inspector
[[File:KSCbutton.png|center|thumb|1000x1000px]]</text>
      <sha1>leliw5vbekr7eomjau1vga0lozkizji</sha1>
    </revision>
  </page>
  <page>
    <title>File:HarmonyImage.png</title>
    <ns>6</ns>
    <id>90</id>
    <revision>
      <id>280</id>
      <timestamp>2024-01-07T23:50:29Z</timestamp>
      <contributor>
        <username>Meckryl</username>
        <id>18</id>
      </contributor>
      <origin>280</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
  </page>
  <page>
    <title>Custom Launch Locations</title>
    <ns>0</ns>
    <id>91</id>
    <revision>
      <id>281</id>
      <timestamp>2024-01-08T00:30:04Z</timestamp>
      <contributor>
        <username>Meckryl</username>
        <id>18</id>
      </contributor>
      <comment>Created Page</comment>
      <origin>281</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="10250" sha1="g7kzuaf59tk113kjycywruhxoal5pba" xml:space="preserve">
== Goal ==
In this tutorial I will show how to change the location of Launch Pad 1 to be anywhere you want

== Setup ==

===== Required Mods: =====

* SpaceWarp Template
* SpaceWarp
* Patch Manager
* Text Asset Dumper (technically not needed but I recommend installing this and doing the one time setup described below)

===== Required tools: =====

* dnSpy (or any other decompiler)

===== Steps: =====

# Install SpaceWarp, Patch Manager, and Text Asset Dumper.
# Launch KSP2.
# Open Settings &gt; Mods, then scroll down to Patch manager and make sure "Always Invalidated Cache" is on.
# Go back to the title screen, and click the "Dump" button
# If you haven't already done so, make a project for your mod using the SpaceWarp Template

== Creating a custom launch site ==
Throughout this guide, I will be using Laythe as an example, just because that's where I was trying to make my mod launch rockets.

===== Creating a location =====
Open your project folder on your system explorer. Navigate to plugin_template/patches, and in that folder create a text file with a name that ends in .patch. In that file, put the following: &lt;syntaxhighlight&gt;
@use "builtin:dictionary";
@use "builtin:list";

@patch celestial_bodies;

:json #Laythe {
    data: $value:set("LocalSimObjectsData", [
        {
            "Name": "LaunchPad_spawn_01",
            "RelativeTo": "",
            "ReferenceFrame": 1,
            "LocalPosition": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
            },
            "LocalRotation": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0,
                "w": 0.0
            },
            "FixedGuid": true
        }
            ]);
}
&lt;/syntaxhighlight&gt;Replace "Laythe" with whatever celestial body you want your object to appear on, and change the x, y, and z coordinates under LocalPosition to whatever local coordinates you'd like. An easy way to get a specific location on the surface is to land something there, save the game with your craft active, and then read the save file to see the position of your craft. 

'''''NOTE:''' If you want to make a custom location on Kerbin, you need to use $value:add rather than $value:set.''

== Patching KSP.Game.OABProvider ==
The OABProvider class is an interface for generating and using ObjectAssemblyBuilder objects (environments like the VAB that allow for construction). Eventually, the developers plan to implement many OABs through colonies and orbital assembly environments, and once they do this tutorial will probably be a LOT shorter. Unfortunately, at the moment the OABProvider class is hardcoded in many places to only generate one specific type of OAB: the VAB on Kerbin, with its predetermined launch sites.

In your project, make a new class and add the following harmony patches to it:&lt;syntaxhighlight lang="c#"&gt;
[HarmonyPrefix]
[HarmonyPatch(typeof(OABProvider), nameof(OABProvider.GetSurfaceLaunchPosition))]
public static bool GetSurfaceLaunchPosition(OABProvider __instance, string celestialBodyName, string launchPadName, ref Position __result)
{
    GameInstance game = GameManager.Instance.Game;
    CelestialBodyComponent celestialBodyComponent = game.UniverseModel.FindCelestialBodyByName(celestialBodyName);
    FramePositionState framePositionState;
    TransformModel transformModel = (TransformModel)game.UniverseModel.FindSimObjectByNameKey(launchPadName).transform;
    __result = new Position(celestialBodyComponent.transform.GetTransformFrame(TransformFrameType.Body), transformModel.localPosition);
    return false;
}

[HarmonyPrefix]
[HarmonyPatch(typeof(OABProvider), nameof(OABProvider.GetSurfaceLaunchLocation))]
public static bool GetSurfaceLaunchLocation(OABProvider __instance, string launchLocationName, ref SerializedLocation __result)
{
    string celestialBodyName = "Laythe";
    SerializedLocation serializedLocation = default(SerializedLocation);
    serializedLocation.surfaceLocation = new SerializedSurfaceLocation?(new SerializedSurfaceLocation
    {
        parentGuid = celestialBodyName,
        objectName = launchLocationName
    });
    serializedLocation.LocationType = LocationType.SurfaceLocation;
    CelestialBodyComponent celestialBodyComponent = GameManager.Instance.Game.UniverseModel.FindCelestialBodyByName(celestialBodyName);
    serializedLocation.originatingSimObject = celestialBodyComponent.SimulationObject.GlobalId;
    serializedLocation.launchSituationUnknown = launchLocationName == "Dock_spawn_01";
    __result = serializedLocation;
    return false;
}

&lt;/syntaxhighlight&gt;In the second method, change the value of celestialBodyName to be whatever celestial body you plan to be launching rockets from.

These patches exist to tell the game to not only look for our launchpad on Kerbin, and in the case of the second function, to tell it to set the reference frame to be whatever world we actually put the launchpad on.

NOTE: If you've never used harmony patches before, this is a good time to look into the basics of how they work and the basic pattern we're using here to patch code copied in from the decompiler.
[[File:HarmonyImage.png|center|Courtesy of @evil.dana on discord]]

===== About positions in KSP2: =====
Trying to store positions at a planetary (let alone interstellar) scale with a standard XYZ coordinate system would be a surefire way to encounter constant game breaking rounding issues. To get around this, the developers have created a system where everything takes place in different reference frames. If you're in the SOI of a planet or moon, then your reference frame will be a coordinate system originating from that celestial body. This coordinate system rotates with the celestial body, so an object at rest on the surface doesn't need to have its position updated at all.

Basically, the main takeaway here is that whenever we set the position of something, we usually need to also tell the game what reference frame we're working in.

== Patching UniverseObserver ==
UniverseObserver contains a method called ApplyLaunchSiteCameraGimbalState, which is set to load specifically Kerbin when we go to launch a rocket. Just like with the methods from OABProvider, we need to patch that method and replace the hardcoded string "Kerbin" with our desired celestial body.&lt;syntaxhighlight lang="c#"&gt;
if (!string.IsNullOrEmpty(text) &amp;&amp; game.SpaceSimulation.GetSurfaceObjectPosition("Kerbin", text, out framePositionState))
&lt;/syntaxhighlight&gt;...becomes...&lt;syntaxhighlight lang="c#"&gt;
if (!string.IsNullOrEmpty(text) &amp;&amp; game.SpaceSimulation.GetSurfaceObjectPosition("Laythe", text, out framePositionState))
&lt;/syntaxhighlight&gt;

== Patching SpaceSimulation ==
At this point, the game has completed the creation of your rocket and is attempting to spawn it into the world. The method SyncVesselToLocation is the final step where the game puts it on the launch pad and turns physics on. Sadly, the game is looking for our launchpad the wrong way, and will not find it unless we tell it to look the correct way. At this point there's a LOT of stuff going on, so this patch is a bit messy. Copy the decompiled source code into a harmony patch just like we've done for all the others, make sure to put a "return false" at the very end of the method so the compiler is happy, and then look at the very end of the method. Find this block of code at the bottom:&lt;syntaxhighlight lang="c#"&gt;
__instance.GetSurfaceObjectPosition(parentGuid, objectName, out simulationObjectState.position);
if (simulationObjectState.position.referenceTransformGuid != null)
{
    GeographicPositionState geographicPositionState;
    __instance.GetGeographicPosition(simulationObjectState.position.referenceTransformGuid, simulationObjectState.position, out geographicPositionState);
    geographicPositionState.altitudeFromRadius += (double)vesselComponent.OffsetToGround;
    geographicPositionState.heading = __instance.GetLaunchSiteHeading(geographicPositionState, simulationObjectState.position.localRotation);
    __instance.GetBodyRelativePosition(geographicPositionState, out simulationObjectState.position);
    RigidbodyState rigidbodyState3 = new RigidbodyState
    {
        referenceTransformGuid = simulationObjectState.position.referenceTransformGuid,
        referenceFrameType = simulationObjectState.position.referenceFrameType,
        localPosition = simulationObjectState.position.localPosition,
        localRotation = simulationObjectState.position.localRotation,
        localVelocity = Vector3d.zero,
        localAngularVelocity = Vector3d.zero
    };
    simulationObject.SetState(new SimulationObjectState?(simulationObjectState), __instance._universeModel);
    vesselComponent.SetState(vesselState, __instance._universeModel);
    simulationObject.FindComponent&lt;RigidbodyComponent&gt;().SetState(rigidbodyState3, __instance._universeModel);
    return false;
}

&lt;/syntaxhighlight&gt;And replace it with this:&lt;syntaxhighlight lang="c#"&gt;
TransformModel transformModel = (TransformModel)GameManager.Instance.Game.UniverseModel.FindSimObjectByNameKey(objectName).transform;
ITransformFrame transformFrame = (ITransformFrame)transformModel.bodyFrame;
SimulationObjectState simulationObjectState = new SimulationObjectState
{
    position = new FramePositionState
    {
        referenceTransformGuid = transformFrame.transform.Guid,
        referenceFrameType = transformFrame.type,
        localPosition = transformFrame.transform.localPosition,
        localRotation = transformFrame.transform.localRotation
    }
};

RigidbodyState rigidbodyState3 = new RigidbodyState
{
    referenceTransformGuid = transformFrame.transform.Guid,
    referenceFrameType = transformFrame.type,
    localPosition = transformFrame.transform.localPosition,
    localRotation = transformFrame.transform.localRotation,
    localVelocity = Vector3d.zero,
    localAngularVelocity = Vector3d.zero
};
simulationObject.SetState(new SimulationObjectState?(simulationObjectState), __instance._universeModel);
vesselComponent.SetState(vesselState, __instance._universeModel);
simulationObject.FindComponent&lt;RigidbodyComponent&gt;().SetState(rigidbodyState3, __instance._universeModel);
return false;

&lt;/syntaxhighlight&gt;And with this, you should be done!</text>
      <sha1>g7kzuaf59tk113kjycywruhxoal5pba</sha1>
    </revision>
    <revision>
      <id>282</id>
      <parentid>281</parentid>
      <timestamp>2024-01-08T00:42:24Z</timestamp>
      <contributor>
        <username>Meckryl</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>Change topic to tutorials</comment>
      <origin>282</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="10273" sha1="g3c0xwzdifwpja754dyj3lf8gpa4yxm" xml:space="preserve">
== Goal ==
In this tutorial I will show how to change the location of Launch Pad 1 to be anywhere you want

== Setup ==

===== Required Mods: =====

* SpaceWarp Template
* SpaceWarp
* Patch Manager
* Text Asset Dumper (technically not needed but I recommend installing this and doing the one time setup described below)

===== Required tools: =====

* dnSpy (or any other decompiler)

===== Steps: =====

# Install SpaceWarp, Patch Manager, and Text Asset Dumper.
# Launch KSP2.
# Open Settings &gt; Mods, then scroll down to Patch manager and make sure "Always Invalidated Cache" is on.
# Go back to the title screen, and click the "Dump" button
# If you haven't already done so, make a project for your mod using the SpaceWarp Template

== Creating a custom launch site ==
Throughout this guide, I will be using Laythe as an example, just because that's where I was trying to make my mod launch rockets.

===== Creating a location =====
Open your project folder on your system explorer. Navigate to plugin_template/patches, and in that folder create a text file with a name that ends in .patch. In that file, put the following: &lt;syntaxhighlight&gt;
@use "builtin:dictionary";
@use "builtin:list";

@patch celestial_bodies;

:json #Laythe {
    data: $value:set("LocalSimObjectsData", [
        {
            "Name": "LaunchPad_spawn_01",
            "RelativeTo": "",
            "ReferenceFrame": 1,
            "LocalPosition": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
            },
            "LocalRotation": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0,
                "w": 0.0
            },
            "FixedGuid": true
        }
            ]);
}
&lt;/syntaxhighlight&gt;Replace "Laythe" with whatever celestial body you want your object to appear on, and change the x, y, and z coordinates under LocalPosition to whatever local coordinates you'd like. An easy way to get a specific location on the surface is to land something there, save the game with your craft active, and then read the save file to see the position of your craft. 

'''''NOTE:''' If you want to make a custom location on Kerbin, you need to use $value:add rather than $value:set.''

== Patching KSP.Game.OABProvider ==
The OABProvider class is an interface for generating and using ObjectAssemblyBuilder objects (environments like the VAB that allow for construction). Eventually, the developers plan to implement many OABs through colonies and orbital assembly environments, and once they do this tutorial will probably be a LOT shorter. Unfortunately, at the moment the OABProvider class is hardcoded in many places to only generate one specific type of OAB: the VAB on Kerbin, with its predetermined launch sites.

In your project, make a new class and add the following harmony patches to it:&lt;syntaxhighlight lang="c#"&gt;
[HarmonyPrefix]
[HarmonyPatch(typeof(OABProvider), nameof(OABProvider.GetSurfaceLaunchPosition))]
public static bool GetSurfaceLaunchPosition(OABProvider __instance, string celestialBodyName, string launchPadName, ref Position __result)
{
    GameInstance game = GameManager.Instance.Game;
    CelestialBodyComponent celestialBodyComponent = game.UniverseModel.FindCelestialBodyByName(celestialBodyName);
    FramePositionState framePositionState;
    TransformModel transformModel = (TransformModel)game.UniverseModel.FindSimObjectByNameKey(launchPadName).transform;
    __result = new Position(celestialBodyComponent.transform.GetTransformFrame(TransformFrameType.Body), transformModel.localPosition);
    return false;
}

[HarmonyPrefix]
[HarmonyPatch(typeof(OABProvider), nameof(OABProvider.GetSurfaceLaunchLocation))]
public static bool GetSurfaceLaunchLocation(OABProvider __instance, string launchLocationName, ref SerializedLocation __result)
{
    string celestialBodyName = "Laythe";
    SerializedLocation serializedLocation = default(SerializedLocation);
    serializedLocation.surfaceLocation = new SerializedSurfaceLocation?(new SerializedSurfaceLocation
    {
        parentGuid = celestialBodyName,
        objectName = launchLocationName
    });
    serializedLocation.LocationType = LocationType.SurfaceLocation;
    CelestialBodyComponent celestialBodyComponent = GameManager.Instance.Game.UniverseModel.FindCelestialBodyByName(celestialBodyName);
    serializedLocation.originatingSimObject = celestialBodyComponent.SimulationObject.GlobalId;
    serializedLocation.launchSituationUnknown = launchLocationName == "Dock_spawn_01";
    __result = serializedLocation;
    return false;
}

&lt;/syntaxhighlight&gt;In the second method, change the value of celestialBodyName to be whatever celestial body you plan to be launching rockets from.

These patches exist to tell the game to not only look for our launchpad on Kerbin, and in the case of the second function, to tell it to set the reference frame to be whatever world we actually put the launchpad on.

NOTE: If you've never used harmony patches before, this is a good time to look into the basics of how they work and the basic pattern we're using here to patch code copied in from the decompiler.
[[File:HarmonyImage.png|center|Courtesy of @evil.dana on discord]]

===== About positions in KSP2: =====
Trying to store positions at a planetary (let alone interstellar) scale with a standard XYZ coordinate system would be a surefire way to encounter constant game breaking rounding issues. To get around this, the developers have created a system where everything takes place in different reference frames. If you're in the SOI of a planet or moon, then your reference frame will be a coordinate system originating from that celestial body. This coordinate system rotates with the celestial body, so an object at rest on the surface doesn't need to have its position updated at all.

Basically, the main takeaway here is that whenever we set the position of something, we usually need to also tell the game what reference frame we're working in.

== Patching UniverseObserver ==
UniverseObserver contains a method called ApplyLaunchSiteCameraGimbalState, which is set to load specifically Kerbin when we go to launch a rocket. Just like with the methods from OABProvider, we need to patch that method and replace the hardcoded string "Kerbin" with our desired celestial body.&lt;syntaxhighlight lang="c#"&gt;
if (!string.IsNullOrEmpty(text) &amp;&amp; game.SpaceSimulation.GetSurfaceObjectPosition("Kerbin", text, out framePositionState))
&lt;/syntaxhighlight&gt;...becomes...&lt;syntaxhighlight lang="c#"&gt;
if (!string.IsNullOrEmpty(text) &amp;&amp; game.SpaceSimulation.GetSurfaceObjectPosition("Laythe", text, out framePositionState))
&lt;/syntaxhighlight&gt;

== Patching SpaceSimulation ==
At this point, the game has completed the creation of your rocket and is attempting to spawn it into the world. The method SyncVesselToLocation is the final step where the game puts it on the launch pad and turns physics on. Sadly, the game is looking for our launchpad the wrong way, and will not find it unless we tell it to look the correct way. At this point there's a LOT of stuff going on, so this patch is a bit messy. Copy the decompiled source code into a harmony patch just like we've done for all the others, make sure to put a "return false" at the very end of the method so the compiler is happy, and then look at the very end of the method. Find this block of code at the bottom:&lt;syntaxhighlight lang="c#"&gt;
__instance.GetSurfaceObjectPosition(parentGuid, objectName, out simulationObjectState.position);
if (simulationObjectState.position.referenceTransformGuid != null)
{
    GeographicPositionState geographicPositionState;
    __instance.GetGeographicPosition(simulationObjectState.position.referenceTransformGuid, simulationObjectState.position, out geographicPositionState);
    geographicPositionState.altitudeFromRadius += (double)vesselComponent.OffsetToGround;
    geographicPositionState.heading = __instance.GetLaunchSiteHeading(geographicPositionState, simulationObjectState.position.localRotation);
    __instance.GetBodyRelativePosition(geographicPositionState, out simulationObjectState.position);
    RigidbodyState rigidbodyState3 = new RigidbodyState
    {
        referenceTransformGuid = simulationObjectState.position.referenceTransformGuid,
        referenceFrameType = simulationObjectState.position.referenceFrameType,
        localPosition = simulationObjectState.position.localPosition,
        localRotation = simulationObjectState.position.localRotation,
        localVelocity = Vector3d.zero,
        localAngularVelocity = Vector3d.zero
    };
    simulationObject.SetState(new SimulationObjectState?(simulationObjectState), __instance._universeModel);
    vesselComponent.SetState(vesselState, __instance._universeModel);
    simulationObject.FindComponent&lt;RigidbodyComponent&gt;().SetState(rigidbodyState3, __instance._universeModel);
    return false;
}

&lt;/syntaxhighlight&gt;And replace it with this:&lt;syntaxhighlight lang="c#"&gt;
TransformModel transformModel = (TransformModel)GameManager.Instance.Game.UniverseModel.FindSimObjectByNameKey(objectName).transform;
ITransformFrame transformFrame = (ITransformFrame)transformModel.bodyFrame;
SimulationObjectState simulationObjectState = new SimulationObjectState
{
    position = new FramePositionState
    {
        referenceTransformGuid = transformFrame.transform.Guid,
        referenceFrameType = transformFrame.type,
        localPosition = transformFrame.transform.localPosition,
        localRotation = transformFrame.transform.localRotation
    }
};

RigidbodyState rigidbodyState3 = new RigidbodyState
{
    referenceTransformGuid = transformFrame.transform.Guid,
    referenceFrameType = transformFrame.type,
    localPosition = transformFrame.transform.localPosition,
    localRotation = transformFrame.transform.localRotation,
    localVelocity = Vector3d.zero,
    localAngularVelocity = Vector3d.zero
};
simulationObject.SetState(new SimulationObjectState?(simulationObjectState), __instance._universeModel);
vesselComponent.SetState(vesselState, __instance._universeModel);
simulationObject.FindComponent&lt;RigidbodyComponent&gt;().SetState(rigidbodyState3, __instance._universeModel);
return false;

&lt;/syntaxhighlight&gt;And with this, you should be done!
[[Category:Tutorials]]</text>
      <sha1>g3c0xwzdifwpja754dyj3lf8gpa4yxm</sha1>
    </revision>
    <revision>
      <id>283</id>
      <parentid>282</parentid>
      <timestamp>2024-01-08T14:30:40Z</timestamp>
      <contributor>
        <username>Meckryl</username>
        <id>18</id>
      </contributor>
      <comment>Changed the patch for SpaceSimulation.syncVesselToLocation to respect the height of the vessel so that it adjusts height automatically, and also just generally made it function more like the original which I imagine will help prevent bugs and quirky behavior</comment>
      <origin>283</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="11739" sha1="060y74e63vxij5irparm2nyny5x4mh3" xml:space="preserve">
== Goal ==
In this tutorial I will show how to change the location of Launch Pad 1 to be anywhere you want

== Setup ==

===== Required Mods: =====

* SpaceWarp Template
* SpaceWarp
* Patch Manager
* Text Asset Dumper (technically not needed but I recommend installing this and doing the one time setup described below)

===== Required tools: =====

* dnSpy (or any other decompiler)

===== Steps: =====

# Install SpaceWarp, Patch Manager, and Text Asset Dumper.
# Launch KSP2.
# Open Settings &gt; Mods, then scroll down to Patch manager and make sure "Always Invalidated Cache" is on.
# Go back to the title screen, and click the "Dump" button
# If you haven't already done so, make a project for your mod using the SpaceWarp Template

== Creating a custom launch site ==
Throughout this guide, I will be using Laythe as an example, just because that's where I was trying to make my mod launch rockets.

===== Creating a location =====
Open your project folder on your system explorer. Navigate to plugin_template/patches, and in that folder create a text file with a name that ends in .patch. In that file, put the following: &lt;syntaxhighlight&gt;
@use "builtin:dictionary";
@use "builtin:list";

@patch celestial_bodies;

:json #Laythe {
    data: $value:set("LocalSimObjectsData", [
        {
            "Name": "LaunchPad_spawn_01",
            "RelativeTo": "",
            "ReferenceFrame": 1,
            "LocalPosition": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
            },
            "LocalRotation": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0,
                "w": 0.0
            },
            "FixedGuid": true
        }
            ]);
}
&lt;/syntaxhighlight&gt;Replace "Laythe" with whatever celestial body you want your object to appear on, and change the x, y, and z coordinates under LocalPosition to whatever local coordinates you'd like. An easy way to get a specific location on the surface is to land something there, save the game with your craft active, and then read the save file to see the position of your craft. 

'''''NOTE:''' If you want to make a custom location on Kerbin, you need to use $value:add rather than $value:set.''

== Patching KSP.Game.OABProvider ==
The OABProvider class is an interface for generating and using ObjectAssemblyBuilder objects (environments like the VAB that allow for construction). Eventually, the developers plan to implement many OABs through colonies and orbital assembly environments, and once they do this tutorial will probably be a LOT shorter. Unfortunately, at the moment the OABProvider class is hardcoded in many places to only generate one specific type of OAB: the VAB on Kerbin, with its predetermined launch sites.

In your project, make a new class and add the following harmony patches to it:&lt;syntaxhighlight lang="c#"&gt;
[HarmonyPrefix]
[HarmonyPatch(typeof(OABProvider), nameof(OABProvider.GetSurfaceLaunchPosition))]
public static bool GetSurfaceLaunchPosition(OABProvider __instance, string celestialBodyName, string launchPadName, ref Position __result)
{
    GameInstance game = GameManager.Instance.Game;
    CelestialBodyComponent celestialBodyComponent = game.UniverseModel.FindCelestialBodyByName(celestialBodyName);
    FramePositionState framePositionState;
    TransformModel transformModel = (TransformModel)game.UniverseModel.FindSimObjectByNameKey(launchPadName).transform;
    __result = new Position(celestialBodyComponent.transform.GetTransformFrame(TransformFrameType.Body), transformModel.localPosition);
    return false;
}

[HarmonyPrefix]
[HarmonyPatch(typeof(OABProvider), nameof(OABProvider.GetSurfaceLaunchLocation))]
public static bool GetSurfaceLaunchLocation(OABProvider __instance, string launchLocationName, ref SerializedLocation __result)
{
    string celestialBodyName = "Laythe";
    SerializedLocation serializedLocation = default(SerializedLocation);
    serializedLocation.surfaceLocation = new SerializedSurfaceLocation?(new SerializedSurfaceLocation
    {
        parentGuid = celestialBodyName,
        objectName = launchLocationName
    });
    serializedLocation.LocationType = LocationType.SurfaceLocation;
    CelestialBodyComponent celestialBodyComponent = GameManager.Instance.Game.UniverseModel.FindCelestialBodyByName(celestialBodyName);
    serializedLocation.originatingSimObject = celestialBodyComponent.SimulationObject.GlobalId;
    serializedLocation.launchSituationUnknown = launchLocationName == "Dock_spawn_01";
    __result = serializedLocation;
    return false;
}

&lt;/syntaxhighlight&gt;In the second method, change the value of celestialBodyName to be whatever celestial body you plan to be launching rockets from.

These patches exist to tell the game to not only look for our launchpad on Kerbin, and in the case of the second function, to tell it to set the reference frame to be whatever world we actually put the launchpad on.

NOTE: If you've never used harmony patches before, this is a good time to look into the basics of how they work and the basic pattern we're using here to patch code copied in from the decompiler.
[[File:HarmonyImage.png|center|Courtesy of @evil.dana on discord]]

===== About positions in KSP2: =====
Trying to store positions at a planetary (let alone interstellar) scale with a standard XYZ coordinate system would be a surefire way to encounter constant game breaking rounding issues. To get around this, the developers have created a system where everything takes place in different reference frames. If you're in the SOI of a planet or moon, then your reference frame will be a coordinate system originating from that celestial body. This coordinate system rotates with the celestial body, so an object at rest on the surface doesn't need to have its position updated at all.

Basically, the main takeaway here is that whenever we set the position of something, we usually need to also tell the game what reference frame we're working in.

== Patching UniverseObserver ==
UniverseObserver contains a method called ApplyLaunchSiteCameraGimbalState, which is set to load specifically Kerbin when we go to launch a rocket. Just like with the methods from OABProvider, we need to patch that method and replace the hardcoded string "Kerbin" with our desired celestial body.&lt;syntaxhighlight lang="c#"&gt;
if (!string.IsNullOrEmpty(text) &amp;&amp; game.SpaceSimulation.GetSurfaceObjectPosition("Kerbin", text, out framePositionState))
&lt;/syntaxhighlight&gt;...becomes...&lt;syntaxhighlight lang="c#"&gt;
if (!string.IsNullOrEmpty(text) &amp;&amp; game.SpaceSimulation.GetSurfaceObjectPosition("Laythe", text, out framePositionState))
&lt;/syntaxhighlight&gt;

== Patching SpaceSimulation ==
At this point, the game has completed the creation of your rocket and is attempting to spawn it into the world. The method SyncVesselToLocation is the final step where the game puts it on the launch pad and turns physics on. Sadly, the game is looking for our launchpad the wrong way, and will not find it unless we tell it to look the correct way. At this point there's a LOT of stuff going on, so this patch is a bit messy. Copy the decompiled source code into a harmony patch just like we've done for all the others, make sure to put a "return false" at the very end of the method so the compiler is happy, and then look at the very end of the method. Find this block of code at the bottom:&lt;syntaxhighlight lang="c#"&gt;
__instance.GetSurfaceObjectPosition(parentGuid, objectName, out simulationObjectState.position);
if (simulationObjectState.position.referenceTransformGuid != null)
{
    GeographicPositionState geographicPositionState;
    __instance.GetGeographicPosition(simulationObjectState.position.referenceTransformGuid, simulationObjectState.position, out geographicPositionState);
    geographicPositionState.altitudeFromRadius += (double)vesselComponent.OffsetToGround;
    geographicPositionState.heading = __instance.GetLaunchSiteHeading(geographicPositionState, simulationObjectState.position.localRotation);
    __instance.GetBodyRelativePosition(geographicPositionState, out simulationObjectState.position);
    RigidbodyState rigidbodyState3 = new RigidbodyState
    {
        referenceTransformGuid = simulationObjectState.position.referenceTransformGuid,
        referenceFrameType = simulationObjectState.position.referenceFrameType,
        localPosition = simulationObjectState.position.localPosition,
        localRotation = simulationObjectState.position.localRotation,
        localVelocity = Vector3d.zero,
        localAngularVelocity = Vector3d.zero
    };
    simulationObject.SetState(new SimulationObjectState?(simulationObjectState), __instance._universeModel);
    vesselComponent.SetState(vesselState, __instance._universeModel);
    simulationObject.FindComponent&lt;RigidbodyComponent&gt;().SetState(rigidbodyState3, __instance._universeModel);
    return false;
}

&lt;/syntaxhighlight&gt;And replace it with this:&lt;syntaxhighlight lang="c#"&gt;
TransformModel transform = (TransformModel)GameManager.Instance.Game.UniverseModel.FindSimObjectByNameKey(objectName).transform;
SimulationObjectState state = new SimulationObjectState();
state.position = FramePositionState.FromTransform(transform);
GeographicPositionState geographicPositionState;
__instance.GetGeographicPosition(state.position.referenceTransformGuid, state.position, out geographicPositionState);
//geographicPositionState.heading = __instance.GetLaunchSiteHeading(geographicPositionState, position.localRotation);
Vector3d relSurfaceNVector = GameManager.Instance.Game.UniverseModel.FindCelestialBodyByName(location.surfaceLocation?.parentGuid).GetRelSurfaceNVector(geographicPositionState.latitude, geographicPositionState.longitude);
Vector3d vector3d = Vector3d.Cross(relSurfaceNVector, Vector3d.up);
QuaternionD quaternionD = QuaternionD.AngleAxis(Vector3d.SignedAngle(relSurfaceNVector, Vector3d.up, vector3d), Vector3d.right);
QuaternionD quaternionD2 = QuaternionD.identity;
Vector3d vector3d2 = new Vector3d(relSurfaceNVector.x, 0.0, relSurfaceNVector.z);
if (vector3d2.sqrMagnitude &gt; 5E-324)
{
    quaternionD2 = QuaternionD.AngleAxis(Math.Atan2(vector3d2.x, vector3d2.z) * 57.29577951308232, Vector3d.up);
}
QuaternionD geographicPositionHeading = quaternionD2 * quaternionD;

Vector3d vector3d3 = state.position.localRotation * Vector3.forward;
geographicPositionState.heading =  Vector3d.SignedAngle(geographicPositionHeading * Vector3.forward, vector3d3, relSurfaceNVector);
__instance.GetBodyRelativePosition(geographicPositionState, out state.position);

state.position.localPosition.y += vesselComponent.OffsetToGround;
state.position.localRotation.w = 1.0;

SimulationObjectState simulationObjectState = new SimulationObjectState
{
    position = new FramePositionState
    {
        referenceTransformGuid = transform.bodyFrame.transform.Guid,
        referenceFrameType = transform.bodyFrame.type,
        localPosition = state.position.localPosition,
        localRotation = state.position.localRotation
    }
};

RigidbodyState rigidbodyState3 = new RigidbodyState
{
    referenceTransformGuid = transform.bodyFrame.transform.Guid,
    referenceFrameType = transform.bodyFrame.type,
    localPosition = state.position.localPosition,
    localRotation = state.position.localRotation,
    localVelocity = Vector3d.zero,
    localAngularVelocity = Vector3d.zero
};
simulationObject.SetState(new SimulationObjectState?(simulationObjectState), __instance._universeModel);
vesselComponent.SetState(vesselState, __instance._universeModel);
simulationObject.FindComponent&lt;RigidbodyComponent&gt;().SetState(rigidbodyState3, __instance._universeModel);
return false;

&lt;/syntaxhighlight&gt;And with this, you should be done!
[[Category:Tutorials]]</text>
      <sha1>060y74e63vxij5irparm2nyny5x4mh3</sha1>
    </revision>
  </page>
  <page>
    <title>General overview of custom modules</title>
    <ns>0</ns>
    <id>93</id>
    <revision>
      <id>287</id>
      <timestamp>2024-01-11T17:06:52Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>What's a module, what's a custom module, what does it consist of</comment>
      <origin>287</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <revision>
      <id>291</id>
      <parentid>287</parentid>
      <timestamp>2024-01-11T17:26:02Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>291</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="27" sha1="c5wqrzvmgu4df6h10q9bxp5lfnr2eut" xml:space="preserve">[[Category:Custom Modules]]</text>
      <sha1>c5wqrzvmgu4df6h10q9bxp5lfnr2eut</sha1>
    </revision>
    <revision>
      <id>292</id>
      <parentid>291</parentid>
      <timestamp>2024-01-11T17:43:16Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Add page contents</comment>
      <origin>292</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4392" sha1="tjiy2hg7t11cvgnavpfgu6pvjbiwsdj" xml:space="preserve">[[Category:Custom Modules]]

== What are Modules? ==
Each part in the game has one or more Modules attached to it. Purpose of a Module is to provide a functionality to a part.

Some examples are:

* &lt;code&gt;Module_Deployable&lt;/code&gt; - adds deploy functionality (landing legs, antennae...)
* &lt;code&gt;Module_DataTransmitter&lt;/code&gt; - adds connection and data transmittance functionality (capsules, antennae...)
* &lt;code&gt;Module_Color&lt;/code&gt; - adds ability to color a part (base color, accent color)
* &lt;code&gt;Module_Engine&lt;/code&gt; - adds engine functionality (thrust, throttle, ISP, propellant requests...)

All stock Module definitions can be found inside the game's &lt;code&gt;Assembly-CSharp.dll&lt;/code&gt; under namespaces: &lt;code&gt;KSP.Modules&lt;/code&gt; (ModuleData and PartBehaviourModule) and &lt;code&gt;KSP.Sim.impl&lt;/code&gt; (PartComponentModule)

== What are Custom Modules? ==
Custom Modules are Modules that we modders can create and attach to a part to give it some custom functionality.

Some examples are:

* &lt;code&gt;Module_LifeSupportConsumer&lt;/code&gt; - mod: KerbalLifeSupportSystem - provides life support consumption (oxygen, water, food) to parts with crew capacity
* &lt;code&gt;Module_OrbitalSurvey&lt;/code&gt; - mod: Orbital Survey - provides scanning functionality to parts with a Module_DataTransmitter module (antennae)

== Anatomy of a Module ==
Modules have 3 basic components, C# classes that inherit from a base class.

&lt;code&gt;ModuleData&lt;/code&gt;

* base class whose function is to define and maintain data used by the Module
* data is stored either in save game files ([KSPState] attribute) or in part definition json ([KSPDefinition] attribute) or persists only during runtime
* some examples of data stored in ModuleData: CurrentDeployState (state of deployment for the part), IsTransmitting (is part currently transmitting or not), thrustPercentage (at what percentage is the thrust currently at for this engine)
* use it to store data that other components will use or that will be displayed in PAM or OAB/R&amp;D

&lt;code&gt;PartBehaviourModule&lt;/code&gt;

* base class that's responsible for how a part behaves, what happens when a button is pushed, what is displayed in PAM (in Flight and OAB), what happens on a game tick update
* use it for immediate frontend logic - player enables the module, engines change their modes, entries in PAM need to be shown/hidden, etc.

&lt;code&gt;PartComponentModule&lt;/code&gt;

* base class used mostly for background/backend Module logic, things that aren't directly connected to PAM
* example of backend logic: Orbital Survey initiates scans if the conditions are right
* use it also for things that continually need to run in background - e.g. life support consumption on game ticks, continuous scanning while the vessel is unloaded, EC collection for solar panels, etc.

You're free to define your own logic inside these classes, of course, but it's always good to follow established conventions as much as possible.

== Attaching a Custom Module to a part ==
To define and add your Custom Module to parts there are 2 things you need to do.

# In your C# plugin define your classes that derive from &lt;code&gt;ModuleData&lt;/code&gt;, &lt;code&gt;PartBehaviourModule&lt;/code&gt;  and &lt;code&gt;PartComponentModule&lt;/code&gt; classes
# Use the '''Patch Manager''' mod to inject your Custom Module to parts you want.

== Patch Manager ==
Think of Patch Manager as a successor to Module Manager from KSP1. You define patches in a text file with a &lt;code&gt;.patch&lt;/code&gt; extension that you place somewhere in your plugin folder structure.

Here's a rudimentary example of a Custom Module being injected to all parts.

&lt;code&gt;MyCustomModule.patch&lt;/code&gt;:
 :parts {
     +Module_MyCustomModule {
         +Data_MyCustomModule {
         }
     }
 }
With Patch Manager installed this patch will add your &lt;code&gt;MyCustomModule&lt;/code&gt; to all parts in the game (don't do this :)).

You can get Patch Manager either with CKAN or download it from here: https://spacedock.info/mod/3482/Patch%20Manager 

For an in-depth walkthrough of Patch Manager functionalities, syntax, best practices and more sensible examples of Custom Module patches refer to Patch Manager documentation: https://pm.kerbal.wiki/

Some examples for custom module patches:

* KLSS: https://github.com/Safarte/KerbalLifeSupportSystem/tree/main/plugin_template/patches
* Orbital Survey: https://github.com/Falki-git/OrbitalSurvey/tree/master/plugin_template/patches</text>
      <sha1>tjiy2hg7t11cvgnavpfgu6pvjbiwsdj</sha1>
    </revision>
    <revision>
      <id>296</id>
      <parentid>292</parentid>
      <timestamp>2024-01-11T17:47:49Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>set sorting</comment>
      <origin>296</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4445" sha1="tt6qdh2xhp5fkyc0o8647el2pyl5n2p" xml:space="preserve">[[Category:Custom Modules]]

== What are Modules? ==
Each part in the game has one or more Modules attached to it. Purpose of a Module is to provide a functionality to a part.

Some examples are:

* &lt;code&gt;Module_Deployable&lt;/code&gt; - adds deploy functionality (landing legs, antennae...)
* &lt;code&gt;Module_DataTransmitter&lt;/code&gt; - adds connection and data transmittance functionality (capsules, antennae...)
* &lt;code&gt;Module_Color&lt;/code&gt; - adds ability to color a part (base color, accent color)
* &lt;code&gt;Module_Engine&lt;/code&gt; - adds engine functionality (thrust, throttle, ISP, propellant requests...)

All stock Module definitions can be found inside the game's &lt;code&gt;Assembly-CSharp.dll&lt;/code&gt; under namespaces: &lt;code&gt;KSP.Modules&lt;/code&gt; (ModuleData and PartBehaviourModule) and &lt;code&gt;KSP.Sim.impl&lt;/code&gt; (PartComponentModule)

== What are Custom Modules? ==
Custom Modules are Modules that we modders can create and attach to a part to give it some custom functionality.

Some examples are:

* &lt;code&gt;Module_LifeSupportConsumer&lt;/code&gt; - mod: KerbalLifeSupportSystem - provides life support consumption (oxygen, water, food) to parts with crew capacity
* &lt;code&gt;Module_OrbitalSurvey&lt;/code&gt; - mod: Orbital Survey - provides scanning functionality to parts with a Module_DataTransmitter module (antennae)

== Anatomy of a Module ==
Modules have 3 basic components, C# classes that inherit from a base class.

&lt;code&gt;ModuleData&lt;/code&gt;

* base class whose function is to define and maintain data used by the Module
* data is stored either in save game files ([KSPState] attribute) or in part definition json ([KSPDefinition] attribute) or persists only during runtime
* some examples of data stored in ModuleData: CurrentDeployState (state of deployment for the part), IsTransmitting (is part currently transmitting or not), thrustPercentage (at what percentage is the thrust currently at for this engine)
* use it to store data that other components will use or that will be displayed in PAM or OAB/R&amp;D

&lt;code&gt;PartBehaviourModule&lt;/code&gt;

* base class that's responsible for how a part behaves, what happens when a button is pushed, what is displayed in PAM (in Flight and OAB), what happens on a game tick update
* use it for immediate frontend logic - player enables the module, engines change their modes, entries in PAM need to be shown/hidden, etc.

&lt;code&gt;PartComponentModule&lt;/code&gt;

* base class used mostly for background/backend Module logic, things that aren't directly connected to PAM
* example of backend logic: Orbital Survey initiates scans if the conditions are right
* use it also for things that continually need to run in background - e.g. life support consumption on game ticks, continuous scanning while the vessel is unloaded, EC collection for solar panels, etc.

You're free to define your own logic inside these classes, of course, but it's always good to follow established conventions as much as possible.

== Attaching a Custom Module to a part ==
To define and add your Custom Module to parts there are 2 things you need to do.

# In your C# plugin define your classes that derive from &lt;code&gt;ModuleData&lt;/code&gt;, &lt;code&gt;PartBehaviourModule&lt;/code&gt;  and &lt;code&gt;PartComponentModule&lt;/code&gt; classes
# Use the '''Patch Manager''' mod to inject your Custom Module to parts you want.

== Patch Manager ==
Think of Patch Manager as a successor to Module Manager from KSP1. You define patches in a text file with a &lt;code&gt;.patch&lt;/code&gt; extension that you place somewhere in your plugin folder structure.

Here's a rudimentary example of a Custom Module being injected to all parts.

&lt;code&gt;MyCustomModule.patch&lt;/code&gt;:
 :parts {
     +Module_MyCustomModule {
         +Data_MyCustomModule {
         }
     }
 }
With Patch Manager installed this patch will add your &lt;code&gt;MyCustomModule&lt;/code&gt; to all parts in the game (don't do this :)).

You can get Patch Manager either with CKAN or download it from here: https://spacedock.info/mod/3482/Patch%20Manager 

For an in-depth walkthrough of Patch Manager functionalities, syntax, best practices and more sensible examples of Custom Module patches refer to Patch Manager documentation: https://pm.kerbal.wiki/

Some examples for custom module patches:

* KLSS: https://github.com/Safarte/KerbalLifeSupportSystem/tree/main/plugin_template/patches
* Orbital Survey: https://github.com/Falki-git/OrbitalSurvey/tree/master/plugin_template/patches
{{DEFAULTSORT:1_General_overview_of_custom_modules}}</text>
      <sha1>tt6qdh2xhp5fkyc0o8647el2pyl5n2p</sha1>
    </revision>
    <revision>
      <id>331</id>
      <parentid>296</parentid>
      <timestamp>2024-01-26T15:46:21Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Clarified the distinction between PartBehaviourModule and PartComponentModule</comment>
      <origin>331</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4717" sha1="nqzcue575w5zbut9nfb5hbnl2dgchzl" xml:space="preserve">[[Category:Custom Modules]]

== What are Modules? ==
Each part in the game has one or more Modules attached to it. Purpose of a Module is to provide a functionality to a part.

Some examples are:

* &lt;code&gt;Module_Deployable&lt;/code&gt; - adds deploy functionality (landing legs, antennae...)
* &lt;code&gt;Module_DataTransmitter&lt;/code&gt; - adds connection and data transmittance functionality (capsules, antennae...)
* &lt;code&gt;Module_Color&lt;/code&gt; - adds ability to color a part (base color, accent color)
* &lt;code&gt;Module_Engine&lt;/code&gt; - adds engine functionality (thrust, throttle, ISP, propellant requests...)

All stock Module definitions can be found inside the game's &lt;code&gt;Assembly-CSharp.dll&lt;/code&gt; under namespaces: &lt;code&gt;KSP.Modules&lt;/code&gt; (ModuleData and PartBehaviourModule) and &lt;code&gt;KSP.Sim.impl&lt;/code&gt; (PartComponentModule)

== What are Custom Modules? ==
Custom Modules are Modules that we modders can create and attach to a part to give it some custom functionality.

Some examples are:

* &lt;code&gt;Module_LifeSupportConsumer&lt;/code&gt; - mod: KerbalLifeSupportSystem - provides life support consumption (oxygen, water, food) to parts with crew capacity
* &lt;code&gt;Module_OrbitalSurvey&lt;/code&gt; - mod: Orbital Survey - provides scanning functionality to parts with a Module_DataTransmitter module (antennae)

== Anatomy of a Module ==
Modules have 3 basic components, C# classes that inherit from a base class.

&lt;code&gt;ModuleData&lt;/code&gt;

* base class whose function is to define and maintain data used by the Module
* data is stored either in save game files ([KSPState] attribute) or in part definition json ([KSPDefinition] attribute) or persists only during runtime
* some examples of data stored in ModuleData: CurrentDeployState (state of deployment for the part), IsTransmitting (is part currently transmitting or not), thrustPercentage (at what percentage is the thrust currently at for this engine)
* use it to store data that other components will use or that will be displayed in PAM or OAB/R&amp;D

&lt;code&gt;PartBehaviourModule&lt;/code&gt;

* base class that's responsible for how a part behaves, what happens when a button is pushed, what is displayed in PAM (in Flight and OAB), what happens on a game tick update
* this class exists only when the vessel is loaded (i.e. player is directly controlling the vessel)
* use it for immediate frontend logic - player enables the module, engines change their modes, entries in PAM need to be shown/hidden, etc.

&lt;code&gt;PartComponentModule&lt;/code&gt;

* base class used mostly for background/backend Module logic, things that aren't directly connected to PAM
* example of backend logic: Orbital Survey initiates scans if the conditions are right
* class is instantiated when the part is first placed in the OAB and it continues to exist until the part is destroyed. Update loops are being executed even on unloaded vessels
* use it for things that continually need to run in background - e.g. life support consumption on game ticks, continuous scanning while the vessel is unloaded, EC collection for solar panels, etc.

You're free to define your own logic inside these classes, of course, but it's always good to follow established conventions as much as possible.

== Attaching a Custom Module to a part ==
To define and add your Custom Module to parts there are 2 things you need to do.

# In your C# plugin define your classes that derive from &lt;code&gt;ModuleData&lt;/code&gt;, &lt;code&gt;PartBehaviourModule&lt;/code&gt;  and &lt;code&gt;PartComponentModule&lt;/code&gt; classes
# Use the '''Patch Manager''' mod to inject your Custom Module to parts you want.

== Patch Manager ==
Think of Patch Manager as a successor to Module Manager from KSP1. You define patches in a text file with a &lt;code&gt;.patch&lt;/code&gt; extension that you place somewhere in your plugin folder structure.

Here's a rudimentary example of a Custom Module being injected to all parts.

&lt;code&gt;MyCustomModule.patch&lt;/code&gt;:
 :parts {
     +Module_MyCustomModule {
         +Data_MyCustomModule {
         }
     }
 }
With Patch Manager installed this patch will add your &lt;code&gt;MyCustomModule&lt;/code&gt; to all parts in the game (don't do this :)).

You can get Patch Manager either with CKAN or download it from here: https://spacedock.info/mod/3482/Patch%20Manager 

For an in-depth walkthrough of Patch Manager functionalities, syntax, best practices and more sensible examples of Custom Module patches refer to Patch Manager documentation: https://pm.kerbal.wiki/

Some examples for custom module patches:

* KLSS: https://github.com/Safarte/KerbalLifeSupportSystem/tree/main/plugin_template/patches
* Orbital Survey: https://github.com/Falki-git/OrbitalSurvey/tree/master/plugin_template/patches
{{DEFAULTSORT:1_General_overview_of_custom_modules}}</text>
      <sha1>nqzcue575w5zbut9nfb5hbnl2dgchzl</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Custom Modules</title>
    <ns>14</ns>
    <id>94</id>
    <revision>
      <id>289</id>
      <timestamp>2024-01-11T17:15:03Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>What are custom modules, how to create them, how do they work</comment>
      <origin>289</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <revision>
      <id>290</id>
      <parentid>289</parentid>
      <timestamp>2024-01-11T17:19:51Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Add category to this category</comment>
      <origin>290</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="22" sha1="jt4mo6t18f2g3ya2mtbqtvf0rbsqqi9" xml:space="preserve">[[Category:Tutorials]]</text>
      <sha1>jt4mo6t18f2g3ya2mtbqtvf0rbsqqi9</sha1>
    </revision>
    <revision>
      <id>309</id>
      <parentid>290</parentid>
      <timestamp>2024-01-13T14:13:28Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>309</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="27" sha1="knmmqxbke88v1tko2kywrpi4df49jsp" xml:space="preserve">[[Category:Creating parts]]</text>
      <sha1>knmmqxbke88v1tko2kywrpi4df49jsp</sha1>
    </revision>
    <revision>
      <id>317</id>
      <parentid>309</parentid>
      <timestamp>2024-01-15T02:06:25Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>317</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="30" sha1="orfxed28it9pnx0i649hu2m7p20d9rd" xml:space="preserve">[[Category:Parts and modules]]</text>
      <sha1>orfxed28it9pnx0i649hu2m7p20d9rd</sha1>
    </revision>
  </page>
  <page>
    <title>Class descriptions for custom modules</title>
    <ns>0</ns>
    <id>95</id>
    <revision>
      <id>293</id>
      <timestamp>2024-01-11T17:45:38Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>HowTo for Data, PartBehaviour and PartComponent classes</comment>
      <origin>293</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <revision>
      <id>294</id>
      <parentid>293</parentid>
      <timestamp>2024-01-11T17:46:07Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Add the page to the category</comment>
      <origin>294</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="27" sha1="c5wqrzvmgu4df6h10q9bxp5lfnr2eut" xml:space="preserve">[[Category:Custom Modules]]</text>
      <sha1>c5wqrzvmgu4df6h10q9bxp5lfnr2eut</sha1>
    </revision>
    <revision>
      <id>295</id>
      <parentid>294</parentid>
      <timestamp>2024-01-11T17:47:15Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>set sorting</comment>
      <origin>295</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="84" sha1="d5tu0zpmtyqu0n27ua6c2ab577u571r" xml:space="preserve">[[Category:Custom Modules]]

{{DEFAULTSORT:2_Class_descriptions_for_custom_modules}}</text>
      <sha1>d5tu0zpmtyqu0n27ua6c2ab577u571r</sha1>
    </revision>
    <revision>
      <id>297</id>
      <parentid>295</parentid>
      <timestamp>2024-01-11T18:34:00Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Add page contents</comment>
      <origin>297</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="14404" sha1="f0175oipkn99vhdtf9e1ua4sq446f68" xml:space="preserve">[[Category:Custom Modules]]

{{DEFAULTSORT:2_Class_descriptions_for_custom_modules}}

While you're mostly free to define how your classes would be set up, there are some guidelines that need to be followed, restrictions to be aware of and inner workings to understand.

== # Data class ==

=== ## Defining your class ===
 [Serializable]
 public class Data_MyCustomModule : ModuleData
 { .. }

=== ## Set your ParthBehaviourModule type reference ===
 public override Type ModuleType =&gt; typeof(Module_MyCustomModule);

=== ## Defining module properties ===

* these are entries shown in the PAM

 // Toggle (true/false) property
 [KSPState] // KSPState attribute tells the game to save the state of this property in the save game file
 [LocalizedField("Path/To/Your/Localization/String1")] // localization string for this attribute (see 'localization' paragraph)
 [PAMDisplayControl(SortIndex = 2)] // sets the sorting index for this property. Lower values are placed first
 public ModuleProperty&lt;bool&gt; SomeToggleProperty = new(false); // value in the parentheses defines the initial value
 
 // String property
 [LocalizedField("Path/To/Your/Localization/String2")]
 [PAMDisplayControl(SortIndex = 4)]
 [KSPDefinition] // KSPDefinition tells this property that its value is set from the part definition json (set by Patch Manager)
 public ModuleProperty&lt;string&gt; SomeStringProperty = new ("");
 
 // Float property - readonly
 [LocalizedField("Path/To/Your/Localization/String3")]
 [PAMDisplayControl(SortIndex = 7)]
 [JsonIgnore] // either [KSPState] or [JsonIgnore] is needed if you want this property to be readonly
 public ModuleProperty&lt;float&gt; SomeReadOnlyFloat = new (0, true, val =&gt; $"{val:N0} m");
 
 // Float property – editable by players, will be built as a slider
 [LocalizedField("Path/To/Your/Localization/String4")]
 [PAMDisplayControl(SortIndex = 1)]
 [SteppedRange(1f, 45f, 1f)] // minimum, maximum and step values
 public ModuleProperty&lt;float&gt; SomeEditableProperty = new (1f, false, val =&gt; $"{val:N0}°"); // initial value, isReadOnly, ToStringDelegate

=== ## Defining a dropdown list property ===

* dropdown list properties are string properties for which you define dropdown values in OnPartBehaviourModuleInit()

 // Dropdown property
 [LocalizedField("Path/To/Your/Localization/String5")]
 public ModuleProperty&lt;string&gt; DropdownProperty = new ModuleProperty&lt;string&gt;("Some value");
 
 public override void OnPartBehaviourModuleInit()
 {
     var dropdownList = new DropdownItemList();
     dropdownList.Add("some key", new DropdownItem() { key = "some key", text = "Some value" });
     dropdownList.Add("another key", new DropdownItem() { key = "another key", text = "Another value" });
     SetDropdownData(DropdownProperty, dropdownList);
 }

=== ## OnPartBehaviourModuleInit() ===

* runs when this module is initialized when entering Flight/OAB state

 public override void OnPartBehaviourModuleInit()
 { /* use this to initialize some values for your module, if needed */ }

=== ## OAB module description ===

* set the description of your module for all parts it’s being attached to
* description is shown in OAB and R&amp;D while hovering over the part after pressing SHIFT

 public override List&lt;OABPartData.PartInfoModuleEntry&gt; GetPartInfoEntries(Type partBehaviourModuleType, List&lt;OABPartData.PartInfoModuleEntry&gt; delegateList)
 {
     if (partBehaviourModuleType == ModuleType)
     {
         // add module description
         delegateList.Add(new OABPartData.PartInfoModuleEntry("", (_) =&gt; „Path/To/Your/Localization/String5“));
 
         // entry header
         var entry = new OABPartData.PartInfoModuleEntry(„Path/To/Your/Localization/String6“,
             _ =&gt;
             {
                 // subentries
                 var subEntries = new List&lt;OABPartData.PartInfoModuleSubEntry&gt;();
        
                 // first subentry
                 subEntries.Add(new OABPartData.PartInfoModuleSubEntry(
                     "Path/To/Your/Localization/String7", // subentry NAME
                     "subentry value"
                 ));
 
                 // second subentry
                 subEntries.Add(new OABPartData.PartInfoModuleSubEntry(
                     "Path/To/Your/Localization/String8", // subentry NAME
                     "subentry value"
                 ));
 
                 // if your module is using resources, you can add them to the description
                 // this doesn't set the value, it's just used to display it to the player
                 if (UseResources)
                 {
                     subEntries.Add(new OABPartData.PartInfoModuleSubEntry(
                         "Path/To/Your/Localization/String/ResourceName",
                         $"{RequiredResource.Rate.ToString("N3")} /s"
                     ));
                 }
 
                 return subEntries;
             });
         delegateList.Add(entry);
     }
     return delegateList;
 }

=== ## Setting up resource consumptions ===

* Note: trigger this from OnStart() in the Part Component class

 public override void SetupResourceRequest(ResourceFlowRequestBroker resourceFlowRequestBroker)
 {
     if (UseResources)
     {
         ResourceDefinitionID resourceIDFromName =
             GameManager.Instance.Game.ResourceDefinitionDatabase.GetResourceIDFromName(this.RequiredResource.ResourceName);
         if (resourceIDFromName == ResourceDefinitionID.InvalidID)
         {
             _LOGGER.LogError($"There are no resources with name {this.RequiredResource.ResourceName}");
             return;
         }
         RequestConfig = new ResourceFlowRequestCommandConfig();
         RequestConfig.FlowResource = resourceIDFromName;
         RequestConfig.FlowDirection = FlowDirection.FLOW_OUTBOUND;
         RequestConfig.FlowUnits = 0.0;
         RequestHandle = resourceFlowRequestBroker.AllocateOrGetRequest("MyCustomModule", default(ResourceFlowRequestHandle));
         resourceFlowRequestBroker.SetCommands(this.RequestHandle, 1.0, new ResourceFlowRequestCommandConfig[] { this.RequestConfig });
     }
 }
 
 [KSPDefinition]
 [Tooltip("Whether the module consumes resources")]
 public bool UseResources = true;
 
 public bool HasResourcesToOperate = true;
 
 [KSPDefinition]
 [Tooltip("Resource required to operate this module if it consumes resources")]
 public PartModuleResourceSetting RequiredResource;
 
 public ResourceFlowRequestCommandConfig RequestConfig;
   

== # Part Behaviour class ==

=== ## Defining your class ===
 [DisallowMultipleComponent]
 public class Module_OrbitalSurvey : PartBehaviourModule
 { .. }

=== ## Set your PartComponentModule type reference ===
 public override Type PartComponentModuleType =&gt; typeof(PartComponentModule_MyCustomModule);

=== ## Create Data module instance ===
 [SerializeField]
 protected Data_MyCustomModule _dataMyCustomModule;
 
 public override void AddDataModules()
 {
     base.AddDataModules();
     _dataMyCustomModule ??= new Data_MyCustomModule();
     DataModules.TryAddUnique(_dataMyCustomModule, out _dataMyCustomModule);
 }

=== ## Initialize the module behaviour ===
 private ModuleAction _myCustomAction;
 
 public override void OnInitialize()
 {
     base.OnInitialize();
 
     // module actions are triggered when players press a button on the PAM property
     _myCustomAction = new ModuleAction(MethodThatWillHandleTheAction);
     _dataMyCustomModule.AddAction("Path/To/Your/Localization/String/X", _myCustomAction, 1);
 
     if (PartBackingMode == PartBackingModes.Flight)
     {
         /* do stuff that's only needed in Flight view */
 
         // example1: hide or show PAM properties depending on the Flight/OAB view
         UpdateFlightPAMVisibility(); 
 
         // example2: subscribe to the enabled toggle
         _dataMyCustomModule.EnabledToggleProperty.OnChangedValue += MethodThatWillHandleThis;
     } 
 
     if (PartBackingMode == PartBackingModes.OAB)
     { /* do stuff that's only needed in the OAB*/ }
 }
 
 private void MethodThatWillHandleTheAction()
 { /* do stuff here */}

=== ## FixedUpdate loop - Flight ===

* define stuff that needs to be executed continuously on every FixedUpdate loop. Be careful not to do expensive stuff here
* this triggers in Flight view only

 // This triggers in flight
 public override void OnModuleFixedUpdate(float fixedDeltaTime)
 {   
     // example1: do stuff only if the module is enabled
     if (_dataMyCustomModule.EnabledToggleProperty.GetValue())
     { .. }
 
     // example2: update PAM items
     if (someConditionMet)
     {
         UpdateFlightPAMVisibility();
     }
 }

=== ## Update loop ===

* similar to FixedUpdate, but this is a regular Update loop independent of game time
* this triggers in Flight and in OAB

 public override void OnUpdate(float deltaTime)
 { .. }

=== ## FixedUpdate loop - OAB ===

* same as OnModuleFixedUpdate but it triggers only in OAB

 public override void OnModuleOABFixedUpdate(float deltaTime)
 { .. }

=== ## Define behaviour when the behaviour module instance will be destroyed ===

* cases: exiting Flight view, part has been destroyed, exiting the game

 public override void OnShutdown()
 {
     // example: unsubscribe from events
     _dataMyCustomModule.EnabledToggleProperty.OnChangedValue -= OnToggleChangedValue;
 }

=== ## Setting visibility for PAM properties ===
 private void UpdateFlightPAMVisibility(bool state)
 {
     _dataMyCustomModule.SetVisible(_dataMyCustomModule.SomeProperty, state);
     _dataMyCustomModule.SetVisible(_dataMyCustomModule.SomeOtherProperty, true);
     _dataMyCustomModule.SetVisible(_dataMyCustomModule.YetAnotherProperty, false);
 }

=== ## OnEnable ===

* triggers when Flight view is loaded and in OAB when part is added to the assembly

 protected void OnEnable()
 { .. }

== # Part Component class ==

=== ## Defining your class ===
 public class PartComponentModule_MyCustomModule : PartBehaviourModule
 { .. }

=== ## Set your PartBehaviourModule type reference ===
 public override Type PartComponentModuleType =&gt; typeof(PartComponentModule_MyCustomModule);

=== ## OnStart(double universalTime) ===

* for new vessels this will run when the Flight view is loaded
* also runs on load for every vessel currently in Flight (don't need to be loaded).
* best used for any kind of initialization of backend tasks this vessel/module needs to go through

 private Data_MyCustomModule _dataMyCustomModule;
 
 public override void OnStart(double universalTime)
 {
     // set a reference to the Data class
     if (!DataModules.TryGetByType&lt;Data_MyCustomModule&gt;(out _dataMyCustomModule))
     {
         _LOGGER.LogError("Unable to find a Data_MyCustomModule in the PartComponentModule for " + base.Part.PartName);
         return;
     }
 
     // initialize resource requests
     _dataMyCustomModule.SetupResourceRequest(base.resourceFlowRequestBroker);
 }

=== ## OnUpdate ===

* this starts triggering when the vessel is first placed in Flight. Doesn't trigger in the OAB before that
* once the vessel is in Flight, it will always trigger, in any view, until the part is destroyed/recovered
* use this for tasks that need to continually run, even when vessel is unloaded. Be careful not to put expensive tasks here.

 public override void OnUpdate(double universalTime, double deltaUniversalTime)
 {
     ResourceConsumptionUpdate(deltaUniversalTime); // example1: trigger resources consumption
     UpdateStatusAndState(); // example2: do general status updates if needed
 }

=== ## Resource consumption ===
 private void ResourceConsumptionUpdate(double deltaTime)
 {
     if (_dataMyCustomModule.UseResources)
     {
         if (GameManager.Instance.Game.SessionManager.IsDifficultyOptionEnabled("InfinitePower"))
         {
             _dataMyCustomModule.HasResourcesToOperate = true;
             if (base.resourceFlowRequestBroker.IsRequestActive(_dataMyCustomModule.RequestHandle))
             {
                 base.resourceFlowRequestBroker.SetRequestInactive(_dataMyCustomModule.RequestHandle);
                 return;
             }
         }
         else
         {
             if (this._hasOutstandingRequest)
             {
                 this._returnedRequestResolutionState =
                     base.resourceFlowRequestBroker.GetRequestState(_dataMyCustomModule.RequestHandle);
                 _dataMyCustomModule.HasResourcesToOperate = this._returnedRequestResolutionState.WasLastTickDeliveryAccepted;
             }
             this._hasOutstandingRequest = false;
             if (!_dataMyCustomModule.EnabledToggleProperty.GetValue() &amp;&amp;
                 base.resourceFlowRequestBroker.IsRequestActive(_dataMyCustomModule.RequestHandle))
             {
                 base.resourceFlowRequestBroker.SetRequestInactive(_dataMyCustomModule.RequestHandle);
                 _dataMyCustomModule.HasResourcesToOperate = false;
             }
             else if (_dataMyCustomModule.EnabledToggle.GetValue() &amp;&amp;
                 base.resourceFlowRequestBroker.IsRequestInactive(_dataMyCustomModule.RequestHandle))
             {
                 base.resourceFlowRequestBroker.SetRequestActive(_dataMyCustomModule.RequestHandle);
             }
             if (_dataMyCustomModule.EnabledToggleProperty.GetValue())
             {
                 _dataMyCustomModule.RequestConfig.FlowUnits = (double)_dataMyCustomModule.RequiredResource.Rate;
                 base.resourceFlowRequestBroker.SetCommands(_dataMyCustomModule.RequestHandle, 1.0,
                     new ResourceFlowRequestCommandConfig[] { _dataMyCustomModule.RequestConfig });
                 this._hasOutstandingRequest = true;
                 return;
             }
         }
     }
     else
     {
         _dataMyCustomModule.HasResourcesToOperate = true;
     }
 }

=== ## OnShutdown ===

* define behaviour when the Part Component instance will be destroyed
* cases: part has been destroyed, exiting the game

 public override void OnShutdown()
 { .. }</text>
      <sha1>f0175oipkn99vhdtf9e1ua4sq446f68</sha1>
    </revision>
    <revision>
      <id>298</id>
      <parentid>297</parentid>
      <timestamp>2024-01-11T18:36:43Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <minor/>
      <comment>Formatting</comment>
      <origin>298</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="14329" sha1="czfcj6wltuv2d2cfk2rh2p4qugeq7pi" xml:space="preserve">[[Category:Custom Modules]]

{{DEFAULTSORT:2_Class_descriptions_for_custom_modules}}

While you're mostly free to define how your classes would be set up, there are some guidelines that need to be followed, restrictions to be aware of and inner workings to understand.

== Data class ==

=== Defining your class ===
 [Serializable]
 public class Data_MyCustomModule : ModuleData
 { .. }

=== Set your ParthBehaviourModule type reference ===
 public override Type ModuleType =&gt; typeof(Module_MyCustomModule);

=== Defining module properties ===

* these are entries shown in the PAM

 // Toggle (true/false) property
 [KSPState] // KSPState attribute tells the game to save the state of this property in the save game file
 [LocalizedField("Path/To/Your/Localization/String1")] // localization string for this attribute (see 'localization' paragraph)
 [PAMDisplayControl(SortIndex = 2)] // sets the sorting index for this property. Lower values are placed first
 public ModuleProperty&lt;bool&gt; SomeToggleProperty = new(false); // value in the parentheses defines the initial value
 
 // String property
 [LocalizedField("Path/To/Your/Localization/String2")]
 [PAMDisplayControl(SortIndex = 4)]
 [KSPDefinition] // KSPDefinition tells this property that its value is set from the part definition json (set by Patch Manager)
 public ModuleProperty&lt;string&gt; SomeStringProperty = new ("");
 
 // Float property - readonly
 [LocalizedField("Path/To/Your/Localization/String3")]
 [PAMDisplayControl(SortIndex = 7)]
 [JsonIgnore] // either [KSPState] or [JsonIgnore] is needed if you want this property to be readonly
 public ModuleProperty&lt;float&gt; SomeReadOnlyFloat = new (0, true, val =&gt; $"{val:N0} m");
 
 // Float property – editable by players, will be built as a slider
 [LocalizedField("Path/To/Your/Localization/String4")]
 [PAMDisplayControl(SortIndex = 1)]
 [SteppedRange(1f, 45f, 1f)] // minimum, maximum and step values
 public ModuleProperty&lt;float&gt; SomeEditableProperty = new (1f, false, val =&gt; $"{val:N0}°"); // initial value, isReadOnly, ToStringDelegate

=== Defining a dropdown list property ===

* dropdown list properties are string properties for which you define dropdown values in OnPartBehaviourModuleInit()

 // Dropdown property
 [LocalizedField("Path/To/Your/Localization/String5")]
 public ModuleProperty&lt;string&gt; DropdownProperty = new ModuleProperty&lt;string&gt;("Some value");
 
 public override void OnPartBehaviourModuleInit()
 {
     var dropdownList = new DropdownItemList();
     dropdownList.Add("some key", new DropdownItem() { key = "some key", text = "Some value" });
     dropdownList.Add("another key", new DropdownItem() { key = "another key", text = "Another value" });
     SetDropdownData(DropdownProperty, dropdownList);
 }

=== OnPartBehaviourModuleInit() ===

* runs when this module is initialized when entering Flight/OAB state

 public override void OnPartBehaviourModuleInit()
 { /* use this to initialize some values for your module, if needed */ }

=== OAB module description ===

* set the description of your module for all parts it’s being attached to
* description is shown in OAB and R&amp;D while hovering over the part after pressing SHIFT

 public override List&lt;OABPartData.PartInfoModuleEntry&gt; GetPartInfoEntries(Type partBehaviourModuleType, List&lt;OABPartData.PartInfoModuleEntry&gt; delegateList)
 {
     if (partBehaviourModuleType == ModuleType)
     {
         // add module description
         delegateList.Add(new OABPartData.PartInfoModuleEntry("", (_) =&gt; „Path/To/Your/Localization/String5“));
 
         // entry header
         var entry = new OABPartData.PartInfoModuleEntry(„Path/To/Your/Localization/String6“,
             _ =&gt;
             {
                 // subentries
                 var subEntries = new List&lt;OABPartData.PartInfoModuleSubEntry&gt;();
        
                 // first subentry
                 subEntries.Add(new OABPartData.PartInfoModuleSubEntry(
                     "Path/To/Your/Localization/String7", // subentry NAME
                     "subentry value"
                 ));
 
                 // second subentry
                 subEntries.Add(new OABPartData.PartInfoModuleSubEntry(
                     "Path/To/Your/Localization/String8", // subentry NAME
                     "subentry value"
                 ));
 
                 // if your module is using resources, you can add them to the description
                 // this doesn't set the value, it's just used to display it to the player
                 if (UseResources)
                 {
                     subEntries.Add(new OABPartData.PartInfoModuleSubEntry(
                         "Path/To/Your/Localization/String/ResourceName",
                         $"{RequiredResource.Rate.ToString("N3")} /s"
                     ));
                 }
 
                 return subEntries;
             });
         delegateList.Add(entry);
     }
     return delegateList;
 }

=== Setting up resource consumptions ===

* Note: trigger this from OnStart() in the Part Component class

 public override void SetupResourceRequest(ResourceFlowRequestBroker resourceFlowRequestBroker)
 {
     if (UseResources)
     {
         ResourceDefinitionID resourceIDFromName =
             GameManager.Instance.Game.ResourceDefinitionDatabase.GetResourceIDFromName(this.RequiredResource.ResourceName);
         if (resourceIDFromName == ResourceDefinitionID.InvalidID)
         {
             _LOGGER.LogError($"There are no resources with name {this.RequiredResource.ResourceName}");
             return;
         }
         RequestConfig = new ResourceFlowRequestCommandConfig();
         RequestConfig.FlowResource = resourceIDFromName;
         RequestConfig.FlowDirection = FlowDirection.FLOW_OUTBOUND;
         RequestConfig.FlowUnits = 0.0;
         RequestHandle = resourceFlowRequestBroker.AllocateOrGetRequest("MyCustomModule", default(ResourceFlowRequestHandle));
         resourceFlowRequestBroker.SetCommands(this.RequestHandle, 1.0, new ResourceFlowRequestCommandConfig[] { this.RequestConfig });
     }
 }
 
 [KSPDefinition]
 [Tooltip("Whether the module consumes resources")]
 public bool UseResources = true;
 
 public bool HasResourcesToOperate = true;
 
 [KSPDefinition]
 [Tooltip("Resource required to operate this module if it consumes resources")]
 public PartModuleResourceSetting RequiredResource;
 
 public ResourceFlowRequestCommandConfig RequestConfig;
   

== Part Behaviour class ==

=== Defining your class ===
 [DisallowMultipleComponent]
 public class Module_OrbitalSurvey : PartBehaviourModule
 { .. }

=== Set your PartComponentModule type reference ===
 public override Type PartComponentModuleType =&gt; typeof(PartComponentModule_MyCustomModule);

=== Create Data module instance ===
 [SerializeField]
 protected Data_MyCustomModule _dataMyCustomModule;
 
 public override void AddDataModules()
 {
     base.AddDataModules();
     _dataMyCustomModule ??= new Data_MyCustomModule();
     DataModules.TryAddUnique(_dataMyCustomModule, out _dataMyCustomModule);
 }

=== Initialize the module behaviour ===
 private ModuleAction _myCustomAction;
 
 public override void OnInitialize()
 {
     base.OnInitialize();
 
     // module actions are triggered when players press a button on the PAM property
     _myCustomAction = new ModuleAction(MethodThatWillHandleTheAction);
     _dataMyCustomModule.AddAction("Path/To/Your/Localization/String/X", _myCustomAction, 1);
 
     if (PartBackingMode == PartBackingModes.Flight)
     {
         /* do stuff that's only needed in Flight view */
 
         // example1: hide or show PAM properties depending on the Flight/OAB view
         UpdateFlightPAMVisibility(); 
 
         // example2: subscribe to the enabled toggle
         _dataMyCustomModule.EnabledToggleProperty.OnChangedValue += MethodThatWillHandleThis;
     } 
 
     if (PartBackingMode == PartBackingModes.OAB)
     { /* do stuff that's only needed in the OAB*/ }
 }
 
 private void MethodThatWillHandleTheAction()
 { /* do stuff here */}

=== FixedUpdate loop - Flight ===

* define stuff that needs to be executed continuously on every FixedUpdate loop. Be careful not to do expensive stuff here
* this triggers in Flight view only

 // This triggers in flight
 public override void OnModuleFixedUpdate(float fixedDeltaTime)
 {   
     // example1: do stuff only if the module is enabled
     if (_dataMyCustomModule.EnabledToggleProperty.GetValue())
     { .. }
 
     // example2: update PAM items
     if (someConditionMet)
     {
         UpdateFlightPAMVisibility();
     }
 }

=== Update loop ===

* similar to FixedUpdate, but this is a regular Update loop independent of game time
* this triggers in Flight and in OAB

 public override void OnUpdate(float deltaTime)
 { .. }

=== FixedUpdate loop - OAB ===

* same as OnModuleFixedUpdate but it triggers only in OAB

 public override void OnModuleOABFixedUpdate(float deltaTime)
 { .. }

=== Define behaviour when the behaviour module instance will be destroyed ===

* cases: exiting Flight view, part has been destroyed, exiting the game

 public override void OnShutdown()
 {
     // example: unsubscribe from events
     _dataMyCustomModule.EnabledToggleProperty.OnChangedValue -= OnToggleChangedValue;
 }

=== Setting visibility for PAM properties ===
 private void UpdateFlightPAMVisibility(bool state)
 {
     _dataMyCustomModule.SetVisible(_dataMyCustomModule.SomeProperty, state);
     _dataMyCustomModule.SetVisible(_dataMyCustomModule.SomeOtherProperty, true);
     _dataMyCustomModule.SetVisible(_dataMyCustomModule.YetAnotherProperty, false);
 }

=== OnEnable ===

* triggers when Flight view is loaded and in OAB when part is added to the assembly

 protected void OnEnable()
 { .. }

== Part Component class ==

=== Defining your class ===
 public class PartComponentModule_MyCustomModule : PartBehaviourModule
 { .. }

=== Set your PartBehaviourModule type reference ===
 public override Type PartComponentModuleType =&gt; typeof(PartComponentModule_MyCustomModule);

=== OnStart(double universalTime) ===

* for new vessels this will run when the Flight view is loaded
* also runs on load for every vessel currently in Flight (don't need to be loaded).
* best used for any kind of initialization of backend tasks this vessel/module needs to go through

 private Data_MyCustomModule _dataMyCustomModule;
 
 public override void OnStart(double universalTime)
 {
     // set a reference to the Data class
     if (!DataModules.TryGetByType&lt;Data_MyCustomModule&gt;(out _dataMyCustomModule))
     {
         _LOGGER.LogError("Unable to find a Data_MyCustomModule in the PartComponentModule for " + base.Part.PartName);
         return;
     }
 
     // initialize resource requests
     _dataMyCustomModule.SetupResourceRequest(base.resourceFlowRequestBroker);
 }

=== OnUpdate ===

* this starts triggering when the vessel is first placed in Flight. Doesn't trigger in the OAB before that
* once the vessel is in Flight, it will always trigger, in any view, until the part is destroyed/recovered
* use this for tasks that need to continually run, even when vessel is unloaded. Be careful not to put expensive tasks here.

 public override void OnUpdate(double universalTime, double deltaUniversalTime)
 {
     ResourceConsumptionUpdate(deltaUniversalTime); // example1: trigger resources consumption
     UpdateStatusAndState(); // example2: do general status updates if needed
 }

=== Resource consumption ===
 private void ResourceConsumptionUpdate(double deltaTime)
 {
     if (_dataMyCustomModule.UseResources)
     {
         if (GameManager.Instance.Game.SessionManager.IsDifficultyOptionEnabled("InfinitePower"))
         {
             _dataMyCustomModule.HasResourcesToOperate = true;
             if (base.resourceFlowRequestBroker.IsRequestActive(_dataMyCustomModule.RequestHandle))
             {
                 base.resourceFlowRequestBroker.SetRequestInactive(_dataMyCustomModule.RequestHandle);
                 return;
             }
         }
         else
         {
             if (this._hasOutstandingRequest)
             {
                 this._returnedRequestResolutionState =
                     base.resourceFlowRequestBroker.GetRequestState(_dataMyCustomModule.RequestHandle);
                 _dataMyCustomModule.HasResourcesToOperate = this._returnedRequestResolutionState.WasLastTickDeliveryAccepted;
             }
             this._hasOutstandingRequest = false;
             if (!_dataMyCustomModule.EnabledToggleProperty.GetValue() &amp;&amp;
                 base.resourceFlowRequestBroker.IsRequestActive(_dataMyCustomModule.RequestHandle))
             {
                 base.resourceFlowRequestBroker.SetRequestInactive(_dataMyCustomModule.RequestHandle);
                 _dataMyCustomModule.HasResourcesToOperate = false;
             }
             else if (_dataMyCustomModule.EnabledToggle.GetValue() &amp;&amp;
                 base.resourceFlowRequestBroker.IsRequestInactive(_dataMyCustomModule.RequestHandle))
             {
                 base.resourceFlowRequestBroker.SetRequestActive(_dataMyCustomModule.RequestHandle);
             }
             if (_dataMyCustomModule.EnabledToggleProperty.GetValue())
             {
                 _dataMyCustomModule.RequestConfig.FlowUnits = (double)_dataMyCustomModule.RequiredResource.Rate;
                 base.resourceFlowRequestBroker.SetCommands(_dataMyCustomModule.RequestHandle, 1.0,
                     new ResourceFlowRequestCommandConfig[] { _dataMyCustomModule.RequestConfig });
                 this._hasOutstandingRequest = true;
                 return;
             }
         }
     }
     else
     {
         _dataMyCustomModule.HasResourcesToOperate = true;
     }
 }

=== OnShutdown ===

* define behaviour when the Part Component instance will be destroyed
* cases: part has been destroyed, exiting the game

 public override void OnShutdown()
 { .. }</text>
      <sha1>czfcj6wltuv2d2cfk2rh2p4qugeq7pi</sha1>
    </revision>
    <revision>
      <id>332</id>
      <parentid>298</parentid>
      <timestamp>2024-01-26T16:01:41Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Additional clarification that PartBehaviour is only for loaded vessels</comment>
      <origin>332</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="14465" sha1="5h3m5gdxyryf5ri6z1u6rw5zcxtcsgf" xml:space="preserve">[[Category:Custom Modules]]

{{DEFAULTSORT:2_Class_descriptions_for_custom_modules}}

While you're mostly free to define how your classes would be set up, there are some guidelines that need to be followed, restrictions to be aware of and inner workings to understand.

== Data class ==

=== Defining your class ===
 [Serializable]
 public class Data_MyCustomModule : ModuleData
 { .. }

=== Set your ParthBehaviourModule type reference ===
 public override Type ModuleType =&gt; typeof(Module_MyCustomModule);

=== Defining module properties ===

* these are entries shown in the PAM

 // Toggle (true/false) property
 [KSPState] // KSPState attribute tells the game to save the state of this property in the save game file
 [LocalizedField("Path/To/Your/Localization/String1")] // localization string for this attribute (see 'localization' paragraph)
 [PAMDisplayControl(SortIndex = 2)] // sets the sorting index for this property. Lower values are placed first
 public ModuleProperty&lt;bool&gt; SomeToggleProperty = new(false); // value in the parentheses defines the initial value
 
 // String property
 [LocalizedField("Path/To/Your/Localization/String2")]
 [PAMDisplayControl(SortIndex = 4)]
 [KSPDefinition] // KSPDefinition tells this property that its value is set from the part definition json (set by Patch Manager)
 public ModuleProperty&lt;string&gt; SomeStringProperty = new ("");
 
 // Float property - readonly
 [LocalizedField("Path/To/Your/Localization/String3")]
 [PAMDisplayControl(SortIndex = 7)]
 [JsonIgnore] // either [KSPState] or [JsonIgnore] is needed if you want this property to be readonly
 public ModuleProperty&lt;float&gt; SomeReadOnlyFloat = new (0, true, val =&gt; $"{val:N0} m");
 
 // Float property – editable by players, will be built as a slider
 [LocalizedField("Path/To/Your/Localization/String4")]
 [PAMDisplayControl(SortIndex = 1)]
 [SteppedRange(1f, 45f, 1f)] // minimum, maximum and step values
 public ModuleProperty&lt;float&gt; SomeEditableProperty = new (1f, false, val =&gt; $"{val:N0}°"); // initial value, isReadOnly, ToStringDelegate

=== Defining a dropdown list property ===

* dropdown list properties are string properties for which you define dropdown values in OnPartBehaviourModuleInit()

 // Dropdown property
 [LocalizedField("Path/To/Your/Localization/String5")]
 public ModuleProperty&lt;string&gt; DropdownProperty = new ModuleProperty&lt;string&gt;("Some value");
 
 public override void OnPartBehaviourModuleInit()
 {
     var dropdownList = new DropdownItemList();
     dropdownList.Add("some key", new DropdownItem() { key = "some key", text = "Some value" });
     dropdownList.Add("another key", new DropdownItem() { key = "another key", text = "Another value" });
     SetDropdownData(DropdownProperty, dropdownList);
 }

=== OnPartBehaviourModuleInit() ===

* runs when this module is initialized when entering Flight/OAB state

 public override void OnPartBehaviourModuleInit()
 { /* use this to initialize some values for your module, if needed */ }

=== OAB module description ===

* set the description of your module for all parts it’s being attached to
* description is shown in OAB and R&amp;D while hovering over the part after pressing SHIFT

 public override List&lt;OABPartData.PartInfoModuleEntry&gt; GetPartInfoEntries(Type partBehaviourModuleType, List&lt;OABPartData.PartInfoModuleEntry&gt; delegateList)
 {
     if (partBehaviourModuleType == ModuleType)
     {
         // add module description
         delegateList.Add(new OABPartData.PartInfoModuleEntry("", (_) =&gt; „Path/To/Your/Localization/String5“));
 
         // entry header
         var entry = new OABPartData.PartInfoModuleEntry(„Path/To/Your/Localization/String6“,
             _ =&gt;
             {
                 // subentries
                 var subEntries = new List&lt;OABPartData.PartInfoModuleSubEntry&gt;();
        
                 // first subentry
                 subEntries.Add(new OABPartData.PartInfoModuleSubEntry(
                     "Path/To/Your/Localization/String7", // subentry NAME
                     "subentry value"
                 ));
 
                 // second subentry
                 subEntries.Add(new OABPartData.PartInfoModuleSubEntry(
                     "Path/To/Your/Localization/String8", // subentry NAME
                     "subentry value"
                 ));
 
                 // if your module is using resources, you can add them to the description
                 // this doesn't set the value, it's just used to display it to the player
                 if (UseResources)
                 {
                     subEntries.Add(new OABPartData.PartInfoModuleSubEntry(
                         "Path/To/Your/Localization/String/ResourceName",
                         $"{RequiredResource.Rate.ToString("N3")} /s"
                     ));
                 }
 
                 return subEntries;
             });
         delegateList.Add(entry);
     }
     return delegateList;
 }

=== Setting up resource consumptions ===

* Note: trigger this from OnStart() in the Part Component class

 public override void SetupResourceRequest(ResourceFlowRequestBroker resourceFlowRequestBroker)
 {
     if (UseResources)
     {
         ResourceDefinitionID resourceIDFromName =
             GameManager.Instance.Game.ResourceDefinitionDatabase.GetResourceIDFromName(this.RequiredResource.ResourceName);
         if (resourceIDFromName == ResourceDefinitionID.InvalidID)
         {
             _LOGGER.LogError($"There are no resources with name {this.RequiredResource.ResourceName}");
             return;
         }
         RequestConfig = new ResourceFlowRequestCommandConfig();
         RequestConfig.FlowResource = resourceIDFromName;
         RequestConfig.FlowDirection = FlowDirection.FLOW_OUTBOUND;
         RequestConfig.FlowUnits = 0.0;
         RequestHandle = resourceFlowRequestBroker.AllocateOrGetRequest("MyCustomModule", default(ResourceFlowRequestHandle));
         resourceFlowRequestBroker.SetCommands(this.RequestHandle, 1.0, new ResourceFlowRequestCommandConfig[] { this.RequestConfig });
     }
 }
 
 [KSPDefinition]
 [Tooltip("Whether the module consumes resources")]
 public bool UseResources = true;
 
 public bool HasResourcesToOperate = true;
 
 [KSPDefinition]
 [Tooltip("Resource required to operate this module if it consumes resources")]
 public PartModuleResourceSetting RequiredResource;
 
 public ResourceFlowRequestCommandConfig RequestConfig;
   

== Part Behaviour class ==

=== Defining your class ===
 [DisallowMultipleComponent]
 public class Module_OrbitalSurvey : PartBehaviourModule
 { .. }

=== Set your PartComponentModule type reference ===
 public override Type PartComponentModuleType =&gt; typeof(PartComponentModule_MyCustomModule);

=== Create Data module instance ===
 [SerializeField]
 protected Data_MyCustomModule _dataMyCustomModule;
 
 public override void AddDataModules()
 {
     base.AddDataModules();
     _dataMyCustomModule ??= new Data_MyCustomModule();
     DataModules.TryAddUnique(_dataMyCustomModule, out _dataMyCustomModule);
 }

=== Initialize the module behaviour ===
 private ModuleAction _myCustomAction;
 
 public override void OnInitialize()
 {
     base.OnInitialize();
 
     // module actions are triggered when players press a button on the PAM property
     _myCustomAction = new ModuleAction(MethodThatWillHandleTheAction);
     _dataMyCustomModule.AddAction("Path/To/Your/Localization/String/X", _myCustomAction, 1);
 
     if (PartBackingMode == PartBackingModes.Flight)
     {
         /* do stuff that's only needed in Flight view */
 
         // example1: hide or show PAM properties depending on the Flight/OAB view
         UpdateFlightPAMVisibility(); 
 
         // example2: subscribe to the enabled toggle
         _dataMyCustomModule.EnabledToggleProperty.OnChangedValue += MethodThatWillHandleThis;
     } 
 
     if (PartBackingMode == PartBackingModes.OAB)
     { /* do stuff that's only needed in the OAB*/ }
 }
 
 private void MethodThatWillHandleTheAction()
 { /* do stuff here */}

=== FixedUpdate loop - Flight/Map ===

* define stuff that needs to be executed continuously on every FixedUpdate loop. Be careful not to do expensive stuff here
* this triggers when the vessel is loaded, in Flight/Map view only

 // This triggers in flight
 public override void OnModuleFixedUpdate(float fixedDeltaTime)
 {   
     // example1: do stuff only if the module is enabled
     if (_dataMyCustomModule.EnabledToggleProperty.GetValue())
     { .. }
 
     // example2: update PAM items
     if (someConditionMet)
     {
         UpdateFlightPAMVisibility();
     }
 }

=== Update loop ===

* similar to FixedUpdate, but this is a regular Update loop independent of game time
* this triggers in Flight/Map when the vessel is loaded and in OAB when the part is attached to the assembly

 public override void OnUpdate(float deltaTime)
 { .. }

=== FixedUpdate loop - OAB ===

* same as OnModuleFixedUpdate but it triggers only in OAB

 public override void OnModuleOABFixedUpdate(float deltaTime)
 { .. }

=== Define behaviour when the behaviour module instance will be destroyed ===

* cases: exiting Flight view, part has been destroyed, exiting the game

 public override void OnShutdown()
 {
     // example: unsubscribe from events
     _dataMyCustomModule.EnabledToggleProperty.OnChangedValue -= OnToggleChangedValue;
 }

=== Setting visibility for PAM properties ===
 private void UpdateFlightPAMVisibility(bool state)
 {
     _dataMyCustomModule.SetVisible(_dataMyCustomModule.SomeProperty, state);
     _dataMyCustomModule.SetVisible(_dataMyCustomModule.SomeOtherProperty, true);
     _dataMyCustomModule.SetVisible(_dataMyCustomModule.YetAnotherProperty, false);
 }

=== OnEnable ===

* triggers when Flight view is loaded (only for the loaded vessel) and in OAB when part is added to the assembly

 protected void OnEnable()
 { .. }

== Part Component class ==

=== Defining your class ===
 public class PartComponentModule_MyCustomModule : PartBehaviourModule
 { .. }

=== Set your PartBehaviourModule type reference ===
 public override Type PartComponentModuleType =&gt; typeof(PartComponentModule_MyCustomModule);

=== OnStart(double universalTime) ===

* for new vessels this will run when the Flight view is loaded
* also runs on load for every vessel currently in Flight (don't need to be loaded).
* best used for any kind of initialization of backend tasks this vessel/module needs to go through

 private Data_MyCustomModule _dataMyCustomModule;
 
 public override void OnStart(double universalTime)
 {
     // set a reference to the Data class
     if (!DataModules.TryGetByType&lt;Data_MyCustomModule&gt;(out _dataMyCustomModule))
     {
         _LOGGER.LogError("Unable to find a Data_MyCustomModule in the PartComponentModule for " + base.Part.PartName);
         return;
     }
 
     // initialize resource requests
     _dataMyCustomModule.SetupResourceRequest(base.resourceFlowRequestBroker);
 }

=== OnUpdate ===

* this starts triggering when the vessel is first placed in Flight. Doesn't trigger in the OAB before that
* once the vessel is in Flight, it will always trigger, in any view, until the part is destroyed/recovered
* use this for tasks that need to continually run, even when vessel is unloaded. Be careful not to put expensive tasks here.

 public override void OnUpdate(double universalTime, double deltaUniversalTime)
 {
     ResourceConsumptionUpdate(deltaUniversalTime); // example1: trigger resources consumption
     UpdateStatusAndState(); // example2: do general status updates if needed
 }

=== Resource consumption ===
 private void ResourceConsumptionUpdate(double deltaTime)
 {
     if (_dataMyCustomModule.UseResources)
     {
         if (GameManager.Instance.Game.SessionManager.IsDifficultyOptionEnabled("InfinitePower"))
         {
             _dataMyCustomModule.HasResourcesToOperate = true;
             if (base.resourceFlowRequestBroker.IsRequestActive(_dataMyCustomModule.RequestHandle))
             {
                 base.resourceFlowRequestBroker.SetRequestInactive(_dataMyCustomModule.RequestHandle);
                 return;
             }
         }
         else
         {
             if (this._hasOutstandingRequest)
             {
                 this._returnedRequestResolutionState =
                     base.resourceFlowRequestBroker.GetRequestState(_dataMyCustomModule.RequestHandle);
                 _dataMyCustomModule.HasResourcesToOperate = this._returnedRequestResolutionState.WasLastTickDeliveryAccepted;
             }
             this._hasOutstandingRequest = false;
             if (!_dataMyCustomModule.EnabledToggleProperty.GetValue() &amp;&amp;
                 base.resourceFlowRequestBroker.IsRequestActive(_dataMyCustomModule.RequestHandle))
             {
                 base.resourceFlowRequestBroker.SetRequestInactive(_dataMyCustomModule.RequestHandle);
                 _dataMyCustomModule.HasResourcesToOperate = false;
             }
             else if (_dataMyCustomModule.EnabledToggle.GetValue() &amp;&amp;
                 base.resourceFlowRequestBroker.IsRequestInactive(_dataMyCustomModule.RequestHandle))
             {
                 base.resourceFlowRequestBroker.SetRequestActive(_dataMyCustomModule.RequestHandle);
             }
             if (_dataMyCustomModule.EnabledToggleProperty.GetValue())
             {
                 _dataMyCustomModule.RequestConfig.FlowUnits = (double)_dataMyCustomModule.RequiredResource.Rate;
                 base.resourceFlowRequestBroker.SetCommands(_dataMyCustomModule.RequestHandle, 1.0,
                     new ResourceFlowRequestCommandConfig[] { _dataMyCustomModule.RequestConfig });
                 this._hasOutstandingRequest = true;
                 return;
             }
         }
     }
     else
     {
         _dataMyCustomModule.HasResourcesToOperate = true;
     }
 }

=== OnShutdown ===

* define behaviour when the Part Component instance will be destroyed
* cases: part has been destroyed, exiting the game

 public override void OnShutdown()
 { .. }</text>
      <sha1>5h3m5gdxyryf5ri6z1u6rw5zcxtcsgf</sha1>
    </revision>
  </page>
  <page>
    <title>Miscellaneous and tips for custom modules</title>
    <ns>0</ns>
    <id>96</id>
    <revision>
      <id>299</id>
      <timestamp>2024-01-11T18:38:16Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Final remarks and some tips</comment>
      <origin>299</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <revision>
      <id>300</id>
      <parentid>299</parentid>
      <timestamp>2024-01-11T18:38:47Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Add category and sorting</comment>
      <origin>300</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="87" sha1="g8i78zoxrqr5e3w2avy2u6b99csfez0" xml:space="preserve">[[Category:Custom Modules]]
{{DEFAULTSORT:3_Miscellaneous_and_tips_for_custom_modules}}</text>
      <sha1>g8i78zoxrqr5e3w2avy2u6b99csfez0</sha1>
    </revision>
    <revision>
      <id>301</id>
      <parentid>300</parentid>
      <timestamp>2024-01-11T18:48:03Z</timestamp>
      <contributor>
        <username>Falki</username>
        <id>6</id>
      </contributor>
      <comment>Add page contents</comment>
      <origin>301</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5705" sha1="cde5e4aac3wgihd8z55hmukntzrp1ij" xml:space="preserve">[[Category:Custom Modules]]
{{DEFAULTSORT:3_Miscellaneous_and_tips_for_custom_modules}}

== Localization ==
For module properties that support a LocalizationField parameter it's best to use a localization file.
 [LocalizedField("Path/To/Your/Localization/String")]
 public ModuleProperty&lt;bool&gt; SomeToggleProperty = new(false);
Localizations will be automatically loaded by SpaceWarp if placed in &lt;code&gt;../BepInEx/plugins/YourModFolder/localizations/&lt;/code&gt;  inside a &lt;code&gt;.csv&lt;/code&gt; file.

Structure your &lt;code&gt;.csv&lt;/code&gt; file like so:
 Key,Type,Desc,English,German,French,Italian,Spanish,Japanese,Korean,Polish,Russian,Chinese (Simplified),Portuguese (Brazil),Chinese (Traditional)
 Path/To/Your/Localization/String,Text,,English translation goes here,German translation goes here
If you don't provide a translation string for a language, it will default to English for that particular string.

If you need to place a comma (",") in your translation string, wrap it inside double quotations marks, like so:
 Path/To/Your/Localization/String,Text,,"I can write commas here, no problem, as much commas I'd like."

== PAM module headers and sorting ==
If you want your module to have a header before its properties or if it needs to be sorted relative to other modules in the same part, define this in your Patch Manager &lt;code&gt;.patch&lt;/code&gt; file:
 :parts {
     +Module_OrbitalSurvey {
         +Data_OrbitalSurvey {
             ..
         }
     }
     PAMModuleVisualsOverride +: [
         {
             PartComponentModuleName: PartComponentModule_MyCustomModule,
             ModuleDisplayName: "Path/To/Your/Localization/String/Where/Your/Module/Name/Is/Defined",
             ShowHeader: true,
             ShowFooter: true // setting ShowFooter doesn't appear to have any effect? Update this guide if you have new info
         }
     ];
     PAMModuleSortOverride +: [
         {
             PartComponentModuleName: PartComponentModule_MyCustomModule,
             sortIndex: 40 // try setting a different value if you don't get what you need
         }
     ];
 }

== Register your module for background resource processing ==
Resource consumption while the vessel is unloaded is disabled by default, as an effort to enhance performance of the stock game. If your module needs to consume resources while it's not loaded (for example Life support consumption), Space Warp supports registration of your module to consume resources.

Do this somewhere where you initialize stuff for your mod (example here: in your plugin class):
 public class YourModPlugin : BaseSpaceWarpPlugin
 {
     public override void OnInitialized()
     {
         SpaceWarp.API.Parts.PartComponentModuleOverride
             .RegisterModuleForBackgroundResourceProcessing&lt;PartComponentModule_YourCustomModule&gt;();
     }
 }

== Tip: add reference to your Part Component module in your Data module class ==
If you need a reference to your Part Component class from inside your Data class, you can do it like so: 
 public class Data_MyCustomModule : ModuleData
 {
     // be sure to put the JsonIgnore attribute, as otherwise there will be a circular reference and bad things will happen
     [JsonIgnore]
     public PartComponentModule_MyCustomModule PartComponentModule;
 }
 
 public class PartComponentModule_MyCustomModule : PartComponentModule
 {
     private Data_MyCustomModule _dataMyCustomModule;
 
     public override void OnStart(double universalTime)
     {
         if (!DataModules.TryGetByType&lt;Data_MyCustomModule&gt;(out _dataMyCustomModule))
         {
             return;
         }
 
         _dataMyCustomModule.PartComponentModule = this;
     }
 }

== Tip: fetch VesselComponent, PartOwner, Body or other values of your vessel or part ==
 public class PartComponentModule_MyCustomModule : PartComponentModule
 {
     public override void OnStart(double universalTime)
     {
         var partOwner = base.Part.PartOwner;
         var vessel = partOwner.SimulationObject.Vessel;
         var body = vessel.mainBody.Name;
         var altitude = vessel.AltitudeFromRadius;
     }
 }

== Tip: fetch other modules attached to the part ==
Sometimes you might need data from other modules.
 public class PartComponentModule_MyCustomModule : PartComponentModule
 {
     private Data_Deployable _dataDeployable;
     private PartComponentModule_ScienceExperiment _moduleScienceExperiment;
 
     public override void OnStart(double universalTime)
     {
         // get the ScienceExperiment module
         Part.TryGetModule(typeof(PartComponentModule_ScienceExperiment), out var m);
         _moduleScienceExperiment = m as PartComponentModule_ScienceExperiment;
 
         // try to get Data_Deployable if the part has a Deployable module
         Part.TryGetModule(typeof(PartComponentModule_Deployable), out var m2);
         if (m2 != null)
         {
             var moduleDeployable = m2 as PartComponentModule_Deployable;
             foreach (var dataDeployable in moduleDeployable.DataModules?.ValuesList)
             {
                 if (dataDeployable is Data_Deployable)
                 {
                     _dataDeployable = dataDeployable as Data_Deployable;
 
                     // register for the deployment event
                     _dataDeployable.toggleExtend.OnChangedValue += (_) =&gt; YourMethodThatWillReactToDeploying();
                     break;
                 }
             }
         }
     }
 }</text>
      <sha1>cde5e4aac3wgihd8z55hmukntzrp1ij</sha1>
    </revision>
  </page>
  <page>
    <title>Configuring the mesh</title>
    <ns>0</ns>
    <id>97</id>
    <redirect title="Configuring the core part data" />
    <revision>
      <id>304</id>
      <timestamp>2024-01-13T03:15:54Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Munix moved page [[Configuring the mesh]] to [[Configuring the core part data]]: misleading title</comment>
      <origin>304</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="44" sha1="qgb4a4a2deetamkcdc60x2kvr9wwdke" xml:space="preserve">#REDIRECT [[Configuring the core part data]]</text>
      <sha1>qgb4a4a2deetamkcdc60x2kvr9wwdke</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Creating parts</title>
    <ns>14</ns>
    <id>98</id>
    <redirect title="Category:Parts and modules" />
    <revision>
      <id>316</id>
      <timestamp>2024-01-15T02:05:15Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Munix moved page [[Category:Creating parts]] to [[Category:Parts and modules]]</comment>
      <origin>316</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="41" sha1="iu6am4ywnt08ntwm6sz2os7dx3o0wt1" xml:space="preserve">#REDIRECT [[:Category:Parts and modules]]</text>
      <sha1>iu6am4ywnt08ntwm6sz2os7dx3o0wt1</sha1>
    </revision>
  </page>
  <page>
    <title>File:Reentry envelope.png</title>
    <ns>6</ns>
    <id>99</id>
    <revision>
      <id>335</id>
      <timestamp>2024-02-02T17:24:30Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <origin>335</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="97" sha1="rq6ljnyrdv2yl1jhp42lsldnyv9qlfm" xml:space="preserve">Picture of a capsule reentering Kerbin's atmosphere in KSP2 with the effect envelope highlighted.</text>
      <sha1>rq6ljnyrdv2yl1jhp42lsldnyv9qlfm</sha1>
    </revision>
  </page>
  <page>
    <title>Configuring the reentry effects</title>
    <ns>0</ns>
    <id>100</id>
    <revision>
      <id>336</id>
      <timestamp>2024-02-02T17:31:43Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <comment>Start working on reentry effects setup tutorial</comment>
      <origin>336</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="876" sha1="mud630j5ituuddae4dv2bfc793zfzv3" xml:space="preserve"> Prerequisites:
 [[Setting up Unity]]
 [[Modeling the mesh in Blender]]
 [[Configuring the part in Unity]]
[[File:Reentry envelope.png|thumb|Figure 1. Reentry effect envelope]]
This tutorial will help you setting up reentry effects for your KSP2 modded part by guiding you through creating the ''reentry meshes'' and setting up everything needed in Unity.

=== Introduction ===
Reentry effects for parts in KSP2 are based on a custom shader which creates some flames coming out of an envelope surrounding the part (see Figure 1).

This envelope is defined for each part using a set of what we'll call ''reentry meshes.'' These meshes are set up in order to have a ''Level of Detail (LOD)'' system where a high fidelity mesh is used when looking at the part from very close and a less detailed when when looking from afar.

=== Reentry meshes ===
[[Category:Parts and modules]]</text>
      <sha1>mud630j5ituuddae4dv2bfc793zfzv3</sha1>
    </revision>
    <revision>
      <id>338</id>
      <parentid>336</parentid>
      <timestamp>2024-02-02T17:48:17Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <origin>338</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2562" sha1="mmkmhg57y6qp4jyudf7irwak70qm2af" xml:space="preserve"> Prerequisites:
 [[Setting up Unity]]
 [[Modeling the mesh in Blender]]
 [[Configuring the part in Unity]]
This tutorial will help you setting up reentry effects for your KSP2 modded part by guiding you through creating the ''reentry meshes'' and setting up everything needed in Unity.

=== Introduction ===
[[File:Reentry envelope.png|thumb|Figure 1. Reentry effect envelope]]
Reentry effects for parts in KSP2 are based on a custom shader which creates some flames coming out of an envelope surrounding the part (see Figure 1).

This envelope is defined for each part using a set of what we'll call ''reentry meshes.'' These meshes are set up in order to have a ''Level of Detail (LOD)'' system where a high fidelity mesh is used when looking at the part from very close and a less detailed when when looking from afar.

=== Reentry meshes ===
[[File:Reentry mesh Blender modifiers.png|thumb|Figure 2. Reentry mesh Blender modifiers]]
As we have learned before, the main part of a part's reentry effects are its ''reentry meshes'', we'll see here a way to create them quite easily in Blender.

We will need 3 ''reentry mesh'' for each part, one per level of detail: high, medium a,d low. There is no hard rule on how many face each mesh should have, but as a point of reference, for a quite large M-sized part I would go for meshes with about 5k, 2k and 1k faces respectively.

To create a reentry mesh in Blender, follow these steps:

# Create a copy of your part's mesh and name it anything you want (for example &lt;code&gt;part_name_lod_0&lt;/code&gt; for the high level of detail mesh).
# Scale up your new mesh by about 10% (the exact number may vary, we want the reentry mesh to completely envelop the part without any part of the part's mesh sticking out).
# Next we want to turn the copied mesh into a "blob" that will surround the part, we can do so by applying a ''Remesh'' modifier to the mesh in Blender in ''Voxel'' mode (don't forget to turn on ''Smooth Shading'' in the modifier's options).
# You can apply a few other modifiers to make the mesh look a bit better, I usually go with ''Remesh'' &gt; ''Decimate'' &gt; ''Subdivision'' &gt; ''Triangulate'' (see Figure 2).
# Finally make sure the mesh looks good, it shouldn't be too harsh/pointy and above all else the original part's mesh should not poke through the ''reentry mesh''.
# When finished, you can export your created mesh as a FBX file and repeat the preceding steps for all 3 reentry meshes (high, medium and low details).

=== Setting up the reentry effects in Unity ===
[[Category:Parts and modules]]</text>
      <sha1>mmkmhg57y6qp4jyudf7irwak70qm2af</sha1>
    </revision>
    <revision>
      <id>340</id>
      <parentid>338</parentid>
      <timestamp>2024-02-02T18:14:47Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <origin>340</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5035" sha1="1cv0xk158jlwk7wktts22gps2fzlxxa" xml:space="preserve"> Prerequisites:
 [[Setting up Unity]]
 [[Modeling the mesh in Blender]]
 [[Configuring the part in Unity]]
This tutorial will help you setting up reentry effects for your KSP2 modded part by guiding you through creating the ''reentry meshes'' and setting up everything needed in Unity.

=== Introduction ===
[[File:Reentry envelope.png|thumb|Figure 1. Reentry effect envelope]]
Reentry effects for parts in KSP2 are based on a custom shader which creates some flames coming out of an envelope surrounding the part (see Figure 1).

This envelope is defined for each part using a set of what we'll call ''reentry meshes.'' These meshes are set up in order to have a ''Level of Detail (LOD)'' system where a high fidelity mesh is used when looking at the part from very close and a less detailed when when looking from afar.

=== Reentry meshes ===
[[File:Reentry mesh Blender modifiers.png|thumb|Figure 2. Reentry mesh Blender modifiers]]
As we have learned before, the main part of a part's reentry effects are its ''reentry meshes'', we'll see here a way to create them quite easily in Blender.

We will need 3 ''reentry mesh'' for each part, one per level of detail: high, medium a,d low. There is no hard rule on how many face each mesh should have, but as a point of reference, for a quite large M-sized part I would go for meshes with about 5k, 2k and 1k faces respectively.

To create a reentry mesh in Blender, follow these steps:

# Create a copy of your part's mesh and name it anything you want (for example &lt;code&gt;part_name_lod_0&lt;/code&gt; for the high level of detail mesh).
# Scale up your new mesh by about 10% (the exact number may vary, we want the reentry mesh to completely envelop the part without any part of the part's mesh sticking out).
# Next we want to turn the copied mesh into a "blob" that will surround the part, we can do so by applying a ''Remesh'' modifier to the mesh in Blender in ''Voxel'' mode (don't forget to turn on ''Smooth Shading'' in the modifier's options).
# You can apply a few other modifiers to make the mesh look a bit better, I usually go with ''Remesh'' &gt; ''Decimate'' &gt; ''Subdivision'' &gt; ''Triangulate'' (see Figure 2).
# Finally make sure the mesh looks good, it shouldn't be too harsh/pointy and above all else the original part's mesh should not poke through the ''reentry mesh''.
# When finished, you can export your created mesh as a FBX file and repeat the preceding steps for all 3 reentry meshes (high, medium and low details).

=== Setting up the reentry effects in Unity ===
For this section, we assume you have already set up your part in Unity, meaning you have a prefab for your part which has a child named &lt;code&gt;model&lt;/code&gt; containing your part's mesh.

First of all, we need to set up a new ''Material'' for the reentry effect shader, this Material can be shared between all your parts. To do so you need to:

# Create a new ''Material'' asset called &lt;code&gt;Reentry&lt;/code&gt;, this can be in the &lt;code&gt;Assets/Parts&lt;/code&gt; folder of your Unity project.
# Set this ''Material'' to the &lt;code&gt;KSP2/Parts/Reentry&lt;/code&gt; shader (provided in KSP2 Unity Tools).
# Assign the texture called &lt;code&gt;Heat&lt;/code&gt; from KSP2UT to the ''Texture'' field of the Material.

[[File:Reentry LOD Unity setup.png|thumb|Figure 3. Fully set up reentry effects for a part]]
Then, we will setup the reentry effects for the part:

# Drag your 3 ''reentry meshes'' FBX files as assets into Unity (into your part's folder if you created one for example).
# Create an ''Empty'' child to the &lt;code&gt;model&lt;/code&gt; object in your part's prefab hierarchy, name it &lt;code&gt;lod_reentry&lt;/code&gt;.
# Drag the 3 ''reentry meshes'' as children of the &lt;code&gt;lod_reentry&lt;/code&gt; object.
# Unpack each mesh' prefab under ''Prefab'' in the contextual menu.
# Apply the &lt;code&gt;Reentry&lt;/code&gt; material to each ''reentry mesh.''
# Add a new &lt;code&gt;LOD Group&lt;/code&gt; component to the &lt;code&gt;lod_reentry&lt;/code&gt; object.
# Set &lt;code&gt;LOD 0&lt;/code&gt; to a ''Transition'' of &lt;code&gt;50%&lt;/code&gt; and set its ''Renderer'' to your high level of detail reentry mesh' ''Mesh'' ''Renderer''.
# Set &lt;code&gt;LOD 1&lt;/code&gt; to a ''Transition'' of &lt;code&gt;25%&lt;/code&gt; and set its ''Renderer'' to your medium level of detail reentry mesh' ''Mesh'' ''Renderer''.
# Set &lt;code&gt;LOD 2&lt;/code&gt; to a ''Transition'' of &lt;code&gt;0%&lt;/code&gt; and set its ''Renderer'' to your low level of detail reentry mesh' ''Mesh'' ''Renderer''.
# Click on ''Recalculate Bounds'' in the ''LOD Group'' above the list of LODs.
# Add a new &lt;code&gt;Reentry Mesh&lt;/code&gt; component to the &lt;code&gt;lod_reentry&lt;/code&gt; object.
# Apply all ''Overrides'' in your part's root prefab.
# Disable the visibility of the &lt;code&gt;lod_reentry&lt;/code&gt; object by unchecking the checkbox at the top of ''Inspector'' next to its name.
# Re-apply all ''Overrides'' in your part's root prefab.

If you followed all instructions correctly, your part's reentry effects should be set up now like what you can see in Figure 3. You can new rebuild your Addressables bundle and test the effects in game.
[[Category:Parts and modules]]</text>
      <sha1>1cv0xk158jlwk7wktts22gps2fzlxxa</sha1>
    </revision>
    <revision>
      <id>341</id>
      <parentid>340</parentid>
      <timestamp>2024-02-03T23:10:43Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>/* Setting up the reentry effects in Unity */</comment>
      <origin>341</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5196" sha1="e1woh997un8awej51ez53bn2dwuxlcf" xml:space="preserve"> Prerequisites:
 [[Setting up Unity]]
 [[Modeling the mesh in Blender]]
 [[Configuring the part in Unity]]
This tutorial will help you setting up reentry effects for your KSP2 modded part by guiding you through creating the ''reentry meshes'' and setting up everything needed in Unity.

=== Introduction ===
[[File:Reentry envelope.png|thumb|Figure 1. Reentry effect envelope]]
Reentry effects for parts in KSP2 are based on a custom shader which creates some flames coming out of an envelope surrounding the part (see Figure 1).

This envelope is defined for each part using a set of what we'll call ''reentry meshes.'' These meshes are set up in order to have a ''Level of Detail (LOD)'' system where a high fidelity mesh is used when looking at the part from very close and a less detailed when when looking from afar.

=== Reentry meshes ===
[[File:Reentry mesh Blender modifiers.png|thumb|Figure 2. Reentry mesh Blender modifiers]]
As we have learned before, the main part of a part's reentry effects are its ''reentry meshes'', we'll see here a way to create them quite easily in Blender.

We will need 3 ''reentry mesh'' for each part, one per level of detail: high, medium a,d low. There is no hard rule on how many face each mesh should have, but as a point of reference, for a quite large M-sized part I would go for meshes with about 5k, 2k and 1k faces respectively.

To create a reentry mesh in Blender, follow these steps:

# Create a copy of your part's mesh and name it anything you want (for example &lt;code&gt;part_name_lod_0&lt;/code&gt; for the high level of detail mesh).
# Scale up your new mesh by about 10% (the exact number may vary, we want the reentry mesh to completely envelop the part without any part of the part's mesh sticking out).
# Next we want to turn the copied mesh into a "blob" that will surround the part, we can do so by applying a ''Remesh'' modifier to the mesh in Blender in ''Voxel'' mode (don't forget to turn on ''Smooth Shading'' in the modifier's options).
# You can apply a few other modifiers to make the mesh look a bit better, I usually go with ''Remesh'' &gt; ''Decimate'' &gt; ''Subdivision'' &gt; ''Triangulate'' (see Figure 2).
# Finally make sure the mesh looks good, it shouldn't be too harsh/pointy and above all else the original part's mesh should not poke through the ''reentry mesh''.
# When finished, you can export your created mesh as a FBX file and repeat the preceding steps for all 3 reentry meshes (high, medium and low details).

=== Setting up the reentry effects in Unity ===
For this section, we assume you have already set up your part in Unity, meaning you have a prefab for your part which has a child named &lt;code&gt;model&lt;/code&gt; containing your part's mesh.

First of all, we need to set up a new ''Material'' for the reentry effect shader, this Material can be shared between all your parts. To do so you need to:

# Create a new ''Material'' asset called &lt;code&gt;Reentry&lt;/code&gt;, this can be in the &lt;code&gt;Assets/Parts&lt;/code&gt; folder of your Unity project.
# Set this ''Material'' to the &lt;code&gt;KSP2/Parts/Reentry&lt;/code&gt; shader (provided in KSP2 Unity Tools).
# Assign the texture called &lt;code&gt;Heat&lt;/code&gt; from KSP2UT to the ''Texture'' field of the Material.

[[File:Reentry LOD Unity setup.png|thumb|Figure 3. Fully set up reentry effects for a part]]
Then, we will setup the reentry effects for the part:

# Drag your 3 ''reentry meshes'' FBX files as assets into Unity (into your part's folder if you created one for example).
# Create an ''Empty'' child to the &lt;code&gt;model&lt;/code&gt; object in your part's prefab hierarchy, name it &lt;code&gt;lod_reentry&lt;/code&gt;.
# Drag the 3 ''reentry meshes'' as children of the &lt;code&gt;lod_reentry&lt;/code&gt; object.
# Unpack each mesh' prefab under ''Prefab'' in the contextual menu.
# Apply the &lt;code&gt;Reentry&lt;/code&gt; material to each ''reentry mesh.''
# Add a new &lt;code&gt;LOD Group&lt;/code&gt; component to the &lt;code&gt;lod_reentry&lt;/code&gt; object.
# Set &lt;code&gt;LOD 0&lt;/code&gt; to a ''Transition'' of &lt;code&gt;50%&lt;/code&gt; and set its ''Renderer'' to your high level of detail reentry mesh' ''Mesh'' ''Renderer''.
# Set &lt;code&gt;LOD 1&lt;/code&gt; to a ''Transition'' of &lt;code&gt;25%&lt;/code&gt; and set its ''Renderer'' to your medium level of detail reentry mesh' ''Mesh'' ''Renderer''.
# Set &lt;code&gt;LOD 2&lt;/code&gt; to a ''Transition'' of &lt;code&gt;0%&lt;/code&gt; and set its ''Renderer'' to your low level of detail reentry mesh' ''Mesh'' ''Renderer''.
# Click on ''Recalculate Bounds'' in the ''LOD Group'' above the list of LODs.
# Make sure the &lt;code&gt;lod_reentry&lt;/code&gt; object is enabled (the checkbox needs to be checked at the top of ''Inspector'' next to its name) before the next step.
# Add a new &lt;code&gt;Reentry Mesh&lt;/code&gt; component to the &lt;code&gt;lod_reentry&lt;/code&gt; object.
# Apply all ''Overrides'' in your part's root prefab.
# Disable the visibility of the &lt;code&gt;lod_reentry&lt;/code&gt; object by unchecking the checkbox at the top of ''Inspector'' next to its name.
# Re-apply all ''Overrides'' in your part's root prefab.

If you followed all instructions correctly, your part's reentry effects should be set up now like what you can see in Figure 3. You can new rebuild your Addressables bundle and test the effects in game.
[[Category:Parts and modules]]</text>
      <sha1>e1woh997un8awej51ez53bn2dwuxlcf</sha1>
    </revision>
  </page>
  <page>
    <title>File:Reentry mesh Blender modifiers.png</title>
    <ns>6</ns>
    <id>101</id>
    <revision>
      <id>337</id>
      <timestamp>2024-02-02T17:44:13Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <origin>337</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="61" sha1="2z2ogtcqji1onpxntnvkaq0pxj6oqg0" xml:space="preserve">Screenshot of Blender modifiers used to create a reentry mesh</text>
      <sha1>2z2ogtcqji1onpxntnvkaq0pxj6oqg0</sha1>
    </revision>
  </page>
  <page>
    <title>File:Reentry LOD Unity setup.png</title>
    <ns>6</ns>
    <id>102</id>
    <revision>
      <id>339</id>
      <timestamp>2024-02-02T18:13:53Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <origin>339</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="52" sha1="3kczhtmtbi1pzu1ybu5lxr96x16x827" xml:space="preserve">Screenshot of Unity with a part's reentry lod set up</text>
      <sha1>3kczhtmtbi1pzu1ybu5lxr96x16x827</sha1>
    </revision>
  </page>
  <page>
    <title>Parts Pack Production Procedure</title>
    <ns>0</ns>
    <id>103</id>
    <revision>
      <id>342</id>
      <timestamp>2024-02-04T17:42:10Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <comment>How-to for making a parts pack containing multiple parts in a single mod</comment>
      <origin>342</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="26713" sha1="fkbibgs8fitfxi4k3d5v78c44q3w7sm" xml:space="preserve">Preamble
This guide is based on the videos: How to create parts for KSP2 and How to make engines for KSP2, and on other notes and guidance from the KSP2 Modding Society discord.
Also the web pages: KSP2 Part tutorial (almost) from scratch, and Tutorial: My First Part
Prerequisites
You will absolutely need the following things at a bare minimum:
•	Unity Editor
•	ThunderKit
•	Unity KSP Tools
•	Addressables Package (Install via Unity Window menu &gt; Package Manager
o	Change Packages to Unity Registry
o	Search for “addressables”. Click on it and install.
•	LuxShader
You will generally also need the following things:
•	Blender (or other mesh modeling SW that can produce FBX files)
•	Various blender addons such as TexTools, etc. (make a list of the free ones you’re using)
•	Substance Painter (or other texture painting tool – could be Blender or Quixel Mixer, but SP is recommended highly)
You probably need a few other things too:
•	JSON exports of similar stock parts to show you what some things can or should be set to
Process
This guide covers the part of the process that takes place in the Unity Editor resulting in an assembly you can load as a codeless mod in KSP2, and how to get that result into the game.
In Unity editor start with a fresh scene. This will hold your entire parts pack.
Part Pack Prep
1.	Create Unity Project: Create a new Unity project with an empty scene. You can use the sample scene.
2.	Install Addressables package: Open Window &gt; Package Manger and select Packages: Unity Registry. Search for addressables and click Install.
3.	Install ThunderKit in Unity. See Installing Tunderkit from the Getting Ready section of the KSP2 Part Tutorial linked above for details.
 
 
4.	Install Unity KSP Tools in Unity. See Installing KSP2 Unity Tools from the Getting Ready section of the KSP2 Part Tutorial linked above for details.
a.	Go to https://github.com/SpaceWarpDev/KSP2UnityTools/releases
b.	Download latest KSP2 Unity Tools version
c.	Double click the KSPUTxxx.unitypackage file to install it in the open unity project
5.	Install LuxShader in Unity. Place a copy of “LuxShader” somewhere in your Unity project. I put mine in my Parts Pack folder.
6.	Configure Unity Project: This is essential, or even if you can build a part it won’t load in the game. You can check your settings like this. Go to the Addressables Window (click the Unity menu for Window &gt; Asset Management &gt; Addressables &gt; Group). Select the Default Local Group in Addressables Groups window. In the Inspector window, check the following properties for your parts pack mod.
a.	Build Path: Should be set to Library/com.unity.addressables/aa/Windows/StandaloneWindows64
b.	Load Path: Should be set to {SpaceWarpPaths.&lt;your_mod_id&gt;}/addressables/StandaloneWindows64
i.	For your_mod_id, it is imperative that you replace any “.” Or “-“ with “_”. Only the very first “.” Between “SpaceWarpPaths” and “&lt;your_mod_id&gt;” is allowed as SpaceWarpPaths is a class, and classes can have variables, but variables can’t have any “.” or “-“ in their name (for reasons that should be obvious). If you’ve got any characters that can’t be used in a C# variable name In your mod ID (e.g. com.github.schlosrat.SPARK, etc.), then just replace those with underscores and you’ll be OK.
c.	Make sure the Load Path is not {UnityEngine.AddressableAssets.Addressables.RuntimePath}/StandaloneWindows64 (which is seems to want to be…) If you need to change these it’s best to create a new profile which you can then apply to the Build &amp; Load Paths drop down. To do that go to the Addressables Groups windows and on the Profile: Default dropdown pick Manage Profiles.
 
This will open up the Addressables Profiles panel. Create a New Profile by clicking the Create dropdown and picking Build and Load Path Variables (All Profiles)
 
This will give you the following dialog box which you can type into, but be forewarned – it will vanish if it loses focus, so save as soon as you’ve set the Prefix Name (which was set to SpaceWarp above but is in the fresh, clean unmodified form below)
 
Once you’ve saved it, you can edit the SpaceWarp.BuildPath to match what’s shown above and the SpaceWarp.LoadPath to be {SpaceWarpPaths.&lt;your_mod_id&gt;}/addressables/StandaloneWindows64.
With these setup, you can go back to the Inspector for the Default Local Group and set the Build &amp; Load Paths setting to SpaceWarp in the dropdown menu so that your configuration looks like this
 

7.	Create Parts Pack folder: Under Assets, create a folder (L-Click Assets: Create &gt; Folder) and name it the same as your parts pack mod. If your mod is called My Awesome Mod then this would be Assets\MyAwesomeMod.
8.	Create Materials folder: Inside your parts pack folder create a folder called Materials. You’ll be storing the textures and materials you need there. E.g., Assets\MyAwesomeMod\Materials. This is just to aid in organization.
9.	Create Parts folder: Inside your parts pack folder create a folder called Parts. You’ll be storing the part meshes and related things there. E.g., Assets\MyAwesomeMod\Parts. You can have whatever organization you like here, so if you want to group some parts you might create group folders within Parts (e.g., Methalox Engines, Nuclear Engines, Ion Engines, etc.). This is just to aid in organization and is optional.
10.	Create Plugin Folder and Content: In your KSP2 install’s BepInEx\plugins folder create a folder for your mod. You can name this whatever you like, but it should be unique. This will be the “mod” players will install to have your parts pack and we’ll refer to it as the Base Plugin Folder in this guide.
a.	Create swinfo.json: In the base plugin folder create a swinfo.json file with content like this:
{
  "spec": "1.3",
  "mod_id": "com.github.schlosrat.SPARK",
  "author": "schlosrat",
  "name": "Stellar Plasma-Assisted Rocket Kinetics",
  "description": "High ISP engines for your low thrust needs",
  "source": "https://github.com/schlosrat/SPARK",
  "version": "0.0.1",
  "version_check": "https://raw.githubusercontent.com/schlosrat/SPARK/main/SPARK/swinfo.json",
  "ksp2_version": {
    "min": "0.1.3.2",
    "max": "*"
  },
  "dependencies": [
    {
      "id": "com.github.x606.spacewarp",
      "version": {
        "min": "1.4.0",
        "max": "*"
      }
    },
    {
      "id": "lfo",
      "version": {
        "min": "0.2.0",
        "max": "*"
      }
    }
  ]
}
b.	Create “addressables” folder: In the base plugin folder, create an “addressables” sub-folder. This will be where you put the files created by Unity after a build (discussed below).
c.	Create “localizations” folder: In the base plugin folder, create an “localizations” sub-folder (NOTE! This is currently required to be exactly this – localizations (plural), not localization (singular). This will be where you put the localization files (e.g., english.csv, spanish.csv, etc.).
d.	Create Localization file(s): Localization files are CSV files following a particular format. These must have lines ending with LF not LF/NL, and they must reference the same &lt;part_name&gt; you use in the Part Production process below. There are some other restrictions for content, particularly that if you want a string that contains a “,” that string needs to be enclosed in quotes or the comma will mess with how the strings are parsed. These files are where the part’s Title, Subtitle, Manufacturer, and Description are configured. Here’s an example:
Key,Type,Desc,English

Parts/Title/spark_spt100,Text,,SPT-100
Parts/Subtitle/ spark_spt100,Text,,Hall Effect Thruster with Xenon Tank
Parts/Manufacturer/spark_spt100,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc."
Parts/Description/spark_spt100,Text,,"The SPT-100 is the pinnacle in tiny (0.625m-class) Ion engines, providing high Isp and low thrust with an integral toroidal xenon tank. Strap this little guy onto a probe core and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!"

Parts/Title/spark_x3,Text,,X3 NHT
Parts/Subtitle/spark_x3,Text,,Three-Channel Nested Hall Effect Thruster
Parts/Manufacturer/spark_x3,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc."
Parts/Description/spark_x3,Text,,"The SPARK X3 is the pinnacle in small (1.25m-class) Ion engines, providing high Isp and low thrust. Strap this bad boy onto your large probe or small capsule and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!"
e.	
Part Production
1.	Create Root Part Object: Create an empty game object under your scene (L-click Scene: Game Object &gt; Create Empty). Name this object the same as your part.
a.	Recommended naming scheme: &lt;mod_name&gt;_&lt;part_name&gt;. If your mod is called “My Awesome Mod” and your part title is “My Part”, then your part name might be my_awesome_mod_my_part for example. Part names must be unique, though you can have any descriptive title you like (that is done later in Localization). A naming scheme like this helps to prevent naming collisions in case anyone else might make a part they want to call “My Part”, like yours.
2.	Create Model Object: Create an empty game object under your root part object and name this one “model”.
3.	Create Part Folder: Create a Part folder named for your part inside your Parts folder. E.g., Assets\MyAwesomeMod\Parts\MyPart, or Assets\MyAwesomeMod\Parts\ThisGroup\MyPart if you’re grouping parts.
4.	Bring in FBX: Drag a copy of your part’s FBX file into the part folder.
a.	If you have baked textures for your part that go with the FBX (meaning, they’re based on the UV Unwrap specific to that FBX), then drag those into this same file with the FBX.
5.	Create Part Object: Drag a copy of the part FBX from the Part folder in Unity to the model object created in step 2. Don’t drag the FBX file from your computer’s files system, you need to use the copy you just placed in step 4. This will create a prefab for your part as a child of the model object.
6.	Unpack Prefab: Left-Click part object: Prefab &gt; Unpack.
7.	Remove Unnecessary Things: Remove any parts that came in with the FBX that you don’t actually need in the game like lights, cameras, empty nodes, etc. If it’s not an actual part you want the game to render, then delete it.
8.	Orient Part: Your model will appear in the Unity scene oriented as you built it in Blender, but this may not be the way you want it to be oriented in the game. If you need changes to the position, rotation, or scale of the part do those now using the Transform panel within the Inspector Window with your part object selected. For example, to flip a part over just give a rotation of 180 in Z, etc.
9.	Create Mesh Object: L-Click part object: Create Empty. Name this object “mesh”.
10.	Create Collider Object: L-Click mesh object: Create Empty. Name this object “col”. 
11.	Create Collider: In the Inspector window for the col object click “Add Component”. Search for Mesh Collider and pick it. This will create a Mesh Collider component in the col object. Click the arrowhead to the left of it to expand it and see its properties.
a.	Select Mesh: In the Mesh Collider properties select the Mesh you want to use. If your FBX is all one object you can pick that, or you can pick a suitable primitive like cube or cylinder, etc.
b.	Position, Rotation, and Scale: Set the position, rotation, and scale of the mesh to encompass the part. You should see a green mesh represented in the Scene window to help guide you to make sure you’ve got the right position, rotation, and scale.
c.	Convex: Check “Convex”
12.	Add Core Part Data: Select your Root Part Object. In the Inspector Window click “Add Component”. Search for “Core Part Data” and pick that. Open it up and configure as follows:
a.	Part Name: The Part Name needs to be the same as what you’ve used for the Root Part object, i.e., my_awesome_mod_my_part or whatever you used.
b.	Author: Use what you like here, typically your KSP Forum screen name or whatever you go by as your modding author name.
c.	Category: Select an appropriate category for your part.
d.	Family: If you wish to identify a “Family” for your part, this needs to be a particular string. You can find examples in the game’s files, or part JSONS, or ask in the KSP2 Modding Society discord to get this information.
e.	Co Lift, Co Mass, Co Pressure, etc.: These parameters allow you to set the Center of Lift, Center of Mass, Center of Pressure, etc. Adjust these to get the markers in the Unity scene where they should be for your part. Typically, Co Pressure and Co Lift are in the same place.
f.	Fuel Cross Feed: Check if fuel should be able to transit through your part on the way to other parts. Typically set to true, but not always.
g.	Mass: Set this in metric tons, not Kg.
h.	Attach Rules: Check the types of attachment your part should allow. Checking “Stack” or “Srf Attach” will allow your part to attach in a stack or to a surface. Checking “Allow Stack”, “Allow Srf Attach”, etc. will allow other parts to stack attach or surface attach respectively. Currently (?) Allow Collision, Allow Dock, Allow Rotate, and Allow Root have no effect in game (check this).
i.	Attach Nodes: If Stack is checked above, then you need a “top” and a “bottom” node, if Srf Attach is checked above, then you need a “srfAttach” node. Note, node names are case sensitive and having a node is not enough by itself, you do also need the corresponding Attach Rule set true or the node will have no effect. Under Attach Nodes click the + button to add a blank node and configure as needed. 
i.	Node ID: “top”, “bottom”, “srfAttach”, etc. (case sensitive!)
ii.	Node Type: Select as appropriate. (Stack for Stack, Surface for Surface…)
iii.	Attach Method: Select Fixed_Joint for Stack and Hinge_Joint for Surface Attach.
iv.	Is Multi Joint: In general set to True for stack attach to help prevent noodle rockets.
v.	Multi Joint Max Joint: Set to 3 if you set Is Multi Joint to true?
vi.	Position: Set as appropriate. Should be on the skin or outside of the part where you would expect to find it on your part in the VAB.
vii.	Orientation: Set as appropriate. The Orientation vector should be a unit vector (length 1) pointing in the direction of the part that will attach to the node, so pointing away from your part.
viii.	Size: Affects rigidity of your part. If your part is connected to another part with the same “size” node, then rigidity will be optimal, and otherwise it will be suboptimal.
ix.	Visual Size: Set the same as Size.
x.	Is Resource Crossfeed: Set as needed for this node.
xi.	Is Rigid: Set as needed for this node.
xii.	Rinse and Repeat: Subsequent nodes created with the + button will inherit settings from the last node made, so this may accelerate the process as you just need to change the Node Id, Position and Orientation for new nodes that are similar to the previous created node. 
13.	Add Module_Color: You need this to be able to paint your part with base and accent colors. As above, click Add Component and search for Module Color.
14.	Add Module_Drag: All parts need this. As above, click Add Component and search for Module Color.
15.	Add other modules as needed. For example, if your part is an engine you’ll also need:
a.	thrustTransform object: Create an empty game object as a child of the root part and name it thrustTransform.
b.	Throttle VFX Manager: Configure as needed (?). No need to drag anywhere, it just need to be a component for the part.
c.	Flameout VFX Data: Drag this up to the Flameout VFX property in Module_Engine.
d.	Module_Gimbal: Configure details as needed (e.g., Gimbal Range and Gimbal Speed, etc.), then drag this up to the Gimbal property in Module_Engine.
e.	Module_Generator: Configure details as needed, then drag this up to the Alternator property in Module_Engine.
16.	Apply Options: Select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and pick “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
17.	Save Part JSON: Click Save Part JSON button at the bottom of the Core Part Data module. This will put the resulting part JSON in the Assets folder for your Unity project. You need to do this any time you’ve edited the Core Part Data module (or also a module it depends on?).
18.	Make Prefab: Grab the root part object and drag it to the Unity project Assets folder.
19.	Add Part Icon: Create an icon for your part that the game will use in the parts picker. This needs to be a PNG file with specific dimensions. It should conform to the style used by other parts in the game. However you do this, you need to name the file &lt;part_name&gt;_icon.png, and you need to drag that file into the Assets folder in Unity.
a.	Convert Icon to Sprite: Select the part icon in the Assets folder. In the Inspector window, click the pulldown menu for Texture Type and change this from Default to Sprite (2D and UI), then click Apply. If this is not done, your lovely icon will not display! 
20.	Make Root Part Addressable: Select the root part’s prefab in the Assets folder and in the Inspector window check the box for Addressable.
21.	Make JSON Addressable: Select the part’s JSON in the Assets folder and in the Inspector window check the box for Addressable.
22.	Make the Icon Addressable: Select the root part’s icon in the Assets folder and in the Inspector window check the box for Addressable.
23.	Configure Addressable Properties: In the Addressables Groups expand the Default Local Group and find your part.
a.	Group Name \ Addressable Name: Change the information in the Group Name \ Addressable Name from “Assets/&lt;part_name&gt;*” to be just “&lt;part_name&gt;*”. So “Assets/&lt;part_name&gt;.prefab” becomes “&lt;part_name&gt;.prefab”, and so forth. You can leave the “Assets/” part of the path definition alone for each of these, that’s as it should be. The value for the Addressable Name needs to be the same as the file name it’s associated with and must not include any path parts. All of these need to be based on the Part Name established in the Core Part Data module.
b.	Labels: For the JSON set this to parts_data. Leave it blank for the prefab. If parts_data is not an option in the dropdown for Labels, then click Manage Labels, click the + button to add a new label, and set the Label Name to “parts_data”. Click Save.
24.	Build Parts Pack Addressables: In the Addressables Groups window, click the drop down for Build and pick New Build &gt; Default Build Script. If you have any unsaved changes Unity will prompt you to save, and then it will build the addressables package for your mod.
25.	Copy Addressables to Plugin Folder: If the Build step above was successful, the do the following.
a.	Delete Old Stuff: In Windows Explorer, navigate to your Base Plugin Folder’s addressables folder (&lt;KSP2 Game Dir&gt;\BepInEx\plugins\&lt;your Mod Name&gt;\addressables) and delete any content inside that folder. There may be four things: AddressablesLink (folder), StabaloneWindows64 (folder), catalog.json (file), and setting.json (file).
b.	Copy New Stuff: In Windows Explorer, navigate to your Unity project’s folder and from there to Library\com.unity.addressables\aa\Windows folder. If the build process above was successful, then there will be four things in this folder: AddressablesLink (folder), StabaloneWindows64 (folder), catalog.json (file), and setting.json (file). You will need to copy all of these to your Base Plugin Folder’s addressables folder.
26.	Launch Game and Test!
27.	Rinse and Repeat for Additional Parts

Blender Basics for Beginners
1.	If you’re making an engine, put an empty single arrow at the world origin facing in the direction your engine will fire, then move it along the axis of the engine so that it’s at the exit of the engine. Name this object thrustTransform, and keep in mind that size does not matter.
2.	Make sure all the part objects in your blend have the same material, and that the material has a good name. The material you use for this can be a default material, nothing special is needed.
3.	Make sure any Boolean modifiers are applied, but array modifiers can be left unapplied.
4.	Make sure you’ve got a good UV Map (use UV Smart Project) or an excellent one (UV Smart Project followed by Pack Islands). Recommended island spacing for both is 0.003
5.	When exporting your FBX for use in Substance Painter or any other tool, select only those objects that are actually part of your part and then be sure to check the box for Limit to Selected Objects
Texturing Tips
1.	Make sure the Kerbal_Space_Program_2_Parts_Paintable.spt file is in your “Documents&gt;Adobe&gt;Substance Painter&gt;Assets&gt;templates” folder. If the templates folder doesn’t exist yet, then create one under Assets and drop that file in it.
2.	Launch Substance Painter and create a New project.
a.	In the project creation dialog pick the Kerbal_Space_Program_2_Parts_Paintable template
b.	Select your FBX file
c.	Make sure the Document Resolution is sufficient for your texture maps (highly recommend 4096! Any less and painted on bolts look like crap)
d.	Click Open.
 

3.	Make sure the UV Map looks OK in Substance Painter. If it doesn’t, you need to go back to Blender and re-unwrap then export a new FBX and return to step 2 above.
4.	Use the File &gt; Import resources… menu to bring up the Import Resources dialog (shown below) and click on the Add Resource button to bring in the KSP2_Part.spsm file. Repeat this step for the Kerbal Space Program 2 - Standard Damaged.spexp file. Both of these should go into your library as you’re going to need them with every part you make.
a.	Use the Add Resources button to find the resource you want to import
b.	Select the file and click the Open button
c.	Repeat steps (a) and (b) above for as many things as you would like to import
d.	Select the destination to Import your resources to (hint: library ‘your_assests’ for these!)
e.	Click Import
 
5.	Use the process in Step 4 above to bring in any textures you want to use. There are many you can peruse and download for free here: https://substance3d.adobe.com/community-assets
a.	Note: When importing textures, you can either put them in your library so that you can use them in multiple projects, or you can put them directly in your project if you don’t want them in your library. Either way works.
b.	You can repeat this step any time, and as often as needed, so don’t worry if you don’t have all the textures you need at the start. It’s also possible to make textures within Substance Painter
6.	Apply the KSP2 Part material to your whole object and once done delete the default later that Substance Painter provided.
7.	Locate the Bake button (looks like a croissant) in the upper right of Substance Painter and click it  
a.	Uncheck the option to make an Opacity Mesh Map
b.	Click the large blue Back Selected Textures button
c.	When baking is done, click the Return to Painting Mode button
8.	Expand the folder by the KSP2_Part smart material in the Layers panel
9.	Expand the folder by the Base Material smart material within the KSP2 Part
10.	Search for and select the materials you want to paint your part within the Assets panel.
a.	Drag a material from the Assets panel onto the Base Material in the Layers panel.
b.	Right click on that material and add a black mask to it, making sure the resulting mask is selected (there will be a blue border around it)
c.	Pick the Polygon Fill tool from the tool bar and then select a option from Triangle Fill, Polygon Fill, Mesh Fill, and UV Chunk Fill.    Use the triangle to paint tris, the square (polygon) for quads, the cube (mesh) for entire objects, and the checkerboard (UV chunk) for connected faces on a side of surface.
11.	Create a simple material: Example white boron nitride ceramic.
a.	Click the Add Fill Layer button (paint can)  
b.	Drag the new fill layer onto the Base Material folder.
c.	In the Propertied panel under Materials, leave only color, roughness, and metal selected.
d.	In the Properties panel set the base color to what you need (white in this case)
e.	Set the metallic slider to 1.0.
f.	Set the roughness slider to 0.3.
g.	Add a black mask to the fill layer
h.	Paint like a pro
12.	Add “Nails”: This is where you add various surface details via the height map, and works for painting on nuts, bolts, fasteners, etc. All of these can be added as “alphas” like this
a.	Import your alpha(s)!
b.	In Layers, select the black mask for Nails in the Heightmap
c.	Select Radial Symmetry (for applications around radially symmetric parts like I've got here)
d.	Set your X, Y, Z point about which things will be symmetric, where Y is the vertical. (Switch the Show/Hide Manipulator on to help see where this point is in your model)
e.	Set Mirror Y, the count you want, and the angular span the radial pattern should follow (360 for all the way around)
f.	With the brush tool active, select your alpha
g.	Move your cursor onto the part and see the red dots where the "Nails" will be placed.
h.	Adjust the size of the "Nail" using [ and ] to make it smaller or larger respectively
i.	Click where you want the first "Nail" to appear, this will place them all.
13.	Add “Stickers”: This is where you add signs, stickers, decals, etc., where the sticker has a uniform color (like a radiation symbol, etc.)
a.	Import your alpha(s)!
b.	In Layers, under Base Material, add a fill layer for the sticker
i.	Uncheck all material properties for the layer except color, metal, and rough
ii.	Set the fill color to be what you want the sticker to look like
iii.	Move the layer to be above any other Base Material layer that impacts the part(s) you’re going to apply stickers to (or it will be overwritten and you won’t see your stickers!)
c.	Select Radial Symmetry (for applications around radially symmetric parts like I've got here)
d.	Set your X, Y, Z point about which things will be symmetric, where Y is the vertical. (Switch the Show/Hide Manipulator on to help see where this point is in your model)
e.	Set Mirror Y, the count you want, and the angular span the radial pattern should follow (360 for all the way around)
f.	With the brush tool active, select your alpha
g.	Move your cursor onto the part and see the red dots where the "Stickers" will be placed.
h.	Adjust the size of the "Sticker" using [ and ] to make it smaller or larger respectively
i.	Click where you want the first "Sticker" to appear, this will place them all.</text>
      <sha1>fkbibgs8fitfxi4k3d5v78c44q3w7sm</sha1>
    </revision>
    <revision>
      <id>344</id>
      <parentid>342</parentid>
      <timestamp>2024-02-04T18:06:13Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <comment>Initial version sans graphics</comment>
      <origin>344</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="26805" sha1="56fyyfxqg67ng543te0xrq71jsmyx35" xml:space="preserve">== '''Preamble''' ==
This guide is based on the videos: How to create parts for KSP2 and How to make engines for KSP2, and on other notes and guidance from the KSP2 Modding Society discord.

Also the web pages: KSP2 Part tutorial (almost) from scratch, and Tutorial: My First Part

== '''Prerequisites''' ==
You will absolutely need the following things at a bare minimum:

* Unity Editor
* ThunderKit
* Unity KSP Tools
* Addressables Package (Install via Unity Window menu &gt; Package Manager
** Change Packages to Unity Registry
** Search for “addressables”. Click on it and install.
* LuxShader

You will generally also need the following things:

* Blender (or other mesh modeling SW that can produce FBX files)
* Various blender addons such as TexTools, etc. (make a list of the free ones you’re using)
* Substance Painter (or other texture painting tool – could be Blender or Quixel Mixer, but SP is recommended highly)

You probably need a few other things too:

* JSON exports of similar stock parts to show you what some things can or should be set to

== Process ==
This guide covers the part of the process that takes place in the Unity Editor resulting in an assembly you can load as a codeless mod in KSP2, and how to get that result into the game.

In Unity editor start with a fresh scene. This will hold your entire parts pack.

Part Pack Prep

# '''Create Unity Project''': Create a new Unity project with an empty scene. You can use the sample scene.
# '''Install Addressables package''': Open Window &gt; Package Manger and select Packages: Unity Registry. Search for addressables and click Install.
# '''Install ThunderKit in Unity'''. See Installing Tunderkit from the Getting Ready section of the KSP2 Part Tutorial linked above for details.
# '''Install Unity KSP Tools in Unity'''. See Installing KSP2 Unity Tools from the Getting Ready section of the KSP2 Part Tutorial linked above for details.
## Go to https://github.com/SpaceWarpDev/KSP2UnityTools/releases
## Download latest KSP2 Unity Tools version
## Double click the KSPUTxxx.unitypackage file to install it in the open unity project
# '''Install LuxShader in Unity'''. Place a copy of “LuxShader” somewhere in your Unity project. I put mine in my Parts Pack folder.
# '''Configure Unity Project''': ''This is essential, or even if you can build a part it won’t load in the game''. You can check your settings like this. Go to the Addressables Window (click the Unity menu for Window &gt; Asset Management &gt; Addressables &gt; Group). Select the Default Local Group in Addressables Groups window. In the Inspector window, check the following properties for your parts pack mod.
## Build Path: Should be set to Library/com.unity.addressables/aa/Windows/StandaloneWindows64
## Load Path: Should be set to {SpaceWarpPaths.&lt;your_mod_id&gt;}/addressables/StandaloneWindows64
### For your_mod_id, it is imperative that you replace any “.” Or “-“ with “_”. Only the very first “.” Between “SpaceWarpPaths” and “&lt;your_mod_id&gt;” is allowed as SpaceWarpPaths is a class, and classes can have variables, but variables can’t have any “.” or “-“ in their name (for reasons that should be obvious). If you’ve got any characters that can’t be used in a C# variable name In your mod ID (e.g. com.github.schlosrat.SPARK, etc.), then just replace those with underscores and you’ll be OK.
## Make sure the Load Path is ''not'' {UnityEngine.AddressableAssets.Addressables.RuntimePath}/StandaloneWindows64 (which it seems to want to be…) If you need to change these it’s best to create a new profile which you can then apply to the Build &amp; Load Paths drop down. To do that go to the Addressables Groups windows and on the Profile: Default dropdown pick Manage Profiles.

This will open up the Addressables Profiles panel. Create a New Profile by clicking the Create dropdown and picking Build and Load Path Variables (All Profiles)
 
This will give you the following dialog box which you can type into, but be forewarned – it will vanish if it loses focus, so save as soon as you’ve set the Prefix Name (which was set to SpaceWarp above but is in the fresh, clean unmodified form below)
 
Once you’ve saved it, you can edit the SpaceWarp.BuildPath to match what’s shown above and the SpaceWarp.LoadPath to be {SpaceWarpPaths.&lt;your_mod_id&gt;}/addressables/StandaloneWindows64.

With these setup, you can go back to the Inspector for the Default Local Group and set the Build &amp; Load Paths setting to SpaceWarp in the dropdown menu so that your configuration looks like this
 

7.	Create Parts Pack folder: Under Assets, create a folder (L-Click Assets: Create &gt; Folder) and name it the same as your parts pack mod. If your mod is called My Awesome Mod then this would be Assets\MyAwesomeMod.
8.	Create Materials folder: Inside your parts pack folder create a folder called Materials. You’ll be storing the textures and materials you need there. E.g., Assets\MyAwesomeMod\Materials. This is just to aid in organization.
9.	Create Parts folder: Inside your parts pack folder create a folder called Parts. You’ll be storing the part meshes and related things there. E.g., Assets\MyAwesomeMod\Parts. You can have whatever organization you like here, so if you want to group some parts you might create group folders within Parts (e.g., Methalox Engines, Nuclear Engines, Ion Engines, etc.). This is just to aid in organization and is optional.
10.	Create Plugin Folder and Content: In your KSP2 install’s BepInEx\plugins folder create a folder for your mod. You can name this whatever you like, but it should be unique. This will be the “mod” players will install to have your parts pack and we’ll refer to it as the Base Plugin Folder in this guide.
a.	Create swinfo.json: In the base plugin folder create a swinfo.json file with content like this:

{
  "spec": "1.3",
  "mod_id": "com.github.schlosrat.SPARK",
  "author": "schlosrat",
  "name": "Stellar Plasma-Assisted Rocket Kinetics",
  "description": "High ISP engines for your low thrust needs",
  "source": "https://github.com/schlosrat/SPARK",
  "version": "0.0.1",
  "version_check": "https://raw.githubusercontent.com/schlosrat/SPARK/main/SPARK/swinfo.json",
  "ksp2_version": {
    "min": "0.1.3.2",
    "max": "*"
  },
  "dependencies": [
    {
      "id": "com.github.x606.spacewarp",
      "version": {
        "min": "1.4.0",
        "max": "*"
      }
    },
    {
      "id": "lfo",
      "version": {
        "min": "0.2.0",
        "max": "*"
      }
    }
  ]
}
b.	Create “addressables” folder: In the base plugin folder, create an “addressables” sub-folder. This will be where you put the files created by Unity after a build (discussed below).
c.	Create “localizations” folder: In the base plugin folder, create an “localizations” sub-folder (NOTE! This is currently required to be exactly this – localizations (plural), not localization (singular). This will be where you put the localization files (e.g., english.csv, spanish.csv, etc.).
d.	Create Localization file(s): Localization files are CSV files following a particular format. These must have lines ending with LF not LF/NL, and they must reference the same &lt;part_name&gt; you use in the Part Production process below. There are some other restrictions for content, particularly that if you want a string that contains a “,” that string needs to be enclosed in quotes or the comma will mess with how the strings are parsed. These files are where the part’s Title, Subtitle, Manufacturer, and Description are configured. Here’s an example:
Key,Type,Desc,English

Parts/Title/spark_spt100,Text,,SPT-100
Parts/Subtitle/ spark_spt100,Text,,Hall Effect Thruster with Xenon Tank
Parts/Manufacturer/spark_spt100,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc."
Parts/Description/spark_spt100,Text,,"The SPT-100 is the pinnacle in tiny (0.625m-class) Ion engines, providing high Isp and low thrust with an integral toroidal xenon tank. Strap this little guy onto a probe core and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!"

Parts/Title/spark_x3,Text,,X3 NHT
Parts/Subtitle/spark_x3,Text,,Three-Channel Nested Hall Effect Thruster
Parts/Manufacturer/spark_x3,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc."
Parts/Description/spark_x3,Text,,"The SPARK X3 is the pinnacle in small (1.25m-class) Ion engines, providing high Isp and low thrust. Strap this bad boy onto your large probe or small capsule and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!"
e.	
Part Production
1.	Create Root Part Object: Create an empty game object under your scene (L-click Scene: Game Object &gt; Create Empty). Name this object the same as your part.
a.	Recommended naming scheme: &lt;mod_name&gt;_&lt;part_name&gt;. If your mod is called “My Awesome Mod” and your part title is “My Part”, then your part name might be my_awesome_mod_my_part for example. Part names must be unique, though you can have any descriptive title you like (that is done later in Localization). A naming scheme like this helps to prevent naming collisions in case anyone else might make a part they want to call “My Part”, like yours.
2.	Create Model Object: Create an empty game object under your root part object and name this one “model”.
3.	Create Part Folder: Create a Part folder named for your part inside your Parts folder. E.g., Assets\MyAwesomeMod\Parts\MyPart, or Assets\MyAwesomeMod\Parts\ThisGroup\MyPart if you’re grouping parts.
4.	Bring in FBX: Drag a copy of your part’s FBX file into the part folder.
a.	If you have baked textures for your part that go with the FBX (meaning, they’re based on the UV Unwrap specific to that FBX), then drag those into this same file with the FBX.
5.	Create Part Object: Drag a copy of the part FBX from the Part folder in Unity to the model object created in step 2. Don’t drag the FBX file from your computer’s files system, you need to use the copy you just placed in step 4. This will create a prefab for your part as a child of the model object.
6.	Unpack Prefab: Left-Click part object: Prefab &gt; Unpack.
7.	Remove Unnecessary Things: Remove any parts that came in with the FBX that you don’t actually need in the game like lights, cameras, empty nodes, etc. If it’s not an actual part you want the game to render, then delete it.
8.	Orient Part: Your model will appear in the Unity scene oriented as you built it in Blender, but this may not be the way you want it to be oriented in the game. If you need changes to the position, rotation, or scale of the part do those now using the Transform panel within the Inspector Window with your part object selected. For example, to flip a part over just give a rotation of 180 in Z, etc.
9.	Create Mesh Object: L-Click part object: Create Empty. Name this object “mesh”.
10.	Create Collider Object: L-Click mesh object: Create Empty. Name this object “col”. 
11.	Create Collider: In the Inspector window for the col object click “Add Component”. Search for Mesh Collider and pick it. This will create a Mesh Collider component in the col object. Click the arrowhead to the left of it to expand it and see its properties.
a.	Select Mesh: In the Mesh Collider properties select the Mesh you want to use. If your FBX is all one object you can pick that, or you can pick a suitable primitive like cube or cylinder, etc.
b.	Position, Rotation, and Scale: Set the position, rotation, and scale of the mesh to encompass the part. You should see a green mesh represented in the Scene window to help guide you to make sure you’ve got the right position, rotation, and scale.
c.	Convex: Check “Convex”
12.	Add Core Part Data: Select your Root Part Object. In the Inspector Window click “Add Component”. Search for “Core Part Data” and pick that. Open it up and configure as follows:
a.	Part Name: The Part Name needs to be the same as what you’ve used for the Root Part object, i.e., my_awesome_mod_my_part or whatever you used.
b.	Author: Use what you like here, typically your KSP Forum screen name or whatever you go by as your modding author name.
c.	Category: Select an appropriate category for your part.
d.	Family: If you wish to identify a “Family” for your part, this needs to be a particular string. You can find examples in the game’s files, or part JSONS, or ask in the KSP2 Modding Society discord to get this information.
e.	Co Lift, Co Mass, Co Pressure, etc.: These parameters allow you to set the Center of Lift, Center of Mass, Center of Pressure, etc. Adjust these to get the markers in the Unity scene where they should be for your part. Typically, Co Pressure and Co Lift are in the same place.
f.	Fuel Cross Feed: Check if fuel should be able to transit through your part on the way to other parts. Typically set to true, but not always.
g.	Mass: Set this in metric tons, not Kg.
h.	Attach Rules: Check the types of attachment your part should allow. Checking “Stack” or “Srf Attach” will allow your part to attach in a stack or to a surface. Checking “Allow Stack”, “Allow Srf Attach”, etc. will allow other parts to stack attach or surface attach respectively. Currently (?) Allow Collision, Allow Dock, Allow Rotate, and Allow Root have no effect in game (check this).
i.	Attach Nodes: If Stack is checked above, then you need a “top” and a “bottom” node, if Srf Attach is checked above, then you need a “srfAttach” node. Note, node names are case sensitive and having a node is not enough by itself, you do also need the corresponding Attach Rule set true or the node will have no effect. Under Attach Nodes click the + button to add a blank node and configure as needed. 
i.	Node ID: “top”, “bottom”, “srfAttach”, etc. (case sensitive!)
ii.	Node Type: Select as appropriate. (Stack for Stack, Surface for Surface…)
iii.	Attach Method: Select Fixed_Joint for Stack and Hinge_Joint for Surface Attach.
iv.	Is Multi Joint: In general set to True for stack attach to help prevent noodle rockets.
v.	Multi Joint Max Joint: Set to 3 if you set Is Multi Joint to true?
vi.	Position: Set as appropriate. Should be on the skin or outside of the part where you would expect to find it on your part in the VAB.
vii.	Orientation: Set as appropriate. The Orientation vector should be a unit vector (length 1) pointing in the direction of the part that will attach to the node, so pointing away from your part.
viii.	Size: Affects rigidity of your part. If your part is connected to another part with the same “size” node, then rigidity will be optimal, and otherwise it will be suboptimal.
ix.	Visual Size: Set the same as Size.
x.	Is Resource Crossfeed: Set as needed for this node.
xi.	Is Rigid: Set as needed for this node.
xii.	Rinse and Repeat: Subsequent nodes created with the + button will inherit settings from the last node made, so this may accelerate the process as you just need to change the Node Id, Position and Orientation for new nodes that are similar to the previous created node. 
13.	Add Module_Color: You need this to be able to paint your part with base and accent colors. As above, click Add Component and search for Module Color.
14.	Add Module_Drag: All parts need this. As above, click Add Component and search for Module Color.
15.	Add other modules as needed. For example, if your part is an engine you’ll also need:
a.	thrustTransform object: Create an empty game object as a child of the root part and name it thrustTransform.
b.	Throttle VFX Manager: Configure as needed (?). No need to drag anywhere, it just need to be a component for the part.
c.	Flameout VFX Data: Drag this up to the Flameout VFX property in Module_Engine.
d.	Module_Gimbal: Configure details as needed (e.g., Gimbal Range and Gimbal Speed, etc.), then drag this up to the Gimbal property in Module_Engine.
e.	Module_Generator: Configure details as needed, then drag this up to the Alternator property in Module_Engine.
16.	Apply Options: Select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and pick “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
17.	Save Part JSON: Click Save Part JSON button at the bottom of the Core Part Data module. This will put the resulting part JSON in the Assets folder for your Unity project. You need to do this any time you’ve edited the Core Part Data module (or also a module it depends on?).
18.	Make Prefab: Grab the root part object and drag it to the Unity project Assets folder.
19.	Add Part Icon: Create an icon for your part that the game will use in the parts picker. This needs to be a PNG file with specific dimensions. It should conform to the style used by other parts in the game. However you do this, you need to name the file &lt;part_name&gt;_icon.png, and you need to drag that file into the Assets folder in Unity.
a.	Convert Icon to Sprite: Select the part icon in the Assets folder. In the Inspector window, click the pulldown menu for Texture Type and change this from Default to Sprite (2D and UI), then click Apply. If this is not done, your lovely icon will not display! 
20.	Make Root Part Addressable: Select the root part’s prefab in the Assets folder and in the Inspector window check the box for Addressable.
21.	Make JSON Addressable: Select the part’s JSON in the Assets folder and in the Inspector window check the box for Addressable.
22.	Make the Icon Addressable: Select the root part’s icon in the Assets folder and in the Inspector window check the box for Addressable.
23.	Configure Addressable Properties: In the Addressables Groups expand the Default Local Group and find your part.
a.	Group Name \ Addressable Name: Change the information in the Group Name \ Addressable Name from “Assets/&lt;part_name&gt;*” to be just “&lt;part_name&gt;*”. So “Assets/&lt;part_name&gt;.prefab” becomes “&lt;part_name&gt;.prefab”, and so forth. You can leave the “Assets/” part of the path definition alone for each of these, that’s as it should be. The value for the Addressable Name needs to be the same as the file name it’s associated with and must not include any path parts. All of these need to be based on the Part Name established in the Core Part Data module.
b.	Labels: For the JSON set this to parts_data. Leave it blank for the prefab. If parts_data is not an option in the dropdown for Labels, then click Manage Labels, click the + button to add a new label, and set the Label Name to “parts_data”. Click Save.
24.	Build Parts Pack Addressables: In the Addressables Groups window, click the drop down for Build and pick New Build &gt; Default Build Script. If you have any unsaved changes Unity will prompt you to save, and then it will build the addressables package for your mod.
25.	Copy Addressables to Plugin Folder: If the Build step above was successful, the do the following.
a.	Delete Old Stuff: In Windows Explorer, navigate to your Base Plugin Folder’s addressables folder (&lt;KSP2 Game Dir&gt;\BepInEx\plugins\&lt;your Mod Name&gt;\addressables) and delete any content inside that folder. There may be four things: AddressablesLink (folder), StabaloneWindows64 (folder), catalog.json (file), and setting.json (file).
b.	Copy New Stuff: In Windows Explorer, navigate to your Unity project’s folder and from there to Library\com.unity.addressables\aa\Windows folder. If the build process above was successful, then there will be four things in this folder: AddressablesLink (folder), StabaloneWindows64 (folder), catalog.json (file), and setting.json (file). You will need to copy all of these to your Base Plugin Folder’s addressables folder.
26.	Launch Game and Test!
27.	Rinse and Repeat for Additional Parts

Blender Basics for Beginners
1.	If you’re making an engine, put an empty single arrow at the world origin facing in the direction your engine will fire, then move it along the axis of the engine so that it’s at the exit of the engine. Name this object thrustTransform, and keep in mind that size does not matter.
2.	Make sure all the part objects in your blend have the same material, and that the material has a good name. The material you use for this can be a default material, nothing special is needed.
3.	Make sure any Boolean modifiers are applied, but array modifiers can be left unapplied.
4.	Make sure you’ve got a good UV Map (use UV Smart Project) or an excellent one (UV Smart Project followed by Pack Islands). Recommended island spacing for both is 0.003
5.	When exporting your FBX for use in Substance Painter or any other tool, select only those objects that are actually part of your part and then be sure to check the box for Limit to Selected Objects
Texturing Tips
1.	Make sure the Kerbal_Space_Program_2_Parts_Paintable.spt file is in your “Documents&gt;Adobe&gt;Substance Painter&gt;Assets&gt;templates” folder. If the templates folder doesn’t exist yet, then create one under Assets and drop that file in it.
2.	Launch Substance Painter and create a New project.
a.	In the project creation dialog pick the Kerbal_Space_Program_2_Parts_Paintable template
b.	Select your FBX file
c.	Make sure the Document Resolution is sufficient for your texture maps (highly recommend 4096! Any less and painted on bolts look like crap)
d.	Click Open.
 

3.	Make sure the UV Map looks OK in Substance Painter. If it doesn’t, you need to go back to Blender and re-unwrap then export a new FBX and return to step 2 above.
4.	Use the File &gt; Import resources… menu to bring up the Import Resources dialog (shown below) and click on the Add Resource button to bring in the KSP2_Part.spsm file. Repeat this step for the Kerbal Space Program 2 - Standard Damaged.spexp file. Both of these should go into your library as you’re going to need them with every part you make.
a.	Use the Add Resources button to find the resource you want to import
b.	Select the file and click the Open button
c.	Repeat steps (a) and (b) above for as many things as you would like to import
d.	Select the destination to Import your resources to (hint: library ‘your_assests’ for these!)
e.	Click Import
 
5.	Use the process in Step 4 above to bring in any textures you want to use. There are many you can peruse and download for free here: https://substance3d.adobe.com/community-assets
a.	Note: When importing textures, you can either put them in your library so that you can use them in multiple projects, or you can put them directly in your project if you don’t want them in your library. Either way works.
b.	You can repeat this step any time, and as often as needed, so don’t worry if you don’t have all the textures you need at the start. It’s also possible to make textures within Substance Painter
6.	Apply the KSP2 Part material to your whole object and once done delete the default later that Substance Painter provided.
7.	Locate the Bake button (looks like a croissant) in the upper right of Substance Painter and click it  
a.	Uncheck the option to make an Opacity Mesh Map
b.	Click the large blue Back Selected Textures button
c.	When baking is done, click the Return to Painting Mode button
8.	Expand the folder by the KSP2_Part smart material in the Layers panel
9.	Expand the folder by the Base Material smart material within the KSP2 Part
10.	Search for and select the materials you want to paint your part within the Assets panel.
a.	Drag a material from the Assets panel onto the Base Material in the Layers panel.
b.	Right click on that material and add a black mask to it, making sure the resulting mask is selected (there will be a blue border around it)
c.	Pick the Polygon Fill tool from the tool bar and then select a option from Triangle Fill, Polygon Fill, Mesh Fill, and UV Chunk Fill.    Use the triangle to paint tris, the square (polygon) for quads, the cube (mesh) for entire objects, and the checkerboard (UV chunk) for connected faces on a side of surface.
11.	Create a simple material: Example white boron nitride ceramic.
a.	Click the Add Fill Layer button (paint can)  
b.	Drag the new fill layer onto the Base Material folder.
c.	In the Propertied panel under Materials, leave only color, roughness, and metal selected.
d.	In the Properties panel set the base color to what you need (white in this case)
e.	Set the metallic slider to 1.0.
f.	Set the roughness slider to 0.3.
g.	Add a black mask to the fill layer
h.	Paint like a pro
12.	Add “Nails”: This is where you add various surface details via the height map, and works for painting on nuts, bolts, fasteners, etc. All of these can be added as “alphas” like this
a.	Import your alpha(s)!
b.	In Layers, select the black mask for Nails in the Heightmap
c.	Select Radial Symmetry (for applications around radially symmetric parts like I've got here)
d.	Set your X, Y, Z point about which things will be symmetric, where Y is the vertical. (Switch the Show/Hide Manipulator on to help see where this point is in your model)
e.	Set Mirror Y, the count you want, and the angular span the radial pattern should follow (360 for all the way around)
f.	With the brush tool active, select your alpha
g.	Move your cursor onto the part and see the red dots where the "Nails" will be placed.
h.	Adjust the size of the "Nail" using [ and ] to make it smaller or larger respectively
i.	Click where you want the first "Nail" to appear, this will place them all.
13.	Add “Stickers”: This is where you add signs, stickers, decals, etc., where the sticker has a uniform color (like a radiation symbol, etc.)
a.	Import your alpha(s)!
b.	In Layers, under Base Material, add a fill layer for the sticker
i.	Uncheck all material properties for the layer except color, metal, and rough
ii.	Set the fill color to be what you want the sticker to look like
iii.	Move the layer to be above any other Base Material layer that impacts the part(s) you’re going to apply stickers to (or it will be overwritten and you won’t see your stickers!)
c.	Select Radial Symmetry (for applications around radially symmetric parts like I've got here)
d.	Set your X, Y, Z point about which things will be symmetric, where Y is the vertical. (Switch the Show/Hide Manipulator on to help see where this point is in your model)
e.	Set Mirror Y, the count you want, and the angular span the radial pattern should follow (360 for all the way around)
f.	With the brush tool active, select your alpha
g.	Move your cursor onto the part and see the red dots where the "Stickers" will be placed.
h.	Adjust the size of the "Sticker" using [ and ] to make it smaller or larger respectively
i.	Click where you want the first "Sticker" to appear, this will place them all.
[[Category:Parts and modules]]</text>
      <sha1>56fyyfxqg67ng543te0xrq71jsmyx35</sha1>
    </revision>
    <revision>
      <id>345</id>
      <parentid>344</parentid>
      <timestamp>2024-02-04T19:13:24Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <comment>Initial version sans graphics</comment>
      <origin>345</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="27603" sha1="ect7k1ckusbvbsxl84aljxwgd4tbq9y" xml:space="preserve">== '''Preamble''' ==
This guide is based on the videos: How to create parts for KSP2 and How to make engines for KSP2, and on other notes and guidance from the KSP2 Modding Society discord.

Also the web pages: KSP2 Part tutorial (almost) from scratch, and Tutorial: My First Part

== '''Prerequisites''' ==
You will absolutely need the following things at a bare minimum:

* Unity Editor
* ThunderKit
* Unity KSP Tools
* Addressables Package (Install via Unity Window menu &gt; Package Manager
** Change Packages to Unity Registry
** Search for “addressables”. Click on it and install.
* LuxShader

You will generally also need the following things:

* Blender (or other mesh modeling SW that can produce FBX files)
* Various blender addons such as TexTools, etc. (make a list of the free ones you’re using)
* Substance Painter (or other texture painting tool – could be Blender or Quixel Mixer, but SP is recommended highly)

You probably need a few other things too:

* JSON exports of similar stock parts to show you what some things can or should be set to

== Process ==
This guide covers the part of the process that takes place in the Unity Editor resulting in an assembly you can load as a codeless mod in KSP2, and how to get that result into the game.

In Unity editor start with a fresh scene. This will hold your entire parts pack.

Part Pack Prep

# '''Create Unity Project''': Create a new Unity project with an empty scene. You can use the sample scene.
# '''Install Addressables package''': Open Window &gt; Package Manger and select Packages: Unity Registry. Search for addressables and click Install.
# '''Install ThunderKit in Unity'''. See Installing Tunderkit from the Getting Ready section of the KSP2 Part Tutorial linked above for details.
# '''Install Unity KSP Tools in Unity'''. See Installing KSP2 Unity Tools from the Getting Ready section of the KSP2 Part Tutorial linked above for details.
## Go to https://github.com/SpaceWarpDev/KSP2UnityTools/releases
## Download latest KSP2 Unity Tools version
## Double click the KSPUTxxx.unitypackage file to install it in the open unity project
# '''Install LuxShader in Unity'''. Place a copy of “LuxShader” somewhere in your Unity project. I put mine in my Parts Pack folder.
# '''Configure Unity Project''': ''This is essential, or even if you can build a part it won’t load in the game''. You can check your settings like this. Go to the Addressables Window (click the Unity menu for Window &gt; Asset Management &gt; Addressables &gt; Group). Select the Default Local Group in Addressables Groups window. In the Inspector window, check the following properties for your parts pack mod.
## Build Path: Should be set to Library/com.unity.addressables/aa/Windows/StandaloneWindows64
## Load Path: Should be set to {SpaceWarpPaths.&lt;your_mod_id&gt;}/addressables/StandaloneWindows64
### For your_mod_id, it is imperative that you replace any “.” Or “-“ with “_”. Only the very first “.” Between “SpaceWarpPaths” and “&lt;your_mod_id&gt;” is allowed as SpaceWarpPaths is a class, and classes can have variables, but variables can’t have any “.” or “-“ in their name (for reasons that should be obvious). If you’ve got any characters that can’t be used in a C# variable name In your mod ID (e.g. com.github.schlosrat.SPARK, etc.), then just replace those with underscores and you’ll be OK.
## Make sure the Load Path is ''not'' {UnityEngine.AddressableAssets.Addressables.RuntimePath}/StandaloneWindows64 (which it seems to want to be…) If you need to change these it’s best to create a new profile which you can then apply to the Build &amp; Load Paths drop down. To do that go to the Addressables Groups windows and on the Profile: Default dropdown pick Manage Profiles.
## This will open up the Addressables Profiles panel. Create a New Profile by clicking the Create dropdown and picking Build and Load Path Variables (All Profiles)
## This will give you the following dialog box which you can type into, but be forewarned – it will vanish if it loses focus, so save as soon as you’ve set the Prefix Name (which was set to SpaceWarp above but is in the fresh, clean unmodified form below)
## Once you’ve saved it, you can edit the SpaceWarp.BuildPath to match what’s shown above and the SpaceWarp.LoadPath to be {SpaceWarpPaths.&lt;your_mod_id&gt;}/addressables/StandaloneWindows64.
## With these setup, you can go back to the Inspector for the Default Local Group and set the Build &amp; Load Paths setting to SpaceWarp in the dropdown menu so that your configuration looks like this
# '''Create Parts Pack folder''': Under Assets, create a folder (L-Click Assets: Create &gt; Folder) and name it the same as your parts pack mod. If your mod is called My Awesome Mod then this would be Assets\MyAwesomeMod.
# '''Create Materials folder''': Inside your parts pack folder create a folder called Materials. You’ll be storing the textures and materials you need there. E.g., Assets\MyAwesomeMod\Materials. This is just to aid in organization.
# '''Create Parts folder''': Inside your parts pack folder create a folder called Parts. You’ll be storing the part meshes and related things there. E.g., Assets\MyAwesomeMod\Parts. You can have whatever organization you like here, so if you want to group some parts you might create group folders within Parts (e.g., Methalox Engines, Nuclear Engines, Ion Engines, etc.). This is just to aid in organization and is optional.
# '''Create Plugin Folder and Content''': In your KSP2 install’s BepInEx\plugins folder create a folder for your mod. You can name this whatever you like, but it should be unique. This will be the “mod” players will install to have your parts pack and we’ll refer to it as the Base Plugin Folder in this guide.
## Create swinfo.json: In the base plugin folder create a swinfo.json file with content like this:&lt;syntaxhighlight lang="json"&gt;
{
  "spec": "1.3",
  "mod_id": "com.github.schlosrat.SPARK",
  "author": "schlosrat",
  "name": "Stellar Plasma-Assisted Rocket Kinetics",
  "description": "High ISP engines for your low thrust needs",
  "source": "https://github.com/schlosrat/SPARK",
  "version": "0.0.1",
  "version_check": "https://raw.githubusercontent.com/schlosrat/SPARK/main/SPARK/swinfo.json",
  "ksp2_version": {
    "min": "0.1.3.2",
    "max": "*"
  },
  "dependencies": [
    {
      "id": "com.github.x606.spacewarp",
      "version": {
        "min": "1.4.0",
        "max": "*"
      }
    },
    {
      "id": "lfo",
      "version": {
        "min": "0.2.0",
        "max": "*"
      }
    }
  ]
}
&lt;/syntaxhighlight&gt;
## Create “addressables” folder: In the base plugin folder, create an “addressables” sub-folder. This will be where you put the files created by Unity after a build (discussed below).
## Create “localizations” folder: In the base plugin folder, create an “localizations” sub-folder (NOTE! This is currently required to be exactly this – localizations (plural), not localization (singular). This will be where you put the localization files (e.g., english.csv, spanish.csv, etc.).
## Create Localization file(s): Localization files are CSV files following a particular format. These must have lines ending with LF not LF/NL, and they must reference the same &lt;part_name&gt; you use in the Part Production process below. There are some other restrictions for content, particularly that if you want a string that contains a “,” that string needs to be enclosed in quotes or the comma will mess with how the strings are parsed. These files are where the part’s Title, Subtitle, Manufacturer, and Description are configured. Here’s an example:&lt;syntaxhighlight lang="text"&gt;
Key,Type,Desc,English

Parts/Title/spark_spt100,Text,,SPT-100

Parts/Subtitle/ spark_spt100,Text,,Hall Effect Thruster with Xenon Tank

Parts/Manufacturer/spark_spt100,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc."

Parts/Description/spark_spt100,Text,,"The SPT-100 is the pinnacle in tiny (0.625m-class) Ion engines, providing high Isp and low thrust with an integral toroidal xenon tank. Strap this little guy onto a probe core and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!"

Parts/Title/spark_x3,Text,,X3 NHT

Parts/Subtitle/spark_x3,Text,,Three-Channel Nested Hall Effect Thruster

Parts/Manufacturer/spark_x3,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc."

Parts/Description/spark_x3,Text,,"The SPARK X3 is the pinnacle in small (1.25m-class) Ion engines, providing high Isp and low thrust. Strap this bad boy onto your large probe or small capsule and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!"
&lt;/syntaxhighlight&gt;

== Part Production ==

# '''Create Root Part Object''': Create an empty game object under your scene (L-click Scene: Game Object &gt; Create Empty). Name this object the same as your part.
## Recommended naming scheme: &lt;mod_name&gt;_&lt;part_name&gt;. If your mod is called “My Awesome Mod” and your part title is “My Part”, then your part name might be my_awesome_mod_my_part for example. Part names must be unique, though you can have any descriptive title you like (that is done later in Localization). A naming scheme like this helps to prevent naming collisions in case anyone else might make a part they want to call “My Part”, like yours.
# '''Create Model Object''': Create an empty game object under your root part object and name this one “model”.
# '''Create Part Folder''': Create a Part folder named for your part inside your Parts folder. E.g., Assets\MyAwesomeMod\Parts\MyPart, or Assets\MyAwesomeMod\Parts\ThisGroup\MyPart if you’re grouping parts.
# '''Bring in FBX''': Drag a copy of your part’s FBX file into the part folder.
## If you have baked textures for your part that go with the FBX (meaning, they’re based on the UV Unwrap specific to that FBX), then drag those into this same file with the FBX.
# '''Create Part Object''': Drag a copy of the part FBX from the Part folder in Unity to the model object created in step 2. Don’t drag the FBX file from your computer’s files system, you need to use the copy you just placed in step 4. This will create a prefab for your part as a child of the model object.
# '''Unpack Prefab''': Left-Click part object: Prefab &gt; Unpack.
# '''Remove Unnecessary Things''': Remove any parts that came in with the FBX that you don’t actually need in the game like lights, cameras, empty nodes, etc. If it’s not an actual part you want the game to render, then delete it.
# '''Orient Part''': Your model will appear in the Unity scene oriented as you built it in Blender, but this may not be the way you want it to be oriented in the game. If you need changes to the position, rotation, or scale of the part do those now using the Transform panel within the Inspector Window with your part object selected. For example, to flip a part over just give a rotation of 180 in Z, etc.
# '''Create Mesh Object''': L-Click part object: Create Empty. Name this object “mesh”.
# '''Create Collider Object''': L-Click mesh object: Create Empty. Name this object “col”.
# '''Create Collider''': In the Inspector window for the col object click “Add Component”. Search for Mesh Collider and pick it. This will create a Mesh Collider component in the col object. Click the arrowhead to the left of it to expand it and see its properties.
## '''Select Mesh''': In the Mesh Collider properties select the Mesh you want to use. If your FBX is all one object you can pick that, or you can pick a suitable primitive like cube or cylinder, etc.
## '''Position, Rotation, and Scale''': Set the position, rotation, and scale of the mesh to encompass the part. You should see a green mesh represented in the Scene window to help guide you to make sure you’ve got the right position, rotation, and scale.
## '''Convex''': Check “Convex”
# '''Add Core Part Data''': Select your Root Part Object. In the Inspector Window click “Add Component”. Search for “Core Part Data” and pick that. Open it up and configure as follows:
## '''Part Name''': The Part Name needs to be the same as what you’ve used for the Root Part object, i.e., my_awesome_mod_my_part or whatever you used.
## '''Author''': Use what you like here, typically your KSP Forum screen name or whatever you go by as your modding author name.
## '''Category''': Select an appropriate category for your part.
## '''Family''': If you wish to identify a “Family” for your part, this needs to be a particular string. You can find examples in the game’s files, or part JSONS, or ask in the KSP2 Modding Society discord to get this information.
## '''Co Lift, Co Mass, Co Pressure, etc.''': These parameters allow you to set the Center of Lift, Center of Mass, Center of Pressure, etc. Adjust these to get the markers in the Unity scene where they should be for your part. Typically, Co Pressure and Co Lift are in the same place.
## '''Fuel Cross Feed''': Check if fuel should be able to transit through your part on the way to other parts. Typically set to true, but not always.
## '''Mass''': Set this in metric tons, not Kg.
## '''Attach Rules''': Check the types of attachment your part should allow. Checking “Stack” or “Srf Attach” will allow your part to attach in a stack or to a surface. Checking “Allow Stack”, “Allow Srf Attach”, etc. will allow other parts to stack attach or surface attach respectively. ''Currently (?) Allow Collision, Allow Dock, Allow Rotate, and Allow Root have no effect in game (check this)''.
## '''Attach Nodes''': If Stack is checked above, then you need a “top” and a “bottom” node, if Srf Attach is checked above, then you need a “srfAttach” node. Note, node names are case sensitive and having a node is not enough by itself, you do also need the corresponding Attach Rule set true or the node will have no effect. Under Attach Nodes click the + button to add a blank node and configure as needed.
### '''Node ID''': “top”, “bottom”, “srfAttach”, etc. (case sensitive!)
### '''Node Type''': Select as appropriate. (Stack for Stack, Surface for Surface…)
### '''Attach Method''': Select Fixed_Joint for Stack and Hinge_Joint for Surface Attach.
### '''Is Multi Joint''': In general set to True for stack attach to help prevent noodle rockets.
### '''Multi Joint Max Joint''': ''Set to 3 if you set Is Multi Joint to true?''
### '''Position''': Set as appropriate. Should be on the skin or outside of the part where you would expect to find it on your part in the VAB.
### '''Orientation''': Set as appropriate. The Orientation vector should be a unit vector (length 1) pointing in the direction of the part that will attach to the node, so pointing away from your part.
### '''Size''': Affects rigidity of your part. If your part is connected to another part with the same “size” node, then rigidity will be optimal, and otherwise it will be suboptimal.
### '''Visual Size''': Set the same as Size.
### '''Is Resource Crossfeed''': Set as needed for this node.
### '''Is Rigid''': Set as needed for this node.
### ''Rinse and Repeat'': Subsequent nodes created with the + button will inherit settings from the last node made, so this may accelerate the process as you just need to change the Node Id, Position and Orientation for new nodes that are similar to the previous created node.
# '''Add Module_Color''': You need this to be able to paint your part with base and accent colors. As above, click Add Component and search for Module Color.
# '''Add Module_Drag''': All parts need this. As above, click Add Component and search for Module Color.
# '''Add other modules as needed'''. For example, if your part is an engine you’ll also need:
## thrustTransform object: Create an empty game object as a child of the root part and name it thrustTransform.
## '''Throttle VFX Manager''': Configure as needed (?). No need to drag anywhere, it just need to be a component for the part.
## '''Flameout VFX Data''': Drag this up to the Flameout VFX property in Module_Engine.
## '''Module_Gimbal''': Configure details as needed (e.g., Gimbal Range and Gimbal Speed, etc.), then drag this up to the Gimbal property in Module_Engine.
## '''Module_Generator''': Configure details as needed, then drag this up to the Alternator property in Module_Engine.
## Module_Fairing: Unless you plan for your engine to only ever be on the very first stage (i.e., a big booster), then you probably want it to have a fairing so that it can be used in the second stage and above.
# '''Apply Options''': Select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and pick “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# '''Save Part JSON''': Click Save Part JSON button at the bottom of the Core Part Data module. This will put the resulting part JSON in the Assets folder for your Unity project. You need to do this any time you’ve edited the Core Part Data module (or also a module it depends on?).
# '''Make Prefab''': Grab the root part object and drag it to the Unity project Assets folder.
# '''Add Part Icon''': Create an icon for your part that the game will use in the parts picker. This needs to be a PNG file with specific dimensions. It should conform to the style used by other parts in the game. However you do this, you need to name the file &lt;part_name&gt;_icon.png, and you need to drag that file into the Assets folder in Unity.
## '''Convert Icon to Sprite''': Select the part icon in the Assets folder. In the Inspector window, click the pulldown menu for Texture Type and change this from Default to Sprite (2D and UI), then click Apply. If this is not done, your lovely icon will not display!
# '''Make Root Part Addressabl'''e: Select the root part’s prefab in the Assets folder and in the Inspector window check the box for Addressable.
# '''Make JSON Addressable''': Select the part’s JSON in the Assets folder and in the Inspector window check the box for Addressable.
# '''Make the Icon Addressable''': Select the root part’s icon in the Assets folder and in the Inspector window check the box for Addressable.
# '''Configure Addressable Properties''': In the Addressables Groups expand the Default Local Group and find your part.
## '''Group Name \ Addressable Name''': Change the information in the Group Name \ Addressable Name from “Assets/&lt;part_name&gt;*” to be just “&lt;part_name&gt;*”. So “Assets/&lt;part_name&gt;.prefab” becomes “&lt;part_name&gt;.prefab”, and so forth. You can leave the “Assets/” part of the path definition alone for each of these, that’s as it should be. The value for the Addressable Name needs to be the same as the file name it’s associated with and must not include any path parts. All of these need to be based on the Part Name established in the Core Part Data module.
## '''Labels''': For the JSON set this to parts_data. Leave it blank for the prefab. If parts_data is not an option in the dropdown for Labels, then click Manage Labels, click the + button to add a new label, and set the Label Name to “parts_data”. Click Save.
# '''Build Parts Pack Addressables''': In the Addressables Groups window, click the drop down for Build and pick New Build &gt; Default Build Script. If you have any unsaved changes Unity will prompt you to save, and then it will build the addressables package for your mod.
# '''Copy Addressables to Plugin Folder''': If the Build step above was successful, the do the following.
## '''Delete Old Stuff''': In Windows Explorer, navigate to your Base Plugin Folder’s addressables folder (&lt;KSP2 Game Dir&gt;\BepInEx\plugins\&lt;your Mod Name&gt;\addressables) and delete any content inside that folder. There may be four things: AddressablesLink (folder), StabaloneWindows64 (folder), catalog.json (file), and setting.json (file).
## '''Copy New Stuff''': In Windows Explorer, navigate to your Unity project’s folder and from there to Library\com.unity.addressables\aa\Windows folder. If the build process above was successful, then there will be four things in this folder: AddressablesLink (folder), StabaloneWindows64 (folder), catalog.json (file), and setting.json (file). You will need to copy all of these to your Base Plugin Folder’s addressables folder.
# '''Launch Game and Test!'''
# '''''Rinse and Repeat for Additional Parts'''''

== Blender Basics for Beginners ==

# If you’re making an engine, put an empty single arrow at the world origin facing in the direction your engine will fire, then move it along the axis of the engine so that it’s at the exit of the engine. Name this object thrustTransform, and keep in mind that size does not matter.
# Make sure all the part objects in your blend have the same material, and that the material has a good name. The material you use for this can be a default material, nothing special is needed.
# Make sure any Boolean modifiers are applied, but array modifiers can be left unapplied.
# Make sure you’ve got a good UV Map (use UV Smart Project) or an excellent one (UV Smart Project followed by Pack Islands). Recommended island spacing for both is 0.003
# When exporting your FBX for use in Substance Painter or any other tool, select only those objects that are actually part of your part and then be sure to check the box for Limit to Selected Objects

== Texturing Tips ==

# Make sure the Kerbal_Space_Program_2_Parts_Paintable.spt file is in your “Documents&gt;Adobe&gt;Substance Painter&gt;Assets&gt;templates” folder. If the templates folder doesn’t exist yet, then create one under Assets and drop that file in it.
# Launch Substance Painter and create a New project.
## In the project creation dialog pick the Kerbal_Space_Program_2_Parts_Paintable template
## Select your FBX file
## Make sure the Document Resolution is sufficient for your texture maps (highly recommend 4096! Any less and painted on bolts look like crap)
## Click Open ''&lt;INSERT GRAPHIC HERE&gt;''.
# Make sure the UV Map looks OK in Substance Painter. If it doesn’t, you need to go back to Blender and re-unwrap then export a new FBX and return to step 2 above.
# Use the File &gt; Import resources… menu to bring up the Import Resources dialog (shown below) and click on the Add Resource button to bring in the KSP2_Part.spsm file. Repeat this step for the Kerbal Space Program 2 - Standard Damaged.spexp file. Both of these should go into your library as you’re going to need them with every part you make.
## Use the Add Resources button to find the resource you want to import
## Select the file and click the Open button
## Repeat steps (a) and (b) above for as many things as you would like to import
## Select the destination to Import your resources to (hint: library ‘your_assests’ for these!)
## Click Import ''&lt;INSERT GRAPHIC HERE&gt;.''
# Use the process in Step 4 above to bring in any textures you want to use. There are many you can peruse and download for free here: https://substance3d.adobe.com/community-assets
## Note: When importing textures, you can either put them in your library so that you can use them in multiple projects, or you can put them directly in your project if you don’t want them in your library. Either way works.
## You can repeat this step any time, and as often as needed, so don’t worry if you don’t have all the textures you need at the start. It’s also possible to make textures within Substance Painter
# Apply the KSP2 Part material to your whole object and once done delete the default later that Substance Painter provided.
# Locate the Bake button (looks like a croissant) in the upper right of Substance Painter and click it ''&lt;INSERT GRAPHIC HERE&gt;''.
## Uncheck the option to make an Opacity Mesh Map.
## Click the large blue Back Selected Textures button.
## When baking is done, click the Return to Painting Mode button.
# Expand the folder by the KSP2_Part smart material in the Layers panel.
# Expand the folder by the Base Material smart material within the KSP2 Part.
# Search for and select the materials you want to paint your part within the Assets panel.
## Drag a material from the Assets panel onto the Base Material in the Layers panel.
## Right click on that material and add a black mask to it, making sure the resulting mask is selected (there will be a blue border around it).
## Pick the Polygon Fill tool from the tool bar and then select a option from Triangle Fill, Polygon Fill, Mesh Fill, and UV Chunk Fill. ''&lt;INSERT GRAPHIC HERE&gt;'' Use the triangle to paint tris, the square (polygon) for quads, the cube (mesh) for entire objects, and the checkerboard (UV chunk) for connected faces on a side of surface.
# Create a simple material: Example white boron nitride ceramic.
## Click the Add Fill Layer button (paint can) ''&lt;INSERT GRAPHIC HERE&gt;''.
## Drag the new fill layer onto the Base Material folder.
## In the Propertied panel under Materials, leave only color, roughness, and metal selected.
## In the Properties panel set the base color to what you need (white in this case).
## Set the metallic slider to 1.0.
## Set the roughness slider to 0.3.
## Add a black mask to the fill layer.
## Paint like a pro.
# Add “Nails”: This is where you add various surface details via the height map, and works for painting on nuts, bolts, fasteners, etc. All of these can be added as “alphas” like this:
## Import your alpha(s)!
## In Layers, select the black mask for Nails in the Heightmap.
## Select Radial Symmetry (for applications around radially symmetric parts like I've got here).
## Set your X, Y, Z point about which things will be symmetric, where Y is the vertical. (Switch the Show/Hide Manipulator on to help see where this point is in your model).
## Set Mirror Y, the count you want, and the angular span the radial pattern should follow (360 for all the way around).
## With the brush tool active, select your alpha.
## Move your cursor onto the part and see the red dots where the "Nails" will be placed.
## Adjust the size of the "Nail" using [ and ] to make it smaller or larger respectively.
## Click where you want the first "Nail" to appear, this will place them all.
# Add “Stickers”: This is where you add signs, stickers, decals, etc., where the sticker has a uniform color (like a radiation symbol, etc.).
## Import your alpha(s)!
## In Layers, under Base Material, add a fill layer for the sticker.
### Uncheck all material properties for the layer except color, metal, and rough.
### Set the fill color to be what you want the sticker to look like.
### Move the layer to be above any other Base Material layer that impacts the part(s) you’re going to apply stickers to (or it will be overwritten and you won’t see your stickers!)
## Select Radial Symmetry (for applications around radially symmetric parts like I've got here).
## Set your X, Y, Z point about which things will be symmetric, where Y is the vertical. (Switch the Show/Hide Manipulator on to help see where this point is in your model).
## Set Mirror Y, the count you want, and the angular span the radial pattern should follow (360 for all the way around).
## With the brush tool active, select your alpha.
## Move your cursor onto the part and see the red dots where the "Stickers" will be placed.
## Adjust the size of the "Sticker" using [ and ] to make it smaller or larger respectively.
## Click where you want the first "Sticker" to appear, this will place them all.

[[Category:Parts and modules]]</text>
      <sha1>ect7k1ckusbvbsxl84aljxwgd4tbq9y</sha1>
    </revision>
    <revision>
      <id>346</id>
      <parentid>345</parentid>
      <timestamp>2024-02-04T19:24:47Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <comment>Added links to lux's tutorials</comment>
      <origin>346</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="27836" sha1="iz93k5ip4nds1iw7qmy8jlc196syzft" xml:space="preserve">== '''Preamble''' ==
This guide is based on the videos: How to create parts for KSP2 and How to make engines for KSP2 (see: [[Part modding videos (tutorials)]]), and on other notes and guidance from the KSP2 Modding Society discord.

Also the web pages: [https://luxstice.notion.site/KSP2-Part-tutorial-almost-from-scratch-1f336b7c97ae4280afb6a4e3aa6080b2 KSP2 Part tutorial (almost) from scratch], and [https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314 Tutorial: My First Part]

== '''Prerequisites''' ==
You will absolutely need the following things at a bare minimum:

* Unity Editor
* ThunderKit
* Unity KSP Tools
* Addressables Package (Install via Unity Window menu &gt; Package Manager
** Change Packages to Unity Registry
** Search for “addressables”. Click on it and install.
* LuxShader

You will generally also need the following things:

* Blender (or other mesh modeling SW that can produce FBX files)
* Various blender addons such as TexTools, etc. (make a list of the free ones you’re using)
* Substance Painter (or other texture painting tool – could be Blender or Quixel Mixer, but SP is recommended highly)

You probably need a few other things too:

* JSON exports of similar stock parts to show you what some things can or should be set to

== Process ==
This guide covers the part of the process that takes place in the Unity Editor resulting in an assembly you can load as a codeless mod in KSP2, and how to get that result into the game.

In Unity editor start with a fresh scene. This will hold your entire parts pack.

Part Pack Prep

# '''Create Unity Project''': Create a new Unity project with an empty scene. You can use the sample scene.
# '''Install Addressables package''': Open Window &gt; Package Manger and select Packages: Unity Registry. Search for addressables and click Install.
# '''Install ThunderKit in Unity'''. See Installing Tunderkit from the Getting Ready section of the KSP2 Part Tutorial linked above for details.
# '''Install Unity KSP Tools in Unity'''. See Installing KSP2 Unity Tools from the Getting Ready section of the KSP2 Part Tutorial linked above for details.
## Go to https://github.com/SpaceWarpDev/KSP2UnityTools/releases
## Download latest KSP2 Unity Tools version
## Double click the KSPUTxxx.unitypackage file to install it in the open unity project
# '''Install LuxShader in Unity'''. Place a copy of “LuxShader” somewhere in your Unity project. I put mine in my Parts Pack folder.
# '''Configure Unity Project''': ''This is essential, or even if you can build a part it won’t load in the game''. You can check your settings like this. Go to the Addressables Window (click the Unity menu for Window &gt; Asset Management &gt; Addressables &gt; Group). Select the Default Local Group in Addressables Groups window. In the Inspector window, check the following properties for your parts pack mod.
## Build Path: Should be set to Library/com.unity.addressables/aa/Windows/StandaloneWindows64
## Load Path: Should be set to {SpaceWarpPaths.&lt;your_mod_id&gt;}/addressables/StandaloneWindows64
### For your_mod_id, it is imperative that you replace any “.” Or “-“ with “_”. Only the very first “.” Between “SpaceWarpPaths” and “&lt;your_mod_id&gt;” is allowed as SpaceWarpPaths is a class, and classes can have variables, but variables can’t have any “.” or “-“ in their name (for reasons that should be obvious). If you’ve got any characters that can’t be used in a C# variable name In your mod ID (e.g. com.github.schlosrat.SPARK, etc.), then just replace those with underscores and you’ll be OK.
## Make sure the Load Path is ''not'' {UnityEngine.AddressableAssets.Addressables.RuntimePath}/StandaloneWindows64 (which it seems to want to be…) If you need to change these it’s best to create a new profile which you can then apply to the Build &amp; Load Paths drop down. To do that go to the Addressables Groups windows and on the Profile: Default dropdown pick Manage Profiles.
## This will open up the Addressables Profiles panel. Create a New Profile by clicking the Create dropdown and picking Build and Load Path Variables (All Profiles)
## This will give you the following dialog box which you can type into, but be forewarned – it will vanish if it loses focus, so save as soon as you’ve set the Prefix Name (which was set to SpaceWarp above but is in the fresh, clean unmodified form below)
## Once you’ve saved it, you can edit the SpaceWarp.BuildPath to match what’s shown above and the SpaceWarp.LoadPath to be {SpaceWarpPaths.&lt;your_mod_id&gt;}/addressables/StandaloneWindows64.
## With these setup, you can go back to the Inspector for the Default Local Group and set the Build &amp; Load Paths setting to SpaceWarp in the dropdown menu so that your configuration looks like this
# '''Create Parts Pack folder''': Under Assets, create a folder (L-Click Assets: Create &gt; Folder) and name it the same as your parts pack mod. If your mod is called My Awesome Mod then this would be Assets\MyAwesomeMod.
# '''Create Materials folder''': Inside your parts pack folder create a folder called Materials. You’ll be storing the textures and materials you need there. E.g., Assets\MyAwesomeMod\Materials. This is just to aid in organization.
# '''Create Parts folder''': Inside your parts pack folder create a folder called Parts. You’ll be storing the part meshes and related things there. E.g., Assets\MyAwesomeMod\Parts. You can have whatever organization you like here, so if you want to group some parts you might create group folders within Parts (e.g., Methalox Engines, Nuclear Engines, Ion Engines, etc.). This is just to aid in organization and is optional.
# '''Create Plugin Folder and Content''': In your KSP2 install’s BepInEx\plugins folder create a folder for your mod. You can name this whatever you like, but it should be unique. This will be the “mod” players will install to have your parts pack and we’ll refer to it as the Base Plugin Folder in this guide.
## Create swinfo.json: In the base plugin folder create a swinfo.json file with content like this:&lt;syntaxhighlight lang="json"&gt;
{
  "spec": "1.3",
  "mod_id": "com.github.schlosrat.SPARK",
  "author": "schlosrat",
  "name": "Stellar Plasma-Assisted Rocket Kinetics",
  "description": "High ISP engines for your low thrust needs",
  "source": "https://github.com/schlosrat/SPARK",
  "version": "0.0.1",
  "version_check": "https://raw.githubusercontent.com/schlosrat/SPARK/main/SPARK/swinfo.json",
  "ksp2_version": {
    "min": "0.1.3.2",
    "max": "*"
  },
  "dependencies": [
    {
      "id": "com.github.x606.spacewarp",
      "version": {
        "min": "1.4.0",
        "max": "*"
      }
    },
    {
      "id": "lfo",
      "version": {
        "min": "0.2.0",
        "max": "*"
      }
    }
  ]
}
&lt;/syntaxhighlight&gt;
## Create “addressables” folder: In the base plugin folder, create an “addressables” sub-folder. This will be where you put the files created by Unity after a build (discussed below).
## Create “localizations” folder: In the base plugin folder, create an “localizations” sub-folder (NOTE! This is currently required to be exactly this – localizations (plural), not localization (singular). This will be where you put the localization files (e.g., english.csv, spanish.csv, etc.).
## Create Localization file(s): Localization files are CSV files following a particular format. These must have lines ending with LF not LF/NL, and they must reference the same &lt;part_name&gt; you use in the Part Production process below. There are some other restrictions for content, particularly that if you want a string that contains a “,” that string needs to be enclosed in quotes or the comma will mess with how the strings are parsed. These files are where the part’s Title, Subtitle, Manufacturer, and Description are configured. Here’s an example:&lt;syntaxhighlight lang="text"&gt;
Key,Type,Desc,English

Parts/Title/spark_spt100,Text,,SPT-100

Parts/Subtitle/ spark_spt100,Text,,Hall Effect Thruster with Xenon Tank

Parts/Manufacturer/spark_spt100,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc."

Parts/Description/spark_spt100,Text,,"The SPT-100 is the pinnacle in tiny (0.625m-class) Ion engines, providing high Isp and low thrust with an integral toroidal xenon tank. Strap this little guy onto a probe core and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!"

Parts/Title/spark_x3,Text,,X3 NHT

Parts/Subtitle/spark_x3,Text,,Three-Channel Nested Hall Effect Thruster

Parts/Manufacturer/spark_x3,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc."

Parts/Description/spark_x3,Text,,"The SPARK X3 is the pinnacle in small (1.25m-class) Ion engines, providing high Isp and low thrust. Strap this bad boy onto your large probe or small capsule and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!"
&lt;/syntaxhighlight&gt;

== Part Production ==

# '''Create Root Part Object''': Create an empty game object under your scene (L-click Scene: Game Object &gt; Create Empty). Name this object the same as your part.
## Recommended naming scheme: &lt;mod_name&gt;_&lt;part_name&gt;. If your mod is called “My Awesome Mod” and your part title is “My Part”, then your part name might be my_awesome_mod_my_part for example. Part names must be unique, though you can have any descriptive title you like (that is done later in Localization). A naming scheme like this helps to prevent naming collisions in case anyone else might make a part they want to call “My Part”, like yours.
# '''Create Model Object''': Create an empty game object under your root part object and name this one “model”.
# '''Create Part Folder''': Create a Part folder named for your part inside your Parts folder. E.g., Assets\MyAwesomeMod\Parts\MyPart, or Assets\MyAwesomeMod\Parts\ThisGroup\MyPart if you’re grouping parts.
# '''Bring in FBX''': Drag a copy of your part’s FBX file into the part folder.
## If you have baked textures for your part that go with the FBX (meaning, they’re based on the UV Unwrap specific to that FBX), then drag those into this same file with the FBX.
# '''Create Part Object''': Drag a copy of the part FBX from the Part folder in Unity to the model object created in step 2. Don’t drag the FBX file from your computer’s files system, you need to use the copy you just placed in step 4. This will create a prefab for your part as a child of the model object.
# '''Unpack Prefab''': Left-Click part object: Prefab &gt; Unpack.
# '''Remove Unnecessary Things''': Remove any parts that came in with the FBX that you don’t actually need in the game like lights, cameras, empty nodes, etc. If it’s not an actual part you want the game to render, then delete it.
# '''Orient Part''': Your model will appear in the Unity scene oriented as you built it in Blender, but this may not be the way you want it to be oriented in the game. If you need changes to the position, rotation, or scale of the part do those now using the Transform panel within the Inspector Window with your part object selected. For example, to flip a part over just give a rotation of 180 in Z, etc.
# '''Create Mesh Object''': L-Click part object: Create Empty. Name this object “mesh”.
# '''Create Collider Object''': L-Click mesh object: Create Empty. Name this object “col”.
# '''Create Collider''': In the Inspector window for the col object click “Add Component”. Search for Mesh Collider and pick it. This will create a Mesh Collider component in the col object. Click the arrowhead to the left of it to expand it and see its properties.
## '''Select Mesh''': In the Mesh Collider properties select the Mesh you want to use. If your FBX is all one object you can pick that, or you can pick a suitable primitive like cube or cylinder, etc.
## '''Position, Rotation, and Scale''': Set the position, rotation, and scale of the mesh to encompass the part. You should see a green mesh represented in the Scene window to help guide you to make sure you’ve got the right position, rotation, and scale.
## '''Convex''': Check “Convex”
# '''Add Core Part Data''': Select your Root Part Object. In the Inspector Window click “Add Component”. Search for “Core Part Data” and pick that. Open it up and configure as follows:
## '''Part Name''': The Part Name needs to be the same as what you’ve used for the Root Part object, i.e., my_awesome_mod_my_part or whatever you used.
## '''Author''': Use what you like here, typically your KSP Forum screen name or whatever you go by as your modding author name.
## '''Category''': Select an appropriate category for your part.
## '''Family''': If you wish to identify a “Family” for your part, this needs to be a particular string. You can find examples in the game’s files, or part JSONS, or ask in the KSP2 Modding Society discord to get this information.
## '''Co Lift, Co Mass, Co Pressure, etc.''': These parameters allow you to set the Center of Lift, Center of Mass, Center of Pressure, etc. Adjust these to get the markers in the Unity scene where they should be for your part. Typically, Co Pressure and Co Lift are in the same place.
## '''Fuel Cross Feed''': Check if fuel should be able to transit through your part on the way to other parts. Typically set to true, but not always.
## '''Mass''': Set this in metric tons, not Kg.
## '''Attach Rules''': Check the types of attachment your part should allow. Checking “Stack” or “Srf Attach” will allow your part to attach in a stack or to a surface. Checking “Allow Stack”, “Allow Srf Attach”, etc. will allow other parts to stack attach or surface attach respectively. ''Currently (?) Allow Collision, Allow Dock, Allow Rotate, and Allow Root have no effect in game (check this)''.
## '''Attach Nodes''': If Stack is checked above, then you need a “top” and a “bottom” node, if Srf Attach is checked above, then you need a “srfAttach” node. Note, node names are case sensitive and having a node is not enough by itself, you do also need the corresponding Attach Rule set true or the node will have no effect. Under Attach Nodes click the + button to add a blank node and configure as needed.
### '''Node ID''': “top”, “bottom”, “srfAttach”, etc. (case sensitive!)
### '''Node Type''': Select as appropriate. (Stack for Stack, Surface for Surface…)
### '''Attach Method''': Select Fixed_Joint for Stack and Hinge_Joint for Surface Attach.
### '''Is Multi Joint''': In general set to True for stack attach to help prevent noodle rockets.
### '''Multi Joint Max Joint''': ''Set to 3 if you set Is Multi Joint to true?''
### '''Position''': Set as appropriate. Should be on the skin or outside of the part where you would expect to find it on your part in the VAB.
### '''Orientation''': Set as appropriate. The Orientation vector should be a unit vector (length 1) pointing in the direction of the part that will attach to the node, so pointing away from your part.
### '''Size''': Affects rigidity of your part. If your part is connected to another part with the same “size” node, then rigidity will be optimal, and otherwise it will be suboptimal.
### '''Visual Size''': Set the same as Size.
### '''Is Resource Crossfeed''': Set as needed for this node.
### '''Is Rigid''': Set as needed for this node.
### ''Rinse and Repeat'': Subsequent nodes created with the + button will inherit settings from the last node made, so this may accelerate the process as you just need to change the Node Id, Position and Orientation for new nodes that are similar to the previous created node.
# '''Add Module_Color''': You need this to be able to paint your part with base and accent colors. As above, click Add Component and search for Module Color.
# '''Add Module_Drag''': All parts need this. As above, click Add Component and search for Module Color.
# '''Add other modules as needed'''. For example, if your part is an engine you’ll also need:
## thrustTransform object: Create an empty game object as a child of the root part and name it thrustTransform.
## '''Throttle VFX Manager''': Configure as needed (?). No need to drag anywhere, it just need to be a component for the part.
## '''Flameout VFX Data''': Drag this up to the Flameout VFX property in Module_Engine.
## '''Module_Gimbal''': Configure details as needed (e.g., Gimbal Range and Gimbal Speed, etc.), then drag this up to the Gimbal property in Module_Engine.
## '''Module_Generator''': Configure details as needed, then drag this up to the Alternator property in Module_Engine.
## Module_Fairing: Unless you plan for your engine to only ever be on the very first stage (i.e., a big booster), then you probably want it to have a fairing so that it can be used in the second stage and above.
# '''Apply Options''': Select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and pick “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# '''Save Part JSON''': Click Save Part JSON button at the bottom of the Core Part Data module. This will put the resulting part JSON in the Assets folder for your Unity project. You need to do this any time you’ve edited the Core Part Data module (or also a module it depends on?).
# '''Make Prefab''': Grab the root part object and drag it to the Unity project Assets folder.
# '''Add Part Icon''': Create an icon for your part that the game will use in the parts picker. This needs to be a PNG file with specific dimensions. It should conform to the style used by other parts in the game. However you do this, you need to name the file &lt;part_name&gt;_icon.png, and you need to drag that file into the Assets folder in Unity.
## '''Convert Icon to Sprite''': Select the part icon in the Assets folder. In the Inspector window, click the pulldown menu for Texture Type and change this from Default to Sprite (2D and UI), then click Apply. If this is not done, your lovely icon will not display!
# '''Make Root Part Addressabl'''e: Select the root part’s prefab in the Assets folder and in the Inspector window check the box for Addressable.
# '''Make JSON Addressable''': Select the part’s JSON in the Assets folder and in the Inspector window check the box for Addressable.
# '''Make the Icon Addressable''': Select the root part’s icon in the Assets folder and in the Inspector window check the box for Addressable.
# '''Configure Addressable Properties''': In the Addressables Groups expand the Default Local Group and find your part.
## '''Group Name \ Addressable Name''': Change the information in the Group Name \ Addressable Name from “Assets/&lt;part_name&gt;*” to be just “&lt;part_name&gt;*”. So “Assets/&lt;part_name&gt;.prefab” becomes “&lt;part_name&gt;.prefab”, and so forth. You can leave the “Assets/” part of the path definition alone for each of these, that’s as it should be. The value for the Addressable Name needs to be the same as the file name it’s associated with and must not include any path parts. All of these need to be based on the Part Name established in the Core Part Data module.
## '''Labels''': For the JSON set this to parts_data. Leave it blank for the prefab. If parts_data is not an option in the dropdown for Labels, then click Manage Labels, click the + button to add a new label, and set the Label Name to “parts_data”. Click Save.
# '''Build Parts Pack Addressables''': In the Addressables Groups window, click the drop down for Build and pick New Build &gt; Default Build Script. If you have any unsaved changes Unity will prompt you to save, and then it will build the addressables package for your mod.
# '''Copy Addressables to Plugin Folder''': If the Build step above was successful, the do the following.
## '''Delete Old Stuff''': In Windows Explorer, navigate to your Base Plugin Folder’s addressables folder (&lt;KSP2 Game Dir&gt;\BepInEx\plugins\&lt;your Mod Name&gt;\addressables) and delete any content inside that folder. There may be four things: AddressablesLink (folder), StabaloneWindows64 (folder), catalog.json (file), and setting.json (file).
## '''Copy New Stuff''': In Windows Explorer, navigate to your Unity project’s folder and from there to Library\com.unity.addressables\aa\Windows folder. If the build process above was successful, then there will be four things in this folder: AddressablesLink (folder), StabaloneWindows64 (folder), catalog.json (file), and setting.json (file). You will need to copy all of these to your Base Plugin Folder’s addressables folder.
# '''Launch Game and Test!'''
# '''''Rinse and Repeat for Additional Parts'''''

== Blender Basics for Beginners ==

# If you’re making an engine, put an empty single arrow at the world origin facing in the direction your engine will fire, then move it along the axis of the engine so that it’s at the exit of the engine. Name this object thrustTransform, and keep in mind that size does not matter.
# Make sure all the part objects in your blend have the same material, and that the material has a good name. The material you use for this can be a default material, nothing special is needed.
# Make sure any Boolean modifiers are applied, but array modifiers can be left unapplied.
# Make sure you’ve got a good UV Map (use UV Smart Project) or an excellent one (UV Smart Project followed by Pack Islands). Recommended island spacing for both is 0.003
# When exporting your FBX for use in Substance Painter or any other tool, select only those objects that are actually part of your part and then be sure to check the box for Limit to Selected Objects

== Texturing Tips ==

# Make sure the Kerbal_Space_Program_2_Parts_Paintable.spt file is in your “Documents&gt;Adobe&gt;Substance Painter&gt;Assets&gt;templates” folder. If the templates folder doesn’t exist yet, then create one under Assets and drop that file in it.
# Launch Substance Painter and create a New project.
## In the project creation dialog pick the Kerbal_Space_Program_2_Parts_Paintable template
## Select your FBX file
## Make sure the Document Resolution is sufficient for your texture maps (highly recommend 4096! Any less and painted on bolts look like crap)
## Click Open ''&lt;INSERT GRAPHIC HERE&gt;''.
# Make sure the UV Map looks OK in Substance Painter. If it doesn’t, you need to go back to Blender and re-unwrap then export a new FBX and return to step 2 above.
# Use the File &gt; Import resources… menu to bring up the Import Resources dialog (shown below) and click on the Add Resource button to bring in the KSP2_Part.spsm file. Repeat this step for the Kerbal Space Program 2 - Standard Damaged.spexp file. Both of these should go into your library as you’re going to need them with every part you make.
## Use the Add Resources button to find the resource you want to import
## Select the file and click the Open button
## Repeat steps (a) and (b) above for as many things as you would like to import
## Select the destination to Import your resources to (hint: library ‘your_assests’ for these!)
## Click Import ''&lt;INSERT GRAPHIC HERE&gt;.''
# Use the process in Step 4 above to bring in any textures you want to use. There are many you can peruse and download for free here: https://substance3d.adobe.com/community-assets
## Note: When importing textures, you can either put them in your library so that you can use them in multiple projects, or you can put them directly in your project if you don’t want them in your library. Either way works.
## You can repeat this step any time, and as often as needed, so don’t worry if you don’t have all the textures you need at the start. It’s also possible to make textures within Substance Painter
# Apply the KSP2 Part material to your whole object and once done delete the default later that Substance Painter provided.
# Locate the Bake button (looks like a croissant) in the upper right of Substance Painter and click it ''&lt;INSERT GRAPHIC HERE&gt;''.
## Uncheck the option to make an Opacity Mesh Map.
## Click the large blue Back Selected Textures button.
## When baking is done, click the Return to Painting Mode button.
# Expand the folder by the KSP2_Part smart material in the Layers panel.
# Expand the folder by the Base Material smart material within the KSP2 Part.
# Search for and select the materials you want to paint your part within the Assets panel.
## Drag a material from the Assets panel onto the Base Material in the Layers panel.
## Right click on that material and add a black mask to it, making sure the resulting mask is selected (there will be a blue border around it).
## Pick the Polygon Fill tool from the tool bar and then select a option from Triangle Fill, Polygon Fill, Mesh Fill, and UV Chunk Fill. ''&lt;INSERT GRAPHIC HERE&gt;'' Use the triangle to paint tris, the square (polygon) for quads, the cube (mesh) for entire objects, and the checkerboard (UV chunk) for connected faces on a side of surface.
# Create a simple material: Example white boron nitride ceramic.
## Click the Add Fill Layer button (paint can) ''&lt;INSERT GRAPHIC HERE&gt;''.
## Drag the new fill layer onto the Base Material folder.
## In the Propertied panel under Materials, leave only color, roughness, and metal selected.
## In the Properties panel set the base color to what you need (white in this case).
## Set the metallic slider to 1.0.
## Set the roughness slider to 0.3.
## Add a black mask to the fill layer.
## Paint like a pro.
# Add “Nails”: This is where you add various surface details via the height map, and works for painting on nuts, bolts, fasteners, etc. All of these can be added as “alphas” like this:
## Import your alpha(s)!
## In Layers, select the black mask for Nails in the Heightmap.
## Select Radial Symmetry (for applications around radially symmetric parts like I've got here).
## Set your X, Y, Z point about which things will be symmetric, where Y is the vertical. (Switch the Show/Hide Manipulator on to help see where this point is in your model).
## Set Mirror Y, the count you want, and the angular span the radial pattern should follow (360 for all the way around).
## With the brush tool active, select your alpha.
## Move your cursor onto the part and see the red dots where the "Nails" will be placed.
## Adjust the size of the "Nail" using [ and ] to make it smaller or larger respectively.
## Click where you want the first "Nail" to appear, this will place them all.
# Add “Stickers”: This is where you add signs, stickers, decals, etc., where the sticker has a uniform color (like a radiation symbol, etc.).
## Import your alpha(s)!
## In Layers, under Base Material, add a fill layer for the sticker.
### Uncheck all material properties for the layer except color, metal, and rough.
### Set the fill color to be what you want the sticker to look like.
### Move the layer to be above any other Base Material layer that impacts the part(s) you’re going to apply stickers to (or it will be overwritten and you won’t see your stickers!)
## Select Radial Symmetry (for applications around radially symmetric parts like I've got here).
## Set your X, Y, Z point about which things will be symmetric, where Y is the vertical. (Switch the Show/Hide Manipulator on to help see where this point is in your model).
## Set Mirror Y, the count you want, and the angular span the radial pattern should follow (360 for all the way around).
## With the brush tool active, select your alpha.
## Move your cursor onto the part and see the red dots where the "Stickers" will be placed.
## Adjust the size of the "Sticker" using [ and ] to make it smaller or larger respectively.
## Click where you want the first "Sticker" to appear, this will place them all.

[[Category:Parts and modules]]</text>
      <sha1>iz93k5ip4nds1iw7qmy8jlc196syzft</sha1>
    </revision>
    <revision>
      <id>351</id>
      <parentid>346</parentid>
      <timestamp>2024-02-04T19:45:00Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <comment>Added graphics</comment>
      <origin>351</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="28483" sha1="fhy6zf9hzq3c4edz7rkx25i4e61hfbs" xml:space="preserve">== '''Preamble''' ==
This guide is based on the videos: How to create parts for KSP2 and How to make engines for KSP2 (see: [[Part modding videos (tutorials)]]), and on other notes and guidance from the KSP2 Modding Society discord.

Also the web pages: [https://luxstice.notion.site/KSP2-Part-tutorial-almost-from-scratch-1f336b7c97ae4280afb6a4e3aa6080b2 KSP2 Part tutorial (almost) from scratch], and [https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314 Tutorial: My First Part]

== '''Prerequisites''' ==
You will absolutely need the following things at a bare minimum:

* Unity Editor
* ThunderKit
* Unity KSP Tools
* Addressables Package (Install via Unity Window menu &gt; Package Manager
** Change Packages to Unity Registry
** Search for “addressables”. Click on it and install.
* LuxShader

You will generally also need the following things:

* Blender (or other mesh modeling SW that can produce FBX files)
* Various blender addons such as TexTools, etc. (make a list of the free ones you’re using)
* Substance Painter (or other texture painting tool – could be Blender or Quixel Mixer, but SP is recommended highly)

You probably need a few other things too:

* JSON exports of similar stock parts to show you what some things can or should be set to

== Process ==
This guide covers the part of the process that takes place in the Unity Editor resulting in an assembly you can load as a codeless mod in KSP2, and how to get that result into the game.

In Unity editor start with a fresh scene. This will hold your entire parts pack.

Part Pack Prep

# '''Create Unity Project''': Create a new Unity project with an empty scene. You can use the sample scene.
# '''Install Addressables package''': Open Window &gt; Package Manger and select Packages: Unity Registry. Search for addressables and click Install.
# '''Install ThunderKit in Unity'''. See [https://luxstice.notion.site/Installing-ThunderKit-7e00f13efe804f12a31a9f31d7f9fd6e Installing Tunderkit] from the Getting Ready section of the KSP2 Part Tutorial linked above for details. &lt;INSERT GRAPHICS&gt;
# '''Install Unity KSP Tools in Unity'''. See Installing KSP2 Unity Tools from the Getting Ready section of the KSP2 Part Tutorial linked above for details.
## Go to https://github.com/SpaceWarpDev/KSP2UnityTools/releases
## Download latest KSP2 Unity Tools version
## Double click the KSPUTxxx.unitypackage file to install it in the open unity project
# '''Install LuxShader in Unity'''. Place a copy of “LuxShader” somewhere in your Unity project. I put mine in my Parts Pack folder.
# '''Configure Unity Project''': ''This is essential, or even if you can build a part it won’t load in the game''. You can check your settings like this. Go to the Addressables Window (click the Unity menu for Window &gt; Asset Management &gt; Addressables &gt; Group). Select the Default Local Group in Addressables Groups window. In the Inspector window, check the following properties for your parts pack mod.
## Build Path: Should be set to Library/com.unity.addressables/aa/Windows/StandaloneWindows64
## Load Path: Should be set to {SpaceWarpPaths.&lt;your_mod_id&gt;}/addressables/StandaloneWindows64
### For your_mod_id, it is imperative that you replace any “.” Or “-“ with “_”. Only the very first “.” Between “SpaceWarpPaths” and “&lt;your_mod_id&gt;” is allowed as SpaceWarpPaths is a class, and classes can have variables, but variables can’t have any “.” or “-“ in their name (for reasons that should be obvious). If you’ve got any characters that can’t be used in a C# variable name In your mod ID (e.g. com.github.schlosrat.SPARK, etc.), then just replace those with underscores and you’ll be OK.
## [[File:Addressables Groups - Manage Profiles.png|alt=Manage Profiles selection from Addressables Groups Profile: Default dropdown|thumb|Figure 1: Addressables Groups - Manage Profiles]]Make sure the Load Path is ''not'' ''{UnityEngine.AddressableAssets.Addressables.RuntimePath}/StandaloneWindows64'' (which it seems to want to be…) If you need to change these, it’s best to create a new profile which you can then apply to the Build &amp; Load Paths drop down. To do that go to the Addressables Groups windows and on the Profile: Default dropdown pick Manage Profiles as shown in Figure 1.
## [[File:Addressables Profiles.png|alt=Addressables Profiles: Create new Profile|thumb|Figure 2: Addressables Profiles]]This will open up the Addressables Profiles panel as shown in Figure 2. Create a New Profile by clicking the Create dropdown and picking Build and Load Path Variables (All Profiles).
## [[File:New Profile Setup.png|thumb|Figure 3: New Profile Setup]]This will give you a dialog box like that shown in Figure 3 which you can type into, but be forewarned – it will vanish if it loses focus, so save as soon as you’ve set the Prefix Name (which was set to SpaceWarp above but is in the fresh, clean unmodified form below).
## Once you’ve saved it, you can edit the SpaceWarp.BuildPath to match what’s shown above and the SpaceWarp.LoadPath to be ''{SpaceWarpPaths.&lt;your_mod_id&gt;}/addressables/StandaloneWindows64''.
## [[File:Inspector Default Local Group.png|thumb|Figure 4: Default Local Group Inspector]]With these setup, you can go back to the Inspector for the Default Local Group and set the Build &amp; Load Paths setting to SpaceWarp in the dropdown menu so that your configuration looks like that shown in Figure 4.
# '''Create Parts Pack folder''': Under Assets, create a folder (L-Click Assets: Create &gt; Folder) and name it the same as your parts pack mod. If your mod is called My Awesome Mod then this would be Assets\MyAwesomeMod.
# '''Create Materials folder''': Inside your parts pack folder create a folder called Materials. You’ll be storing the textures and materials you need there. E.g., Assets\MyAwesomeMod\Materials. This is just to aid in organization.
# '''Create Parts folder''': Inside your parts pack folder create a folder called Parts. You’ll be storing the part meshes and related things there. E.g., Assets\MyAwesomeMod\Parts. You can have whatever organization you like here, so if you want to group some parts you might create group folders within Parts (e.g., Methalox Engines, Nuclear Engines, Ion Engines, etc.). This is just to aid in organization and is optional.
# '''Create Plugin Folder and Content''': In your KSP2 install’s BepInEx\plugins folder create a folder for your mod. You can name this whatever you like, but it should be unique. This will be the “mod” players will install to have your parts pack and we’ll refer to it as the Base Plugin Folder in this guide.
## Create swinfo.json: In the base plugin folder create a swinfo.json file with content like this:&lt;syntaxhighlight lang="json"&gt;
{
  "spec": "1.3",
  "mod_id": "com.github.schlosrat.SPARK",
  "author": "schlosrat",
  "name": "Stellar Plasma-Assisted Rocket Kinetics",
  "description": "High ISP engines for your low thrust needs",
  "source": "https://github.com/schlosrat/SPARK",
  "version": "0.0.1",
  "version_check": "https://raw.githubusercontent.com/schlosrat/SPARK/main/SPARK/swinfo.json",
  "ksp2_version": {
    "min": "0.1.3.2",
    "max": "*"
  },
  "dependencies": [
    {
      "id": "com.github.x606.spacewarp",
      "version": {
        "min": "1.4.0",
        "max": "*"
      }
    },
    {
      "id": "lfo",
      "version": {
        "min": "0.2.0",
        "max": "*"
      }
    }
  ]
}
&lt;/syntaxhighlight&gt;
## Create “addressables” folder: In the base plugin folder, create an “addressables” sub-folder. This will be where you put the files created by Unity after a build (discussed below).
## Create “localizations” folder: In the base plugin folder, create an “localizations” sub-folder (NOTE! This is currently required to be exactly this – localizations (plural), not localization (singular). This will be where you put the localization files (e.g., english.csv, spanish.csv, etc.).
## Create Localization file(s): Localization files are CSV files following a particular format. These must have lines ending with LF not LF/NL, and they must reference the same &lt;part_name&gt; you use in the Part Production process below. There are some other restrictions for content, particularly that if you want a string that contains a “,” that string needs to be enclosed in quotes or the comma will mess with how the strings are parsed. These files are where the part’s Title, Subtitle, Manufacturer, and Description are configured. Here’s an example:&lt;syntaxhighlight lang="text"&gt;
Key,Type,Desc,English

Parts/Title/spark_spt100,Text,,SPT-100

Parts/Subtitle/ spark_spt100,Text,,Hall Effect Thruster with Xenon Tank

Parts/Manufacturer/spark_spt100,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc."

Parts/Description/spark_spt100,Text,,"The SPT-100 is the pinnacle in tiny (0.625m-class) Ion engines, providing high Isp and low thrust with an integral toroidal xenon tank. Strap this little guy onto a probe core and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!"

Parts/Title/spark_x3,Text,,X3 NHT

Parts/Subtitle/spark_x3,Text,,Three-Channel Nested Hall Effect Thruster

Parts/Manufacturer/spark_x3,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc."

Parts/Description/spark_x3,Text,,"The SPARK X3 is the pinnacle in small (1.25m-class) Ion engines, providing high Isp and low thrust. Strap this bad boy onto your large probe or small capsule and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!"
&lt;/syntaxhighlight&gt;

== Part Production ==

# '''Create Root Part Object''': Create an empty game object under your scene (L-click Scene: Game Object &gt; Create Empty). Name this object the same as your part.
## Recommended naming scheme: &lt;mod_name&gt;_&lt;part_name&gt;. If your mod is called “My Awesome Mod” and your part title is “My Part”, then your part name might be my_awesome_mod_my_part for example. Part names must be unique, though you can have any descriptive title you like (that is done later in Localization). A naming scheme like this helps to prevent naming collisions in case anyone else might make a part they want to call “My Part”, like yours.
# '''Create Model Object''': Create an empty game object under your root part object and name this one “model”.
# '''Create Part Folder''': Create a Part folder named for your part inside your Parts folder. E.g., Assets\MyAwesomeMod\Parts\MyPart, or Assets\MyAwesomeMod\Parts\ThisGroup\MyPart if you’re grouping parts.
# '''Bring in FBX''': Drag a copy of your part’s FBX file into the part folder.
## If you have baked textures for your part that go with the FBX (meaning, they’re based on the UV Unwrap specific to that FBX), then drag those into this same file with the FBX.
# '''Create Part Object''': Drag a copy of the part FBX from the Part folder in Unity to the model object created in step 2. Don’t drag the FBX file from your computer’s files system, you need to use the copy you just placed in step 4. This will create a prefab for your part as a child of the model object.
# '''Unpack Prefab''': Left-Click part object: Prefab &gt; Unpack.
# '''Remove Unnecessary Things''': Remove any parts that came in with the FBX that you don’t actually need in the game like lights, cameras, empty nodes, etc. If it’s not an actual part you want the game to render, then delete it.
# '''Orient Part''': Your model will appear in the Unity scene oriented as you built it in Blender, but this may not be the way you want it to be oriented in the game. If you need changes to the position, rotation, or scale of the part do those now using the Transform panel within the Inspector Window with your part object selected. For example, to flip a part over just give a rotation of 180 in Z, etc.
# '''Create Mesh Object''': L-Click part object: Create Empty. Name this object “mesh”.
# '''Create Collider Object''': L-Click mesh object: Create Empty. Name this object “col”.
# '''Create Collider''': In the Inspector window for the col object click “Add Component”. Search for Mesh Collider and pick it. This will create a Mesh Collider component in the col object. Click the arrowhead to the left of it to expand it and see its properties.
## '''Select Mesh''': In the Mesh Collider properties select the Mesh you want to use. If your FBX is all one object you can pick that, or you can pick a suitable primitive like cube or cylinder, etc.
## '''Position, Rotation, and Scale''': Set the position, rotation, and scale of the mesh to encompass the part. You should see a green mesh represented in the Scene window to help guide you to make sure you’ve got the right position, rotation, and scale.
## '''Convex''': Check “Convex”
# '''Add Core Part Data''': Select your Root Part Object. In the Inspector Window click “Add Component”. Search for “Core Part Data” and pick that. Open it up and configure as follows:
## '''Part Name''': The Part Name needs to be the same as what you’ve used for the Root Part object, i.e., my_awesome_mod_my_part or whatever you used.
## '''Author''': Use what you like here, typically your KSP Forum screen name or whatever you go by as your modding author name.
## '''Category''': Select an appropriate category for your part.
## '''Family''': If you wish to identify a “Family” for your part, this needs to be a particular string. You can find examples in the game’s files, or part JSONS, or ask in the KSP2 Modding Society discord to get this information.
## '''Co Lift, Co Mass, Co Pressure, etc.''': These parameters allow you to set the Center of Lift, Center of Mass, Center of Pressure, etc. Adjust these to get the markers in the Unity scene where they should be for your part. Typically, Co Pressure and Co Lift are in the same place.
## '''Fuel Cross Feed''': Check if fuel should be able to transit through your part on the way to other parts. Typically set to true, but not always.
## '''Mass''': Set this in metric tons, not Kg.
## '''Attach Rules''': Check the types of attachment your part should allow. Checking “Stack” or “Srf Attach” will allow your part to attach in a stack or to a surface. Checking “Allow Stack”, “Allow Srf Attach”, etc. will allow other parts to stack attach or surface attach respectively. ''Currently (?) Allow Collision, Allow Dock, Allow Rotate, and Allow Root have no effect in game (check this)''.
## '''Attach Nodes''': If Stack is checked above, then you need a “top” and a “bottom” node, if Srf Attach is checked above, then you need a “srfAttach” node. Note, node names are case sensitive and having a node is not enough by itself, you do also need the corresponding Attach Rule set true or the node will have no effect. Under Attach Nodes click the + button to add a blank node and configure as needed.
### '''Node ID''': “top”, “bottom”, “srfAttach”, etc. (case sensitive!)
### '''Node Type''': Select as appropriate. (Stack for Stack, Surface for Surface…)
### '''Attach Method''': Select Fixed_Joint for Stack and Hinge_Joint for Surface Attach.
### '''Is Multi Joint''': In general set to True for stack attach to help prevent noodle rockets.
### '''Multi Joint Max Joint''': ''Set to 3 if you set Is Multi Joint to true?''
### '''Position''': Set as appropriate. Should be on the skin or outside of the part where you would expect to find it on your part in the VAB.
### '''Orientation''': Set as appropriate. The Orientation vector should be a unit vector (length 1) pointing in the direction of the part that will attach to the node, so pointing away from your part.
### '''Size''': Affects rigidity of your part. If your part is connected to another part with the same “size” node, then rigidity will be optimal, and otherwise it will be suboptimal.
### '''Visual Size''': Set the same as Size.
### '''Is Resource Crossfeed''': Set as needed for this node.
### '''Is Rigid''': Set as needed for this node.
### ''Rinse and Repeat'': Subsequent nodes created with the + button will inherit settings from the last node made, so this may accelerate the process as you just need to change the Node Id, Position and Orientation for new nodes that are similar to the previous created node.
# '''Add Module_Color''': You need this to be able to paint your part with base and accent colors. As above, click Add Component and search for Module Color.
# '''Add Module_Drag''': All parts need this. As above, click Add Component and search for Module Color.
# '''Add other modules as needed'''. For example, if your part is an engine you’ll also need:
## thrustTransform object: Create an empty game object as a child of the root part and name it thrustTransform.
## '''Throttle VFX Manager''': Configure as needed (?). No need to drag anywhere, it just need to be a component for the part.
## '''Flameout VFX Data''': Drag this up to the Flameout VFX property in Module_Engine.
## '''Module_Gimbal''': Configure details as needed (e.g., Gimbal Range and Gimbal Speed, etc.), then drag this up to the Gimbal property in Module_Engine.
## '''Module_Generator''': Configure details as needed, then drag this up to the Alternator property in Module_Engine.
## Module_Fairing: Unless you plan for your engine to only ever be on the very first stage (i.e., a big booster), then you probably want it to have a fairing so that it can be used in the second stage and above.
# '''Apply Options''': Select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and pick “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# '''Save Part JSON''': Click Save Part JSON button at the bottom of the Core Part Data module. This will put the resulting part JSON in the Assets folder for your Unity project. You need to do this any time you’ve edited the Core Part Data module (or also a module it depends on?).
# '''Make Prefab''': Grab the root part object and drag it to the Unity project Assets folder.
# '''Add Part Icon''': Create an icon for your part that the game will use in the parts picker. This needs to be a PNG file with specific dimensions. It should conform to the style used by other parts in the game. However you do this, you need to name the file &lt;part_name&gt;_icon.png, and you need to drag that file into the Assets folder in Unity.
## '''Convert Icon to Sprite''': Select the part icon in the Assets folder. In the Inspector window, click the pulldown menu for Texture Type and change this from Default to Sprite (2D and UI), then click Apply. If this is not done, your lovely icon will not display!
# '''Make Root Part Addressabl'''e: Select the root part’s prefab in the Assets folder and in the Inspector window check the box for Addressable.
# '''Make JSON Addressable''': Select the part’s JSON in the Assets folder and in the Inspector window check the box for Addressable.
# '''Make the Icon Addressable''': Select the root part’s icon in the Assets folder and in the Inspector window check the box for Addressable.
# '''Configure Addressable Properties''': In the Addressables Groups expand the Default Local Group and find your part.
## '''Group Name \ Addressable Name''': Change the information in the Group Name \ Addressable Name from “Assets/&lt;part_name&gt;*” to be just “&lt;part_name&gt;*”. So “Assets/&lt;part_name&gt;.prefab” becomes “&lt;part_name&gt;.prefab”, and so forth. You can leave the “Assets/” part of the path definition alone for each of these, that’s as it should be. The value for the Addressable Name needs to be the same as the file name it’s associated with and must not include any path parts. All of these need to be based on the Part Name established in the Core Part Data module.
## '''Labels''': For the JSON set this to parts_data. Leave it blank for the prefab. If parts_data is not an option in the dropdown for Labels, then click Manage Labels, click the + button to add a new label, and set the Label Name to “parts_data”. Click Save.
# '''Build Parts Pack Addressables''': In the Addressables Groups window, click the drop down for Build and pick New Build &gt; Default Build Script. If you have any unsaved changes Unity will prompt you to save, and then it will build the addressables package for your mod.
# '''Copy Addressables to Plugin Folder''': If the Build step above was successful, the do the following.
## '''Delete Old Stuff''': In Windows Explorer, navigate to your Base Plugin Folder’s addressables folder (&lt;KSP2 Game Dir&gt;\BepInEx\plugins\&lt;your Mod Name&gt;\addressables) and delete any content inside that folder. There may be four things: AddressablesLink (folder), StabaloneWindows64 (folder), catalog.json (file), and setting.json (file).
## '''Copy New Stuff''': In Windows Explorer, navigate to your Unity project’s folder and from there to Library\com.unity.addressables\aa\Windows folder. If the build process above was successful, then there will be four things in this folder: AddressablesLink (folder), StabaloneWindows64 (folder), catalog.json (file), and setting.json (file). You will need to copy all of these to your Base Plugin Folder’s addressables folder.
# '''Launch Game and Test!'''
# '''''Rinse and Repeat for Additional Parts'''''

== Blender Basics for Beginners ==

# If you’re making an engine, put an empty single arrow at the world origin facing in the direction your engine will fire, then move it along the axis of the engine so that it’s at the exit of the engine. Name this object thrustTransform, and keep in mind that size does not matter.
# Make sure all the part objects in your blend have the same material, and that the material has a good name. The material you use for this can be a default material, nothing special is needed.
# Make sure any Boolean modifiers are applied, but array modifiers can be left unapplied.
# Make sure you’ve got a good UV Map (use UV Smart Project) or an excellent one (UV Smart Project followed by Pack Islands). Recommended island spacing for both is 0.003
# When exporting your FBX for use in Substance Painter or any other tool, select only those objects that are actually part of your part and then be sure to check the box for Limit to Selected Objects

== Texturing Tips ==

# Make sure the Kerbal_Space_Program_2_Parts_Paintable.spt file is in your “Documents&gt;Adobe&gt;Substance Painter&gt;Assets&gt;templates” folder. If the templates folder doesn’t exist yet, then create one under Assets and drop that file in it.
# Launch Substance Painter and create a New project.
## In the project creation dialog pick the Kerbal_Space_Program_2_Parts_Paintable template
## Select your FBX file
## Make sure the Document Resolution is sufficient for your texture maps (highly recommend 4096! Any less and painted on bolts look like crap)
## Click Open ''&lt;INSERT GRAPHIC HERE&gt;''.
# Make sure the UV Map looks OK in Substance Painter. If it doesn’t, you need to go back to Blender and re-unwrap then export a new FBX and return to step 2 above.
# Use the File &gt; Import resources… menu to bring up the Import Resources dialog (shown below) and click on the Add Resource button to bring in the KSP2_Part.spsm file. Repeat this step for the Kerbal Space Program 2 - Standard Damaged.spexp file. Both of these should go into your library as you’re going to need them with every part you make.
## Use the Add Resources button to find the resource you want to import
## Select the file and click the Open button
## Repeat steps (a) and (b) above for as many things as you would like to import
## Select the destination to Import your resources to (hint: library ‘your_assests’ for these!)
## Click Import ''&lt;INSERT GRAPHIC HERE&gt;.''
# Use the process in Step 4 above to bring in any textures you want to use. There are many you can peruse and download for free here: https://substance3d.adobe.com/community-assets
## Note: When importing textures, you can either put them in your library so that you can use them in multiple projects, or you can put them directly in your project if you don’t want them in your library. Either way works.
## You can repeat this step any time, and as often as needed, so don’t worry if you don’t have all the textures you need at the start. It’s also possible to make textures within Substance Painter
# Apply the KSP2 Part material to your whole object and once done delete the default later that Substance Painter provided.
# Locate the Bake button (looks like a croissant) in the upper right of Substance Painter and click it ''&lt;INSERT GRAPHIC HERE&gt;''.
## Uncheck the option to make an Opacity Mesh Map.
## Click the large blue Back Selected Textures button.
## When baking is done, click the Return to Painting Mode button.
# Expand the folder by the KSP2_Part smart material in the Layers panel.
# Expand the folder by the Base Material smart material within the KSP2 Part.
# Search for and select the materials you want to paint your part within the Assets panel.
## Drag a material from the Assets panel onto the Base Material in the Layers panel.
## Right click on that material and add a black mask to it, making sure the resulting mask is selected (there will be a blue border around it).
## Pick the Polygon Fill tool from the tool bar and then select a option from Triangle Fill, Polygon Fill, Mesh Fill, and UV Chunk Fill. ''&lt;INSERT GRAPHIC HERE&gt;'' Use the triangle to paint tris, the square (polygon) for quads, the cube (mesh) for entire objects, and the checkerboard (UV chunk) for connected faces on a side of surface.
# Create a simple material: Example white boron nitride ceramic.
## Click the Add Fill Layer button (paint can) ''&lt;INSERT GRAPHIC HERE&gt;''.
## Drag the new fill layer onto the Base Material folder.
## In the Propertied panel under Materials, leave only color, roughness, and metal selected.
## In the Properties panel set the base color to what you need (white in this case).
## Set the metallic slider to 1.0.
## Set the roughness slider to 0.3.
## Add a black mask to the fill layer.
## Paint like a pro.
# Add “Nails”: This is where you add various surface details via the height map, and works for painting on nuts, bolts, fasteners, etc. All of these can be added as “alphas” like this:
## Import your alpha(s)!
## In Layers, select the black mask for Nails in the Heightmap.
## Select Radial Symmetry (for applications around radially symmetric parts like I've got here).
## Set your X, Y, Z point about which things will be symmetric, where Y is the vertical. (Switch the Show/Hide Manipulator on to help see where this point is in your model).
## Set Mirror Y, the count you want, and the angular span the radial pattern should follow (360 for all the way around).
## With the brush tool active, select your alpha.
## Move your cursor onto the part and see the red dots where the "Nails" will be placed.
## Adjust the size of the "Nail" using [ and ] to make it smaller or larger respectively.
## Click where you want the first "Nail" to appear, this will place them all.
# Add “Stickers”: This is where you add signs, stickers, decals, etc., where the sticker has a uniform color (like a radiation symbol, etc.).
## Import your alpha(s)!
## In Layers, under Base Material, add a fill layer for the sticker.
### Uncheck all material properties for the layer except color, metal, and rough.
### Set the fill color to be what you want the sticker to look like.
### Move the layer to be above any other Base Material layer that impacts the part(s) you’re going to apply stickers to (or it will be overwritten and you won’t see your stickers!)
## Select Radial Symmetry (for applications around radially symmetric parts like I've got here).
## Set your X, Y, Z point about which things will be symmetric, where Y is the vertical. (Switch the Show/Hide Manipulator on to help see where this point is in your model).
## Set Mirror Y, the count you want, and the angular span the radial pattern should follow (360 for all the way around).
## With the brush tool active, select your alpha.
## Move your cursor onto the part and see the red dots where the "Stickers" will be placed.
## Adjust the size of the "Sticker" using [ and ] to make it smaller or larger respectively.
## Click where you want the first "Sticker" to appear, this will place them all.

[[Category:Parts and modules]]</text>
      <sha1>fhy6zf9hzq3c4edz7rkx25i4e61hfbs</sha1>
    </revision>
    <revision>
      <id>352</id>
      <parentid>351</parentid>
      <timestamp>2024-02-04T19:55:38Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <comment>Removed development note. expanded on why Substance Painter is highly recommended</comment>
      <origin>352</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="28493" sha1="cij1izpc4xdfw9owtg2hxuejc5fgfon" xml:space="preserve">== '''Preamble''' ==
This guide is based on the videos: How to create parts for KSP2 and How to make engines for KSP2 (see: [[Part modding videos (tutorials)]]), and on other notes and guidance from the KSP2 Modding Society discord.

Also the web pages: [https://luxstice.notion.site/KSP2-Part-tutorial-almost-from-scratch-1f336b7c97ae4280afb6a4e3aa6080b2 KSP2 Part tutorial (almost) from scratch], and [https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314 Tutorial: My First Part]

== '''Prerequisites''' ==
You will absolutely need the following things at a bare minimum:

* Unity Editor
* ThunderKit
* Unity KSP Tools
* Addressables Package (Install via Unity Window menu &gt; Package Manager
** Change Packages to Unity Registry
** Search for “addressables”. Click on it and install.
* LuxShader

You will generally also need the following things:

* Blender (or other mesh modeling SW that can produce FBX files)
* Various blender addons such as TexTools, etc.
* Substance Painter (or other texture painting tool – could be Blender or Quixel Mixer, but SP is highly recommended since there's a free integration to help make KSP parts)

You probably need a few other things too:

* JSON exports of similar stock parts to show you what some things can or should be set to

== Process ==
This guide covers the part of the process that takes place in the Unity Editor resulting in an assembly you can load as a codeless mod in KSP2, and how to get that result into the game.

In Unity editor start with a fresh scene. This will hold your entire parts pack.

Part Pack Prep

# '''Create Unity Project''': Create a new Unity project with an empty scene. You can use the sample scene.
# '''Install Addressables package''': Open Window &gt; Package Manger and select Packages: Unity Registry. Search for addressables and click Install.
# '''Install ThunderKit in Unity'''. See [https://luxstice.notion.site/Installing-ThunderKit-7e00f13efe804f12a31a9f31d7f9fd6e Installing Tunderkit] from the Getting Ready section of the KSP2 Part Tutorial linked above for details. &lt;INSERT GRAPHICS&gt;
# '''Install Unity KSP Tools in Unity'''. See Installing KSP2 Unity Tools from the Getting Ready section of the KSP2 Part Tutorial linked above for details.
## Go to https://github.com/SpaceWarpDev/KSP2UnityTools/releases
## Download latest KSP2 Unity Tools version
## Double click the KSPUTxxx.unitypackage file to install it in the open unity project
# '''Install LuxShader in Unity'''. Place a copy of “LuxShader” somewhere in your Unity project. I put mine in my Parts Pack folder.
# '''Configure Unity Project''': ''This is essential, or even if you can build a part it won’t load in the game''. You can check your settings like this. Go to the Addressables Window (click the Unity menu for Window &gt; Asset Management &gt; Addressables &gt; Group). Select the Default Local Group in Addressables Groups window. In the Inspector window, check the following properties for your parts pack mod.
## Build Path: Should be set to Library/com.unity.addressables/aa/Windows/StandaloneWindows64
## Load Path: Should be set to {SpaceWarpPaths.&lt;your_mod_id&gt;}/addressables/StandaloneWindows64
### For your_mod_id, it is imperative that you replace any “.” Or “-“ with “_”. Only the very first “.” Between “SpaceWarpPaths” and “&lt;your_mod_id&gt;” is allowed as SpaceWarpPaths is a class, and classes can have variables, but variables can’t have any “.” or “-“ in their name (for reasons that should be obvious). If you’ve got any characters that can’t be used in a C# variable name In your mod ID (e.g. com.github.schlosrat.SPARK, etc.), then just replace those with underscores and you’ll be OK.
## [[File:Addressables Groups - Manage Profiles.png|alt=Manage Profiles selection from Addressables Groups Profile: Default dropdown|thumb|Figure 1: Addressables Groups - Manage Profiles]]Make sure the Load Path is ''not'' ''{UnityEngine.AddressableAssets.Addressables.RuntimePath}/StandaloneWindows64'' (which it seems to want to be…) If you need to change these, it’s best to create a new profile which you can then apply to the Build &amp; Load Paths drop down. To do that go to the Addressables Groups windows and on the Profile: Default dropdown pick Manage Profiles as shown in Figure 1.
## [[File:Addressables Profiles.png|alt=Addressables Profiles: Create new Profile|thumb|Figure 2: Addressables Profiles]]This will open up the Addressables Profiles panel as shown in Figure 2. Create a New Profile by clicking the Create dropdown and picking Build and Load Path Variables (All Profiles).
## [[File:New Profile Setup.png|thumb|Figure 3: New Profile Setup]]This will give you a dialog box like that shown in Figure 3 which you can type into, but be forewarned – it will vanish if it loses focus, so save as soon as you’ve set the Prefix Name (which was set to SpaceWarp above but is in the fresh, clean unmodified form below).
## Once you’ve saved it, you can edit the SpaceWarp.BuildPath to match what’s shown above and the SpaceWarp.LoadPath to be ''{SpaceWarpPaths.&lt;your_mod_id&gt;}/addressables/StandaloneWindows64''.
## [[File:Inspector Default Local Group.png|thumb|Figure 4: Default Local Group Inspector]]With these setup, you can go back to the Inspector for the Default Local Group and set the Build &amp; Load Paths setting to SpaceWarp in the dropdown menu so that your configuration looks like that shown in Figure 4.
# '''Create Parts Pack folder''': Under Assets, create a folder (L-Click Assets: Create &gt; Folder) and name it the same as your parts pack mod. If your mod is called My Awesome Mod then this would be Assets\MyAwesomeMod.
# '''Create Materials folder''': Inside your parts pack folder create a folder called Materials. You’ll be storing the textures and materials you need there. E.g., Assets\MyAwesomeMod\Materials. This is just to aid in organization.
# '''Create Parts folder''': Inside your parts pack folder create a folder called Parts. You’ll be storing the part meshes and related things there. E.g., Assets\MyAwesomeMod\Parts. You can have whatever organization you like here, so if you want to group some parts you might create group folders within Parts (e.g., Methalox Engines, Nuclear Engines, Ion Engines, etc.). This is just to aid in organization and is optional.
# '''Create Plugin Folder and Content''': In your KSP2 install’s BepInEx\plugins folder create a folder for your mod. You can name this whatever you like, but it should be unique. This will be the “mod” players will install to have your parts pack and we’ll refer to it as the Base Plugin Folder in this guide.
## Create swinfo.json: In the base plugin folder create a swinfo.json file with content like this:&lt;syntaxhighlight lang="json"&gt;
{
  "spec": "1.3",
  "mod_id": "com.github.schlosrat.SPARK",
  "author": "schlosrat",
  "name": "Stellar Plasma-Assisted Rocket Kinetics",
  "description": "High ISP engines for your low thrust needs",
  "source": "https://github.com/schlosrat/SPARK",
  "version": "0.0.1",
  "version_check": "https://raw.githubusercontent.com/schlosrat/SPARK/main/SPARK/swinfo.json",
  "ksp2_version": {
    "min": "0.1.3.2",
    "max": "*"
  },
  "dependencies": [
    {
      "id": "com.github.x606.spacewarp",
      "version": {
        "min": "1.4.0",
        "max": "*"
      }
    },
    {
      "id": "lfo",
      "version": {
        "min": "0.2.0",
        "max": "*"
      }
    }
  ]
}
&lt;/syntaxhighlight&gt;
## Create “addressables” folder: In the base plugin folder, create an “addressables” sub-folder. This will be where you put the files created by Unity after a build (discussed below).
## Create “localizations” folder: In the base plugin folder, create an “localizations” sub-folder (NOTE! This is currently required to be exactly this – localizations (plural), not localization (singular). This will be where you put the localization files (e.g., english.csv, spanish.csv, etc.).
## Create Localization file(s): Localization files are CSV files following a particular format. These must have lines ending with LF not LF/NL, and they must reference the same &lt;part_name&gt; you use in the Part Production process below. There are some other restrictions for content, particularly that if you want a string that contains a “,” that string needs to be enclosed in quotes or the comma will mess with how the strings are parsed. These files are where the part’s Title, Subtitle, Manufacturer, and Description are configured. Here’s an example:&lt;syntaxhighlight lang="text"&gt;
Key,Type,Desc,English

Parts/Title/spark_spt100,Text,,SPT-100

Parts/Subtitle/ spark_spt100,Text,,Hall Effect Thruster with Xenon Tank

Parts/Manufacturer/spark_spt100,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc."

Parts/Description/spark_spt100,Text,,"The SPT-100 is the pinnacle in tiny (0.625m-class) Ion engines, providing high Isp and low thrust with an integral toroidal xenon tank. Strap this little guy onto a probe core and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!"

Parts/Title/spark_x3,Text,,X3 NHT

Parts/Subtitle/spark_x3,Text,,Three-Channel Nested Hall Effect Thruster

Parts/Manufacturer/spark_x3,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc."

Parts/Description/spark_x3,Text,,"The SPARK X3 is the pinnacle in small (1.25m-class) Ion engines, providing high Isp and low thrust. Strap this bad boy onto your large probe or small capsule and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!"
&lt;/syntaxhighlight&gt;

== Part Production ==

# '''Create Root Part Object''': Create an empty game object under your scene (L-click Scene: Game Object &gt; Create Empty). Name this object the same as your part.
## Recommended naming scheme: &lt;mod_name&gt;_&lt;part_name&gt;. If your mod is called “My Awesome Mod” and your part title is “My Part”, then your part name might be my_awesome_mod_my_part for example. Part names must be unique, though you can have any descriptive title you like (that is done later in Localization). A naming scheme like this helps to prevent naming collisions in case anyone else might make a part they want to call “My Part”, like yours.
# '''Create Model Object''': Create an empty game object under your root part object and name this one “model”.
# '''Create Part Folder''': Create a Part folder named for your part inside your Parts folder. E.g., Assets\MyAwesomeMod\Parts\MyPart, or Assets\MyAwesomeMod\Parts\ThisGroup\MyPart if you’re grouping parts.
# '''Bring in FBX''': Drag a copy of your part’s FBX file into the part folder.
## If you have baked textures for your part that go with the FBX (meaning, they’re based on the UV Unwrap specific to that FBX), then drag those into this same file with the FBX.
# '''Create Part Object''': Drag a copy of the part FBX from the Part folder in Unity to the model object created in step 2. Don’t drag the FBX file from your computer’s files system, you need to use the copy you just placed in step 4. This will create a prefab for your part as a child of the model object.
# '''Unpack Prefab''': Left-Click part object: Prefab &gt; Unpack.
# '''Remove Unnecessary Things''': Remove any parts that came in with the FBX that you don’t actually need in the game like lights, cameras, empty nodes, etc. If it’s not an actual part you want the game to render, then delete it.
# '''Orient Part''': Your model will appear in the Unity scene oriented as you built it in Blender, but this may not be the way you want it to be oriented in the game. If you need changes to the position, rotation, or scale of the part do those now using the Transform panel within the Inspector Window with your part object selected. For example, to flip a part over just give a rotation of 180 in Z, etc.
# '''Create Mesh Object''': L-Click part object: Create Empty. Name this object “mesh”.
# '''Create Collider Object''': L-Click mesh object: Create Empty. Name this object “col”.
# '''Create Collider''': In the Inspector window for the col object click “Add Component”. Search for Mesh Collider and pick it. This will create a Mesh Collider component in the col object. Click the arrowhead to the left of it to expand it and see its properties.
## '''Select Mesh''': In the Mesh Collider properties select the Mesh you want to use. If your FBX is all one object you can pick that, or you can pick a suitable primitive like cube or cylinder, etc.
## '''Position, Rotation, and Scale''': Set the position, rotation, and scale of the mesh to encompass the part. You should see a green mesh represented in the Scene window to help guide you to make sure you’ve got the right position, rotation, and scale.
## '''Convex''': Check “Convex”
# '''Add Core Part Data''': Select your Root Part Object. In the Inspector Window click “Add Component”. Search for “Core Part Data” and pick that. Open it up and configure as follows:
## '''Part Name''': The Part Name needs to be the same as what you’ve used for the Root Part object, i.e., my_awesome_mod_my_part or whatever you used.
## '''Author''': Use what you like here, typically your KSP Forum screen name or whatever you go by as your modding author name.
## '''Category''': Select an appropriate category for your part.
## '''Family''': If you wish to identify a “Family” for your part, this needs to be a particular string. You can find examples in the game’s files, or part JSONS, or ask in the KSP2 Modding Society discord to get this information.
## '''Co Lift, Co Mass, Co Pressure, etc.''': These parameters allow you to set the Center of Lift, Center of Mass, Center of Pressure, etc. Adjust these to get the markers in the Unity scene where they should be for your part. Typically, Co Pressure and Co Lift are in the same place.
## '''Fuel Cross Feed''': Check if fuel should be able to transit through your part on the way to other parts. Typically set to true, but not always.
## '''Mass''': Set this in metric tons, not Kg.
## '''Attach Rules''': Check the types of attachment your part should allow. Checking “Stack” or “Srf Attach” will allow your part to attach in a stack or to a surface. Checking “Allow Stack”, “Allow Srf Attach”, etc. will allow other parts to stack attach or surface attach respectively. ''Currently (?) Allow Collision, Allow Dock, Allow Rotate, and Allow Root have no effect in game (check this)''.
## '''Attach Nodes''': If Stack is checked above, then you need a “top” and a “bottom” node, if Srf Attach is checked above, then you need a “srfAttach” node. Note, node names are case sensitive and having a node is not enough by itself, you do also need the corresponding Attach Rule set true or the node will have no effect. Under Attach Nodes click the + button to add a blank node and configure as needed.
### '''Node ID''': “top”, “bottom”, “srfAttach”, etc. (case sensitive!)
### '''Node Type''': Select as appropriate. (Stack for Stack, Surface for Surface…)
### '''Attach Method''': Select Fixed_Joint for Stack and Hinge_Joint for Surface Attach.
### '''Is Multi Joint''': In general set to True for stack attach to help prevent noodle rockets.
### '''Multi Joint Max Joint''': ''Set to 3 if you set Is Multi Joint to true?''
### '''Position''': Set as appropriate. Should be on the skin or outside of the part where you would expect to find it on your part in the VAB.
### '''Orientation''': Set as appropriate. The Orientation vector should be a unit vector (length 1) pointing in the direction of the part that will attach to the node, so pointing away from your part.
### '''Size''': Affects rigidity of your part. If your part is connected to another part with the same “size” node, then rigidity will be optimal, and otherwise it will be suboptimal.
### '''Visual Size''': Set the same as Size.
### '''Is Resource Crossfeed''': Set as needed for this node.
### '''Is Rigid''': Set as needed for this node.
### ''Rinse and Repeat'': Subsequent nodes created with the + button will inherit settings from the last node made, so this may accelerate the process as you just need to change the Node Id, Position and Orientation for new nodes that are similar to the previous created node.
# '''Add Module_Color''': You need this to be able to paint your part with base and accent colors. As above, click Add Component and search for Module Color.
# '''Add Module_Drag''': All parts need this. As above, click Add Component and search for Module Color.
# '''Add other modules as needed'''. For example, if your part is an engine you’ll also need:
## thrustTransform object: Create an empty game object as a child of the root part and name it thrustTransform.
## '''Throttle VFX Manager''': Configure as needed (?). No need to drag anywhere, it just need to be a component for the part.
## '''Flameout VFX Data''': Drag this up to the Flameout VFX property in Module_Engine.
## '''Module_Gimbal''': Configure details as needed (e.g., Gimbal Range and Gimbal Speed, etc.), then drag this up to the Gimbal property in Module_Engine.
## '''Module_Generator''': Configure details as needed, then drag this up to the Alternator property in Module_Engine.
## Module_Fairing: Unless you plan for your engine to only ever be on the very first stage (i.e., a big booster), then you probably want it to have a fairing so that it can be used in the second stage and above.
# '''Apply Options''': Select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and pick “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# '''Save Part JSON''': Click Save Part JSON button at the bottom of the Core Part Data module. This will put the resulting part JSON in the Assets folder for your Unity project. You need to do this any time you’ve edited the Core Part Data module (or also a module it depends on?).
# '''Make Prefab''': Grab the root part object and drag it to the Unity project Assets folder.
# '''Add Part Icon''': Create an icon for your part that the game will use in the parts picker. This needs to be a PNG file with specific dimensions. It should conform to the style used by other parts in the game. However you do this, you need to name the file &lt;part_name&gt;_icon.png, and you need to drag that file into the Assets folder in Unity.
## '''Convert Icon to Sprite''': Select the part icon in the Assets folder. In the Inspector window, click the pulldown menu for Texture Type and change this from Default to Sprite (2D and UI), then click Apply. If this is not done, your lovely icon will not display!
# '''Make Root Part Addressabl'''e: Select the root part’s prefab in the Assets folder and in the Inspector window check the box for Addressable.
# '''Make JSON Addressable''': Select the part’s JSON in the Assets folder and in the Inspector window check the box for Addressable.
# '''Make the Icon Addressable''': Select the root part’s icon in the Assets folder and in the Inspector window check the box for Addressable.
# '''Configure Addressable Properties''': In the Addressables Groups expand the Default Local Group and find your part.
## '''Group Name \ Addressable Name''': Change the information in the Group Name \ Addressable Name from “Assets/&lt;part_name&gt;*” to be just “&lt;part_name&gt;*”. So “Assets/&lt;part_name&gt;.prefab” becomes “&lt;part_name&gt;.prefab”, and so forth. You can leave the “Assets/” part of the path definition alone for each of these, that’s as it should be. The value for the Addressable Name needs to be the same as the file name it’s associated with and must not include any path parts. All of these need to be based on the Part Name established in the Core Part Data module.
## '''Labels''': For the JSON set this to parts_data. Leave it blank for the prefab. If parts_data is not an option in the dropdown for Labels, then click Manage Labels, click the + button to add a new label, and set the Label Name to “parts_data”. Click Save.
# '''Build Parts Pack Addressables''': In the Addressables Groups window, click the drop down for Build and pick New Build &gt; Default Build Script. If you have any unsaved changes Unity will prompt you to save, and then it will build the addressables package for your mod.
# '''Copy Addressables to Plugin Folder''': If the Build step above was successful, the do the following.
## '''Delete Old Stuff''': In Windows Explorer, navigate to your Base Plugin Folder’s addressables folder (&lt;KSP2 Game Dir&gt;\BepInEx\plugins\&lt;your Mod Name&gt;\addressables) and delete any content inside that folder. There may be four things: AddressablesLink (folder), StabaloneWindows64 (folder), catalog.json (file), and setting.json (file).
## '''Copy New Stuff''': In Windows Explorer, navigate to your Unity project’s folder and from there to Library\com.unity.addressables\aa\Windows folder. If the build process above was successful, then there will be four things in this folder: AddressablesLink (folder), StabaloneWindows64 (folder), catalog.json (file), and setting.json (file). You will need to copy all of these to your Base Plugin Folder’s addressables folder.
# '''Launch Game and Test!'''
# '''''Rinse and Repeat for Additional Parts'''''

== Blender Basics for Beginners ==

# If you’re making an engine, put an empty single arrow at the world origin facing in the direction your engine will fire, then move it along the axis of the engine so that it’s at the exit of the engine. Name this object thrustTransform, and keep in mind that size does not matter.
# Make sure all the part objects in your blend have the same material, and that the material has a good name. The material you use for this can be a default material, nothing special is needed.
# Make sure any Boolean modifiers are applied, but array modifiers can be left unapplied.
# Make sure you’ve got a good UV Map (use UV Smart Project) or an excellent one (UV Smart Project followed by Pack Islands). Recommended island spacing for both is 0.003
# When exporting your FBX for use in Substance Painter or any other tool, select only those objects that are actually part of your part and then be sure to check the box for Limit to Selected Objects

== Texturing Tips ==

# Make sure the Kerbal_Space_Program_2_Parts_Paintable.spt file is in your “Documents&gt;Adobe&gt;Substance Painter&gt;Assets&gt;templates” folder. If the templates folder doesn’t exist yet, then create one under Assets and drop that file in it.
# Launch Substance Painter and create a New project.
## In the project creation dialog pick the Kerbal_Space_Program_2_Parts_Paintable template
## Select your FBX file
## Make sure the Document Resolution is sufficient for your texture maps (highly recommend 4096! Any less and painted on bolts look like crap)
## Click Open ''&lt;INSERT GRAPHIC HERE&gt;''.
# Make sure the UV Map looks OK in Substance Painter. If it doesn’t, you need to go back to Blender and re-unwrap then export a new FBX and return to step 2 above.
# Use the File &gt; Import resources… menu to bring up the Import Resources dialog (shown below) and click on the Add Resource button to bring in the KSP2_Part.spsm file. Repeat this step for the Kerbal Space Program 2 - Standard Damaged.spexp file. Both of these should go into your library as you’re going to need them with every part you make.
## Use the Add Resources button to find the resource you want to import
## Select the file and click the Open button
## Repeat steps (a) and (b) above for as many things as you would like to import
## Select the destination to Import your resources to (hint: library ‘your_assests’ for these!)
## Click Import ''&lt;INSERT GRAPHIC HERE&gt;.''
# Use the process in Step 4 above to bring in any textures you want to use. There are many you can peruse and download for free here: https://substance3d.adobe.com/community-assets
## Note: When importing textures, you can either put them in your library so that you can use them in multiple projects, or you can put them directly in your project if you don’t want them in your library. Either way works.
## You can repeat this step any time, and as often as needed, so don’t worry if you don’t have all the textures you need at the start. It’s also possible to make textures within Substance Painter
# Apply the KSP2 Part material to your whole object and once done delete the default later that Substance Painter provided.
# Locate the Bake button (looks like a croissant) in the upper right of Substance Painter and click it ''&lt;INSERT GRAPHIC HERE&gt;''.
## Uncheck the option to make an Opacity Mesh Map.
## Click the large blue Back Selected Textures button.
## When baking is done, click the Return to Painting Mode button.
# Expand the folder by the KSP2_Part smart material in the Layers panel.
# Expand the folder by the Base Material smart material within the KSP2 Part.
# Search for and select the materials you want to paint your part within the Assets panel.
## Drag a material from the Assets panel onto the Base Material in the Layers panel.
## Right click on that material and add a black mask to it, making sure the resulting mask is selected (there will be a blue border around it).
## Pick the Polygon Fill tool from the tool bar and then select a option from Triangle Fill, Polygon Fill, Mesh Fill, and UV Chunk Fill. ''&lt;INSERT GRAPHIC HERE&gt;'' Use the triangle to paint tris, the square (polygon) for quads, the cube (mesh) for entire objects, and the checkerboard (UV chunk) for connected faces on a side of surface.
# Create a simple material: Example white boron nitride ceramic.
## Click the Add Fill Layer button (paint can) ''&lt;INSERT GRAPHIC HERE&gt;''.
## Drag the new fill layer onto the Base Material folder.
## In the Propertied panel under Materials, leave only color, roughness, and metal selected.
## In the Properties panel set the base color to what you need (white in this case).
## Set the metallic slider to 1.0.
## Set the roughness slider to 0.3.
## Add a black mask to the fill layer.
## Paint like a pro.
# Add “Nails”: This is where you add various surface details via the height map, and works for painting on nuts, bolts, fasteners, etc. All of these can be added as “alphas” like this:
## Import your alpha(s)!
## In Layers, select the black mask for Nails in the Heightmap.
## Select Radial Symmetry (for applications around radially symmetric parts like I've got here).
## Set your X, Y, Z point about which things will be symmetric, where Y is the vertical. (Switch the Show/Hide Manipulator on to help see where this point is in your model).
## Set Mirror Y, the count you want, and the angular span the radial pattern should follow (360 for all the way around).
## With the brush tool active, select your alpha.
## Move your cursor onto the part and see the red dots where the "Nails" will be placed.
## Adjust the size of the "Nail" using [ and ] to make it smaller or larger respectively.
## Click where you want the first "Nail" to appear, this will place them all.
# Add “Stickers”: This is where you add signs, stickers, decals, etc., where the sticker has a uniform color (like a radiation symbol, etc.).
## Import your alpha(s)!
## In Layers, under Base Material, add a fill layer for the sticker.
### Uncheck all material properties for the layer except color, metal, and rough.
### Set the fill color to be what you want the sticker to look like.
### Move the layer to be above any other Base Material layer that impacts the part(s) you’re going to apply stickers to (or it will be overwritten and you won’t see your stickers!)
## Select Radial Symmetry (for applications around radially symmetric parts like I've got here).
## Set your X, Y, Z point about which things will be symmetric, where Y is the vertical. (Switch the Show/Hide Manipulator on to help see where this point is in your model).
## Set Mirror Y, the count you want, and the angular span the radial pattern should follow (360 for all the way around).
## With the brush tool active, select your alpha.
## Move your cursor onto the part and see the red dots where the "Stickers" will be placed.
## Adjust the size of the "Sticker" using [ and ] to make it smaller or larger respectively.
## Click where you want the first "Sticker" to appear, this will place them all.

[[Category:Parts and modules]]</text>
      <sha1>cij1izpc4xdfw9owtg2hxuejc5fgfon</sha1>
    </revision>
    <revision>
      <id>354</id>
      <parentid>352</parentid>
      <timestamp>2024-02-04T19:59:30Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <comment>Added some Thunderkit graphics</comment>
      <origin>354</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="28765" sha1="28nbysmxke2lzvahoqj9aud7mxztizp" xml:space="preserve">== '''Preamble''' ==
This guide is based on the videos: How to create parts for KSP2 and How to make engines for KSP2 (see: [[Part modding videos (tutorials)]]), and on other notes and guidance from the KSP2 Modding Society discord.

Also the web pages: [https://luxstice.notion.site/KSP2-Part-tutorial-almost-from-scratch-1f336b7c97ae4280afb6a4e3aa6080b2 KSP2 Part tutorial (almost) from scratch], and [https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314 Tutorial: My First Part]

== '''Prerequisites''' ==
You will absolutely need the following things at a bare minimum:

* Unity Editor
* ThunderKit
* Unity KSP Tools
* Addressables Package (Install via Unity Window menu &gt; Package Manager
** Change Packages to Unity Registry
** Search for “addressables”. Click on it and install.
* LuxShader

You will generally also need the following things:

* Blender (or other mesh modeling SW that can produce FBX files)
* Various blender addons such as TexTools, etc.
* Substance Painter (or other texture painting tool – could be Blender or Quixel Mixer, but SP is highly recommended since there's a free integration to help make KSP parts)

You probably need a few other things too:

* JSON exports of similar stock parts to show you what some things can or should be set to

== Process ==
This guide covers the part of the process that takes place in the Unity Editor resulting in an assembly you can load as a codeless mod in KSP2, and how to get that result into the game.

In Unity editor start with a fresh scene. This will hold your entire parts pack.

Part Pack Prep

# '''Create Unity Project''': Create a new Unity project with an empty scene. You can use the sample scene.
# '''Install Addressables package''': Open Window &gt; Package Manger and select Packages: Unity Registry. Search for addressables and click Install.
# [[File:Thunderkit Settings.png|alt=Thunderkit Settings|thumb|Thunderkit Settings]][[File:Import Process Complete dialog.png|thumb|Thunderkit: Import Process Complete]]'''Install ThunderKit in Unity'''. See [https://luxstice.notion.site/Installing-ThunderKit-7e00f13efe804f12a31a9f31d7f9fd6e Installing Tunderkit] from the Getting Ready section of the KSP2 Part Tutorial linked above for details. See figures for Thunderkit Settings and Thunderkit Import Process Complete for examples of what to expect in this process.
# '''Install Unity KSP Tools in Unity'''. See Installing KSP2 Unity Tools from the Getting Ready section of the KSP2 Part Tutorial linked above for details.
## Go to https://github.com/SpaceWarpDev/KSP2UnityTools/releases
## Download latest KSP2 Unity Tools version
## Double click the KSPUTxxx.unitypackage file to install it in the open unity project
# '''Install LuxShader in Unity'''. Place a copy of “LuxShader” somewhere in your Unity project. I put mine in my Parts Pack folder.
# '''Configure Unity Project''': ''This is essential, or even if you can build a part it won’t load in the game''. You can check your settings like this. Go to the Addressables Window (click the Unity menu for Window &gt; Asset Management &gt; Addressables &gt; Group). Select the Default Local Group in Addressables Groups window. In the Inspector window, check the following properties for your parts pack mod.
## Build Path: Should be set to Library/com.unity.addressables/aa/Windows/StandaloneWindows64
## Load Path: Should be set to {SpaceWarpPaths.&lt;your_mod_id&gt;}/addressables/StandaloneWindows64
### For your_mod_id, it is imperative that you replace any “.” Or “-“ with “_”. Only the very first “.” Between “SpaceWarpPaths” and “&lt;your_mod_id&gt;” is allowed as SpaceWarpPaths is a class, and classes can have variables, but variables can’t have any “.” or “-“ in their name (for reasons that should be obvious). If you’ve got any characters that can’t be used in a C# variable name In your mod ID (e.g. com.github.schlosrat.SPARK, etc.), then just replace those with underscores and you’ll be OK.
## [[File:Addressables Groups - Manage Profiles.png|alt=Manage Profiles selection from Addressables Groups Profile: Default dropdown|thumb|Figure 1: Addressables Groups - Manage Profiles]]Make sure the Load Path is ''not'' ''{UnityEngine.AddressableAssets.Addressables.RuntimePath}/StandaloneWindows64'' (which it seems to want to be…) If you need to change these, it’s best to create a new profile which you can then apply to the Build &amp; Load Paths drop down. To do that go to the Addressables Groups windows and on the Profile: Default dropdown pick Manage Profiles as shown in Figure 1.
## [[File:Addressables Profiles.png|alt=Addressables Profiles: Create new Profile|thumb|Figure 2: Addressables Profiles]]This will open up the Addressables Profiles panel as shown in Figure 2. Create a New Profile by clicking the Create dropdown and picking Build and Load Path Variables (All Profiles).
## [[File:New Profile Setup.png|thumb|Figure 3: New Profile Setup]]This will give you a dialog box like that shown in Figure 3 which you can type into, but be forewarned – it will vanish if it loses focus, so save as soon as you’ve set the Prefix Name (which was set to SpaceWarp above but is in the fresh, clean unmodified form below).
## Once you’ve saved it, you can edit the SpaceWarp.BuildPath to match what’s shown above and the SpaceWarp.LoadPath to be ''{SpaceWarpPaths.&lt;your_mod_id&gt;}/addressables/StandaloneWindows64''.
## [[File:Inspector Default Local Group.png|thumb|Figure 4: Default Local Group Inspector]]With these setup, you can go back to the Inspector for the Default Local Group and set the Build &amp; Load Paths setting to SpaceWarp in the dropdown menu so that your configuration looks like that shown in Figure 4.
# '''Create Parts Pack folder''': Under Assets, create a folder (L-Click Assets: Create &gt; Folder) and name it the same as your parts pack mod. If your mod is called My Awesome Mod then this would be Assets\MyAwesomeMod.
# '''Create Materials folder''': Inside your parts pack folder create a folder called Materials. You’ll be storing the textures and materials you need there. E.g., Assets\MyAwesomeMod\Materials. This is just to aid in organization.
# '''Create Parts folder''': Inside your parts pack folder create a folder called Parts. You’ll be storing the part meshes and related things there. E.g., Assets\MyAwesomeMod\Parts. You can have whatever organization you like here, so if you want to group some parts you might create group folders within Parts (e.g., Methalox Engines, Nuclear Engines, Ion Engines, etc.). This is just to aid in organization and is optional.
# '''Create Plugin Folder and Content''': In your KSP2 install’s BepInEx\plugins folder create a folder for your mod. You can name this whatever you like, but it should be unique. This will be the “mod” players will install to have your parts pack and we’ll refer to it as the Base Plugin Folder in this guide.
## Create swinfo.json: In the base plugin folder create a swinfo.json file with content like this:&lt;syntaxhighlight lang="json"&gt;
{
  "spec": "1.3",
  "mod_id": "com.github.schlosrat.SPARK",
  "author": "schlosrat",
  "name": "Stellar Plasma-Assisted Rocket Kinetics",
  "description": "High ISP engines for your low thrust needs",
  "source": "https://github.com/schlosrat/SPARK",
  "version": "0.0.1",
  "version_check": "https://raw.githubusercontent.com/schlosrat/SPARK/main/SPARK/swinfo.json",
  "ksp2_version": {
    "min": "0.1.3.2",
    "max": "*"
  },
  "dependencies": [
    {
      "id": "com.github.x606.spacewarp",
      "version": {
        "min": "1.4.0",
        "max": "*"
      }
    },
    {
      "id": "lfo",
      "version": {
        "min": "0.2.0",
        "max": "*"
      }
    }
  ]
}
&lt;/syntaxhighlight&gt;
## Create “addressables” folder: In the base plugin folder, create an “addressables” sub-folder. This will be where you put the files created by Unity after a build (discussed below).
## Create “localizations” folder: In the base plugin folder, create an “localizations” sub-folder (NOTE! This is currently required to be exactly this – localizations (plural), not localization (singular). This will be where you put the localization files (e.g., english.csv, spanish.csv, etc.).
## Create Localization file(s): Localization files are CSV files following a particular format. These must have lines ending with LF not LF/NL, and they must reference the same &lt;part_name&gt; you use in the Part Production process below. There are some other restrictions for content, particularly that if you want a string that contains a “,” that string needs to be enclosed in quotes or the comma will mess with how the strings are parsed. These files are where the part’s Title, Subtitle, Manufacturer, and Description are configured. Here’s an example:&lt;syntaxhighlight lang="text"&gt;
Key,Type,Desc,English

Parts/Title/spark_spt100,Text,,SPT-100

Parts/Subtitle/ spark_spt100,Text,,Hall Effect Thruster with Xenon Tank

Parts/Manufacturer/spark_spt100,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc."

Parts/Description/spark_spt100,Text,,"The SPT-100 is the pinnacle in tiny (0.625m-class) Ion engines, providing high Isp and low thrust with an integral toroidal xenon tank. Strap this little guy onto a probe core and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!"

Parts/Title/spark_x3,Text,,X3 NHT

Parts/Subtitle/spark_x3,Text,,Three-Channel Nested Hall Effect Thruster

Parts/Manufacturer/spark_x3,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc."

Parts/Description/spark_x3,Text,,"The SPARK X3 is the pinnacle in small (1.25m-class) Ion engines, providing high Isp and low thrust. Strap this bad boy onto your large probe or small capsule and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!"
&lt;/syntaxhighlight&gt;

== Part Production ==

# '''Create Root Part Object''': Create an empty game object under your scene (L-click Scene: Game Object &gt; Create Empty). Name this object the same as your part.
## Recommended naming scheme: &lt;mod_name&gt;_&lt;part_name&gt;. If your mod is called “My Awesome Mod” and your part title is “My Part”, then your part name might be my_awesome_mod_my_part for example. Part names must be unique, though you can have any descriptive title you like (that is done later in Localization). A naming scheme like this helps to prevent naming collisions in case anyone else might make a part they want to call “My Part”, like yours.
# '''Create Model Object''': Create an empty game object under your root part object and name this one “model”.
# '''Create Part Folder''': Create a Part folder named for your part inside your Parts folder. E.g., Assets\MyAwesomeMod\Parts\MyPart, or Assets\MyAwesomeMod\Parts\ThisGroup\MyPart if you’re grouping parts.
# '''Bring in FBX''': Drag a copy of your part’s FBX file into the part folder.
## If you have baked textures for your part that go with the FBX (meaning, they’re based on the UV Unwrap specific to that FBX), then drag those into this same file with the FBX.
# '''Create Part Object''': Drag a copy of the part FBX from the Part folder in Unity to the model object created in step 2. Don’t drag the FBX file from your computer’s files system, you need to use the copy you just placed in step 4. This will create a prefab for your part as a child of the model object.
# '''Unpack Prefab''': Left-Click part object: Prefab &gt; Unpack.
# '''Remove Unnecessary Things''': Remove any parts that came in with the FBX that you don’t actually need in the game like lights, cameras, empty nodes, etc. If it’s not an actual part you want the game to render, then delete it.
# '''Orient Part''': Your model will appear in the Unity scene oriented as you built it in Blender, but this may not be the way you want it to be oriented in the game. If you need changes to the position, rotation, or scale of the part do those now using the Transform panel within the Inspector Window with your part object selected. For example, to flip a part over just give a rotation of 180 in Z, etc.
# '''Create Mesh Object''': L-Click part object: Create Empty. Name this object “mesh”.
# '''Create Collider Object''': L-Click mesh object: Create Empty. Name this object “col”.
# '''Create Collider''': In the Inspector window for the col object click “Add Component”. Search for Mesh Collider and pick it. This will create a Mesh Collider component in the col object. Click the arrowhead to the left of it to expand it and see its properties.
## '''Select Mesh''': In the Mesh Collider properties select the Mesh you want to use. If your FBX is all one object you can pick that, or you can pick a suitable primitive like cube or cylinder, etc.
## '''Position, Rotation, and Scale''': Set the position, rotation, and scale of the mesh to encompass the part. You should see a green mesh represented in the Scene window to help guide you to make sure you’ve got the right position, rotation, and scale.
## '''Convex''': Check “Convex”
# '''Add Core Part Data''': Select your Root Part Object. In the Inspector Window click “Add Component”. Search for “Core Part Data” and pick that. Open it up and configure as follows:
## '''Part Name''': The Part Name needs to be the same as what you’ve used for the Root Part object, i.e., my_awesome_mod_my_part or whatever you used.
## '''Author''': Use what you like here, typically your KSP Forum screen name or whatever you go by as your modding author name.
## '''Category''': Select an appropriate category for your part.
## '''Family''': If you wish to identify a “Family” for your part, this needs to be a particular string. You can find examples in the game’s files, or part JSONS, or ask in the KSP2 Modding Society discord to get this information.
## '''Co Lift, Co Mass, Co Pressure, etc.''': These parameters allow you to set the Center of Lift, Center of Mass, Center of Pressure, etc. Adjust these to get the markers in the Unity scene where they should be for your part. Typically, Co Pressure and Co Lift are in the same place.
## '''Fuel Cross Feed''': Check if fuel should be able to transit through your part on the way to other parts. Typically set to true, but not always.
## '''Mass''': Set this in metric tons, not Kg.
## '''Attach Rules''': Check the types of attachment your part should allow. Checking “Stack” or “Srf Attach” will allow your part to attach in a stack or to a surface. Checking “Allow Stack”, “Allow Srf Attach”, etc. will allow other parts to stack attach or surface attach respectively. ''Currently (?) Allow Collision, Allow Dock, Allow Rotate, and Allow Root have no effect in game (check this)''.
## '''Attach Nodes''': If Stack is checked above, then you need a “top” and a “bottom” node, if Srf Attach is checked above, then you need a “srfAttach” node. Note, node names are case sensitive and having a node is not enough by itself, you do also need the corresponding Attach Rule set true or the node will have no effect. Under Attach Nodes click the + button to add a blank node and configure as needed.
### '''Node ID''': “top”, “bottom”, “srfAttach”, etc. (case sensitive!)
### '''Node Type''': Select as appropriate. (Stack for Stack, Surface for Surface…)
### '''Attach Method''': Select Fixed_Joint for Stack and Hinge_Joint for Surface Attach.
### '''Is Multi Joint''': In general set to True for stack attach to help prevent noodle rockets.
### '''Multi Joint Max Joint''': ''Set to 3 if you set Is Multi Joint to true?''
### '''Position''': Set as appropriate. Should be on the skin or outside of the part where you would expect to find it on your part in the VAB.
### '''Orientation''': Set as appropriate. The Orientation vector should be a unit vector (length 1) pointing in the direction of the part that will attach to the node, so pointing away from your part.
### '''Size''': Affects rigidity of your part. If your part is connected to another part with the same “size” node, then rigidity will be optimal, and otherwise it will be suboptimal.
### '''Visual Size''': Set the same as Size.
### '''Is Resource Crossfeed''': Set as needed for this node.
### '''Is Rigid''': Set as needed for this node.
### ''Rinse and Repeat'': Subsequent nodes created with the + button will inherit settings from the last node made, so this may accelerate the process as you just need to change the Node Id, Position and Orientation for new nodes that are similar to the previous created node.
# '''Add Module_Color''': You need this to be able to paint your part with base and accent colors. As above, click Add Component and search for Module Color.
# '''Add Module_Drag''': All parts need this. As above, click Add Component and search for Module Color.
# '''Add other modules as needed'''. For example, if your part is an engine you’ll also need:
## thrustTransform object: Create an empty game object as a child of the root part and name it thrustTransform.
## '''Throttle VFX Manager''': Configure as needed (?). No need to drag anywhere, it just need to be a component for the part.
## '''Flameout VFX Data''': Drag this up to the Flameout VFX property in Module_Engine.
## '''Module_Gimbal''': Configure details as needed (e.g., Gimbal Range and Gimbal Speed, etc.), then drag this up to the Gimbal property in Module_Engine.
## '''Module_Generator''': Configure details as needed, then drag this up to the Alternator property in Module_Engine.
## Module_Fairing: Unless you plan for your engine to only ever be on the very first stage (i.e., a big booster), then you probably want it to have a fairing so that it can be used in the second stage and above.
# '''Apply Options''': Select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and pick “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# '''Save Part JSON''': Click Save Part JSON button at the bottom of the Core Part Data module. This will put the resulting part JSON in the Assets folder for your Unity project. You need to do this any time you’ve edited the Core Part Data module (or also a module it depends on?).
# '''Make Prefab''': Grab the root part object and drag it to the Unity project Assets folder.
# '''Add Part Icon''': Create an icon for your part that the game will use in the parts picker. This needs to be a PNG file with specific dimensions. It should conform to the style used by other parts in the game. However you do this, you need to name the file &lt;part_name&gt;_icon.png, and you need to drag that file into the Assets folder in Unity.
## '''Convert Icon to Sprite''': Select the part icon in the Assets folder. In the Inspector window, click the pulldown menu for Texture Type and change this from Default to Sprite (2D and UI), then click Apply. If this is not done, your lovely icon will not display!
# '''Make Root Part Addressabl'''e: Select the root part’s prefab in the Assets folder and in the Inspector window check the box for Addressable.
# '''Make JSON Addressable''': Select the part’s JSON in the Assets folder and in the Inspector window check the box for Addressable.
# '''Make the Icon Addressable''': Select the root part’s icon in the Assets folder and in the Inspector window check the box for Addressable.
# '''Configure Addressable Properties''': In the Addressables Groups expand the Default Local Group and find your part.
## '''Group Name \ Addressable Name''': Change the information in the Group Name \ Addressable Name from “Assets/&lt;part_name&gt;*” to be just “&lt;part_name&gt;*”. So “Assets/&lt;part_name&gt;.prefab” becomes “&lt;part_name&gt;.prefab”, and so forth. You can leave the “Assets/” part of the path definition alone for each of these, that’s as it should be. The value for the Addressable Name needs to be the same as the file name it’s associated with and must not include any path parts. All of these need to be based on the Part Name established in the Core Part Data module.
## '''Labels''': For the JSON set this to parts_data. Leave it blank for the prefab. If parts_data is not an option in the dropdown for Labels, then click Manage Labels, click the + button to add a new label, and set the Label Name to “parts_data”. Click Save.
# '''Build Parts Pack Addressables''': In the Addressables Groups window, click the drop down for Build and pick New Build &gt; Default Build Script. If you have any unsaved changes Unity will prompt you to save, and then it will build the addressables package for your mod.
# '''Copy Addressables to Plugin Folder''': If the Build step above was successful, the do the following.
## '''Delete Old Stuff''': In Windows Explorer, navigate to your Base Plugin Folder’s addressables folder (&lt;KSP2 Game Dir&gt;\BepInEx\plugins\&lt;your Mod Name&gt;\addressables) and delete any content inside that folder. There may be four things: AddressablesLink (folder), StabaloneWindows64 (folder), catalog.json (file), and setting.json (file).
## '''Copy New Stuff''': In Windows Explorer, navigate to your Unity project’s folder and from there to Library\com.unity.addressables\aa\Windows folder. If the build process above was successful, then there will be four things in this folder: AddressablesLink (folder), StabaloneWindows64 (folder), catalog.json (file), and setting.json (file). You will need to copy all of these to your Base Plugin Folder’s addressables folder.
# '''Launch Game and Test!'''
# '''''Rinse and Repeat for Additional Parts'''''

== Blender Basics for Beginners ==

# If you’re making an engine, put an empty single arrow at the world origin facing in the direction your engine will fire, then move it along the axis of the engine so that it’s at the exit of the engine. Name this object thrustTransform, and keep in mind that size does not matter.
# Make sure all the part objects in your blend have the same material, and that the material has a good name. The material you use for this can be a default material, nothing special is needed.
# Make sure any Boolean modifiers are applied, but array modifiers can be left unapplied.
# Make sure you’ve got a good UV Map (use UV Smart Project) or an excellent one (UV Smart Project followed by Pack Islands). Recommended island spacing for both is 0.003
# When exporting your FBX for use in Substance Painter or any other tool, select only those objects that are actually part of your part and then be sure to check the box for Limit to Selected Objects

== Texturing Tips ==

# Make sure the Kerbal_Space_Program_2_Parts_Paintable.spt file is in your “Documents&gt;Adobe&gt;Substance Painter&gt;Assets&gt;templates” folder. If the templates folder doesn’t exist yet, then create one under Assets and drop that file in it.
# Launch Substance Painter and create a New project.
## In the project creation dialog pick the Kerbal_Space_Program_2_Parts_Paintable template
## Select your FBX file
## Make sure the Document Resolution is sufficient for your texture maps (highly recommend 4096! Any less and painted on bolts look like crap)
## Click Open ''&lt;INSERT GRAPHIC HERE&gt;''.
# Make sure the UV Map looks OK in Substance Painter. If it doesn’t, you need to go back to Blender and re-unwrap then export a new FBX and return to step 2 above.
# Use the File &gt; Import resources… menu to bring up the Import Resources dialog (shown below) and click on the Add Resource button to bring in the KSP2_Part.spsm file. Repeat this step for the Kerbal Space Program 2 - Standard Damaged.spexp file. Both of these should go into your library as you’re going to need them with every part you make.
## Use the Add Resources button to find the resource you want to import
## Select the file and click the Open button
## Repeat steps (a) and (b) above for as many things as you would like to import
## Select the destination to Import your resources to (hint: library ‘your_assests’ for these!)
## Click Import ''&lt;INSERT GRAPHIC HERE&gt;.''
# Use the process in Step 4 above to bring in any textures you want to use. There are many you can peruse and download for free here: https://substance3d.adobe.com/community-assets
## Note: When importing textures, you can either put them in your library so that you can use them in multiple projects, or you can put them directly in your project if you don’t want them in your library. Either way works.
## You can repeat this step any time, and as often as needed, so don’t worry if you don’t have all the textures you need at the start. It’s also possible to make textures within Substance Painter
# Apply the KSP2 Part material to your whole object and once done delete the default later that Substance Painter provided.
# Locate the Bake button (looks like a croissant) in the upper right of Substance Painter and click it ''&lt;INSERT GRAPHIC HERE&gt;''.
## Uncheck the option to make an Opacity Mesh Map.
## Click the large blue Back Selected Textures button.
## When baking is done, click the Return to Painting Mode button.
# Expand the folder by the KSP2_Part smart material in the Layers panel.
# Expand the folder by the Base Material smart material within the KSP2 Part.
# Search for and select the materials you want to paint your part within the Assets panel.
## Drag a material from the Assets panel onto the Base Material in the Layers panel.
## Right click on that material and add a black mask to it, making sure the resulting mask is selected (there will be a blue border around it).
## Pick the Polygon Fill tool from the tool bar and then select a option from Triangle Fill, Polygon Fill, Mesh Fill, and UV Chunk Fill. ''&lt;INSERT GRAPHIC HERE&gt;'' Use the triangle to paint tris, the square (polygon) for quads, the cube (mesh) for entire objects, and the checkerboard (UV chunk) for connected faces on a side of surface.
# Create a simple material: Example white boron nitride ceramic.
## Click the Add Fill Layer button (paint can) ''&lt;INSERT GRAPHIC HERE&gt;''.
## Drag the new fill layer onto the Base Material folder.
## In the Propertied panel under Materials, leave only color, roughness, and metal selected.
## In the Properties panel set the base color to what you need (white in this case).
## Set the metallic slider to 1.0.
## Set the roughness slider to 0.3.
## Add a black mask to the fill layer.
## Paint like a pro.
# Add “Nails”: This is where you add various surface details via the height map, and works for painting on nuts, bolts, fasteners, etc. All of these can be added as “alphas” like this:
## Import your alpha(s)!
## In Layers, select the black mask for Nails in the Heightmap.
## Select Radial Symmetry (for applications around radially symmetric parts like I've got here).
## Set your X, Y, Z point about which things will be symmetric, where Y is the vertical. (Switch the Show/Hide Manipulator on to help see where this point is in your model).
## Set Mirror Y, the count you want, and the angular span the radial pattern should follow (360 for all the way around).
## With the brush tool active, select your alpha.
## Move your cursor onto the part and see the red dots where the "Nails" will be placed.
## Adjust the size of the "Nail" using [ and ] to make it smaller or larger respectively.
## Click where you want the first "Nail" to appear, this will place them all.
# Add “Stickers”: This is where you add signs, stickers, decals, etc., where the sticker has a uniform color (like a radiation symbol, etc.).
## Import your alpha(s)!
## In Layers, under Base Material, add a fill layer for the sticker.
### Uncheck all material properties for the layer except color, metal, and rough.
### Set the fill color to be what you want the sticker to look like.
### Move the layer to be above any other Base Material layer that impacts the part(s) you’re going to apply stickers to (or it will be overwritten and you won’t see your stickers!)
## Select Radial Symmetry (for applications around radially symmetric parts like I've got here).
## Set your X, Y, Z point about which things will be symmetric, where Y is the vertical. (Switch the Show/Hide Manipulator on to help see where this point is in your model).
## Set Mirror Y, the count you want, and the angular span the radial pattern should follow (360 for all the way around).
## With the brush tool active, select your alpha.
## Move your cursor onto the part and see the red dots where the "Stickers" will be placed.
## Adjust the size of the "Sticker" using [ and ] to make it smaller or larger respectively.
## Click where you want the first "Sticker" to appear, this will place them all.

[[Category:Parts and modules]]</text>
      <sha1>28nbysmxke2lzvahoqj9aud7mxztizp</sha1>
    </revision>
    <revision>
      <id>355</id>
      <parentid>354</parentid>
      <timestamp>2024-02-04T21:39:46Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <comment>Updates to better align with the current process</comment>
      <origin>355</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="23772" sha1="o8vrl8vq92a810z6x7wgjteshwiyz3v" xml:space="preserve">== '''Preamble''' ==
This guide is based on the videos: How to create parts for KSP2 and How to make engines for KSP2 (see: [[Part modding videos (tutorials)]]), and on other notes and guidance from the KSP2 Modding Society discord.

Also the web pages: [https://luxstice.notion.site/KSP2-Part-tutorial-almost-from-scratch-1f336b7c97ae4280afb6a4e3aa6080b2 KSP2 Part tutorial (almost) from scratch], and [https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314 Tutorial: My First Part]

== '''Prerequisites''' ==
You will absolutely need the following things at a bare minimum:

* Unity Editor
* ThunderKit
* Unity KSP Tools
* Addressables Package (Install via Unity Window menu &gt; Package Manager
** Change Packages to Unity Registry
** Search for “addressables”. Click on it and install.

You will generally also need the following things:

* Blender (or other mesh modeling SW that can produce FBX files)
* Various blender addons such as TexTools, etc.
* Substance Painter (or other texture painting tool – could be Blender or Quixel Mixer, but SP is highly recommended since there's a free integration to help make KSP parts)

You probably need a few other things too:

* JSON exports of similar stock parts to show you what some things can or should be set to

== Process ==
This guide covers the part of the process that takes place in the Unity Editor resulting in an assembly you can load as a codeless mod in KSP2, and how to get that result into the game.

In Unity editor start with a fresh scene. This will hold your entire parts pack.

Part Pack Prep

# '''Create Unity Project''': Create a new Unity project with an empty scene. You can use the sample scene.
# '''Install Addressables package''': Open Window &gt; Package Manger and select Packages: Unity Registry. Search for addressables and click Install.
# [[File:Thunderkit Settings.png|alt=Thunderkit Settings|thumb|Thunderkit Settings]][[File:Import Process Complete dialog.png|thumb|Thunderkit: Import Process Complete]]'''Install ThunderKit in Unity'''. See [https://luxstice.notion.site/Installing-ThunderKit-7e00f13efe804f12a31a9f31d7f9fd6e Installing Tunderkit] from the Getting Ready section of the KSP2 Part Tutorial linked above for details. See figures for Thunderkit Settings and Thunderkit Import Process Complete for examples of what to expect in this process.
# '''Install Unity KSP Tools in Unity'''. See Installing KSP2 Unity Tools from the Getting Ready section of the KSP2 Part Tutorial linked above for details. KSP2 Unity Tools takes care of much of the initial setup for you, greatly streamlining the process while reducing the likelihood of errors with a single click &lt;DESCRIBE WHAT NEEDS TO BE CLICKED&gt;. &lt;Describe KSP2 Unity Setup which takes care of swinfo, etc.&gt; 
# '''Create Parts Pack folder''': Under Assets, create a folder (L-Click Assets: Create &gt; Folder) and name it the same as your parts pack mod. If your mod is called My Awesome Mod then this would be Assets\MyAwesomeMod.
# '''Create Materials folder''': Inside your parts pack folder create a folder called Materials. You’ll be storing the textures and materials you need there. E.g., Assets\MyAwesomeMod\Materials. This is just to aid in organization.
# '''Create Parts folder''': Inside your parts pack folder create a folder called Parts. You’ll be storing the part meshes and related things there. E.g., Assets\MyAwesomeMod\Parts. You can have whatever organization you like here, so if you want to group some parts you might create group folders within Parts (e.g., Methalox Engines, Nuclear Engines, Ion Engines, etc.). This is just to aid in organization and is optional.
# '''Create Plugin Folder and Content''': In your KSP2 install’s BepInEx\plugins folder create a folder for your mod. You can name this whatever you like, but it should be unique. This will be the “mod” players will install to have your parts pack and we’ll refer to it as the Base Plugin Folder in this guide.
## Create “localizations” folder: In the base plugin folder, create an “localizations” sub-folder (NOTE! This is currently required to be exactly this – localizations (plural), not localization (singular). This will be where you put the localization files (e.g., english.csv, spanish.csv, etc.).
## Create Localization file(s): Localization files are CSV files following a particular format. These must have lines ending with LF not LF/NL, and they must reference the same &lt;part_name&gt; you use in the Part Production process below. There are some other restrictions for content, particularly that if you want a string that contains a “,” that string needs to be enclosed in quotes or the comma will mess with how the strings are parsed. These files are where the part’s Title, Subtitle, Manufacturer, and Description are configured. Here’s an example:&lt;syntaxhighlight lang="text"&gt;
Key,Type,Desc,English

Parts/Title/spark_spt100,Text,,SPT-100

Parts/Subtitle/ spark_spt100,Text,,Hall Effect Thruster with Xenon Tank

Parts/Manufacturer/spark_spt100,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc."

Parts/Description/spark_spt100,Text,,"The SPT-100 is the pinnacle in tiny (0.625m-class) Ion engines, providing high Isp and low thrust with an integral toroidal xenon tank. Strap this little guy onto a probe core and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!"

Parts/Title/spark_x3,Text,,X3 NHT

Parts/Subtitle/spark_x3,Text,,Three-Channel Nested Hall Effect Thruster

Parts/Manufacturer/spark_x3,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc."

Parts/Description/spark_x3,Text,,"The SPARK X3 is the pinnacle in small (1.25m-class) Ion engines, providing high Isp and low thrust. Strap this bad boy onto your large probe or small capsule and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!"
&lt;/syntaxhighlight&gt;

== Part Production ==

# '''Create Root Part Object''': Create an empty game object under your scene (L-click Scene: Game Object &gt; Create Empty). Name this object the same as your part.
## Recommended naming scheme: &lt;mod_name&gt;_&lt;part_name&gt;. If your mod is called “My Awesome Mod” and your part title is “My Part”, then your part name might be my_awesome_mod_my_part for example. Part names must be unique, though you can have any descriptive title you like (that is done later in Localization). A naming scheme like this helps to prevent naming collisions in case anyone else might make a part they want to call “My Part”, like yours.
# '''Create Model Object''': Create an empty game object under your root part object and name this one “model”.
# '''Create Part Folder''': Create a Part folder named for your part inside your Parts folder. E.g., Assets\MyAwesomeMod\Parts\MyPart, or Assets\MyAwesomeMod\Parts\ThisGroup\MyPart if you’re grouping parts.
# '''Bring in FBX''': Drag a copy of your part’s FBX file into the part folder.
## If you have baked textures for your part that go with the FBX (meaning, they’re based on the UV Unwrap specific to that FBX), then drag those into this same file with the FBX.
# '''Create Part Object''': Drag a copy of the part FBX from the Part folder in Unity to the model object created in step 2. Don’t drag the FBX file from your computer’s files system, you need to use the copy you just placed in step 4. This will create a prefab for your part as a child of the model object.
# '''Unpack Prefab''': Left-Click part object: Prefab &gt; Unpack.
# '''Remove Unnecessary Things''': Remove any parts that came in with the FBX that you don’t actually need in the game like lights, cameras, empty nodes, etc. If it’s not an actual part you want the game to render, then delete it.
# '''Orient Part''': Your model will appear in the Unity scene oriented as you built it in Blender, but this may not be the way you want it to be oriented in the game. If you need changes to the position, rotation, or scale of the part do those now using the Transform panel within the Inspector Window with your part object selected. For example, to flip a part over just give a rotation of 180 in Z, etc.
# '''Create Mesh Object''': L-Click part object: Create Empty. Name this object “mesh”.
# '''Create Collider Object''': L-Click mesh object: Create Empty. Name this object “col”.
# '''Create Collider''': In the Inspector window for the col object click “Add Component”. Search for Mesh Collider and pick it. This will create a Mesh Collider component in the col object. Click the arrowhead to the left of it to expand it and see its properties.
## '''Select Mesh''': In the Mesh Collider properties select the Mesh you want to use. If your FBX is all one object you can pick that, or you can pick a suitable primitive like cube or cylinder, etc.
## '''Position, Rotation, and Scale''': Set the position, rotation, and scale of the mesh to encompass the part. You should see a green mesh represented in the Scene window to help guide you to make sure you’ve got the right position, rotation, and scale.
## '''Convex''': Check “Convex”
# '''Add Core Part Data''': Select your Root Part Object. In the Inspector Window click “Add Component”. Search for “Core Part Data” and pick that. Open it up and configure as follows:
## '''Part Name''': The Part Name needs to be the same as what you’ve used for the Root Part object, i.e., my_awesome_mod_my_part or whatever you used.
## '''Author''': Use what you like here, typically your KSP Forum screen name or whatever you go by as your modding author name.
## '''Category''': Select an appropriate category for your part.
## '''Family''': If you wish to identify a “Family” for your part, this needs to be a particular string. You can find examples in the game’s files, or part JSONS, or ask in the KSP2 Modding Society discord to get this information.
## '''Co Lift, Co Mass, Co Pressure, etc.''': These parameters allow you to set the Center of Lift, Center of Mass, Center of Pressure, etc. Adjust these to get the markers in the Unity scene where they should be for your part. Typically, Co Pressure and Co Lift are in the same place.
## '''Fuel Cross Feed''': Check if fuel should be able to transit through your part on the way to other parts. Typically set to true, but not always.
## '''Mass''': Set this in metric tons, not Kg.
## '''Attach Rules''': Check the types of attachment your part should allow. Checking “Stack” or “Srf Attach” will allow your part to attach in a stack or to a surface. Checking “Allow Stack”, “Allow Srf Attach”, etc. will allow other parts to stack attach or surface attach respectively. ''Currently (?) Allow Collision, Allow Dock, Allow Rotate, and Allow Root have no effect in game (check this)''.
## '''Attach Nodes''': If Stack is checked above, then you need a “top” and a “bottom” node, if Srf Attach is checked above, then you need a “srfAttach” node. Note, node names are case sensitive and having a node is not enough by itself, you do also need the corresponding Attach Rule set true or the node will have no effect. Under Attach Nodes click the + button to add a blank node and configure as needed.
### '''Node ID''': “top”, “bottom”, “srfAttach”, etc. (case sensitive!)
### '''Node Type''': Select as appropriate. (Stack for Stack, Surface for Surface…)
### '''Attach Method''': Select Fixed_Joint for Stack and Hinge_Joint for Surface Attach.
### '''Is Multi Joint''': In general set to True for stack attach to help prevent noodle rockets.
### '''Multi Joint Max Joint''': ''Set to 3 if you set Is Multi Joint to true?''
### '''Position''': Set as appropriate. Should be on the skin or outside of the part where you would expect to find it on your part in the VAB.
### '''Orientation''': Set as appropriate. The Orientation vector should be a unit vector (length 1) pointing in the direction of the part that will attach to the node, so pointing away from your part.
### '''Size''': Affects rigidity of your part. If your part is connected to another part with the same “size” node, then rigidity will be optimal, and otherwise it will be suboptimal.
### '''Visual Size''': Set the same as Size.
### '''Is Resource Crossfeed''': Set as needed for this node.
### '''Is Rigid''': Set as needed for this node.
### ''Rinse and Repeat'': Subsequent nodes created with the + button will inherit settings from the last node made, so this may accelerate the process as you just need to change the Node Id, Position and Orientation for new nodes that are similar to the previous created node.
# '''Add Module_Color''': You need this to be able to paint your part with base and accent colors. As above, click Add Component and search for Module Color.
# '''Add Module_Drag''': All parts need this. As above, click Add Component and search for Module Color.
# '''Add other modules as needed'''. For example, if your part is an engine you’ll also need:
## thrustTransform object: Create an empty game object as a child of the root part and name it thrustTransform.
## '''Throttle VFX Manager''': Configure as needed (?). No need to drag anywhere, it just need to be a component for the part.
## '''Flameout VFX Data''': Drag this up to the Flameout VFX property in Module_Engine.
## '''Module_Gimbal''': Configure details as needed (e.g., Gimbal Range and Gimbal Speed, etc.), then drag this up to the Gimbal property in Module_Engine.
## '''Module_Generator''': Configure details as needed, then drag this up to the Alternator property in Module_Engine.
## Module_Fairing: Unless you plan for your engine to only ever be on the very first stage (i.e., a big booster), then you probably want it to have a fairing so that it can be used in the second stage and above.
# '''Apply Options''': Select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and pick “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# '''Save Part JSON''': Click Save Part JSON button at the bottom of the Core Part Data module. This will put the resulting part JSON in the Assets folder for your Unity project. You need to do this any time you’ve edited the Core Part Data module (or also a module it depends on?).
# '''Make Prefab''': Grab the root part object and drag it to the Unity project Assets folder.
# '''Add Part Icon''': Create an icon for your part that the game will use in the parts picker. This needs to be a PNG file with specific dimensions. It should conform to the style used by other parts in the game. However you do this, you need to name the file &lt;part_name&gt;_icon.png, and you need to drag that file into the Assets folder in Unity.
## '''Convert Icon to Sprite''': Select the part icon in the Assets folder. In the Inspector window, click the pulldown menu for Texture Type and change this from Default to Sprite (2D and UI), then click Apply. If this is not done, your lovely icon will not display!
# '''Make Root Part Addressabl'''e: Select the root part’s prefab in the Assets folder and in the Inspector window check the box for Addressable.
# '''Make JSON Addressable''': Select the part’s JSON in the Assets folder and in the Inspector window check the box for Addressable.
# '''Make the Icon Addressable''': Select the root part’s icon in the Assets folder and in the Inspector window check the box for Addressable.
# '''Configure Addressable Properties''': In the Addressables Groups expand the Default Local Group and find your part.
## '''Group Name \ Addressable Name''': Change the information in the Group Name \ Addressable Name from “Assets/&lt;part_name&gt;*” to be just “&lt;part_name&gt;*”. So “Assets/&lt;part_name&gt;.prefab” becomes “&lt;part_name&gt;.prefab”, and so forth. You can leave the “Assets/” part of the path definition alone for each of these, that’s as it should be. The value for the Addressable Name needs to be the same as the file name it’s associated with and must not include any path parts. All of these need to be based on the Part Name established in the Core Part Data module.
## '''Labels''': For the JSON set this to parts_data. Leave it blank for the prefab. If parts_data is not an option in the dropdown for Labels, then click Manage Labels, click the + button to add a new label, and set the Label Name to “parts_data”. Click Save.
# '''Build Mod or Build And Test''': Select either Build Mod or Build And Test to have KSP2 Unity Tools prepare and deploy your parts pack mod.
# '''Launch Game and Test!'''
# '''''Rinse and Repeat for Additional Parts'''''

== Blender Basics for Beginners ==

# If you’re making an engine, put an empty single arrow at the world origin facing in the direction your engine will fire, then move it along the axis of the engine so that it’s at the exit of the engine. Name this object thrustTransform, and keep in mind that size does not matter.
# Make sure all the part objects in your blend have the same material, and that the material has a good name. The material you use for this can be a default material, nothing special is needed.
# Make sure any Boolean modifiers are applied, but array modifiers can be left unapplied.
# Make sure you’ve got a good UV Map (use UV Smart Project) or an excellent one (UV Smart Project followed by Pack Islands). Recommended island spacing for both is 0.003
# When exporting your FBX for use in Substance Painter or any other tool, select only those objects that are actually part of your part and then be sure to check the box for Limit to Selected Objects

== Texturing Tips ==

# Make sure the Kerbal_Space_Program_2_Parts_Paintable.spt file is in your “Documents&gt;Adobe&gt;Substance Painter&gt;Assets&gt;templates” folder. If the templates folder doesn’t exist yet, then create one under Assets and drop that file in it.
# Launch Substance Painter and create a New project.
## In the project creation dialog pick the Kerbal_Space_Program_2_Parts_Paintable template
## Select your FBX file
## Make sure the Document Resolution is sufficient for your texture maps (highly recommend 4096! Any less and painted on bolts look like crap)
## Click Open ''&lt;INSERT GRAPHIC HERE&gt;''.
# Make sure the UV Map looks OK in Substance Painter. If it doesn’t, you need to go back to Blender and re-unwrap then export a new FBX and return to step 2 above.
# Use the File &gt; Import resources… menu to bring up the Import Resources dialog (shown below) and click on the Add Resource button to bring in the KSP2_Part.spsm file. Repeat this step for the Kerbal Space Program 2 - Standard Damaged.spexp file. Both of these should go into your library as you’re going to need them with every part you make.
## Use the Add Resources button to find the resource you want to import
## Select the file and click the Open button
## Repeat steps (a) and (b) above for as many things as you would like to import
## Select the destination to Import your resources to (hint: library ‘your_assests’ for these!)
## Click Import ''&lt;INSERT GRAPHIC HERE&gt;.''
# Use the process in Step 4 above to bring in any textures you want to use. There are many you can peruse and download for free here: https://substance3d.adobe.com/community-assets
## Note: When importing textures, you can either put them in your library so that you can use them in multiple projects, or you can put them directly in your project if you don’t want them in your library. Either way works.
## You can repeat this step any time, and as often as needed, so don’t worry if you don’t have all the textures you need at the start. It’s also possible to make textures within Substance Painter
# Apply the KSP2 Part material to your whole object and once done delete the default later that Substance Painter provided.
# Locate the Bake button (looks like a croissant) in the upper right of Substance Painter and click it ''&lt;INSERT GRAPHIC HERE&gt;''.
## Uncheck the option to make an Opacity Mesh Map.
## Click the large blue Back Selected Textures button.
## When baking is done, click the Return to Painting Mode button.
# Expand the folder by the KSP2_Part smart material in the Layers panel.
# Expand the folder by the Base Material smart material within the KSP2 Part.
# Search for and select the materials you want to paint your part within the Assets panel.
## Drag a material from the Assets panel onto the Base Material in the Layers panel.
## Right click on that material and add a black mask to it, making sure the resulting mask is selected (there will be a blue border around it).
## Pick the Polygon Fill tool from the tool bar and then select a option from Triangle Fill, Polygon Fill, Mesh Fill, and UV Chunk Fill. ''&lt;INSERT GRAPHIC HERE&gt;'' Use the triangle to paint tris, the square (polygon) for quads, the cube (mesh) for entire objects, and the checkerboard (UV chunk) for connected faces on a side of surface.
# Create a simple material: Example white boron nitride ceramic.
## Click the Add Fill Layer button (paint can) ''&lt;INSERT GRAPHIC HERE&gt;''.
## Drag the new fill layer onto the Base Material folder.
## In the Propertied panel under Materials, leave only color, roughness, and metal selected.
## In the Properties panel set the base color to what you need (white in this case).
## Set the metallic slider to 1.0.
## Set the roughness slider to 0.3.
## Add a black mask to the fill layer.
## Paint like a pro.
# Add “Nails”: This is where you add various surface details via the height map, and works for painting on nuts, bolts, fasteners, etc. All of these can be added as “alphas” like this:
## Import your alpha(s)!
## In Layers, select the black mask for Nails in the Heightmap.
## Select Radial Symmetry (for applications around radially symmetric parts like I've got here).
## Set your X, Y, Z point about which things will be symmetric, where Y is the vertical. (Switch the Show/Hide Manipulator on to help see where this point is in your model).
## Set Mirror Y, the count you want, and the angular span the radial pattern should follow (360 for all the way around).
## With the brush tool active, select your alpha.
## Move your cursor onto the part and see the red dots where the "Nails" will be placed.
## Adjust the size of the "Nail" using [ and ] to make it smaller or larger respectively.
## Click where you want the first "Nail" to appear, this will place them all.
# Add “Stickers”: This is where you add signs, stickers, decals, etc., where the sticker has a uniform color (like a radiation symbol, etc.).
## Import your alpha(s)!
## In Layers, under Base Material, add a fill layer for the sticker.
### Uncheck all material properties for the layer except color, metal, and rough.
### Set the fill color to be what you want the sticker to look like.
### Move the layer to be above any other Base Material layer that impacts the part(s) you’re going to apply stickers to (or it will be overwritten and you won’t see your stickers!)
## Select Radial Symmetry (for applications around radially symmetric parts like I've got here).
## Set your X, Y, Z point about which things will be symmetric, where Y is the vertical. (Switch the Show/Hide Manipulator on to help see where this point is in your model).
## Set Mirror Y, the count you want, and the angular span the radial pattern should follow (360 for all the way around).
## With the brush tool active, select your alpha.
## Move your cursor onto the part and see the red dots where the "Stickers" will be placed.
## Adjust the size of the "Sticker" using [ and ] to make it smaller or larger respectively.
## Click where you want the first "Sticker" to appear, this will place them all.

[[Category:Parts and modules]]</text>
      <sha1>o8vrl8vq92a810z6x7wgjteshwiyz3v</sha1>
    </revision>
    <revision>
      <id>357</id>
      <parentid>355</parentid>
      <timestamp>2024-02-04T22:09:20Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <comment>Added Module_Fairing details and graphic</comment>
      <origin>357</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="29912" sha1="hg7x5uqo0mlkuaobd33h4ml502f4nki" xml:space="preserve">== '''Preamble''' ==
This guide is based on the videos: How to create parts for KSP2 and How to make engines for KSP2 (see: [[Part modding videos (tutorials)]]), and on other notes and guidance from the KSP2 Modding Society discord.

Also the web pages: [https://luxstice.notion.site/KSP2-Part-tutorial-almost-from-scratch-1f336b7c97ae4280afb6a4e3aa6080b2 KSP2 Part tutorial (almost) from scratch], and [https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314 Tutorial: My First Part]

== '''Prerequisites''' ==
You will absolutely need the following things at a bare minimum:

* Unity Editor
* ThunderKit
* Unity KSP Tools
* Addressables Package (Install via Unity Window menu &gt; Package Manager
** Change Packages to Unity Registry
** Search for “addressables”. Click on it and install.

You will generally also need the following things:

* Blender (or other mesh modeling SW that can produce FBX files)
* Various blender addons such as TexTools, etc.
* Substance Painter (or other texture painting tool – could be Blender or Quixel Mixer, but SP is highly recommended since there's a free integration to help make KSP parts)

You probably need a few other things too:

* JSON exports of similar stock parts to show you what some things can or should be set to

== Process ==
This guide covers the part of the process that takes place in the Unity Editor resulting in an assembly you can load as a codeless mod in KSP2, and how to get that result into the game.

In Unity editor start with a fresh scene. This will hold your entire parts pack.

Part Pack Prep

# '''Create Unity Project''': Create a new Unity project with an empty scene. You can use the sample scene.
# '''Install Addressables package''': Open Window &gt; Package Manger and select Packages: Unity Registry. Search for addressables and click Install.
# [[File:Thunderkit Settings.png|alt=Thunderkit Settings|thumb|Thunderkit Settings]][[File:Import Process Complete dialog.png|thumb|Thunderkit: Import Process Complete]]'''Install ThunderKit in Unity'''. See [https://luxstice.notion.site/Installing-ThunderKit-7e00f13efe804f12a31a9f31d7f9fd6e Installing Tunderkit] from the Getting Ready section of the KSP2 Part Tutorial linked above for details. See figures for Thunderkit Settings and Thunderkit Import Process Complete for examples of what to expect in this process.
# '''Install Unity KSP Tools in Unity'''. See Installing KSP2 Unity Tools from the Getting Ready section of the KSP2 Part Tutorial linked above for details. KSP2 Unity Tools takes care of much of the initial setup for you, greatly streamlining the process while reducing the likelihood of errors with a single click &lt;DESCRIBE WHAT NEEDS TO BE CLICKED&gt;. &lt;Describe KSP2 Unity Setup which takes care of swinfo, etc.&gt; 
# '''Create Parts Pack folder''': Under Assets, create a folder (L-Click Assets: Create &gt; Folder) and name it the same as your parts pack mod. If your mod is called My Awesome Mod then this would be Assets\MyAwesomeMod.
# '''Create Materials folder''': Inside your parts pack folder create a folder called Materials. You’ll be storing the textures and materials you need there. E.g., Assets\MyAwesomeMod\Materials. This is just to aid in organization.
# '''Create Parts folder''': Inside your parts pack folder create a folder called Parts. You’ll be storing the part meshes and related things there. E.g., Assets\MyAwesomeMod\Parts. You can have whatever organization you like here, so if you want to group some parts you might create group folders within Parts (e.g., Methalox Engines, Nuclear Engines, Ion Engines, etc.). This is just to aid in organization and is optional.
# '''Create Plugin Folder and Content''': In your KSP2 install’s BepInEx\plugins folder create a folder for your mod. You can name this whatever you like, but it should be unique. This will be the “mod” players will install to have your parts pack and we’ll refer to it as the Base Plugin Folder in this guide.
## Create “localizations” folder: In the base plugin folder, create an “localizations” sub-folder (NOTE! This is currently required to be exactly this – localizations (plural), not localization (singular). This will be where you put the localization files (e.g., english.csv, spanish.csv, etc.).
## Create Localization file(s): Localization files are CSV files following a particular format. These must have lines ending with LF not LF/NL, and they must reference the same &lt;part_name&gt; you use in the Part Production process below. There are some other restrictions for content, particularly that if you want a string that contains a “,” that string needs to be enclosed in quotes or the comma will mess with how the strings are parsed. These files are where the part’s Title, Subtitle, Manufacturer, and Description are configured. Here’s an example:&lt;syntaxhighlight lang="text"&gt;
Key,Type,Desc,English

Parts/Title/spark_spt100,Text,,SPT-100

Parts/Subtitle/ spark_spt100,Text,,Hall Effect Thruster with Xenon Tank

Parts/Manufacturer/spark_spt100,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc."

Parts/Description/spark_spt100,Text,,"The SPT-100 is the pinnacle in tiny (0.625m-class) Ion engines, providing high Isp and low thrust with an integral toroidal xenon tank. Strap this little guy onto a probe core and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!"

Parts/Title/spark_x3,Text,,X3 NHT

Parts/Subtitle/spark_x3,Text,,Three-Channel Nested Hall Effect Thruster

Parts/Manufacturer/spark_x3,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc."

Parts/Description/spark_x3,Text,,"The SPARK X3 is the pinnacle in small (1.25m-class) Ion engines, providing high Isp and low thrust. Strap this bad boy onto your large probe or small capsule and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!"
&lt;/syntaxhighlight&gt;

== Part Production ==

# '''Create Root Part Object''': Create an empty game object under your scene (L-click Scene: Game Object &gt; Create Empty). Name this object the same as your part.
## Recommended naming scheme: &lt;mod_name&gt;_&lt;part_name&gt;. If your mod is called “My Awesome Mod” and your part title is “My Part”, then your part name might be my_awesome_mod_my_part for example. Part names must be unique, though you can have any descriptive title you like (that is done later in Localization). A naming scheme like this helps to prevent naming collisions in case anyone else might make a part they want to call “My Part”, like yours.
# '''Create Model Object''': Create an empty game object under your root part object and name this one “model”.
# '''Create Part Folder''': Create a Part folder named for your part inside your Parts folder. E.g., Assets\MyAwesomeMod\Parts\MyPart, or Assets\MyAwesomeMod\Parts\ThisGroup\MyPart if you’re grouping parts.
# '''Bring in FBX''': Drag a copy of your part’s FBX file into the part folder.
## If you have baked textures for your part that go with the FBX (meaning, they’re based on the UV Unwrap specific to that FBX), then drag those into this same file with the FBX.
# '''Create Part Object''': Drag a copy of the part FBX from the Part folder in Unity to the model object created in step 2. Don’t drag the FBX file from your computer’s files system, you need to use the copy you just placed in step 4. This will create a prefab for your part as a child of the model object.
# '''Unpack Prefab''': Left-Click part object: Prefab &gt; Unpack.
# '''Remove Unnecessary Things''': Remove any parts that came in with the FBX that you don’t actually need in the game like lights, cameras, empty nodes, etc. If it’s not an actual part you want the game to render, then delete it.
# '''Orient Part''': Your model will appear in the Unity scene oriented as you built it in Blender, but this may not be the way you want it to be oriented in the game. If you need changes to the position, rotation, or scale of the part do those now using the Transform panel within the Inspector Window with your part object selected. For example, to flip a part over just give a rotation of 180 in Z, etc.
# '''Create Mesh Object''': L-Click part object: Create Empty. Name this object “mesh”.
# '''Create Collider Object''': L-Click mesh object: Create Empty. Name this object “col”.
# '''Create Collider''': In the Inspector window for the col object click “Add Component”. Search for Mesh Collider and pick it. This will create a Mesh Collider component in the col object. Click the arrowhead to the left of it to expand it and see its properties.
## '''Select Mesh''': In the Mesh Collider properties select the Mesh you want to use. If your FBX is all one object you can pick that, or you can pick a suitable primitive like cube or cylinder, etc.
## '''Position, Rotation, and Scale''': Set the position, rotation, and scale of the mesh to encompass the part. You should see a green mesh represented in the Scene window to help guide you to make sure you’ve got the right position, rotation, and scale.
## '''Convex''': Check “Convex”
# '''Add Core Part Data''': Select your Root Part Object. In the Inspector Window click “Add Component”. Search for “Core Part Data” and pick that. Open it up and configure as follows:
## '''Part Name''': The Part Name needs to be the same as what you’ve used for the Root Part object, i.e., my_awesome_mod_my_part or whatever you used.
## '''Author''': Use what you like here, typically your KSP Forum screen name or whatever you go by as your modding author name.
## '''Category''': Select an appropriate category for your part.
## '''Family''': If you wish to identify a “Family” for your part, this needs to be a particular string. You can find examples in the game’s files, or part JSONS, or ask in the KSP2 Modding Society discord to get this information.
## '''Co Lift, Co Mass, Co Pressure, etc.''': These parameters allow you to set the Center of Lift, Center of Mass, Center of Pressure, etc. Adjust these to get the markers in the Unity scene where they should be for your part. Typically, Co Pressure and Co Lift are in the same place.
## '''Fuel Cross Feed''': Check if fuel should be able to transit through your part on the way to other parts. Typically set to true, but not always.
## '''Mass''': Set this in metric tons, not Kg.
## '''Attach Rules''': Check the types of attachment your part should allow. Checking “Stack” or “Srf Attach” will allow your part to attach in a stack or to a surface. Checking “Allow Stack”, “Allow Srf Attach”, etc. will allow other parts to stack attach or surface attach respectively. ''Currently (?) Allow Collision, Allow Dock, Allow Rotate, and Allow Root have no effect in game (check this)''.
## '''Attach Nodes''': If Stack is checked above, then you need a “top” and a “bottom” node, if Srf Attach is checked above, then you need a “srfAttach” node. Note, node names are case sensitive and having a node is not enough by itself, you do also need the corresponding Attach Rule set true or the node will have no effect. Under Attach Nodes click the + button to add a blank node and configure as needed.
### '''Node ID''': “top”, “bottom”, “srfAttach”, etc. (case sensitive!)
### '''Node Type''': Select as appropriate. (Stack for Stack, Surface for Surface…)
### '''Attach Method''': Select Fixed_Joint for Stack and Hinge_Joint for Surface Attach.
### '''Is Multi Joint''': In general set to True for stack attach to help prevent noodle rockets.
### '''Multi Joint Max Joint''': ''Set to 3 if you set Is Multi Joint to true?''
### '''Position''': Set as appropriate. Should be on the skin or outside of the part where you would expect to find it on your part in the VAB.
### '''Orientation''': Set as appropriate. The Orientation vector should be a unit vector (length 1) pointing in the direction of the part that will attach to the node, so pointing away from your part.
### '''Size''': Affects rigidity of your part. If your part is connected to another part with the same “size” node, then rigidity will be optimal, and otherwise it will be suboptimal.
### '''Visual Size''': Set the same as Size.
### '''Is Resource Crossfeed''': Set as needed for this node.
### '''Is Rigid''': Set as needed for this node.
### ''Rinse and Repeat'': Subsequent nodes created with the + button will inherit settings from the last node made, so this may accelerate the process as you just need to change the Node Id, Position and Orientation for new nodes that are similar to the previous created node.
# '''Add Module_Color''': You need this to be able to paint your part with base and accent colors. As above, click Add Component and search for Module Color.
# '''Add Module_Drag''': All parts need this. As above, click Add Component and search for Module Color.
# '''Add other modules as needed'''. For example, if your part is an engine you’ll also need:
## '''thrustTransform''' object: Create an empty game object as a child of the root part and name it thrustTransform.
## '''Throttle VFX Manager''': Configure as needed (?). No need to drag anywhere, it just need to be a component for the part.
## '''Flameout VFX Data''': Drag this up to the Flameout VFX property in Module_Engine.
## '''Module_Gimbal''': Configure details as needed (e.g., Gimbal Range and Gimbal Speed, etc.), then drag this up to the Gimbal property in Module_Engine.
## '''Module_Generator''': Configure details as needed, then drag this up to the Alternator property in Module_Engine.
## [[File:Module Fairing Data.png|thumb|Figure 3: Example Fairing Data in Unity Editor]]'''Module_Fairing''': Unless you plan for your engine to only ever be on the very first stage (i.e., a big booster), then you probably want it to have a fairing so it can be used in the second stage and above. Figure 3 shows an example for a working fairing from a Size Small (1.25m-class) engine that was created using the process. Shown below is the corresponding example of the PartComponentModule_Fairing portion of  the part JSON. As can be seen in Figure 3, the data fields that need to be populated in the Unity Editor include only a subset of what's in the auto-generated JSON. That said, everything the editor needs is in the example below and presenting it this way makes copy/paste possible where unity editor graphic would not allow that.&lt;syntaxhighlight lang="json"&gt;
      {
        "Name": "PartComponentModule_Fairing",
        "ComponentType": "KSP.Sim.impl.PartComponentModule_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
        "BehaviourType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
        "ModuleData": [
          {
            "Name": "Data_Fairing",
            "ModuleType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
            "DataType": "KSP.Modules.Data_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
            "Data": null,
            "DataObject": {
              "$type": "KSP.Modules.Data_Fairing, Assembly-CSharp",
              "FairingEnabled": {
                "ContextKey": "FairingEnabled",
                "storedValue": true
              },
              "FairingConstructionType": {
                "ContextKey": "FairingConstructionType",
                "storedValue": "CUSTOM"
              },
              "FloatingNodeEnabled": {
                "ContextKey": "FloatingNodeEnabled",
                "storedValue": true
              },
              "Length": {
                "ContextKey": "Length",
                "storedValue": -1.0
              },
              "DeployType": {
                "ContextKey": "DeployType",
                "storedValue": "Clamshellx4"
              },
              "EjectionForce": {
                "ContextKey": "EjectionForce",
                "storedValue": 100.0
              },
              "IsStagingEnabled": {
                "ContextKey": "IsStagingEnabled",
                "storedValue": true
              },
              "IsDeployed": {
                "ContextKey": "IsDeployed",
                "storedValue": false
              },
              "FloatingNodeSize": 1.0,
              "FloatingAttachNodeTag": "bottom",
              "FloatingNodePosition": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "FloatingNodeDirection": {
                "x": 0.0,
                "y": -1.0,
                "z": 0.0
              },
              "FloatingNodeIsMultiJoint": false,
              "FloatingNodeMultiJointMaxCount": 3,
              "FloatingNodeMultiJointOffset": 1.0,
              "FairingNode": "top",
              "NoseTip": 0.5,
              "EdgeWarp": 0.02,
              "AberrantNormalLimit": 45.0,
              "LocalUpAxis": {
                "x": 0.0,
                "y": -1.0,
                "z": 0.0
              },
              "Pivot": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "BaseModelTransformName": "Base",
              "CapRadius": 0.375,
              "BaseRadius": 0.625,
              "CloseRadius": 0.375,
              "MaxRadius": 6.0,
              "SnapThreshold": 0.25,
              "CreateShellColliders": false,
              "NumberOfCollidersPerCrossSection": 12,
              "MinHeightRadiusRatio": 0.07,
              "CrossSectionHeightMin": 0.3,
              "CrossSectionHeightMax": 1.1,
              "AerodynamicallyShieldContents": false,
              "ConeSweepRays": 120,
              "ConeSweepPrecision": 10.0,
              "AmountOfCollidersPerArc": 1,
              "ShouldCapOnAutoGenerate": false,
              "IsCapped": false,
              "IsShroud": true,
              "MassAreaRatio": 0.0,
              "FairingSideCount": 24,
              "FairingLengthSnapIncrement": 0.125,
              "FairingRadiusSnapIncrement": 0.125,
              "FairingSmoothingAngle": 35.0,
              "FairingThickness": 0.025,
              "FairingStartHeight": 0.0,
              "AllowConstructionTypeChange": true,
              "AllowFloatingNodeChange": true,
              "DefaultFairingEnabledToggle": true,
              "DefaultAutoConstruction": true,
              "DefaultDeployType": "Shroud",
              "DefaultFloatingNodeState": true,
              "LengthEditMinimum": 0.0,
              "LengthEditMaximum": 0.001,
              "LengthEditDefault": 1.0,
              "StageToggleDefault": false,
              "MaxAutoFairingTargetRadius": -1,
              "MinAutoFairingTargetRadius": -1,
              "CrossSections": [],
              "MassModifierAmount": 0.0,
              "DragCubeIndex": -1,
              "ModuleType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
              "MassModifier": 0.0,
              "DataType": "KSP.Modules.Data_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
              "IsActiveInStagingProp": {
                "ContextKey": null,
                "storedValue": false
              }
            }
          }
        ]
      }
&lt;/syntaxhighlight&gt;Of the information show above, the parts you will most likely need to customize for your fairing are Base Radius, Cross Section Height Max, and Fairing Thickness - the rest is likely to be the same for all your engines with one other important thing to note. The example above is for an engine that was made in Blender with the nozzle bell facing upwards. If your engine was made with the nozzle bell facing down, then you will need the '''Local Up Axis''' to be -1 in Y and you will also need set the '''Fairing Node''' to bottom.
# '''Apply Options''': Select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and pick “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# '''Save Part JSON''': Click Save Part JSON button at the bottom of the Core Part Data module. This will put the resulting part JSON in the Assets folder for your Unity project. You need to do this any time you’ve edited the Core Part Data module (or also a module it depends on?).
# '''Make Prefab''': Grab the root part object and drag it to the Unity project Assets folder.
# '''Add Part Icon''': Create an icon for your part that the game will use in the parts picker. This needs to be a PNG file with specific dimensions. It should conform to the style used by other parts in the game. However you do this, you need to name the file &lt;part_name&gt;_icon.png, and you need to drag that file into the Assets folder in Unity.
## '''Convert Icon to Sprite''': Select the part icon in the Assets folder. In the Inspector window, click the pulldown menu for Texture Type and change this from Default to Sprite (2D and UI), then click Apply. If this is not done, your lovely icon will not display!
# '''Make Root Part Addressabl'''e: Select the root part’s prefab in the Assets folder and in the Inspector window check the box for Addressable.
# '''Make JSON Addressable''': Select the part’s JSON in the Assets folder and in the Inspector window check the box for Addressable.
# '''Make the Icon Addressable''': Select the root part’s icon in the Assets folder and in the Inspector window check the box for Addressable.
# '''Configure Addressable Properties''': In the Addressables Groups expand the Default Local Group and find your part.
## '''Group Name \ Addressable Name''': Change the information in the Group Name \ Addressable Name from “Assets/&lt;part_name&gt;*” to be just “&lt;part_name&gt;*”. So “Assets/&lt;part_name&gt;.prefab” becomes “&lt;part_name&gt;.prefab”, and so forth. You can leave the “Assets/” part of the path definition alone for each of these, that’s as it should be. The value for the Addressable Name needs to be the same as the file name it’s associated with and must not include any path parts. All of these need to be based on the Part Name established in the Core Part Data module.
## '''Labels''': For the JSON set this to parts_data. Leave it blank for the prefab. If parts_data is not an option in the dropdown for Labels, then click Manage Labels, click the + button to add a new label, and set the Label Name to “parts_data”. Click Save.
# '''Build Mod or Build And Test''': Select either Build Mod or Build And Test to have KSP2 Unity Tools prepare and deploy your parts pack mod.
# '''Launch Game and Test!'''
# '''''Rinse and Repeat for Additional Parts'''''

== Blender Basics for Beginners ==

# If you’re making an engine, put an empty single arrow at the world origin facing in the direction your engine will fire, then move it along the axis of the engine so that it’s at the exit of the engine. Name this object thrustTransform, and keep in mind that size does not matter.
# Make sure all the part objects in your blend have the same material, and that the material has a good name. The material you use for this can be a default material, nothing special is needed.
# Make sure any Boolean modifiers are applied, but array modifiers can be left unapplied.
# Make sure you’ve got a good UV Map (use UV Smart Project) or an excellent one (UV Smart Project followed by Pack Islands). Recommended island spacing for both is 0.003
# When exporting your FBX for use in Substance Painter or any other tool, select only those objects that are actually part of your part and then be sure to check the box for Limit to Selected Objects

== Texturing Tips ==

# Make sure the Kerbal_Space_Program_2_Parts_Paintable.spt file is in your “Documents&gt;Adobe&gt;Substance Painter&gt;Assets&gt;templates” folder. If the templates folder doesn’t exist yet, then create one under Assets and drop that file in it.
# Launch Substance Painter and create a New project.
## In the project creation dialog pick the Kerbal_Space_Program_2_Parts_Paintable template
## Select your FBX file
## Make sure the Document Resolution is sufficient for your texture maps (highly recommend 4096! Any less and painted on bolts look like crap)
## Click Open ''&lt;INSERT GRAPHIC HERE&gt;''.
# Make sure the UV Map looks OK in Substance Painter. If it doesn’t, you need to go back to Blender and re-unwrap then export a new FBX and return to step 2 above.
# Use the File &gt; Import resources… menu to bring up the Import Resources dialog (shown below) and click on the Add Resource button to bring in the KSP2_Part.spsm file. Repeat this step for the Kerbal Space Program 2 - Standard Damaged.spexp file. Both of these should go into your library as you’re going to need them with every part you make.
## Use the Add Resources button to find the resource you want to import
## Select the file and click the Open button
## Repeat steps (a) and (b) above for as many things as you would like to import
## Select the destination to Import your resources to (hint: library ‘your_assests’ for these!)
## Click Import ''&lt;INSERT GRAPHIC HERE&gt;.''
# Use the process in Step 4 above to bring in any textures you want to use. There are many you can peruse and download for free here: https://substance3d.adobe.com/community-assets
## Note: When importing textures, you can either put them in your library so that you can use them in multiple projects, or you can put them directly in your project if you don’t want them in your library. Either way works.
## You can repeat this step any time, and as often as needed, so don’t worry if you don’t have all the textures you need at the start. It’s also possible to make textures within Substance Painter
# Apply the KSP2 Part material to your whole object and once done delete the default later that Substance Painter provided.
# Locate the Bake button (looks like a croissant) in the upper right of Substance Painter and click it ''&lt;INSERT GRAPHIC HERE&gt;''.
## Uncheck the option to make an Opacity Mesh Map.
## Click the large blue Back Selected Textures button.
## When baking is done, click the Return to Painting Mode button.
# Expand the folder by the KSP2_Part smart material in the Layers panel.
# Expand the folder by the Base Material smart material within the KSP2 Part.
# Search for and select the materials you want to paint your part within the Assets panel.
## Drag a material from the Assets panel onto the Base Material in the Layers panel.
## Right click on that material and add a black mask to it, making sure the resulting mask is selected (there will be a blue border around it).
## Pick the Polygon Fill tool from the tool bar and then select a option from Triangle Fill, Polygon Fill, Mesh Fill, and UV Chunk Fill. ''&lt;INSERT GRAPHIC HERE&gt;'' Use the triangle to paint tris, the square (polygon) for quads, the cube (mesh) for entire objects, and the checkerboard (UV chunk) for connected faces on a side of surface.
# Create a simple material: Example white boron nitride ceramic.
## Click the Add Fill Layer button (paint can) ''&lt;INSERT GRAPHIC HERE&gt;''.
## Drag the new fill layer onto the Base Material folder.
## In the Propertied panel under Materials, leave only color, roughness, and metal selected.
## In the Properties panel set the base color to what you need (white in this case).
## Set the metallic slider to 1.0.
## Set the roughness slider to 0.3.
## Add a black mask to the fill layer.
## Paint like a pro.
# Add “Nails”: This is where you add various surface details via the height map, and works for painting on nuts, bolts, fasteners, etc. All of these can be added as “alphas” like this:
## Import your alpha(s)!
## In Layers, select the black mask for Nails in the Heightmap.
## Select Radial Symmetry (for applications around radially symmetric parts like I've got here).
## Set your X, Y, Z point about which things will be symmetric, where Y is the vertical. (Switch the Show/Hide Manipulator on to help see where this point is in your model).
## Set Mirror Y, the count you want, and the angular span the radial pattern should follow (360 for all the way around).
## With the brush tool active, select your alpha.
## Move your cursor onto the part and see the red dots where the "Nails" will be placed.
## Adjust the size of the "Nail" using [ and ] to make it smaller or larger respectively.
## Click where you want the first "Nail" to appear, this will place them all.
# Add “Stickers”: This is where you add signs, stickers, decals, etc., where the sticker has a uniform color (like a radiation symbol, etc.).
## Import your alpha(s)!
## In Layers, under Base Material, add a fill layer for the sticker.
### Uncheck all material properties for the layer except color, metal, and rough.
### Set the fill color to be what you want the sticker to look like.
### Move the layer to be above any other Base Material layer that impacts the part(s) you’re going to apply stickers to (or it will be overwritten and you won’t see your stickers!)
## Select Radial Symmetry (for applications around radially symmetric parts like I've got here).
## Set your X, Y, Z point about which things will be symmetric, where Y is the vertical. (Switch the Show/Hide Manipulator on to help see where this point is in your model).
## Set Mirror Y, the count you want, and the angular span the radial pattern should follow (360 for all the way around).
## With the brush tool active, select your alpha.
## Move your cursor onto the part and see the red dots where the "Stickers" will be placed.
## Adjust the size of the "Sticker" using [ and ] to make it smaller or larger respectively.
## Click where you want the first "Sticker" to appear, this will place them all.

[[Category:Parts and modules]]</text>
      <sha1>hg7x5uqo0mlkuaobd33h4ml502f4nki</sha1>
    </revision>
    <revision>
      <id>358</id>
      <parentid>357</parentid>
      <timestamp>2024-02-04T22:10:58Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <comment>Added figure numbering for the first two figures</comment>
      <origin>358</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="29932" sha1="27xzccvp0od588ub453t1ayk0v1r5e0" xml:space="preserve">== '''Preamble''' ==
This guide is based on the videos: How to create parts for KSP2 and How to make engines for KSP2 (see: [[Part modding videos (tutorials)]]), and on other notes and guidance from the KSP2 Modding Society discord.

Also the web pages: [https://luxstice.notion.site/KSP2-Part-tutorial-almost-from-scratch-1f336b7c97ae4280afb6a4e3aa6080b2 KSP2 Part tutorial (almost) from scratch], and [https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314 Tutorial: My First Part]

== '''Prerequisites''' ==
You will absolutely need the following things at a bare minimum:

* Unity Editor
* ThunderKit
* Unity KSP Tools
* Addressables Package (Install via Unity Window menu &gt; Package Manager
** Change Packages to Unity Registry
** Search for “addressables”. Click on it and install.

You will generally also need the following things:

* Blender (or other mesh modeling SW that can produce FBX files)
* Various blender addons such as TexTools, etc.
* Substance Painter (or other texture painting tool – could be Blender or Quixel Mixer, but SP is highly recommended since there's a free integration to help make KSP parts)

You probably need a few other things too:

* JSON exports of similar stock parts to show you what some things can or should be set to

== Process ==
This guide covers the part of the process that takes place in the Unity Editor resulting in an assembly you can load as a codeless mod in KSP2, and how to get that result into the game.

In Unity editor start with a fresh scene. This will hold your entire parts pack.

Part Pack Prep

# '''Create Unity Project''': Create a new Unity project with an empty scene. You can use the sample scene.
# '''Install Addressables package''': Open Window &gt; Package Manger and select Packages: Unity Registry. Search for addressables and click Install.
# [[File:Thunderkit Settings.png|alt=Thunderkit Settings|thumb|Figure 1: Thunderkit Settings]][[File:Import Process Complete dialog.png|thumb|Figure 2: Thunderkit: Import Process Complete]]'''Install ThunderKit in Unity'''. See [https://luxstice.notion.site/Installing-ThunderKit-7e00f13efe804f12a31a9f31d7f9fd6e Installing Tunderkit] from the Getting Ready section of the KSP2 Part Tutorial linked above for details. See figures for Thunderkit Settings and Thunderkit Import Process Complete for examples of what to expect in this process.
# '''Install Unity KSP Tools in Unity'''. See Installing KSP2 Unity Tools from the Getting Ready section of the KSP2 Part Tutorial linked above for details. KSP2 Unity Tools takes care of much of the initial setup for you, greatly streamlining the process while reducing the likelihood of errors with a single click &lt;DESCRIBE WHAT NEEDS TO BE CLICKED&gt;. &lt;Describe KSP2 Unity Setup which takes care of swinfo, etc.&gt; 
# '''Create Parts Pack folder''': Under Assets, create a folder (L-Click Assets: Create &gt; Folder) and name it the same as your parts pack mod. If your mod is called My Awesome Mod then this would be Assets\MyAwesomeMod.
# '''Create Materials folder''': Inside your parts pack folder create a folder called Materials. You’ll be storing the textures and materials you need there. E.g., Assets\MyAwesomeMod\Materials. This is just to aid in organization.
# '''Create Parts folder''': Inside your parts pack folder create a folder called Parts. You’ll be storing the part meshes and related things there. E.g., Assets\MyAwesomeMod\Parts. You can have whatever organization you like here, so if you want to group some parts you might create group folders within Parts (e.g., Methalox Engines, Nuclear Engines, Ion Engines, etc.). This is just to aid in organization and is optional.
# '''Create Plugin Folder and Content''': In your KSP2 install’s BepInEx\plugins folder create a folder for your mod. You can name this whatever you like, but it should be unique. This will be the “mod” players will install to have your parts pack and we’ll refer to it as the Base Plugin Folder in this guide.
## Create “localizations” folder: In the base plugin folder, create an “localizations” sub-folder (NOTE! This is currently required to be exactly this – localizations (plural), not localization (singular). This will be where you put the localization files (e.g., english.csv, spanish.csv, etc.).
## Create Localization file(s): Localization files are CSV files following a particular format. These must have lines ending with LF not LF/NL, and they must reference the same &lt;part_name&gt; you use in the Part Production process below. There are some other restrictions for content, particularly that if you want a string that contains a “,” that string needs to be enclosed in quotes or the comma will mess with how the strings are parsed. These files are where the part’s Title, Subtitle, Manufacturer, and Description are configured. Here’s an example:&lt;syntaxhighlight lang="text"&gt;
Key,Type,Desc,English

Parts/Title/spark_spt100,Text,,SPT-100

Parts/Subtitle/ spark_spt100,Text,,Hall Effect Thruster with Xenon Tank

Parts/Manufacturer/spark_spt100,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc."

Parts/Description/spark_spt100,Text,,"The SPT-100 is the pinnacle in tiny (0.625m-class) Ion engines, providing high Isp and low thrust with an integral toroidal xenon tank. Strap this little guy onto a probe core and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!"

Parts/Title/spark_x3,Text,,X3 NHT

Parts/Subtitle/spark_x3,Text,,Three-Channel Nested Hall Effect Thruster

Parts/Manufacturer/spark_x3,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc."

Parts/Description/spark_x3,Text,,"The SPARK X3 is the pinnacle in small (1.25m-class) Ion engines, providing high Isp and low thrust. Strap this bad boy onto your large probe or small capsule and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!"
&lt;/syntaxhighlight&gt;

== Part Production ==

# '''Create Root Part Object''': Create an empty game object under your scene (L-click Scene: Game Object &gt; Create Empty). Name this object the same as your part.
## Recommended naming scheme: &lt;mod_name&gt;_&lt;part_name&gt;. If your mod is called “My Awesome Mod” and your part title is “My Part”, then your part name might be my_awesome_mod_my_part for example. Part names must be unique, though you can have any descriptive title you like (that is done later in Localization). A naming scheme like this helps to prevent naming collisions in case anyone else might make a part they want to call “My Part”, like yours.
# '''Create Model Object''': Create an empty game object under your root part object and name this one “model”.
# '''Create Part Folder''': Create a Part folder named for your part inside your Parts folder. E.g., Assets\MyAwesomeMod\Parts\MyPart, or Assets\MyAwesomeMod\Parts\ThisGroup\MyPart if you’re grouping parts.
# '''Bring in FBX''': Drag a copy of your part’s FBX file into the part folder.
## If you have baked textures for your part that go with the FBX (meaning, they’re based on the UV Unwrap specific to that FBX), then drag those into this same file with the FBX.
# '''Create Part Object''': Drag a copy of the part FBX from the Part folder in Unity to the model object created in step 2. Don’t drag the FBX file from your computer’s files system, you need to use the copy you just placed in step 4. This will create a prefab for your part as a child of the model object.
# '''Unpack Prefab''': Left-Click part object: Prefab &gt; Unpack.
# '''Remove Unnecessary Things''': Remove any parts that came in with the FBX that you don’t actually need in the game like lights, cameras, empty nodes, etc. If it’s not an actual part you want the game to render, then delete it.
# '''Orient Part''': Your model will appear in the Unity scene oriented as you built it in Blender, but this may not be the way you want it to be oriented in the game. If you need changes to the position, rotation, or scale of the part do those now using the Transform panel within the Inspector Window with your part object selected. For example, to flip a part over just give a rotation of 180 in Z, etc.
# '''Create Mesh Object''': L-Click part object: Create Empty. Name this object “mesh”.
# '''Create Collider Object''': L-Click mesh object: Create Empty. Name this object “col”.
# '''Create Collider''': In the Inspector window for the col object click “Add Component”. Search for Mesh Collider and pick it. This will create a Mesh Collider component in the col object. Click the arrowhead to the left of it to expand it and see its properties.
## '''Select Mesh''': In the Mesh Collider properties select the Mesh you want to use. If your FBX is all one object you can pick that, or you can pick a suitable primitive like cube or cylinder, etc.
## '''Position, Rotation, and Scale''': Set the position, rotation, and scale of the mesh to encompass the part. You should see a green mesh represented in the Scene window to help guide you to make sure you’ve got the right position, rotation, and scale.
## '''Convex''': Check “Convex”
# '''Add Core Part Data''': Select your Root Part Object. In the Inspector Window click “Add Component”. Search for “Core Part Data” and pick that. Open it up and configure as follows:
## '''Part Name''': The Part Name needs to be the same as what you’ve used for the Root Part object, i.e., my_awesome_mod_my_part or whatever you used.
## '''Author''': Use what you like here, typically your KSP Forum screen name or whatever you go by as your modding author name.
## '''Category''': Select an appropriate category for your part.
## '''Family''': If you wish to identify a “Family” for your part, this needs to be a particular string. You can find examples in the game’s files, or part JSONS, or ask in the KSP2 Modding Society discord to get this information.
## '''Co Lift, Co Mass, Co Pressure, etc.''': These parameters allow you to set the Center of Lift, Center of Mass, Center of Pressure, etc. Adjust these to get the markers in the Unity scene where they should be for your part. Typically, Co Pressure and Co Lift are in the same place.
## '''Fuel Cross Feed''': Check if fuel should be able to transit through your part on the way to other parts. Typically set to true, but not always.
## '''Mass''': Set this in metric tons, not Kg.
## '''Attach Rules''': Check the types of attachment your part should allow. Checking “Stack” or “Srf Attach” will allow your part to attach in a stack or to a surface. Checking “Allow Stack”, “Allow Srf Attach”, etc. will allow other parts to stack attach or surface attach respectively. ''Currently (?) Allow Collision, Allow Dock, Allow Rotate, and Allow Root have no effect in game (check this)''.
## '''Attach Nodes''': If Stack is checked above, then you need a “top” and a “bottom” node, if Srf Attach is checked above, then you need a “srfAttach” node. Note, node names are case sensitive and having a node is not enough by itself, you do also need the corresponding Attach Rule set true or the node will have no effect. Under Attach Nodes click the + button to add a blank node and configure as needed.
### '''Node ID''': “top”, “bottom”, “srfAttach”, etc. (case sensitive!)
### '''Node Type''': Select as appropriate. (Stack for Stack, Surface for Surface…)
### '''Attach Method''': Select Fixed_Joint for Stack and Hinge_Joint for Surface Attach.
### '''Is Multi Joint''': In general set to True for stack attach to help prevent noodle rockets.
### '''Multi Joint Max Joint''': ''Set to 3 if you set Is Multi Joint to true?''
### '''Position''': Set as appropriate. Should be on the skin or outside of the part where you would expect to find it on your part in the VAB.
### '''Orientation''': Set as appropriate. The Orientation vector should be a unit vector (length 1) pointing in the direction of the part that will attach to the node, so pointing away from your part.
### '''Size''': Affects rigidity of your part. If your part is connected to another part with the same “size” node, then rigidity will be optimal, and otherwise it will be suboptimal.
### '''Visual Size''': Set the same as Size.
### '''Is Resource Crossfeed''': Set as needed for this node.
### '''Is Rigid''': Set as needed for this node.
### ''Rinse and Repeat'': Subsequent nodes created with the + button will inherit settings from the last node made, so this may accelerate the process as you just need to change the Node Id, Position and Orientation for new nodes that are similar to the previous created node.
# '''Add Module_Color''': You need this to be able to paint your part with base and accent colors. As above, click Add Component and search for Module Color.
# '''Add Module_Drag''': All parts need this. As above, click Add Component and search for Module Color.
# '''Add other modules as needed'''. For example, if your part is an engine you’ll also need:
## '''thrustTransform''' object: Create an empty game object as a child of the root part and name it thrustTransform.
## '''Throttle VFX Manager''': Configure as needed (?). No need to drag anywhere, it just need to be a component for the part.
## '''Flameout VFX Data''': Drag this up to the Flameout VFX property in Module_Engine.
## '''Module_Gimbal''': Configure details as needed (e.g., Gimbal Range and Gimbal Speed, etc.), then drag this up to the Gimbal property in Module_Engine.
## '''Module_Generator''': Configure details as needed, then drag this up to the Alternator property in Module_Engine.
## [[File:Module Fairing Data.png|thumb|Figure 3: Example Fairing Data in Unity Editor]]'''Module_Fairing''': Unless you plan for your engine to only ever be on the very first stage (i.e., a big booster), then you probably want it to have a fairing so it can be used in the second stage and above. Figure 3 shows an example for a working fairing from a Size Small (1.25m-class) engine that was created using the process. Shown below is the corresponding example of the PartComponentModule_Fairing portion of  the part JSON. As can be seen in Figure 3, the data fields that need to be populated in the Unity Editor include only a subset of what's in the auto-generated JSON. That said, everything the editor needs is in the example below and presenting it this way makes copy/paste possible where unity editor graphic would not allow that.&lt;syntaxhighlight lang="json"&gt;
      {
        "Name": "PartComponentModule_Fairing",
        "ComponentType": "KSP.Sim.impl.PartComponentModule_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
        "BehaviourType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
        "ModuleData": [
          {
            "Name": "Data_Fairing",
            "ModuleType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
            "DataType": "KSP.Modules.Data_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
            "Data": null,
            "DataObject": {
              "$type": "KSP.Modules.Data_Fairing, Assembly-CSharp",
              "FairingEnabled": {
                "ContextKey": "FairingEnabled",
                "storedValue": true
              },
              "FairingConstructionType": {
                "ContextKey": "FairingConstructionType",
                "storedValue": "CUSTOM"
              },
              "FloatingNodeEnabled": {
                "ContextKey": "FloatingNodeEnabled",
                "storedValue": true
              },
              "Length": {
                "ContextKey": "Length",
                "storedValue": -1.0
              },
              "DeployType": {
                "ContextKey": "DeployType",
                "storedValue": "Clamshellx4"
              },
              "EjectionForce": {
                "ContextKey": "EjectionForce",
                "storedValue": 100.0
              },
              "IsStagingEnabled": {
                "ContextKey": "IsStagingEnabled",
                "storedValue": true
              },
              "IsDeployed": {
                "ContextKey": "IsDeployed",
                "storedValue": false
              },
              "FloatingNodeSize": 1.0,
              "FloatingAttachNodeTag": "bottom",
              "FloatingNodePosition": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "FloatingNodeDirection": {
                "x": 0.0,
                "y": -1.0,
                "z": 0.0
              },
              "FloatingNodeIsMultiJoint": false,
              "FloatingNodeMultiJointMaxCount": 3,
              "FloatingNodeMultiJointOffset": 1.0,
              "FairingNode": "top",
              "NoseTip": 0.5,
              "EdgeWarp": 0.02,
              "AberrantNormalLimit": 45.0,
              "LocalUpAxis": {
                "x": 0.0,
                "y": -1.0,
                "z": 0.0
              },
              "Pivot": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "BaseModelTransformName": "Base",
              "CapRadius": 0.375,
              "BaseRadius": 0.625,
              "CloseRadius": 0.375,
              "MaxRadius": 6.0,
              "SnapThreshold": 0.25,
              "CreateShellColliders": false,
              "NumberOfCollidersPerCrossSection": 12,
              "MinHeightRadiusRatio": 0.07,
              "CrossSectionHeightMin": 0.3,
              "CrossSectionHeightMax": 1.1,
              "AerodynamicallyShieldContents": false,
              "ConeSweepRays": 120,
              "ConeSweepPrecision": 10.0,
              "AmountOfCollidersPerArc": 1,
              "ShouldCapOnAutoGenerate": false,
              "IsCapped": false,
              "IsShroud": true,
              "MassAreaRatio": 0.0,
              "FairingSideCount": 24,
              "FairingLengthSnapIncrement": 0.125,
              "FairingRadiusSnapIncrement": 0.125,
              "FairingSmoothingAngle": 35.0,
              "FairingThickness": 0.025,
              "FairingStartHeight": 0.0,
              "AllowConstructionTypeChange": true,
              "AllowFloatingNodeChange": true,
              "DefaultFairingEnabledToggle": true,
              "DefaultAutoConstruction": true,
              "DefaultDeployType": "Shroud",
              "DefaultFloatingNodeState": true,
              "LengthEditMinimum": 0.0,
              "LengthEditMaximum": 0.001,
              "LengthEditDefault": 1.0,
              "StageToggleDefault": false,
              "MaxAutoFairingTargetRadius": -1,
              "MinAutoFairingTargetRadius": -1,
              "CrossSections": [],
              "MassModifierAmount": 0.0,
              "DragCubeIndex": -1,
              "ModuleType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
              "MassModifier": 0.0,
              "DataType": "KSP.Modules.Data_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
              "IsActiveInStagingProp": {
                "ContextKey": null,
                "storedValue": false
              }
            }
          }
        ]
      }
&lt;/syntaxhighlight&gt;Of the information show above, the parts you will most likely need to customize for your fairing are Base Radius, Cross Section Height Max, and Fairing Thickness - the rest is likely to be the same for all your engines with one other important thing to note. The example above is for an engine that was made in Blender with the nozzle bell facing upwards. If your engine was made with the nozzle bell facing down, then you will need the '''Local Up Axis''' to be -1 in Y and you will also need set the '''Fairing Node''' to bottom.
# '''Apply Options''': Select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and pick “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# '''Save Part JSON''': Click Save Part JSON button at the bottom of the Core Part Data module. This will put the resulting part JSON in the Assets folder for your Unity project. You need to do this any time you’ve edited the Core Part Data module (or also a module it depends on?).
# '''Make Prefab''': Grab the root part object and drag it to the Unity project Assets folder.
# '''Add Part Icon''': Create an icon for your part that the game will use in the parts picker. This needs to be a PNG file with specific dimensions. It should conform to the style used by other parts in the game. However you do this, you need to name the file &lt;part_name&gt;_icon.png, and you need to drag that file into the Assets folder in Unity.
## '''Convert Icon to Sprite''': Select the part icon in the Assets folder. In the Inspector window, click the pulldown menu for Texture Type and change this from Default to Sprite (2D and UI), then click Apply. If this is not done, your lovely icon will not display!
# '''Make Root Part Addressabl'''e: Select the root part’s prefab in the Assets folder and in the Inspector window check the box for Addressable.
# '''Make JSON Addressable''': Select the part’s JSON in the Assets folder and in the Inspector window check the box for Addressable.
# '''Make the Icon Addressable''': Select the root part’s icon in the Assets folder and in the Inspector window check the box for Addressable.
# '''Configure Addressable Properties''': In the Addressables Groups expand the Default Local Group and find your part.
## '''Group Name \ Addressable Name''': Change the information in the Group Name \ Addressable Name from “Assets/&lt;part_name&gt;*” to be just “&lt;part_name&gt;*”. So “Assets/&lt;part_name&gt;.prefab” becomes “&lt;part_name&gt;.prefab”, and so forth. You can leave the “Assets/” part of the path definition alone for each of these, that’s as it should be. The value for the Addressable Name needs to be the same as the file name it’s associated with and must not include any path parts. All of these need to be based on the Part Name established in the Core Part Data module.
## '''Labels''': For the JSON set this to parts_data. Leave it blank for the prefab. If parts_data is not an option in the dropdown for Labels, then click Manage Labels, click the + button to add a new label, and set the Label Name to “parts_data”. Click Save.
# '''Build Mod or Build And Test''': Select either Build Mod or Build And Test to have KSP2 Unity Tools prepare and deploy your parts pack mod.
# '''Launch Game and Test!'''
# '''''Rinse and Repeat for Additional Parts'''''

== Blender Basics for Beginners ==

# If you’re making an engine, put an empty single arrow at the world origin facing in the direction your engine will fire, then move it along the axis of the engine so that it’s at the exit of the engine. Name this object thrustTransform, and keep in mind that size does not matter.
# Make sure all the part objects in your blend have the same material, and that the material has a good name. The material you use for this can be a default material, nothing special is needed.
# Make sure any Boolean modifiers are applied, but array modifiers can be left unapplied.
# Make sure you’ve got a good UV Map (use UV Smart Project) or an excellent one (UV Smart Project followed by Pack Islands). Recommended island spacing for both is 0.003
# When exporting your FBX for use in Substance Painter or any other tool, select only those objects that are actually part of your part and then be sure to check the box for Limit to Selected Objects

== Texturing Tips ==

# Make sure the Kerbal_Space_Program_2_Parts_Paintable.spt file is in your “Documents&gt;Adobe&gt;Substance Painter&gt;Assets&gt;templates” folder. If the templates folder doesn’t exist yet, then create one under Assets and drop that file in it.
# Launch Substance Painter and create a New project.
## In the project creation dialog pick the Kerbal_Space_Program_2_Parts_Paintable template
## Select your FBX file
## Make sure the Document Resolution is sufficient for your texture maps (highly recommend 4096! Any less and painted on bolts look like crap)
## Click Open ''&lt;INSERT GRAPHIC HERE&gt;''.
# Make sure the UV Map looks OK in Substance Painter. If it doesn’t, you need to go back to Blender and re-unwrap then export a new FBX and return to step 2 above.
# Use the File &gt; Import resources… menu to bring up the Import Resources dialog (shown below) and click on the Add Resource button to bring in the KSP2_Part.spsm file. Repeat this step for the Kerbal Space Program 2 - Standard Damaged.spexp file. Both of these should go into your library as you’re going to need them with every part you make.
## Use the Add Resources button to find the resource you want to import
## Select the file and click the Open button
## Repeat steps (a) and (b) above for as many things as you would like to import
## Select the destination to Import your resources to (hint: library ‘your_assests’ for these!)
## Click Import ''&lt;INSERT GRAPHIC HERE&gt;.''
# Use the process in Step 4 above to bring in any textures you want to use. There are many you can peruse and download for free here: https://substance3d.adobe.com/community-assets
## Note: When importing textures, you can either put them in your library so that you can use them in multiple projects, or you can put them directly in your project if you don’t want them in your library. Either way works.
## You can repeat this step any time, and as often as needed, so don’t worry if you don’t have all the textures you need at the start. It’s also possible to make textures within Substance Painter
# Apply the KSP2 Part material to your whole object and once done delete the default later that Substance Painter provided.
# Locate the Bake button (looks like a croissant) in the upper right of Substance Painter and click it ''&lt;INSERT GRAPHIC HERE&gt;''.
## Uncheck the option to make an Opacity Mesh Map.
## Click the large blue Back Selected Textures button.
## When baking is done, click the Return to Painting Mode button.
# Expand the folder by the KSP2_Part smart material in the Layers panel.
# Expand the folder by the Base Material smart material within the KSP2 Part.
# Search for and select the materials you want to paint your part within the Assets panel.
## Drag a material from the Assets panel onto the Base Material in the Layers panel.
## Right click on that material and add a black mask to it, making sure the resulting mask is selected (there will be a blue border around it).
## Pick the Polygon Fill tool from the tool bar and then select a option from Triangle Fill, Polygon Fill, Mesh Fill, and UV Chunk Fill. ''&lt;INSERT GRAPHIC HERE&gt;'' Use the triangle to paint tris, the square (polygon) for quads, the cube (mesh) for entire objects, and the checkerboard (UV chunk) for connected faces on a side of surface.
# Create a simple material: Example white boron nitride ceramic.
## Click the Add Fill Layer button (paint can) ''&lt;INSERT GRAPHIC HERE&gt;''.
## Drag the new fill layer onto the Base Material folder.
## In the Propertied panel under Materials, leave only color, roughness, and metal selected.
## In the Properties panel set the base color to what you need (white in this case).
## Set the metallic slider to 1.0.
## Set the roughness slider to 0.3.
## Add a black mask to the fill layer.
## Paint like a pro.
# Add “Nails”: This is where you add various surface details via the height map, and works for painting on nuts, bolts, fasteners, etc. All of these can be added as “alphas” like this:
## Import your alpha(s)!
## In Layers, select the black mask for Nails in the Heightmap.
## Select Radial Symmetry (for applications around radially symmetric parts like I've got here).
## Set your X, Y, Z point about which things will be symmetric, where Y is the vertical. (Switch the Show/Hide Manipulator on to help see where this point is in your model).
## Set Mirror Y, the count you want, and the angular span the radial pattern should follow (360 for all the way around).
## With the brush tool active, select your alpha.
## Move your cursor onto the part and see the red dots where the "Nails" will be placed.
## Adjust the size of the "Nail" using [ and ] to make it smaller or larger respectively.
## Click where you want the first "Nail" to appear, this will place them all.
# Add “Stickers”: This is where you add signs, stickers, decals, etc., where the sticker has a uniform color (like a radiation symbol, etc.).
## Import your alpha(s)!
## In Layers, under Base Material, add a fill layer for the sticker.
### Uncheck all material properties for the layer except color, metal, and rough.
### Set the fill color to be what you want the sticker to look like.
### Move the layer to be above any other Base Material layer that impacts the part(s) you’re going to apply stickers to (or it will be overwritten and you won’t see your stickers!)
## Select Radial Symmetry (for applications around radially symmetric parts like I've got here).
## Set your X, Y, Z point about which things will be symmetric, where Y is the vertical. (Switch the Show/Hide Manipulator on to help see where this point is in your model).
## Set Mirror Y, the count you want, and the angular span the radial pattern should follow (360 for all the way around).
## With the brush tool active, select your alpha.
## Move your cursor onto the part and see the red dots where the "Stickers" will be placed.
## Adjust the size of the "Sticker" using [ and ] to make it smaller or larger respectively.
## Click where you want the first "Sticker" to appear, this will place them all.

[[Category:Parts and modules]]</text>
      <sha1>27xzccvp0od588ub453t1ayk0v1r5e0</sha1>
    </revision>
    <revision>
      <id>359</id>
      <parentid>358</parentid>
      <timestamp>2024-02-04T22:26:52Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <comment>Updated Step 8 for new process.</comment>
      <origin>359</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="29639" sha1="78020v0dbdw4v3s8xewdmwaec28owol" xml:space="preserve">== '''Preamble''' ==
This guide is based on the videos: How to create parts for KSP2 and How to make engines for KSP2 (see: [[Part modding videos (tutorials)]]), and on other notes and guidance from the KSP2 Modding Society discord.

Also the web pages: [https://luxstice.notion.site/KSP2-Part-tutorial-almost-from-scratch-1f336b7c97ae4280afb6a4e3aa6080b2 KSP2 Part tutorial (almost) from scratch], and [https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314 Tutorial: My First Part]

== '''Prerequisites''' ==
You will absolutely need the following things at a bare minimum:

* Unity Editor
* ThunderKit
* Unity KSP Tools
* Addressables Package (Install via Unity Window menu &gt; Package Manager
** Change Packages to Unity Registry
** Search for “addressables”. Click on it and install.

You will generally also need the following things:

* Blender (or other mesh modeling SW that can produce FBX files)
* Various blender addons such as TexTools, etc.
* Substance Painter (or other texture painting tool – could be Blender or Quixel Mixer, but SP is highly recommended since there's a free integration to help make KSP parts)

You probably need a few other things too:

* JSON exports of similar stock parts to show you what some things can or should be set to

== Process ==
This guide covers the part of the process that takes place in the Unity Editor resulting in an assembly you can load as a codeless mod in KSP2, and how to get that result into the game.

In Unity editor start with a fresh scene. This will hold your entire parts pack.

Part Pack Prep

# '''Create Unity Project''': Create a new Unity project with an empty scene. You can use the sample scene.
# '''Install Addressables package''': Open Window &gt; Package Manger and select Packages: Unity Registry. Search for addressables and click Install.
# [[File:Thunderkit Settings.png|alt=Thunderkit Settings|thumb|Figure 1: Thunderkit Settings]][[File:Import Process Complete dialog.png|thumb|Figure 2: Thunderkit: Import Process Complete]]'''Install ThunderKit in Unity'''. See [https://luxstice.notion.site/Installing-ThunderKit-7e00f13efe804f12a31a9f31d7f9fd6e Installing Tunderkit] from the Getting Ready section of the KSP2 Part Tutorial linked above for details. See figures for Thunderkit Settings and Thunderkit Import Process Complete for examples of what to expect in this process.
# '''Install Unity KSP Tools in Unity'''. See Installing KSP2 Unity Tools from the Getting Ready section of the KSP2 Part Tutorial linked above for details. KSP2 Unity Tools takes care of much of the initial setup for you, greatly streamlining the process while reducing the likelihood of errors with a single click &lt;DESCRIBE WHAT NEEDS TO BE CLICKED&gt;. &lt;Describe KSP2 Unity Setup which takes care of swinfo, etc.&gt; 
# '''Create Parts Pack folder''': Under Assets, create a folder (L-Click Assets: Create &gt; Folder) and name it the same as your parts pack mod. If your mod is called My Awesome Mod then this would be Assets\MyAwesomeMod.
# '''Create Materials folder''': Inside your parts pack folder create a folder called Materials. You’ll be storing the textures and materials you need there. E.g., Assets\MyAwesomeMod\Materials. This is just to aid in organization.
# '''Create Parts folder''': Inside your parts pack folder create a folder called Parts. You’ll be storing the part meshes and related things there. E.g., Assets\MyAwesomeMod\Parts. You can have whatever organization you like here, so if you want to group some parts you might create group folders within Parts (e.g., Methalox Engines, Nuclear Engines, Ion Engines, etc.). This is just to aid in organization and is optional.
# '''Create Plugin Folder and Content''': In your Unity project's Assets\plugin_template folder create a “localizations” folder. NOTE! This is currently required to be exactly this – localizations (plural), not localization (singular). This will be where you put the localization files (e.g., english.csv, spanish.csv, etc.).
## Create Localization file(s): Localization files are CSV files following a particular format. These must have lines ending with LF not LF/NL, and they must reference the same &lt;part_name&gt; you use in the Part Production process below. There are some other restrictions for content, particularly that if you want a string that contains a “,” that string needs to be enclosed in quotes or the comma will mess with how the strings are parsed. These files are where the part’s Title, Subtitle, Manufacturer, and Description are configured. Here’s an example:&lt;syntaxhighlight lang="text"&gt;
Key,Type,Desc,English

Parts/Title/spark_spt100,Text,,SPT-100

Parts/Subtitle/ spark_spt100,Text,,Hall Effect Thruster with Xenon Tank

Parts/Manufacturer/spark_spt100,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc."

Parts/Description/spark_spt100,Text,,"The SPT-100 is the pinnacle in tiny (0.625m-class) Ion engines, providing high Isp and low thrust with an integral toroidal xenon tank. Strap this little guy onto a probe core and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!"

Parts/Title/spark_x3,Text,,X3 NHT

Parts/Subtitle/spark_x3,Text,,Three-Channel Nested Hall Effect Thruster

Parts/Manufacturer/spark_x3,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc."

Parts/Description/spark_x3,Text,,"The SPARK X3 is the pinnacle in small (1.25m-class) Ion engines, providing high Isp and low thrust. Strap this bad boy onto your large probe or small capsule and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!"
&lt;/syntaxhighlight&gt;

== Part Production ==

# '''Create Root Part Object''': Create an empty game object under your scene (L-click Scene: Game Object &gt; Create Empty). Name this object the same as your part.
## Recommended naming scheme: &lt;mod_name&gt;_&lt;part_name&gt;. If your mod is called “My Awesome Mod” and your part title is “My Part”, then your part name might be my_awesome_mod_my_part for example. Part names must be unique, though you can have any descriptive title you like (that is done later in Localization). A naming scheme like this helps to prevent naming collisions in case anyone else might make a part they want to call “My Part”, like yours.
# '''Create Model Object''': Create an empty game object under your root part object and name this one “model”.
# '''Create Part Folder''': Create a Part folder named for your part inside your Parts folder. E.g., Assets\MyAwesomeMod\Parts\MyPart, or Assets\MyAwesomeMod\Parts\ThisGroup\MyPart if you’re grouping parts.
# '''Bring in FBX''': Drag a copy of your part’s FBX file into the part folder.
## If you have baked textures for your part that go with the FBX (meaning, they’re based on the UV Unwrap specific to that FBX), then drag those into this same file with the FBX.
# '''Create Part Object''': Drag a copy of the part FBX from the Part folder in Unity to the model object created in step 2. Don’t drag the FBX file from your computer’s files system, you need to use the copy you just placed in step 4. This will create a prefab for your part as a child of the model object.
# '''Unpack Prefab''': Left-Click part object: Prefab &gt; Unpack.
# '''Remove Unnecessary Things''': Remove any parts that came in with the FBX that you don’t actually need in the game like lights, cameras, empty nodes, etc. If it’s not an actual part you want the game to render, then delete it.
# '''Orient Part''': Your model will appear in the Unity scene oriented as you built it in Blender, but this may not be the way you want it to be oriented in the game. If you need changes to the position, rotation, or scale of the part do those now using the Transform panel within the Inspector Window with your part object selected. For example, to flip a part over just give a rotation of 180 in Z, etc.
# '''Create Mesh Object''': L-Click part object: Create Empty. Name this object “mesh”.
# '''Create Collider Object''': L-Click mesh object: Create Empty. Name this object “col”.
# '''Create Collider''': In the Inspector window for the col object click “Add Component”. Search for Mesh Collider and pick it. This will create a Mesh Collider component in the col object. Click the arrowhead to the left of it to expand it and see its properties.
## '''Select Mesh''': In the Mesh Collider properties select the Mesh you want to use. If your FBX is all one object you can pick that, or you can pick a suitable primitive like cube or cylinder, etc.
## '''Position, Rotation, and Scale''': Set the position, rotation, and scale of the mesh to encompass the part. You should see a green mesh represented in the Scene window to help guide you to make sure you’ve got the right position, rotation, and scale.
## '''Convex''': Check “Convex”
# '''Add Core Part Data''': Select your Root Part Object. In the Inspector Window click “Add Component”. Search for “Core Part Data” and pick that. Open it up and configure as follows:
## '''Part Name''': The Part Name needs to be the same as what you’ve used for the Root Part object, i.e., my_awesome_mod_my_part or whatever you used.
## '''Author''': Use what you like here, typically your KSP Forum screen name or whatever you go by as your modding author name.
## '''Category''': Select an appropriate category for your part.
## '''Family''': If you wish to identify a “Family” for your part, this needs to be a particular string. You can find examples in the game’s files, or part JSONS, or ask in the KSP2 Modding Society discord to get this information.
## '''Co Lift, Co Mass, Co Pressure, etc.''': These parameters allow you to set the Center of Lift, Center of Mass, Center of Pressure, etc. Adjust these to get the markers in the Unity scene where they should be for your part. Typically, Co Pressure and Co Lift are in the same place.
## '''Fuel Cross Feed''': Check if fuel should be able to transit through your part on the way to other parts. Typically set to true, but not always.
## '''Mass''': Set this in metric tons, not Kg.
## '''Attach Rules''': Check the types of attachment your part should allow. Checking “Stack” or “Srf Attach” will allow your part to attach in a stack or to a surface. Checking “Allow Stack”, “Allow Srf Attach”, etc. will allow other parts to stack attach or surface attach respectively. ''Currently (?) Allow Collision, Allow Dock, Allow Rotate, and Allow Root have no effect in game (check this)''.
## '''Attach Nodes''': If Stack is checked above, then you need a “top” and a “bottom” node, if Srf Attach is checked above, then you need a “srfAttach” node. Note, node names are case sensitive and having a node is not enough by itself, you do also need the corresponding Attach Rule set true or the node will have no effect. Under Attach Nodes click the + button to add a blank node and configure as needed.
### '''Node ID''': “top”, “bottom”, “srfAttach”, etc. (case sensitive!)
### '''Node Type''': Select as appropriate. (Stack for Stack, Surface for Surface…)
### '''Attach Method''': Select Fixed_Joint for Stack and Hinge_Joint for Surface Attach.
### '''Is Multi Joint''': In general set to True for stack attach to help prevent noodle rockets.
### '''Multi Joint Max Joint''': ''Set to 3 if you set Is Multi Joint to true?''
### '''Position''': Set as appropriate. Should be on the skin or outside of the part where you would expect to find it on your part in the VAB.
### '''Orientation''': Set as appropriate. The Orientation vector should be a unit vector (length 1) pointing in the direction of the part that will attach to the node, so pointing away from your part.
### '''Size''': Affects rigidity of your part. If your part is connected to another part with the same “size” node, then rigidity will be optimal, and otherwise it will be suboptimal.
### '''Visual Size''': Set the same as Size.
### '''Is Resource Crossfeed''': Set as needed for this node.
### '''Is Rigid''': Set as needed for this node.
### ''Rinse and Repeat'': Subsequent nodes created with the + button will inherit settings from the last node made, so this may accelerate the process as you just need to change the Node Id, Position and Orientation for new nodes that are similar to the previous created node.
# '''Add Module_Color''': You need this to be able to paint your part with base and accent colors. As above, click Add Component and search for Module Color.
# '''Add Module_Drag''': All parts need this. As above, click Add Component and search for Module Color.
# '''Add other modules as needed'''. For example, if your part is an engine you’ll also need:
## '''thrustTransform''' object: Create an empty game object as a child of the root part and name it thrustTransform.
## '''Throttle VFX Manager''': Configure as needed (?). No need to drag anywhere, it just need to be a component for the part.
## '''Flameout VFX Data''': Drag this up to the Flameout VFX property in Module_Engine.
## '''Module_Gimbal''': Configure details as needed (e.g., Gimbal Range and Gimbal Speed, etc.), then drag this up to the Gimbal property in Module_Engine.
## '''Module_Generator''': Configure details as needed, then drag this up to the Alternator property in Module_Engine.
## [[File:Module Fairing Data.png|thumb|Figure 3: Example Fairing Data in Unity Editor]]'''Module_Fairing''': Unless you plan for your engine to only ever be on the very first stage (i.e., a big booster), then you probably want it to have a fairing so it can be used in the second stage and above. Figure 3 shows an example for a working fairing from a Size Small (1.25m-class) engine that was created using the process. Shown below is the corresponding example of the PartComponentModule_Fairing portion of  the part JSON. As can be seen in Figure 3, the data fields that need to be populated in the Unity Editor include only a subset of what's in the auto-generated JSON. That said, everything the editor needs is in the example below and presenting it this way makes copy/paste possible where unity editor graphic would not allow that.&lt;syntaxhighlight lang="json"&gt;
      {
        "Name": "PartComponentModule_Fairing",
        "ComponentType": "KSP.Sim.impl.PartComponentModule_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
        "BehaviourType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
        "ModuleData": [
          {
            "Name": "Data_Fairing",
            "ModuleType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
            "DataType": "KSP.Modules.Data_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
            "Data": null,
            "DataObject": {
              "$type": "KSP.Modules.Data_Fairing, Assembly-CSharp",
              "FairingEnabled": {
                "ContextKey": "FairingEnabled",
                "storedValue": true
              },
              "FairingConstructionType": {
                "ContextKey": "FairingConstructionType",
                "storedValue": "CUSTOM"
              },
              "FloatingNodeEnabled": {
                "ContextKey": "FloatingNodeEnabled",
                "storedValue": true
              },
              "Length": {
                "ContextKey": "Length",
                "storedValue": -1.0
              },
              "DeployType": {
                "ContextKey": "DeployType",
                "storedValue": "Clamshellx4"
              },
              "EjectionForce": {
                "ContextKey": "EjectionForce",
                "storedValue": 100.0
              },
              "IsStagingEnabled": {
                "ContextKey": "IsStagingEnabled",
                "storedValue": true
              },
              "IsDeployed": {
                "ContextKey": "IsDeployed",
                "storedValue": false
              },
              "FloatingNodeSize": 1.0,
              "FloatingAttachNodeTag": "bottom",
              "FloatingNodePosition": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "FloatingNodeDirection": {
                "x": 0.0,
                "y": -1.0,
                "z": 0.0
              },
              "FloatingNodeIsMultiJoint": false,
              "FloatingNodeMultiJointMaxCount": 3,
              "FloatingNodeMultiJointOffset": 1.0,
              "FairingNode": "top",
              "NoseTip": 0.5,
              "EdgeWarp": 0.02,
              "AberrantNormalLimit": 45.0,
              "LocalUpAxis": {
                "x": 0.0,
                "y": -1.0,
                "z": 0.0
              },
              "Pivot": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "BaseModelTransformName": "Base",
              "CapRadius": 0.375,
              "BaseRadius": 0.625,
              "CloseRadius": 0.375,
              "MaxRadius": 6.0,
              "SnapThreshold": 0.25,
              "CreateShellColliders": false,
              "NumberOfCollidersPerCrossSection": 12,
              "MinHeightRadiusRatio": 0.07,
              "CrossSectionHeightMin": 0.3,
              "CrossSectionHeightMax": 1.1,
              "AerodynamicallyShieldContents": false,
              "ConeSweepRays": 120,
              "ConeSweepPrecision": 10.0,
              "AmountOfCollidersPerArc": 1,
              "ShouldCapOnAutoGenerate": false,
              "IsCapped": false,
              "IsShroud": true,
              "MassAreaRatio": 0.0,
              "FairingSideCount": 24,
              "FairingLengthSnapIncrement": 0.125,
              "FairingRadiusSnapIncrement": 0.125,
              "FairingSmoothingAngle": 35.0,
              "FairingThickness": 0.025,
              "FairingStartHeight": 0.0,
              "AllowConstructionTypeChange": true,
              "AllowFloatingNodeChange": true,
              "DefaultFairingEnabledToggle": true,
              "DefaultAutoConstruction": true,
              "DefaultDeployType": "Shroud",
              "DefaultFloatingNodeState": true,
              "LengthEditMinimum": 0.0,
              "LengthEditMaximum": 0.001,
              "LengthEditDefault": 1.0,
              "StageToggleDefault": false,
              "MaxAutoFairingTargetRadius": -1,
              "MinAutoFairingTargetRadius": -1,
              "CrossSections": [],
              "MassModifierAmount": 0.0,
              "DragCubeIndex": -1,
              "ModuleType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
              "MassModifier": 0.0,
              "DataType": "KSP.Modules.Data_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
              "IsActiveInStagingProp": {
                "ContextKey": null,
                "storedValue": false
              }
            }
          }
        ]
      }
&lt;/syntaxhighlight&gt;Of the information show above, the parts you will most likely need to customize for your fairing are Base Radius, Cross Section Height Max, and Fairing Thickness - the rest is likely to be the same for all your engines with one other important thing to note. The example above is for an engine that was made in Blender with the nozzle bell facing upwards. If your engine was made with the nozzle bell facing down, then you will need the '''Local Up Axis''' to be -1 in Y and you will also need set the '''Fairing Node''' to bottom.
# '''Apply Options''': Select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and pick “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# '''Save Part JSON''': Click Save Part JSON button at the bottom of the Core Part Data module. This will put the resulting part JSON in the Assets folder for your Unity project. You need to do this any time you’ve edited the Core Part Data module (or also a module it depends on?).
# '''Make Prefab''': Grab the root part object and drag it to the Unity project Assets folder.
# '''Add Part Icon''': Create an icon for your part that the game will use in the parts picker. This needs to be a PNG file with specific dimensions. It should conform to the style used by other parts in the game. However you do this, you need to name the file &lt;part_name&gt;_icon.png, and you need to drag that file into the Assets folder in Unity.
## '''Convert Icon to Sprite''': Select the part icon in the Assets folder. In the Inspector window, click the pulldown menu for Texture Type and change this from Default to Sprite (2D and UI), then click Apply. If this is not done, your lovely icon will not display!
# '''Make Root Part Addressabl'''e: Select the root part’s prefab in the Assets folder and in the Inspector window check the box for Addressable.
# '''Make JSON Addressable''': Select the part’s JSON in the Assets folder and in the Inspector window check the box for Addressable.
# '''Make the Icon Addressable''': Select the root part’s icon in the Assets folder and in the Inspector window check the box for Addressable.
# '''Configure Addressable Properties''': In the Addressables Groups expand the Default Local Group and find your part.
## '''Group Name \ Addressable Name''': Change the information in the Group Name \ Addressable Name from “Assets/&lt;part_name&gt;*” to be just “&lt;part_name&gt;*”. So “Assets/&lt;part_name&gt;.prefab” becomes “&lt;part_name&gt;.prefab”, and so forth. You can leave the “Assets/” part of the path definition alone for each of these, that’s as it should be. The value for the Addressable Name needs to be the same as the file name it’s associated with and must not include any path parts. All of these need to be based on the Part Name established in the Core Part Data module.
## '''Labels''': For the JSON set this to parts_data. Leave it blank for the prefab. If parts_data is not an option in the dropdown for Labels, then click Manage Labels, click the + button to add a new label, and set the Label Name to “parts_data”. Click Save.
# '''Build Mod or Build And Test''': Select either Build Mod or Build And Test to have KSP2 Unity Tools prepare and deploy your parts pack mod.
# '''Launch Game and Test!'''
# '''''Rinse and Repeat for Additional Parts'''''

== Blender Basics for Beginners ==

# If you’re making an engine, put an empty single arrow at the world origin facing in the direction your engine will fire, then move it along the axis of the engine so that it’s at the exit of the engine. Name this object thrustTransform, and keep in mind that size does not matter.
# Make sure all the part objects in your blend have the same material, and that the material has a good name. The material you use for this can be a default material, nothing special is needed.
# Make sure any Boolean modifiers are applied, but array modifiers can be left unapplied.
# Make sure you’ve got a good UV Map (use UV Smart Project) or an excellent one (UV Smart Project followed by Pack Islands). Recommended island spacing for both is 0.003
# When exporting your FBX for use in Substance Painter or any other tool, select only those objects that are actually part of your part and then be sure to check the box for Limit to Selected Objects

== Texturing Tips ==

# Make sure the Kerbal_Space_Program_2_Parts_Paintable.spt file is in your “Documents&gt;Adobe&gt;Substance Painter&gt;Assets&gt;templates” folder. If the templates folder doesn’t exist yet, then create one under Assets and drop that file in it.
# Launch Substance Painter and create a New project.
## In the project creation dialog pick the Kerbal_Space_Program_2_Parts_Paintable template
## Select your FBX file
## Make sure the Document Resolution is sufficient for your texture maps (highly recommend 4096! Any less and painted on bolts look like crap)
## Click Open ''&lt;INSERT GRAPHIC HERE&gt;''.
# Make sure the UV Map looks OK in Substance Painter. If it doesn’t, you need to go back to Blender and re-unwrap then export a new FBX and return to step 2 above.
# Use the File &gt; Import resources… menu to bring up the Import Resources dialog (shown below) and click on the Add Resource button to bring in the KSP2_Part.spsm file. Repeat this step for the Kerbal Space Program 2 - Standard Damaged.spexp file. Both of these should go into your library as you’re going to need them with every part you make.
## Use the Add Resources button to find the resource you want to import
## Select the file and click the Open button
## Repeat steps (a) and (b) above for as many things as you would like to import
## Select the destination to Import your resources to (hint: library ‘your_assests’ for these!)
## Click Import ''&lt;INSERT GRAPHIC HERE&gt;.''
# Use the process in Step 4 above to bring in any textures you want to use. There are many you can peruse and download for free here: https://substance3d.adobe.com/community-assets
## Note: When importing textures, you can either put them in your library so that you can use them in multiple projects, or you can put them directly in your project if you don’t want them in your library. Either way works.
## You can repeat this step any time, and as often as needed, so don’t worry if you don’t have all the textures you need at the start. It’s also possible to make textures within Substance Painter
# Apply the KSP2 Part material to your whole object and once done delete the default later that Substance Painter provided.
# Locate the Bake button (looks like a croissant) in the upper right of Substance Painter and click it ''&lt;INSERT GRAPHIC HERE&gt;''.
## Uncheck the option to make an Opacity Mesh Map.
## Click the large blue Back Selected Textures button.
## When baking is done, click the Return to Painting Mode button.
# Expand the folder by the KSP2_Part smart material in the Layers panel.
# Expand the folder by the Base Material smart material within the KSP2 Part.
# Search for and select the materials you want to paint your part within the Assets panel.
## Drag a material from the Assets panel onto the Base Material in the Layers panel.
## Right click on that material and add a black mask to it, making sure the resulting mask is selected (there will be a blue border around it).
## Pick the Polygon Fill tool from the tool bar and then select a option from Triangle Fill, Polygon Fill, Mesh Fill, and UV Chunk Fill. ''&lt;INSERT GRAPHIC HERE&gt;'' Use the triangle to paint tris, the square (polygon) for quads, the cube (mesh) for entire objects, and the checkerboard (UV chunk) for connected faces on a side of surface.
# Create a simple material: Example white boron nitride ceramic.
## Click the Add Fill Layer button (paint can) ''&lt;INSERT GRAPHIC HERE&gt;''.
## Drag the new fill layer onto the Base Material folder.
## In the Propertied panel under Materials, leave only color, roughness, and metal selected.
## In the Properties panel set the base color to what you need (white in this case).
## Set the metallic slider to 1.0.
## Set the roughness slider to 0.3.
## Add a black mask to the fill layer.
## Paint like a pro.
# Add “Nails”: This is where you add various surface details via the height map, and works for painting on nuts, bolts, fasteners, etc. All of these can be added as “alphas” like this:
## Import your alpha(s)!
## In Layers, select the black mask for Nails in the Heightmap.
## Select Radial Symmetry (for applications around radially symmetric parts like I've got here).
## Set your X, Y, Z point about which things will be symmetric, where Y is the vertical. (Switch the Show/Hide Manipulator on to help see where this point is in your model).
## Set Mirror Y, the count you want, and the angular span the radial pattern should follow (360 for all the way around).
## With the brush tool active, select your alpha.
## Move your cursor onto the part and see the red dots where the "Nails" will be placed.
## Adjust the size of the "Nail" using [ and ] to make it smaller or larger respectively.
## Click where you want the first "Nail" to appear, this will place them all.
# Add “Stickers”: This is where you add signs, stickers, decals, etc., where the sticker has a uniform color (like a radiation symbol, etc.).
## Import your alpha(s)!
## In Layers, under Base Material, add a fill layer for the sticker.
### Uncheck all material properties for the layer except color, metal, and rough.
### Set the fill color to be what you want the sticker to look like.
### Move the layer to be above any other Base Material layer that impacts the part(s) you’re going to apply stickers to (or it will be overwritten and you won’t see your stickers!)
## Select Radial Symmetry (for applications around radially symmetric parts like I've got here).
## Set your X, Y, Z point about which things will be symmetric, where Y is the vertical. (Switch the Show/Hide Manipulator on to help see where this point is in your model).
## Set Mirror Y, the count you want, and the angular span the radial pattern should follow (360 for all the way around).
## With the brush tool active, select your alpha.
## Move your cursor onto the part and see the red dots where the "Stickers" will be placed.
## Adjust the size of the "Sticker" using [ and ] to make it smaller or larger respectively.
## Click where you want the first "Sticker" to appear, this will place them all.

[[Category:Parts and modules]]</text>
      <sha1>78020v0dbdw4v3s8xewdmwaec28owol</sha1>
    </revision>
    <revision>
      <id>360</id>
      <parentid>359</parentid>
      <timestamp>2024-02-04T22:31:18Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <minor/>
      <comment>fixed typo</comment>
      <origin>360</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="29640" sha1="m4bntpbrm3uvgc86h1pv4zoitj83hhc" xml:space="preserve">== '''Preamble''' ==
This guide is based on the videos: How to create parts for KSP2 and How to make engines for KSP2 (see: [[Part modding videos (tutorials)]]), and on other notes and guidance from the KSP2 Modding Society discord.

Also the web pages: [https://luxstice.notion.site/KSP2-Part-tutorial-almost-from-scratch-1f336b7c97ae4280afb6a4e3aa6080b2 KSP2 Part tutorial (almost) from scratch], and [https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314 Tutorial: My First Part]

== '''Prerequisites''' ==
You will absolutely need the following things at a bare minimum:

* Unity Editor
* ThunderKit
* Unity KSP Tools
* Addressables Package (Install via Unity Window menu &gt; Package Manager
** Change Packages to Unity Registry
** Search for “addressables”. Click on it and install.

You will generally also need the following things:

* Blender (or other mesh modeling SW that can produce FBX files)
* Various blender addons such as TexTools, etc.
* Substance Painter (or other texture painting tool – could be Blender or Quixel Mixer, but SP is highly recommended since there's a free integration to help make KSP parts)

You probably need a few other things too:

* JSON exports of similar stock parts to show you what some things can or should be set to

== Process ==
This guide covers the part of the process that takes place in the Unity Editor resulting in an assembly you can load as a codeless mod in KSP2, and how to get that result into the game.

In Unity editor start with a fresh scene. This will hold your entire parts pack.

Part Pack Prep

# '''Create Unity Project''': Create a new Unity project with an empty scene. You can use the sample scene.
# '''Install Addressables package''': Open Window &gt; Package Manger and select Packages: Unity Registry. Search for addressables and click Install.
# [[File:Thunderkit Settings.png|alt=Thunderkit Settings|thumb|Figure 1: Thunderkit Settings]][[File:Import Process Complete dialog.png|thumb|Figure 2: Thunderkit: Import Process Complete]]'''Install ThunderKit in Unity'''. See [https://luxstice.notion.site/Installing-ThunderKit-7e00f13efe804f12a31a9f31d7f9fd6e Installing Tunderkit] from the Getting Ready section of the KSP2 Part Tutorial linked above for details. See figures for Thunderkit Settings and Thunderkit Import Process Complete for examples of what to expect in this process.
# '''Install Unity KSP Tools in Unity'''. See Installing KSP2 Unity Tools from the Getting Ready section of the KSP2 Part Tutorial linked above for details. KSP2 Unity Tools takes care of much of the initial setup for you, greatly streamlining the process while reducing the likelihood of errors with a single click &lt;DESCRIBE WHAT NEEDS TO BE CLICKED&gt;. &lt;Describe KSP2 Unity Setup which takes care of swinfo, etc.&gt; 
# '''Create Parts Pack folder''': Under Assets, create a folder (L-Click Assets: Create &gt; Folder) and name it the same as your parts pack mod. If your mod is called My Awesome Mod then this would be Assets\MyAwesomeMod.
# '''Create Materials folder''': Inside your parts pack folder create a folder called Materials. You’ll be storing the textures and materials you need there. E.g., Assets\MyAwesomeMod\Materials. This is just to aid in organization.
# '''Create Parts folder''': Inside your parts pack folder create a folder called Parts. You’ll be storing the part meshes and related things there. E.g., Assets\MyAwesomeMod\Parts. You can have whatever organization you like here, so if you want to group some parts you might create group folders within Parts (e.g., Methalox Engines, Nuclear Engines, Ion Engines, etc.). This is just to aid in organization and is optional.
# '''Create Plugin Folder and Content''': In your Unity project's Assets\plugin_template folder create a “localizations” folder. NOTE! This is currently required to be exactly this – localizations (plural), not localization (singular). This will be where you put the localization files (e.g., english.csv, spanish.csv, etc.).
## Create Localization file(s): Localization files are CSV files following a particular format. These must have lines ending with LF not LF/NL, and they must reference the same &lt;part_name&gt; you use in the Part Production process below. There are some other restrictions for content, particularly that if you want a string that contains a “,” that string needs to be enclosed in quotes or the comma will mess with how the strings are parsed. These files are where the part’s Title, Subtitle, Manufacturer, and Description are configured. Here’s an example:&lt;syntaxhighlight lang="text"&gt;
Key,Type,Desc,English

Parts/Title/spark_spt100,Text,,SPT-100

Parts/Subtitle/ spark_spt100,Text,,Hall Effect Thruster with Xenon Tank

Parts/Manufacturer/spark_spt100,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc."

Parts/Description/spark_spt100,Text,,"The SPT-100 is the pinnacle in tiny (0.625m-class) Ion engines, providing high Isp and low thrust with an integral toroidal xenon tank. Strap this little guy onto a probe core and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!"

Parts/Title/spark_x3,Text,,X3 NHT

Parts/Subtitle/spark_x3,Text,,Three-Channel Nested Hall Effect Thruster

Parts/Manufacturer/spark_x3,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc."

Parts/Description/spark_x3,Text,,"The SPARK X3 is the pinnacle in small (1.25m-class) Ion engines, providing high Isp and low thrust. Strap this bad boy onto your large probe or small capsule and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!"
&lt;/syntaxhighlight&gt;

== Part Production ==

# '''Create Root Part Object''': Create an empty game object under your scene (L-click Scene: Game Object &gt; Create Empty). Name this object the same as your part.
## Recommended naming scheme: &lt;mod_name&gt;_&lt;part_name&gt;. If your mod is called “My Awesome Mod” and your part title is “My Part”, then your part name might be my_awesome_mod_my_part for example. Part names must be unique, though you can have any descriptive title you like (that is done later in Localization). A naming scheme like this helps to prevent naming collisions in case anyone else might make a part they want to call “My Part”, like yours.
# '''Create Model Object''': Create an empty game object under your root part object and name this one “model”.
# '''Create Part Folder''': Create a Part folder named for your part inside your Parts folder. E.g., Assets\MyAwesomeMod\Parts\MyPart, or Assets\MyAwesomeMod\Parts\ThisGroup\MyPart if you’re grouping parts.
# '''Bring in FBX''': Drag a copy of your part’s FBX file into the part folder.
## If you have baked textures for your part that go with the FBX (meaning, they’re based on the UV Unwrap specific to that FBX), then drag those into this same file with the FBX.
# '''Create Part Object''': Drag a copy of the part FBX from the Part folder in Unity to the model object created in step 2. Don’t drag the FBX file from your computer’s files system, you need to use the copy you just placed in step 4. This will create a prefab for your part as a child of the model object.
# '''Unpack Prefab''': Left-Click part object: Prefab &gt; Unpack.
# '''Remove Unnecessary Things''': Remove any parts that came in with the FBX that you don’t actually need in the game like lights, cameras, empty nodes, etc. If it’s not an actual part you want the game to render, then delete it.
# '''Orient Part''': Your model will appear in the Unity scene oriented as you built it in Blender, but this may not be the way you want it to be oriented in the game. If you need changes to the position, rotation, or scale of the part do those now using the Transform panel within the Inspector Window with your part object selected. For example, to flip a part over just give a rotation of 180 in Z, etc.
# '''Create Mesh Object''': L-Click part object: Create Empty. Name this object “mesh”.
# '''Create Collider Object''': L-Click mesh object: Create Empty. Name this object “col”.
# '''Create Collider''': In the Inspector window for the col object click “Add Component”. Search for Mesh Collider and pick it. This will create a Mesh Collider component in the col object. Click the arrowhead to the left of it to expand it and see its properties.
## '''Select Mesh''': In the Mesh Collider properties select the Mesh you want to use. If your FBX is all one object you can pick that, or you can pick a suitable primitive like cube or cylinder, etc.
## '''Position, Rotation, and Scale''': Set the position, rotation, and scale of the mesh to encompass the part. You should see a green mesh represented in the Scene window to help guide you to make sure you’ve got the right position, rotation, and scale.
## '''Convex''': Check “Convex”
# '''Add Core Part Data''': Select your Root Part Object. In the Inspector Window click “Add Component”. Search for “Core Part Data” and pick that. Open it up and configure as follows:
## '''Part Name''': The Part Name needs to be the same as what you’ve used for the Root Part object, i.e., my_awesome_mod_my_part or whatever you used.
## '''Author''': Use what you like here, typically your KSP Forum screen name or whatever you go by as your modding author name.
## '''Category''': Select an appropriate category for your part.
## '''Family''': If you wish to identify a “Family” for your part, this needs to be a particular string. You can find examples in the game’s files, or part JSONS, or ask in the KSP2 Modding Society discord to get this information.
## '''Co Lift, Co Mass, Co Pressure, etc.''': These parameters allow you to set the Center of Lift, Center of Mass, Center of Pressure, etc. Adjust these to get the markers in the Unity scene where they should be for your part. Typically, Co Pressure and Co Lift are in the same place.
## '''Fuel Cross Feed''': Check if fuel should be able to transit through your part on the way to other parts. Typically set to true, but not always.
## '''Mass''': Set this in metric tons, not Kg.
## '''Attach Rules''': Check the types of attachment your part should allow. Checking “Stack” or “Srf Attach” will allow your part to attach in a stack or to a surface. Checking “Allow Stack”, “Allow Srf Attach”, etc. will allow other parts to stack attach or surface attach respectively. ''Currently (?) Allow Collision, Allow Dock, Allow Rotate, and Allow Root have no effect in game (check this)''.
## '''Attach Nodes''': If Stack is checked above, then you need a “top” and a “bottom” node, if Srf Attach is checked above, then you need a “srfAttach” node. Note, node names are case sensitive and having a node is not enough by itself, you do also need the corresponding Attach Rule set true or the node will have no effect. Under Attach Nodes click the + button to add a blank node and configure as needed.
### '''Node ID''': “top”, “bottom”, “srfAttach”, etc. (case sensitive!)
### '''Node Type''': Select as appropriate. (Stack for Stack, Surface for Surface…)
### '''Attach Method''': Select Fixed_Joint for Stack and Hinge_Joint for Surface Attach.
### '''Is Multi Joint''': In general set to True for stack attach to help prevent noodle rockets.
### '''Multi Joint Max Joint''': ''Set to 3 if you set Is Multi Joint to true?''
### '''Position''': Set as appropriate. Should be on the skin or outside of the part where you would expect to find it on your part in the VAB.
### '''Orientation''': Set as appropriate. The Orientation vector should be a unit vector (length 1) pointing in the direction of the part that will attach to the node, so pointing away from your part.
### '''Size''': Affects rigidity of your part. If your part is connected to another part with the same “size” node, then rigidity will be optimal, and otherwise it will be suboptimal.
### '''Visual Size''': Set the same as Size.
### '''Is Resource Crossfeed''': Set as needed for this node.
### '''Is Rigid''': Set as needed for this node.
### ''Rinse and Repeat'': Subsequent nodes created with the + button will inherit settings from the last node made, so this may accelerate the process as you just need to change the Node Id, Position and Orientation for new nodes that are similar to the previous created node.
# '''Add Module_Color''': You need this to be able to paint your part with base and accent colors. As above, click Add Component and search for Module Color.
# '''Add Module_Drag''': All parts need this. As above, click Add Component and search for Module Color.
# '''Add other modules as needed'''. For example, if your part is an engine you’ll also need:
## '''thrustTransform''' object: Create an empty game object as a child of the root part and name it thrustTransform.
## '''Throttle VFX Manager''': Configure as needed (?). No need to drag anywhere, it just need to be a component for the part.
## '''Flameout VFX Data''': Drag this up to the Flameout VFX property in Module_Engine.
## '''Module_Gimbal''': Configure details as needed (e.g., Gimbal Range and Gimbal Speed, etc.), then drag this up to the Gimbal property in Module_Engine.
## '''Module_Generator''': Configure details as needed, then drag this up to the Alternator property in Module_Engine.
## [[File:Module Fairing Data.png|thumb|Figure 3: Example Fairing Data in Unity Editor]]'''Module_Fairing''': Unless you plan for your engine to only ever be on the very first stage (i.e., a big booster), then you probably want it to have a fairing so it can be used in the second stage and above. Figure 3 shows an example for a working fairing from a Size Small (1.25m-class) engine that was created using this process. Shown below is the corresponding example of the PartComponentModule_Fairing portion of  the part JSON. As can be seen in Figure 3, the data fields that need to be populated in the Unity Editor include only a subset of what's in the auto-generated JSON. That said, everything the editor needs is in the example below and presenting it this way makes copy/paste possible where unity editor graphic would not allow that.&lt;syntaxhighlight lang="json"&gt;
      {
        "Name": "PartComponentModule_Fairing",
        "ComponentType": "KSP.Sim.impl.PartComponentModule_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
        "BehaviourType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
        "ModuleData": [
          {
            "Name": "Data_Fairing",
            "ModuleType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
            "DataType": "KSP.Modules.Data_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
            "Data": null,
            "DataObject": {
              "$type": "KSP.Modules.Data_Fairing, Assembly-CSharp",
              "FairingEnabled": {
                "ContextKey": "FairingEnabled",
                "storedValue": true
              },
              "FairingConstructionType": {
                "ContextKey": "FairingConstructionType",
                "storedValue": "CUSTOM"
              },
              "FloatingNodeEnabled": {
                "ContextKey": "FloatingNodeEnabled",
                "storedValue": true
              },
              "Length": {
                "ContextKey": "Length",
                "storedValue": -1.0
              },
              "DeployType": {
                "ContextKey": "DeployType",
                "storedValue": "Clamshellx4"
              },
              "EjectionForce": {
                "ContextKey": "EjectionForce",
                "storedValue": 100.0
              },
              "IsStagingEnabled": {
                "ContextKey": "IsStagingEnabled",
                "storedValue": true
              },
              "IsDeployed": {
                "ContextKey": "IsDeployed",
                "storedValue": false
              },
              "FloatingNodeSize": 1.0,
              "FloatingAttachNodeTag": "bottom",
              "FloatingNodePosition": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "FloatingNodeDirection": {
                "x": 0.0,
                "y": -1.0,
                "z": 0.0
              },
              "FloatingNodeIsMultiJoint": false,
              "FloatingNodeMultiJointMaxCount": 3,
              "FloatingNodeMultiJointOffset": 1.0,
              "FairingNode": "top",
              "NoseTip": 0.5,
              "EdgeWarp": 0.02,
              "AberrantNormalLimit": 45.0,
              "LocalUpAxis": {
                "x": 0.0,
                "y": -1.0,
                "z": 0.0
              },
              "Pivot": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "BaseModelTransformName": "Base",
              "CapRadius": 0.375,
              "BaseRadius": 0.625,
              "CloseRadius": 0.375,
              "MaxRadius": 6.0,
              "SnapThreshold": 0.25,
              "CreateShellColliders": false,
              "NumberOfCollidersPerCrossSection": 12,
              "MinHeightRadiusRatio": 0.07,
              "CrossSectionHeightMin": 0.3,
              "CrossSectionHeightMax": 1.1,
              "AerodynamicallyShieldContents": false,
              "ConeSweepRays": 120,
              "ConeSweepPrecision": 10.0,
              "AmountOfCollidersPerArc": 1,
              "ShouldCapOnAutoGenerate": false,
              "IsCapped": false,
              "IsShroud": true,
              "MassAreaRatio": 0.0,
              "FairingSideCount": 24,
              "FairingLengthSnapIncrement": 0.125,
              "FairingRadiusSnapIncrement": 0.125,
              "FairingSmoothingAngle": 35.0,
              "FairingThickness": 0.025,
              "FairingStartHeight": 0.0,
              "AllowConstructionTypeChange": true,
              "AllowFloatingNodeChange": true,
              "DefaultFairingEnabledToggle": true,
              "DefaultAutoConstruction": true,
              "DefaultDeployType": "Shroud",
              "DefaultFloatingNodeState": true,
              "LengthEditMinimum": 0.0,
              "LengthEditMaximum": 0.001,
              "LengthEditDefault": 1.0,
              "StageToggleDefault": false,
              "MaxAutoFairingTargetRadius": -1,
              "MinAutoFairingTargetRadius": -1,
              "CrossSections": [],
              "MassModifierAmount": 0.0,
              "DragCubeIndex": -1,
              "ModuleType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
              "MassModifier": 0.0,
              "DataType": "KSP.Modules.Data_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
              "IsActiveInStagingProp": {
                "ContextKey": null,
                "storedValue": false
              }
            }
          }
        ]
      }
&lt;/syntaxhighlight&gt;Of the information show above, the parts you will most likely need to customize for your fairing are Base Radius, Cross Section Height Max, and Fairing Thickness - the rest is likely to be the same for all your engines with one other important thing to note. The example above is for an engine that was made in Blender with the nozzle bell facing upwards. If your engine was made with the nozzle bell facing down, then you will need the '''Local Up Axis''' to be -1 in Y and you will also need set the '''Fairing Node''' to bottom.
# '''Apply Options''': Select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and pick “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# '''Save Part JSON''': Click Save Part JSON button at the bottom of the Core Part Data module. This will put the resulting part JSON in the Assets folder for your Unity project. You need to do this any time you’ve edited the Core Part Data module (or also a module it depends on?).
# '''Make Prefab''': Grab the root part object and drag it to the Unity project Assets folder.
# '''Add Part Icon''': Create an icon for your part that the game will use in the parts picker. This needs to be a PNG file with specific dimensions. It should conform to the style used by other parts in the game. However you do this, you need to name the file &lt;part_name&gt;_icon.png, and you need to drag that file into the Assets folder in Unity.
## '''Convert Icon to Sprite''': Select the part icon in the Assets folder. In the Inspector window, click the pulldown menu for Texture Type and change this from Default to Sprite (2D and UI), then click Apply. If this is not done, your lovely icon will not display!
# '''Make Root Part Addressabl'''e: Select the root part’s prefab in the Assets folder and in the Inspector window check the box for Addressable.
# '''Make JSON Addressable''': Select the part’s JSON in the Assets folder and in the Inspector window check the box for Addressable.
# '''Make the Icon Addressable''': Select the root part’s icon in the Assets folder and in the Inspector window check the box for Addressable.
# '''Configure Addressable Properties''': In the Addressables Groups expand the Default Local Group and find your part.
## '''Group Name \ Addressable Name''': Change the information in the Group Name \ Addressable Name from “Assets/&lt;part_name&gt;*” to be just “&lt;part_name&gt;*”. So “Assets/&lt;part_name&gt;.prefab” becomes “&lt;part_name&gt;.prefab”, and so forth. You can leave the “Assets/” part of the path definition alone for each of these, that’s as it should be. The value for the Addressable Name needs to be the same as the file name it’s associated with and must not include any path parts. All of these need to be based on the Part Name established in the Core Part Data module.
## '''Labels''': For the JSON set this to parts_data. Leave it blank for the prefab. If parts_data is not an option in the dropdown for Labels, then click Manage Labels, click the + button to add a new label, and set the Label Name to “parts_data”. Click Save.
# '''Build Mod or Build And Test''': Select either Build Mod or Build And Test to have KSP2 Unity Tools prepare and deploy your parts pack mod.
# '''Launch Game and Test!'''
# '''''Rinse and Repeat for Additional Parts'''''

== Blender Basics for Beginners ==

# If you’re making an engine, put an empty single arrow at the world origin facing in the direction your engine will fire, then move it along the axis of the engine so that it’s at the exit of the engine. Name this object thrustTransform, and keep in mind that size does not matter.
# Make sure all the part objects in your blend have the same material, and that the material has a good name. The material you use for this can be a default material, nothing special is needed.
# Make sure any Boolean modifiers are applied, but array modifiers can be left unapplied.
# Make sure you’ve got a good UV Map (use UV Smart Project) or an excellent one (UV Smart Project followed by Pack Islands). Recommended island spacing for both is 0.003
# When exporting your FBX for use in Substance Painter or any other tool, select only those objects that are actually part of your part and then be sure to check the box for Limit to Selected Objects

== Texturing Tips ==

# Make sure the Kerbal_Space_Program_2_Parts_Paintable.spt file is in your “Documents&gt;Adobe&gt;Substance Painter&gt;Assets&gt;templates” folder. If the templates folder doesn’t exist yet, then create one under Assets and drop that file in it.
# Launch Substance Painter and create a New project.
## In the project creation dialog pick the Kerbal_Space_Program_2_Parts_Paintable template
## Select your FBX file
## Make sure the Document Resolution is sufficient for your texture maps (highly recommend 4096! Any less and painted on bolts look like crap)
## Click Open ''&lt;INSERT GRAPHIC HERE&gt;''.
# Make sure the UV Map looks OK in Substance Painter. If it doesn’t, you need to go back to Blender and re-unwrap then export a new FBX and return to step 2 above.
# Use the File &gt; Import resources… menu to bring up the Import Resources dialog (shown below) and click on the Add Resource button to bring in the KSP2_Part.spsm file. Repeat this step for the Kerbal Space Program 2 - Standard Damaged.spexp file. Both of these should go into your library as you’re going to need them with every part you make.
## Use the Add Resources button to find the resource you want to import
## Select the file and click the Open button
## Repeat steps (a) and (b) above for as many things as you would like to import
## Select the destination to Import your resources to (hint: library ‘your_assests’ for these!)
## Click Import ''&lt;INSERT GRAPHIC HERE&gt;.''
# Use the process in Step 4 above to bring in any textures you want to use. There are many you can peruse and download for free here: https://substance3d.adobe.com/community-assets
## Note: When importing textures, you can either put them in your library so that you can use them in multiple projects, or you can put them directly in your project if you don’t want them in your library. Either way works.
## You can repeat this step any time, and as often as needed, so don’t worry if you don’t have all the textures you need at the start. It’s also possible to make textures within Substance Painter
# Apply the KSP2 Part material to your whole object and once done delete the default later that Substance Painter provided.
# Locate the Bake button (looks like a croissant) in the upper right of Substance Painter and click it ''&lt;INSERT GRAPHIC HERE&gt;''.
## Uncheck the option to make an Opacity Mesh Map.
## Click the large blue Back Selected Textures button.
## When baking is done, click the Return to Painting Mode button.
# Expand the folder by the KSP2_Part smart material in the Layers panel.
# Expand the folder by the Base Material smart material within the KSP2 Part.
# Search for and select the materials you want to paint your part within the Assets panel.
## Drag a material from the Assets panel onto the Base Material in the Layers panel.
## Right click on that material and add a black mask to it, making sure the resulting mask is selected (there will be a blue border around it).
## Pick the Polygon Fill tool from the tool bar and then select a option from Triangle Fill, Polygon Fill, Mesh Fill, and UV Chunk Fill. ''&lt;INSERT GRAPHIC HERE&gt;'' Use the triangle to paint tris, the square (polygon) for quads, the cube (mesh) for entire objects, and the checkerboard (UV chunk) for connected faces on a side of surface.
# Create a simple material: Example white boron nitride ceramic.
## Click the Add Fill Layer button (paint can) ''&lt;INSERT GRAPHIC HERE&gt;''.
## Drag the new fill layer onto the Base Material folder.
## In the Propertied panel under Materials, leave only color, roughness, and metal selected.
## In the Properties panel set the base color to what you need (white in this case).
## Set the metallic slider to 1.0.
## Set the roughness slider to 0.3.
## Add a black mask to the fill layer.
## Paint like a pro.
# Add “Nails”: This is where you add various surface details via the height map, and works for painting on nuts, bolts, fasteners, etc. All of these can be added as “alphas” like this:
## Import your alpha(s)!
## In Layers, select the black mask for Nails in the Heightmap.
## Select Radial Symmetry (for applications around radially symmetric parts like I've got here).
## Set your X, Y, Z point about which things will be symmetric, where Y is the vertical. (Switch the Show/Hide Manipulator on to help see where this point is in your model).
## Set Mirror Y, the count you want, and the angular span the radial pattern should follow (360 for all the way around).
## With the brush tool active, select your alpha.
## Move your cursor onto the part and see the red dots where the "Nails" will be placed.
## Adjust the size of the "Nail" using [ and ] to make it smaller or larger respectively.
## Click where you want the first "Nail" to appear, this will place them all.
# Add “Stickers”: This is where you add signs, stickers, decals, etc., where the sticker has a uniform color (like a radiation symbol, etc.).
## Import your alpha(s)!
## In Layers, under Base Material, add a fill layer for the sticker.
### Uncheck all material properties for the layer except color, metal, and rough.
### Set the fill color to be what you want the sticker to look like.
### Move the layer to be above any other Base Material layer that impacts the part(s) you’re going to apply stickers to (or it will be overwritten and you won’t see your stickers!)
## Select Radial Symmetry (for applications around radially symmetric parts like I've got here).
## Set your X, Y, Z point about which things will be symmetric, where Y is the vertical. (Switch the Show/Hide Manipulator on to help see where this point is in your model).
## Set Mirror Y, the count you want, and the angular span the radial pattern should follow (360 for all the way around).
## With the brush tool active, select your alpha.
## Move your cursor onto the part and see the red dots where the "Stickers" will be placed.
## Adjust the size of the "Sticker" using [ and ] to make it smaller or larger respectively.
## Click where you want the first "Sticker" to appear, this will place them all.

[[Category:Parts and modules]]</text>
      <sha1>m4bntpbrm3uvgc86h1pv4zoitj83hhc</sha1>
    </revision>
    <revision>
      <id>427</id>
      <parentid>360</parentid>
      <timestamp>2024-02-23T23:55:18Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <origin>427</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="22812" sha1="0n0xu2ustd79vhccbp7qp5zhxpfwyhx" xml:space="preserve"> Prerequisites:
 [[Setting up Unity]]
The aim of this tutorial is to guide you through the process of creating your first '''part mod''' for Kerbal Space Program 2. We will go over everything from creating the part's mesh and textures to setting up the part in Unity to be bundled into a KSP2 mod.

The way this tutorial will be structured is as a succession of steps which may link to other tutorials on this wiki, do not hesitate to keep this main page open while perusing the other tutorials. We aim at being as comprehensive as possible to enable you to make any part mod, but this page is still work in progress so stuff might be incomplete and/or subject to change in the future.

== Magnificent Mesh Modelling (Creating the part asset) ==
The first step in your part mod creation journey is to create the part's "3D asset", meaning its 3D mesh, textures and eventual animations. You can use any software you're comfortable with to do so but here are some guides for some specific software if you desire:

# [[Modeling the mesh in Blender]]
# [[Texturing the mesh in Substance 3D Painter]]
# [[Preparing the mesh for Unity]]

Here are some resources that can be useful for modelling and texturing, regardless of the software you're using:

* [[Sizes]]
* [[Texturing]]

== Part Pack Prep (Basic Unity part setup) ==
# '''Create Unity Project''': Create a new Unity project with an empty scene. You can use the sample scene.
# '''Install Addressables package''': Open Window &gt; Package Manger and select Packages: Unity Registry. Search for addressables and click Install.
# '''Install ThunderKit in Unity'''. See [https://luxstice.notion.site/Installing-ThunderKit-7e00f13efe804f12a31a9f31d7f9fd6e Installing Tunderkit] from the Getting Ready section of the KSP2 Part Tutorial linked above for details. See figures for Thunderkit Settings and Thunderkit Import Process Complete for examples of what to expect in this process.
# '''Install Unity KSP Tools in Unity'''. See Installing KSP2 Unity Tools from the Getting Ready section of the KSP2 Part Tutorial linked above for details. KSP2 Unity Tools takes care of much of the initial setup for you, greatly streamlining the process while reducing the likelihood of errors with a single click &lt;DESCRIBE WHAT NEEDS TO BE CLICKED&gt;. &lt;Describe KSP2 Unity Setup which takes care of swinfo, etc.&gt;[[File:Thunderkit Settings.png|alt=Thunderkit Settings|thumb|Figure 1: Thunderkit Settings]][[File:Import Process Complete dialog.png|thumb|Figure 2: Thunderkit: Import Process Complete]]
# '''Create Parts Pack folder''': Under Assets, create a folder (L-Click Assets: Create &gt; Folder) and name it the same as your parts pack mod. If your mod is called My Awesome Mod then this would be Assets\MyAwesomeMod.
# '''Create Materials folder''': Inside your parts pack folder create a folder called Materials. You’ll be storing the textures and materials you need there. E.g., Assets\MyAwesomeMod\Materials. This is just to aid in organization.
# '''Create Parts folder''': Inside your parts pack folder create a folder called Parts. You’ll be storing the part meshes and related things there. E.g., Assets\MyAwesomeMod\Parts. You can have whatever organization you like here, so if you want to group some parts you might create group folders within Parts (e.g., Methalox Engines, Nuclear Engines, Ion Engines, etc.). This is just to aid in organization and is optional.
# '''Create Plugin Folder and Content''': In your Unity project's Assets\plugin_template folder create a “localizations” folder. NOTE! This is currently required to be exactly this – localizations (plural), not localization (singular). This will be where you put the localization files (e.g., english.csv, spanish.csv, etc.).
## Create Localization file(s): Localization files are CSV files following a particular format. These must have lines ending with LF not LF/NL, and they must reference the same &lt;part_name&gt; you use in the Part Production process below. There are some other restrictions for content, particularly that if you want a string that contains a “,” that string needs to be enclosed in quotes or the comma will mess with how the strings are parsed. These files are where the part’s Title, Subtitle, Manufacturer, and Description are configured. Here’s an example:&lt;syntaxhighlight lang="text"&gt;
Key,Type,Desc,English

Parts/Title/spark_spt100,Text,,SPT-100

Parts/Subtitle/ spark_spt100,Text,,Hall Effect Thruster with Xenon Tank

Parts/Manufacturer/spark_spt100,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc."

Parts/Description/spark_spt100,Text,,"The SPT-100 is the pinnacle in tiny (0.625m-class) Ion engines, providing high Isp and low thrust with an integral toroidal xenon tank. Strap this little guy onto a probe core and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!"

Parts/Title/spark_x3,Text,,X3 NHT

Parts/Subtitle/spark_x3,Text,,Three-Channel Nested Hall Effect Thruster

Parts/Manufacturer/spark_x3,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc."

Parts/Description/spark_x3,Text,,"The SPARK X3 is the pinnacle in small (1.25m-class) Ion engines, providing high Isp and low thrust. Strap this bad boy onto your large probe or small capsule and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!"
&lt;/syntaxhighlight&gt;

== Part Production ==

# '''Create Root Part Object''': Create an empty game object under your scene (L-click Scene: Game Object &gt; Create Empty). Name this object the same as your part.
## Recommended naming scheme: &lt;mod_name&gt;_&lt;part_name&gt;. If your mod is called “My Awesome Mod” and your part title is “My Part”, then your part name might be my_awesome_mod_my_part for example. Part names must be unique, though you can have any descriptive title you like (that is done later in Localization). A naming scheme like this helps to prevent naming collisions in case anyone else might make a part they want to call “My Part”, like yours.
# '''Create Model Object''': Create an empty game object under your root part object and name this one “model”.
# '''Create Part Folder''': Create a Part folder named for your part inside your Parts folder. E.g., Assets\MyAwesomeMod\Parts\MyPart, or Assets\MyAwesomeMod\Parts\ThisGroup\MyPart if you’re grouping parts.
# '''Bring in FBX''': Drag a copy of your part’s FBX file into the part folder.
## If you have baked textures for your part that go with the FBX (meaning, they’re based on the UV Unwrap specific to that FBX), then drag those into this same file with the FBX.
# '''Create Part Object''': Drag a copy of the part FBX from the Part folder in Unity to the model object created in step 2. Don’t drag the FBX file from your computer’s files system, you need to use the copy you just placed in step 4. This will create a prefab for your part as a child of the model object.
# '''Unpack Prefab''': Left-Click part object: Prefab &gt; Unpack.
# '''Remove Unnecessary Things''': Remove any parts that came in with the FBX that you don’t actually need in the game like lights, cameras, empty nodes, etc. If it’s not an actual part you want the game to render, then delete it.
# '''Orient Part''': Your model will appear in the Unity scene oriented as you built it in Blender, but this may not be the way you want it to be oriented in the game. If you need changes to the position, rotation, or scale of the part do those now using the Transform panel within the Inspector Window with your part object selected. For example, to flip a part over just give a rotation of 180 in Z, etc.
# '''Create Mesh Object''': L-Click part object: Create Empty. Name this object “mesh”.
# '''Create Collider Object''': L-Click mesh object: Create Empty. Name this object “col”.
# '''Create Collider''': In the Inspector window for the col object click “Add Component”. Search for Mesh Collider and pick it. This will create a Mesh Collider component in the col object. Click the arrowhead to the left of it to expand it and see its properties.
## '''Select Mesh''': In the Mesh Collider properties select the Mesh you want to use. If your FBX is all one object you can pick that, or you can pick a suitable primitive like cube or cylinder, etc.
## '''Position, Rotation, and Scale''': Set the position, rotation, and scale of the mesh to encompass the part. You should see a green mesh represented in the Scene window to help guide you to make sure you’ve got the right position, rotation, and scale.
## '''Convex''': Check “Convex”
# '''Add Core Part Data''': Select your Root Part Object. In the Inspector Window click “Add Component”. Search for “Core Part Data” and pick that. Open it up and configure as follows:
## '''Part Name''': The Part Name needs to be the same as what you’ve used for the Root Part object, i.e., my_awesome_mod_my_part or whatever you used.
## '''Author''': Use what you like here, typically your KSP Forum screen name or whatever you go by as your modding author name.
## '''Category''': Select an appropriate category for your part.
## '''Family''': If you wish to identify a “Family” for your part, this needs to be a particular string. You can find examples in the game’s files, or part JSONS, or ask in the KSP2 Modding Society discord to get this information.
## '''Co Lift, Co Mass, Co Pressure, etc.''': These parameters allow you to set the Center of Lift, Center of Mass, Center of Pressure, etc. Adjust these to get the markers in the Unity scene where they should be for your part. Typically, Co Pressure and Co Lift are in the same place.
## '''Fuel Cross Feed''': Check if fuel should be able to transit through your part on the way to other parts. Typically set to true, but not always.
## '''Mass''': Set this in metric tons, not Kg.
## '''Attach Rules''': Check the types of attachment your part should allow. Checking “Stack” or “Srf Attach” will allow your part to attach in a stack or to a surface. Checking “Allow Stack”, “Allow Srf Attach”, etc. will allow other parts to stack attach or surface attach respectively. ''Currently (?) Allow Collision, Allow Dock, Allow Rotate, and Allow Root have no effect in game (check this)''.
## '''Attach Nodes''': If Stack is checked above, then you need a “top” and a “bottom” node, if Srf Attach is checked above, then you need a “srfAttach” node. Note, node names are case sensitive and having a node is not enough by itself, you do also need the corresponding Attach Rule set true or the node will have no effect. Under Attach Nodes click the + button to add a blank node and configure as needed.
### '''Node ID''': “top”, “bottom”, “srfAttach”, etc. (case sensitive!)
### '''Node Type''': Select as appropriate. (Stack for Stack, Surface for Surface…)
### '''Attach Method''': Select Fixed_Joint for Stack and Hinge_Joint for Surface Attach.
### '''Is Multi Joint''': In general set to True for stack attach to help prevent noodle rockets.
### '''Multi Joint Max Joint''': ''Set to 3 if you set Is Multi Joint to true?''
### '''Position''': Set as appropriate. Should be on the skin or outside of the part where you would expect to find it on your part in the VAB.
### '''Orientation''': Set as appropriate. The Orientation vector should be a unit vector (length 1) pointing in the direction of the part that will attach to the node, so pointing away from your part.
### '''Size''': Affects rigidity of your part. If your part is connected to another part with the same “size” node, then rigidity will be optimal, and otherwise it will be suboptimal.
### '''Visual Size''': Set the same as Size.
### '''Is Resource Crossfeed''': Set as needed for this node.
### '''Is Rigid''': Set as needed for this node.
### ''Rinse and Repeat'': Subsequent nodes created with the + button will inherit settings from the last node made, so this may accelerate the process as you just need to change the Node Id, Position and Orientation for new nodes that are similar to the previous created node.
# '''Add Module_Color''': You need this to be able to paint your part with base and accent colors. As above, click Add Component and search for Module Color.
# '''Add Module_Drag''': All parts need this. As above, click Add Component and search for Module Color.
# '''Add other modules as needed'''. For example, if your part is an engine you’ll also need:
## '''thrustTransform''' object: Create an empty game object as a child of the root part and name it thrustTransform.
## '''Throttle VFX Manager''': Configure as needed (?). No need to drag anywhere, it just need to be a component for the part.
## '''Flameout VFX Data''': Drag this up to the Flameout VFX property in Module_Engine.
## '''Module_Gimbal''': Configure details as needed (e.g., Gimbal Range and Gimbal Speed, etc.), then drag this up to the Gimbal property in Module_Engine.
## '''Module_Generator''': Configure details as needed, then drag this up to the Alternator property in Module_Engine.
## [[File:Module Fairing Data.png|thumb|Figure 3: Example Fairing Data in Unity Editor]]'''Module_Fairing''': Unless you plan for your engine to only ever be on the very first stage (i.e., a big booster), then you probably want it to have a fairing so it can be used in the second stage and above. Figure 3 shows an example for a working fairing from a Size Small (1.25m-class) engine that was created using this process. Shown below is the corresponding example of the PartComponentModule_Fairing portion of  the part JSON. As can be seen in Figure 3, the data fields that need to be populated in the Unity Editor include only a subset of what's in the auto-generated JSON. That said, everything the editor needs is in the example below and presenting it this way makes copy/paste possible where unity editor graphic would not allow that.&lt;syntaxhighlight lang="json"&gt;
      {
        "Name": "PartComponentModule_Fairing",
        "ComponentType": "KSP.Sim.impl.PartComponentModule_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
        "BehaviourType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
        "ModuleData": [
          {
            "Name": "Data_Fairing",
            "ModuleType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
            "DataType": "KSP.Modules.Data_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
            "Data": null,
            "DataObject": {
              "$type": "KSP.Modules.Data_Fairing, Assembly-CSharp",
              "FairingEnabled": {
                "ContextKey": "FairingEnabled",
                "storedValue": true
              },
              "FairingConstructionType": {
                "ContextKey": "FairingConstructionType",
                "storedValue": "CUSTOM"
              },
              "FloatingNodeEnabled": {
                "ContextKey": "FloatingNodeEnabled",
                "storedValue": true
              },
              "Length": {
                "ContextKey": "Length",
                "storedValue": -1.0
              },
              "DeployType": {
                "ContextKey": "DeployType",
                "storedValue": "Clamshellx4"
              },
              "EjectionForce": {
                "ContextKey": "EjectionForce",
                "storedValue": 100.0
              },
              "IsStagingEnabled": {
                "ContextKey": "IsStagingEnabled",
                "storedValue": true
              },
              "IsDeployed": {
                "ContextKey": "IsDeployed",
                "storedValue": false
              },
              "FloatingNodeSize": 1.0,
              "FloatingAttachNodeTag": "bottom",
              "FloatingNodePosition": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "FloatingNodeDirection": {
                "x": 0.0,
                "y": -1.0,
                "z": 0.0
              },
              "FloatingNodeIsMultiJoint": false,
              "FloatingNodeMultiJointMaxCount": 3,
              "FloatingNodeMultiJointOffset": 1.0,
              "FairingNode": "top",
              "NoseTip": 0.5,
              "EdgeWarp": 0.02,
              "AberrantNormalLimit": 45.0,
              "LocalUpAxis": {
                "x": 0.0,
                "y": -1.0,
                "z": 0.0
              },
              "Pivot": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "BaseModelTransformName": "Base",
              "CapRadius": 0.375,
              "BaseRadius": 0.625,
              "CloseRadius": 0.375,
              "MaxRadius": 6.0,
              "SnapThreshold": 0.25,
              "CreateShellColliders": false,
              "NumberOfCollidersPerCrossSection": 12,
              "MinHeightRadiusRatio": 0.07,
              "CrossSectionHeightMin": 0.3,
              "CrossSectionHeightMax": 1.1,
              "AerodynamicallyShieldContents": false,
              "ConeSweepRays": 120,
              "ConeSweepPrecision": 10.0,
              "AmountOfCollidersPerArc": 1,
              "ShouldCapOnAutoGenerate": false,
              "IsCapped": false,
              "IsShroud": true,
              "MassAreaRatio": 0.0,
              "FairingSideCount": 24,
              "FairingLengthSnapIncrement": 0.125,
              "FairingRadiusSnapIncrement": 0.125,
              "FairingSmoothingAngle": 35.0,
              "FairingThickness": 0.025,
              "FairingStartHeight": 0.0,
              "AllowConstructionTypeChange": true,
              "AllowFloatingNodeChange": true,
              "DefaultFairingEnabledToggle": true,
              "DefaultAutoConstruction": true,
              "DefaultDeployType": "Shroud",
              "DefaultFloatingNodeState": true,
              "LengthEditMinimum": 0.0,
              "LengthEditMaximum": 0.001,
              "LengthEditDefault": 1.0,
              "StageToggleDefault": false,
              "MaxAutoFairingTargetRadius": -1,
              "MinAutoFairingTargetRadius": -1,
              "CrossSections": [],
              "MassModifierAmount": 0.0,
              "DragCubeIndex": -1,
              "ModuleType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
              "MassModifier": 0.0,
              "DataType": "KSP.Modules.Data_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
              "IsActiveInStagingProp": {
                "ContextKey": null,
                "storedValue": false
              }
            }
          }
        ]
      }
&lt;/syntaxhighlight&gt;Of the information show above, the parts you will most likely need to customize for your fairing are Base Radius, Cross Section Height Max, and Fairing Thickness - the rest is likely to be the same for all your engines with one other important thing to note. The example above is for an engine that was made in Blender with the nozzle bell facing upwards. If your engine was made with the nozzle bell facing down, then you will need the '''Local Up Axis''' to be -1 in Y and you will also need set the '''Fairing Node''' to bottom.
# '''Apply Options''': Select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and pick “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# '''Save Part JSON''': Click Save Part JSON button at the bottom of the Core Part Data module. This will put the resulting part JSON in the Assets folder for your Unity project. You need to do this any time you’ve edited the Core Part Data module (or also a module it depends on?).
# '''Make Prefab''': Grab the root part object and drag it to the Unity project Assets folder.
# '''Add Part Icon''': Create an icon for your part that the game will use in the parts picker. This needs to be a PNG file with specific dimensions. It should conform to the style used by other parts in the game. However you do this, you need to name the file &lt;part_name&gt;_icon.png, and you need to drag that file into the Assets folder in Unity.
## '''Convert Icon to Sprite''': Select the part icon in the Assets folder. In the Inspector window, click the pulldown menu for Texture Type and change this from Default to Sprite (2D and UI), then click Apply. If this is not done, your lovely icon will not display!
# '''Make Root Part Addressabl'''e: Select the root part’s prefab in the Assets folder and in the Inspector window check the box for Addressable.
# '''Make JSON Addressable''': Select the part’s JSON in the Assets folder and in the Inspector window check the box for Addressable.
# '''Make the Icon Addressable''': Select the root part’s icon in the Assets folder and in the Inspector window check the box for Addressable.
# '''Configure Addressable Properties''': In the Addressables Groups expand the Default Local Group and find your part.
## '''Group Name \ Addressable Name''': Change the information in the Group Name \ Addressable Name from “Assets/&lt;part_name&gt;*” to be just “&lt;part_name&gt;*”. So “Assets/&lt;part_name&gt;.prefab” becomes “&lt;part_name&gt;.prefab”, and so forth. You can leave the “Assets/” part of the path definition alone for each of these, that’s as it should be. The value for the Addressable Name needs to be the same as the file name it’s associated with and must not include any path parts. All of these need to be based on the Part Name established in the Core Part Data module.
## '''Labels''': For the JSON set this to parts_data. Leave it blank for the prefab. If parts_data is not an option in the dropdown for Labels, then click Manage Labels, click the + button to add a new label, and set the Label Name to “parts_data”. Click Save.
# '''Build Mod or Build And Test''': Select either Build Mod or Build And Test to have KSP2 Unity Tools prepare and deploy your parts pack mod.
# '''Launch Game and Test!'''
# '''''Rinse and Repeat for Additional Parts'''''
== '''Mentions''' ==
This guide is based on the videos: How to create parts for KSP2 and How to make engines for KSP2 (see: [[Part modding videos (tutorials)]]), and on other notes and guidance from the KSP2 Modding Society discord.

Also the web pages: [https://luxstice.notion.site/KSP2-Part-tutorial-almost-from-scratch-1f336b7c97ae4280afb6a4e3aa6080b2 KSP2 Part tutorial (almost) from scratch], and [https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314 Tutorial: My First Part]

[[Category:Parts and modules]]</text>
      <sha1>0n0xu2ustd79vhccbp7qp5zhxpfwyhx</sha1>
    </revision>
    <revision>
      <id>428</id>
      <parentid>427</parentid>
      <timestamp>2024-02-24T00:12:13Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <origin>428</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="22777" sha1="db8xg2xjef6g9g7k9vj9czfrlfz6gr6" xml:space="preserve">The aim of this tutorial is to guide you through the process of creating your first '''part mod''' for Kerbal Space Program 2. We will go over everything from creating the part's mesh and textures to setting up the part in Unity to be bundled into a KSP2 mod.

The way this tutorial will be structured is as a succession of steps which may link to other tutorials on this wiki, do not hesitate to keep this main page open while perusing the other tutorials. We aim at being as comprehensive as possible to enable you to make any part mod, but this page is still work in progress so stuff might be incomplete and/or subject to change in the future.

== Magnificent Mesh Modelling (Creating the part asset) ==
The first step in your part mod creation journey is to create the part's "3D asset", meaning its 3D mesh, textures and eventual animations. You can use any software you're comfortable with to do so but here are some guides for some specific software if you desire:

# [[Modeling the mesh in Blender]]
# [[Texturing the mesh in Substance 3D Painter]]
# [[Preparing the mesh for Unity]]

Here are some resources that can be useful for modelling and texturing, regardless of the software you're using:

* [[Sizes]]
* [[Texturing]]

== Part Pack Prep (Basic Unity part mod project setup) ==
Now that you have created a model and textures for your part, the next step is to set up a Unity project that will be used to configure your part and build the asset bundles that will contain your mod's contents.

# '''Creating the project:''' Follow the [[Setting up Unity]] tutorial to create and set up a project for part modding.
# '''Parts Pack folder''': Under Assets, create a folder (R-Click Assets: Create &gt; Folder) and name it the same as your parts pack mod. If your mod is called My Awesome Mod then this would be &lt;code&gt;Assets\MyAwesomeMod&lt;/code&gt;.
# '''Materials folder''': Inside your parts pack folder create a folder called Materials. You’ll be storing the textures and materials you need there. E.g., &lt;code&gt;Assets\MyAwesomeMod\Materials&lt;/code&gt;. This is just to aid in organization.
# '''Parts folder''': Inside your parts pack folder create a folder called Parts. You’ll be storing the part meshes and related things there. E.g., &lt;code&gt;Assets\MyAwesomeMod\Parts&lt;/code&gt;. You can have whatever organization you like here, so if you want to group some parts you might create group folders within Parts (e.g., Methalox Engines, Nuclear Engines, Ion Engines, etc.). This is just to aid in organization and is optional.
# '''Plugin Folder and Content''': In your Unity project's &lt;code&gt;Assets\plugin_template&lt;/code&gt; folder create a &lt;code&gt;localizations&lt;/code&gt; folder. '''NOTE!''' This is currently required to be exactly this – localizations (plural), not localization (singular). This will be where you put the localization file.
## Create Localization file: Localization files are CSV files following a particular format. These must have lines ending with LF not LF/NL, and they must reference the same &lt;part_name&gt; you use in the Part Production process below. There are some other restrictions for content, particularly that if you want a string that contains a “,” that string needs to be enclosed in quotes or the comma will mess with how the strings are parsed. These files are where the part’s Title, Subtitle, Manufacturer, and Description are configured. Here’s an example:&lt;syntaxhighlight lang="text"&gt;
Key,Type,Desc,English,French

Parts/Title/spark_spt100,Text,,SPT-100,SPT-100
Parts/Subtitle/spark_spt100,Text,,Hall Effect Thruster with Xenon Tank,Moteur à Effet Hall et Réservoir de Xénon
Parts/Manufacturer/spark_spt100,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc.","Stellar Plasma-Assisted Rocket Kinetics, inc."
Parts/Description/spark_spt100,Text,,"The SPT-100 is the pinnacle in tiny (0.625m-class) Ion engines, providing high Isp and low thrust with an integral toroidal xenon tank. Strap this little guy onto a probe core and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!","Le SPT-100 a le dessus dans la catégorie des très petits (0.625m) moteurs ioniques, avec une haute impulsion spécifique et une poussée faible ainsi qu'un réservoir toroïdal de xénon intégré. Accrochez ce petit gars à vos sondes et assurez-vous d'avoir du stock d'électrons car vous allez aller de partout bien lentement!"

Parts/Title/spark_x3,Text,,X3 NHT,X3 NHT
Parts/Subtitle/spark_x3,Text,,Three-Channel Nested Hall Effect Thruster,Moteur à Effet Hall à 3 Canaux Concentriques
Parts/Manufacturer/spark_x3,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc.","Stellar Plasma-Assisted Rocket Kinetics, inc."
Parts/Description/spark_x3,Text,,"The SPARK X3 is the pinnacle in small (1.25m-class) Ion engines, providing high Isp and low thrust. Strap this bad boy onto your large probe or small capsule and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!","Le SPARK X3 a le dessus dans la catégorie des petits (1.25m) moteurs ioniques, avec une haute impulsion spécifique et une poussée faible ainsi qu'un réservoir toroïdal de xénon intégré. Accrochez ce petit gars à vos grandes sondes et assurez-vous d'avoir du stock d'électrons car vous allez aller de partout bien lentement!"
&lt;/syntaxhighlight&gt;

== Part Production ==

# '''Create Root Part Object''': Create an empty game object under your scene (L-click Scene: Game Object &gt; Create Empty). Name this object the same as your part.
## Recommended naming scheme: &lt;mod_name&gt;_&lt;part_name&gt;. If your mod is called “My Awesome Mod” and your part title is “My Part”, then your part name might be my_awesome_mod_my_part for example. Part names must be unique, though you can have any descriptive title you like (that is done later in Localization). A naming scheme like this helps to prevent naming collisions in case anyone else might make a part they want to call “My Part”, like yours.
# '''Create Model Object''': Create an empty game object under your root part object and name this one “model”.
# '''Create Part Folder''': Create a Part folder named for your part inside your Parts folder. E.g., Assets\MyAwesomeMod\Parts\MyPart, or Assets\MyAwesomeMod\Parts\ThisGroup\MyPart if you’re grouping parts.
# '''Bring in FBX''': Drag a copy of your part’s FBX file into the part folder.
## If you have baked textures for your part that go with the FBX (meaning, they’re based on the UV Unwrap specific to that FBX), then drag those into this same file with the FBX.
# '''Create Part Object''': Drag a copy of the part FBX from the Part folder in Unity to the model object created in step 2. Don’t drag the FBX file from your computer’s files system, you need to use the copy you just placed in step 4. This will create a prefab for your part as a child of the model object.
# '''Unpack Prefab''': Left-Click part object: Prefab &gt; Unpack.
# '''Remove Unnecessary Things''': Remove any parts that came in with the FBX that you don’t actually need in the game like lights, cameras, empty nodes, etc. If it’s not an actual part you want the game to render, then delete it.
# '''Orient Part''': Your model will appear in the Unity scene oriented as you built it in Blender, but this may not be the way you want it to be oriented in the game. If you need changes to the position, rotation, or scale of the part do those now using the Transform panel within the Inspector Window with your part object selected. For example, to flip a part over just give a rotation of 180 in Z, etc.
# '''Create Mesh Object''': L-Click part object: Create Empty. Name this object “mesh”.
# '''Create Collider Object''': L-Click mesh object: Create Empty. Name this object “col”.
# '''Create Collider''': In the Inspector window for the col object click “Add Component”. Search for Mesh Collider and pick it. This will create a Mesh Collider component in the col object. Click the arrowhead to the left of it to expand it and see its properties.
## '''Select Mesh''': In the Mesh Collider properties select the Mesh you want to use. If your FBX is all one object you can pick that, or you can pick a suitable primitive like cube or cylinder, etc.
## '''Position, Rotation, and Scale''': Set the position, rotation, and scale of the mesh to encompass the part. You should see a green mesh represented in the Scene window to help guide you to make sure you’ve got the right position, rotation, and scale.
## '''Convex''': Check “Convex”
# '''Add Core Part Data''': Select your Root Part Object. In the Inspector Window click “Add Component”. Search for “Core Part Data” and pick that. Open it up and configure as follows:
## '''Part Name''': The Part Name needs to be the same as what you’ve used for the Root Part object, i.e., my_awesome_mod_my_part or whatever you used.
## '''Author''': Use what you like here, typically your KSP Forum screen name or whatever you go by as your modding author name.
## '''Category''': Select an appropriate category for your part.
## '''Family''': If you wish to identify a “Family” for your part, this needs to be a particular string. You can find examples in the game’s files, or part JSONS, or ask in the KSP2 Modding Society discord to get this information.
## '''Co Lift, Co Mass, Co Pressure, etc.''': These parameters allow you to set the Center of Lift, Center of Mass, Center of Pressure, etc. Adjust these to get the markers in the Unity scene where they should be for your part. Typically, Co Pressure and Co Lift are in the same place.
## '''Fuel Cross Feed''': Check if fuel should be able to transit through your part on the way to other parts. Typically set to true, but not always.
## '''Mass''': Set this in metric tons, not Kg.
## '''Attach Rules''': Check the types of attachment your part should allow. Checking “Stack” or “Srf Attach” will allow your part to attach in a stack or to a surface. Checking “Allow Stack”, “Allow Srf Attach”, etc. will allow other parts to stack attach or surface attach respectively. ''Currently (?) Allow Collision, Allow Dock, Allow Rotate, and Allow Root have no effect in game (check this)''.
## '''Attach Nodes''': If Stack is checked above, then you need a “top” and a “bottom” node, if Srf Attach is checked above, then you need a “srfAttach” node. Note, node names are case sensitive and having a node is not enough by itself, you do also need the corresponding Attach Rule set true or the node will have no effect. Under Attach Nodes click the + button to add a blank node and configure as needed.
### '''Node ID''': “top”, “bottom”, “srfAttach”, etc. (case sensitive!)
### '''Node Type''': Select as appropriate. (Stack for Stack, Surface for Surface…)
### '''Attach Method''': Select Fixed_Joint for Stack and Hinge_Joint for Surface Attach.
### '''Is Multi Joint''': In general set to True for stack attach to help prevent noodle rockets.
### '''Multi Joint Max Joint''': ''Set to 3 if you set Is Multi Joint to true?''
### '''Position''': Set as appropriate. Should be on the skin or outside of the part where you would expect to find it on your part in the VAB.
### '''Orientation''': Set as appropriate. The Orientation vector should be a unit vector (length 1) pointing in the direction of the part that will attach to the node, so pointing away from your part.
### '''Size''': Affects rigidity of your part. If your part is connected to another part with the same “size” node, then rigidity will be optimal, and otherwise it will be suboptimal.
### '''Visual Size''': Set the same as Size.
### '''Is Resource Crossfeed''': Set as needed for this node.
### '''Is Rigid''': Set as needed for this node.
### ''Rinse and Repeat'': Subsequent nodes created with the + button will inherit settings from the last node made, so this may accelerate the process as you just need to change the Node Id, Position and Orientation for new nodes that are similar to the previous created node.
# '''Add Module_Color''': You need this to be able to paint your part with base and accent colors. As above, click Add Component and search for Module Color.
# '''Add Module_Drag''': All parts need this. As above, click Add Component and search for Module Color.
# '''Add other modules as needed'''. For example, if your part is an engine you’ll also need:
## '''thrustTransform''' object: Create an empty game object as a child of the root part and name it thrustTransform.
## '''Throttle VFX Manager''': Configure as needed (?). No need to drag anywhere, it just need to be a component for the part.
## '''Flameout VFX Data''': Drag this up to the Flameout VFX property in Module_Engine.
## '''Module_Gimbal''': Configure details as needed (e.g., Gimbal Range and Gimbal Speed, etc.), then drag this up to the Gimbal property in Module_Engine.
## '''Module_Generator''': Configure details as needed, then drag this up to the Alternator property in Module_Engine.
## [[File:Module Fairing Data.png|thumb|Figure 3: Example Fairing Data in Unity Editor]]'''Module_Fairing''': Unless you plan for your engine to only ever be on the very first stage (i.e., a big booster), then you probably want it to have a fairing so it can be used in the second stage and above. Figure 3 shows an example for a working fairing from a Size Small (1.25m-class) engine that was created using this process. Shown below is the corresponding example of the PartComponentModule_Fairing portion of  the part JSON. As can be seen in Figure 3, the data fields that need to be populated in the Unity Editor include only a subset of what's in the auto-generated JSON. That said, everything the editor needs is in the example below and presenting it this way makes copy/paste possible where unity editor graphic would not allow that.&lt;syntaxhighlight lang="json"&gt;
      {
        "Name": "PartComponentModule_Fairing",
        "ComponentType": "KSP.Sim.impl.PartComponentModule_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
        "BehaviourType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
        "ModuleData": [
          {
            "Name": "Data_Fairing",
            "ModuleType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
            "DataType": "KSP.Modules.Data_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
            "Data": null,
            "DataObject": {
              "$type": "KSP.Modules.Data_Fairing, Assembly-CSharp",
              "FairingEnabled": {
                "ContextKey": "FairingEnabled",
                "storedValue": true
              },
              "FairingConstructionType": {
                "ContextKey": "FairingConstructionType",
                "storedValue": "CUSTOM"
              },
              "FloatingNodeEnabled": {
                "ContextKey": "FloatingNodeEnabled",
                "storedValue": true
              },
              "Length": {
                "ContextKey": "Length",
                "storedValue": -1.0
              },
              "DeployType": {
                "ContextKey": "DeployType",
                "storedValue": "Clamshellx4"
              },
              "EjectionForce": {
                "ContextKey": "EjectionForce",
                "storedValue": 100.0
              },
              "IsStagingEnabled": {
                "ContextKey": "IsStagingEnabled",
                "storedValue": true
              },
              "IsDeployed": {
                "ContextKey": "IsDeployed",
                "storedValue": false
              },
              "FloatingNodeSize": 1.0,
              "FloatingAttachNodeTag": "bottom",
              "FloatingNodePosition": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "FloatingNodeDirection": {
                "x": 0.0,
                "y": -1.0,
                "z": 0.0
              },
              "FloatingNodeIsMultiJoint": false,
              "FloatingNodeMultiJointMaxCount": 3,
              "FloatingNodeMultiJointOffset": 1.0,
              "FairingNode": "top",
              "NoseTip": 0.5,
              "EdgeWarp": 0.02,
              "AberrantNormalLimit": 45.0,
              "LocalUpAxis": {
                "x": 0.0,
                "y": -1.0,
                "z": 0.0
              },
              "Pivot": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "BaseModelTransformName": "Base",
              "CapRadius": 0.375,
              "BaseRadius": 0.625,
              "CloseRadius": 0.375,
              "MaxRadius": 6.0,
              "SnapThreshold": 0.25,
              "CreateShellColliders": false,
              "NumberOfCollidersPerCrossSection": 12,
              "MinHeightRadiusRatio": 0.07,
              "CrossSectionHeightMin": 0.3,
              "CrossSectionHeightMax": 1.1,
              "AerodynamicallyShieldContents": false,
              "ConeSweepRays": 120,
              "ConeSweepPrecision": 10.0,
              "AmountOfCollidersPerArc": 1,
              "ShouldCapOnAutoGenerate": false,
              "IsCapped": false,
              "IsShroud": true,
              "MassAreaRatio": 0.0,
              "FairingSideCount": 24,
              "FairingLengthSnapIncrement": 0.125,
              "FairingRadiusSnapIncrement": 0.125,
              "FairingSmoothingAngle": 35.0,
              "FairingThickness": 0.025,
              "FairingStartHeight": 0.0,
              "AllowConstructionTypeChange": true,
              "AllowFloatingNodeChange": true,
              "DefaultFairingEnabledToggle": true,
              "DefaultAutoConstruction": true,
              "DefaultDeployType": "Shroud",
              "DefaultFloatingNodeState": true,
              "LengthEditMinimum": 0.0,
              "LengthEditMaximum": 0.001,
              "LengthEditDefault": 1.0,
              "StageToggleDefault": false,
              "MaxAutoFairingTargetRadius": -1,
              "MinAutoFairingTargetRadius": -1,
              "CrossSections": [],
              "MassModifierAmount": 0.0,
              "DragCubeIndex": -1,
              "ModuleType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
              "MassModifier": 0.0,
              "DataType": "KSP.Modules.Data_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
              "IsActiveInStagingProp": {
                "ContextKey": null,
                "storedValue": false
              }
            }
          }
        ]
      }
&lt;/syntaxhighlight&gt;Of the information show above, the parts you will most likely need to customize for your fairing are Base Radius, Cross Section Height Max, and Fairing Thickness - the rest is likely to be the same for all your engines with one other important thing to note. The example above is for an engine that was made in Blender with the nozzle bell facing upwards. If your engine was made with the nozzle bell facing down, then you will need the '''Local Up Axis''' to be -1 in Y and you will also need set the '''Fairing Node''' to bottom.
# '''Apply Options''': Select the root part and in the Inspector window near the top on the Prefab line, click the Overrides dropdown and pick “Apply All”. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# '''Save Part JSON''': Click Save Part JSON button at the bottom of the Core Part Data module. This will put the resulting part JSON in the Assets folder for your Unity project. You need to do this any time you’ve edited the Core Part Data module (or also a module it depends on?).
# '''Make Prefab''': Grab the root part object and drag it to the Unity project Assets folder.
# '''Add Part Icon''': Create an icon for your part that the game will use in the parts picker. This needs to be a PNG file with specific dimensions. It should conform to the style used by other parts in the game. However you do this, you need to name the file &lt;part_name&gt;_icon.png, and you need to drag that file into the Assets folder in Unity.
## '''Convert Icon to Sprite''': Select the part icon in the Assets folder. In the Inspector window, click the pulldown menu for Texture Type and change this from Default to Sprite (2D and UI), then click Apply. If this is not done, your lovely icon will not display!
# '''Make Root Part Addressabl'''e: Select the root part’s prefab in the Assets folder and in the Inspector window check the box for Addressable.
# '''Make JSON Addressable''': Select the part’s JSON in the Assets folder and in the Inspector window check the box for Addressable.
# '''Make the Icon Addressable''': Select the root part’s icon in the Assets folder and in the Inspector window check the box for Addressable.
# '''Configure Addressable Properties''': In the Addressables Groups expand the Default Local Group and find your part.
## '''Group Name \ Addressable Name''': Change the information in the Group Name \ Addressable Name from “Assets/&lt;part_name&gt;*” to be just “&lt;part_name&gt;*”. So “Assets/&lt;part_name&gt;.prefab” becomes “&lt;part_name&gt;.prefab”, and so forth. You can leave the “Assets/” part of the path definition alone for each of these, that’s as it should be. The value for the Addressable Name needs to be the same as the file name it’s associated with and must not include any path parts. All of these need to be based on the Part Name established in the Core Part Data module.
## '''Labels''': For the JSON set this to parts_data. Leave it blank for the prefab. If parts_data is not an option in the dropdown for Labels, then click Manage Labels, click the + button to add a new label, and set the Label Name to “parts_data”. Click Save.
# '''Build Mod or Build And Test''': Select either Build Mod or Build And Test to have KSP2 Unity Tools prepare and deploy your parts pack mod.
# '''Launch Game and Test!'''
# '''''Rinse and Repeat for Additional Parts'''''
== '''Mentions''' ==
This guide is based on the videos: How to create parts for KSP2 and How to make engines for KSP2 (see: [[Part modding videos (tutorials)]]), and on other notes and guidance from the KSP2 Modding Society discord.

Also the web pages: [https://luxstice.notion.site/KSP2-Part-tutorial-almost-from-scratch-1f336b7c97ae4280afb6a4e3aa6080b2 KSP2 Part tutorial (almost) from scratch], and [https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314 Tutorial: My First Part]

[[Category:Parts and modules]]</text>
      <sha1>db8xg2xjef6g9g7k9vj9czfrlfz6gr6</sha1>
    </revision>
    <revision>
      <id>429</id>
      <parentid>428</parentid>
      <timestamp>2024-02-24T00:28:58Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <origin>429</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="24052" sha1="5m3zl6sryx8eelz6jyzbmqqpx96gv71" xml:space="preserve">The aim of this tutorial is to guide you through the process of creating your first '''part mod''' for Kerbal Space Program 2. We will go over everything from creating the part's mesh and textures to setting up the part in Unity to be bundled into a KSP2 mod.

The way this tutorial will be structured is as a succession of steps which may link to other tutorials on this wiki, do not hesitate to keep this main page open while perusing the other tutorials. We aim at being as comprehensive as possible to enable you to make any part mod, but this page is still work in progress so stuff might be incomplete and/or subject to change in the future.

== Magnificent Mesh Modelling (Creating the part asset) ==
The first step in your part mod creation journey is to create the part's "3D asset", meaning its 3D mesh, textures and eventual animations. You can use any software you're comfortable with to do so but here are some guides for some specific software if you desire:

# [[Modeling the mesh in Blender]]
# [[Texturing the mesh in Substance 3D Painter]]
# [[Preparing the mesh for Unity]]

Here are some resources that can be useful for modelling and texturing, regardless of the software you're using:

* [[Sizes]]
* [[Texturing]]

== Part Pack Prep (Basic Unity part mod project setup) ==
Now that you have created a model and textures for your part, the next step is to set up a Unity project that will be used to configure your part and build the asset bundles that will contain your mod's contents.

# '''Creating the project:''' Follow the [[Setting up Unity]] tutorial to create and set up a project for part modding.
# '''Parts Pack folder''': Under Assets, create a folder (R-Click Assets: Create &gt; Folder) and name it the same as your parts pack mod. If your mod is called My Awesome Mod then this would be &lt;code&gt;Assets\MyAwesomeMod&lt;/code&gt;.
# '''Materials folder''': Inside your parts pack folder create a folder called Materials. You’ll be storing the textures and materials you need there. E.g., &lt;code&gt;Assets\MyAwesomeMod\Materials&lt;/code&gt;. This is just to aid in organization.
# '''Parts folder''': Inside your parts pack folder create a folder called Parts. You’ll be storing the part meshes and related things there. E.g., &lt;code&gt;Assets\MyAwesomeMod\Parts&lt;/code&gt;. You can have whatever organization you like here, so if you want to group some parts you might create group folders within Parts (e.g., Methalox Engines, Nuclear Engines, Ion Engines, etc.). This is just to aid in organization and is optional.
# '''Plugin Folder and Content''': In your Unity project's &lt;code&gt;Assets\plugin_template&lt;/code&gt; folder create a &lt;code&gt;localizations&lt;/code&gt; folder. '''NOTE!''' This is currently required to be exactly this – localizations (plural), not localization (singular). This will be where you put the localization file.
## Create Localization file: Localization files are CSV files following a particular format. These must have lines ending with LF not LF/NL, and they must reference the same &lt;part_name&gt; you use in the Part Production process below. There are some other restrictions for content, particularly that if you want a string that contains a “,” that string needs to be enclosed in quotes or the comma will mess with how the strings are parsed. These files are where the part’s Title, Subtitle, Manufacturer, and Description are configured. Here’s an example:&lt;syntaxhighlight lang="text"&gt;
Key,Type,Desc,English,French

Parts/Title/spark_spt100,Text,,SPT-100,SPT-100
Parts/Subtitle/spark_spt100,Text,,Hall Effect Thruster with Xenon Tank,Moteur à Effet Hall et Réservoir de Xénon
Parts/Manufacturer/spark_spt100,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc.","Stellar Plasma-Assisted Rocket Kinetics, inc."
Parts/Description/spark_spt100,Text,,"The SPT-100 is the pinnacle in tiny (0.625m-class) Ion engines, providing high Isp and low thrust with an integral toroidal xenon tank. Strap this little guy onto a probe core and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!","Le SPT-100 a le dessus dans la catégorie des très petits (0.625m) moteurs ioniques, avec une haute impulsion spécifique et une poussée faible ainsi qu'un réservoir toroïdal de xénon intégré. Accrochez ce petit gars à vos sondes et assurez-vous d'avoir du stock d'électrons car vous allez aller de partout bien lentement!"

Parts/Title/spark_x3,Text,,X3 NHT,X3 NHT
Parts/Subtitle/spark_x3,Text,,Three-Channel Nested Hall Effect Thruster,Moteur à Effet Hall à 3 Canaux Concentriques
Parts/Manufacturer/spark_x3,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc.","Stellar Plasma-Assisted Rocket Kinetics, inc."
Parts/Description/spark_x3,Text,,"The SPARK X3 is the pinnacle in small (1.25m-class) Ion engines, providing high Isp and low thrust. Strap this bad boy onto your large probe or small capsule and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!","Le SPARK X3 a le dessus dans la catégorie des petits (1.25m) moteurs ioniques, avec une haute impulsion spécifique et une poussée faible ainsi qu'un réservoir toroïdal de xénon intégré. Accrochez ce petit gars à vos grandes sondes et assurez-vous d'avoir du stock d'électrons car vous allez aller de partout bien lentement!"
&lt;/syntaxhighlight&gt;

== Primary Part Production (Basic part setup) ==
This part of the tutorial will go over how to create a basic KSP2 part in Unity.
# '''Create Root Part Object''': Create an empty game object under your scene (R-click '''Scene''': '''Game Object''' '''&gt;''' '''Create Empty'''). Name this object the same as your part.
## Recommended naming scheme: &lt;code&gt;&lt;mod_name&gt;_&lt;part_name&gt;&lt;/code&gt;. If your mod is called &lt;code&gt;My Awesome Mod&lt;/code&gt; and your part title is &lt;code&gt;My Part&lt;/code&gt;, then your part name might be &lt;code&gt;my_awesome_mod_my_part&lt;/code&gt; for example. Part names must be unique, though you can have any descriptive title you like (that is done later in Localization). A naming scheme like this helps to prevent naming collisions in case anyone else might make a part they want to call &lt;code&gt;My Part&lt;/code&gt;, like yours.
# '''Create Model Object''': Create an empty game object under your root part object and name this one &lt;code&gt;model&lt;/code&gt;.
# '''Create Part Folder''': Create a Part folder named for your part inside your Parts folder. E.g., &lt;code&gt;Assets\MyAwesomeMod\Parts\MyPart&lt;/code&gt;, or &lt;code&gt;Assets\MyAwesomeMod\Parts\ThisGroup\MyPart&lt;/code&gt; if you’re grouping parts.

=== Mesh setup ===
# '''Bring in the Mesh''': Drag a copy of your part’s FBX file into the part folder.
## If you have baked textures for your part that go with the FBX (meaning, they’re based on the UV Unwrap specific to that FBX), then drag those into this same folder along with the FBX.
# '''Create Part Mesh Object''': Drag a copy of the part's FBX from the Part folder in Unity to the &lt;code&gt;model&lt;/code&gt; object created in step 2. Don’t drag the FBX file from your computer’s files system, you need to use the copy you just placed in step 4. This will create a '''prefab''' for your part as a child of the model object.
# '''Unpack Prefab''': Right-Click part object: '''Prefab &gt; Unpack'''.
# '''Remove Unnecessary Things''': Remove any objects that came in with the FBX that you don’t actually need in the game like lights, cameras, empty nodes, etc. If it’s not an actual object you want the game to render, then delete it.
# '''Orient Part''': Your model will appear in the Unity scene oriented as you built it in Blender, but this may not be the way you want it to be oriented in the game. If you need changes to the position, rotation, or scale of the part do those now using the Transform panel within the Inspector Window with your part object selected. For example, to flip a part over just give a rotation of 180 in Z, etc.

=== Material setup ===

# '''Create the material:''' Create a material in Unity for each material in Substance Painter (right-click on the project window &gt; '''Create &gt; Material''')
# '''Select the KSP2 Shader:''' Select all materials. In the '''Inspector''' window, in '''Shader''', select '''KSP &gt; Parts &gt; Paintable'''.
# '''Apply the textures:''' For each material, assign the textures to the '''Albedo''', '''Metallic''', '''Normal''', '''Emissive''' and '''Paintable''' channels.
## For Normal channels, click the '''Fix Now''' button.
# '''Apply materials:''' For each mesh, assign the materials to the corresponding locations. Click on '''Apply'''.

=== Collider setup ===
# '''Create Collider Object''': R-Click &lt;code&gt;mesh&lt;/code&gt; object: Create Empty. Name this object &lt;code&gt;col&lt;/code&gt;.
# '''Create Collider''': In the Inspector window for the col object click “Add Component”. Search for Mesh Collider and pick it. This will create a Mesh Collider component in the col object. Click the arrowhead to the left of it to expand it and see its properties.
## '''Select Mesh''': In the Mesh Collider properties select the Mesh you want to use. If your FBX is all one object you can pick that, or you can pick a suitable primitive like cube or cylinder, etc.
## '''Position, Rotation, and Scale''': Set the position, rotation, and scale of the mesh to encompass the part. You should see a green mesh represented in the Scene window to help guide you to make sure you’ve got the right position, rotation, and scale.
## '''Convex''': Check “Convex”
# '''Add Core Part Data''': Select your Root Part Object. In the Inspector Window click “Add Component”. Search for “Core Part Data” and pick that. Open it up and configure as follows:
## '''Part Name''': The Part Name needs to be the same as what you’ve used for the Root Part object, i.e., my_awesome_mod_my_part or whatever you used.
## '''Author''': Use what you like here, typically your KSP Forum screen name or whatever you go by as your modding author name.
## '''Category''': Select an appropriate category for your part.
## '''Family''': If you wish to identify a “Family” for your part, this needs to be a particular string. You can find examples in the game’s files, or part JSONS, or ask in the KSP2 Modding Society discord to get this information.
## '''Co Lift, Co Mass, Co Pressure, etc.''': These parameters allow you to set the Center of Lift, Center of Mass, Center of Pressure, etc. Adjust these to get the markers in the Unity scene where they should be for your part. Typically, Co Pressure and Co Lift are in the same place.
## '''Fuel Cross Feed''': Check if fuel should be able to transit through your part on the way to other parts. Typically set to true, but not always.
## '''Mass''': Set this in metric tons, not Kg.
## '''Attach Rules''': Check the types of attachment your part should allow. Checking “Stack” or “Srf Attach” will allow your part to attach in a stack or to a surface. Checking “Allow Stack”, “Allow Srf Attach”, etc. will allow other parts to stack attach or surface attach respectively. ''Currently (?) Allow Collision, Allow Dock, Allow Rotate, and Allow Root have no effect in game (check this)''.
## '''Attach Nodes''': If Stack is checked above, then you need a “top” and a “bottom” node, if Srf Attach is checked above, then you need a “srfAttach” node. Note, node names are case sensitive and having a node is not enough by itself, you do also need the corresponding Attach Rule set true or the node will have no effect. Under Attach Nodes click the + button to add a blank node and configure as needed.
### '''Node ID''': “top”, “bottom”, “srfAttach”, etc. (case sensitive!)
### '''Node Type''': Select as appropriate. (Stack for Stack, Surface for Surface…)
### '''Attach Method''': Select Fixed_Joint for Stack and Hinge_Joint for Surface Attach.
### '''Is Multi Joint''': In general set to True for stack attach to help prevent noodle rockets.
### '''Multi Joint Max Joint''': ''Set to 3 if you set Is Multi Joint to true?''
### '''Position''': Set as appropriate. Should be on the skin or outside of the part where you would expect to find it on your part in the VAB.
### '''Orientation''': Set as appropriate. The Orientation vector should be a unit vector (length 1) pointing in the direction of the part that will attach to the node, so pointing away from your part.
### '''Size''': Affects rigidity of your part. If your part is connected to another part with the same “size” node, then rigidity will be optimal, and otherwise it will be suboptimal.
### '''Visual Size''': Set the same as Size.
### '''Is Resource Crossfeed''': Set as needed for this node.
### '''Is Rigid''': Set as needed for this node.
### ''Rinse and Repeat'': Subsequent nodes created with the + button will inherit settings from the last node made, so this may accelerate the process as you just need to change the Node Id, Position and Orientation for new nodes that are similar to the previous created node.
# '''Add Module_Color''': You need this to be able to paint your part with base and accent colors. As above, click Add Component and search for Module Color.
# '''Add Module_Drag''': All parts need this. As above, click Add Component and search for Module Color.

== Crazy Customization (Adding functionalities to the part) ==
# '''Add other modules as needed'''. For example, if your part is an engine you’ll also need:
## '''thrustTransform''' object: Create an empty game object as a child of the root part and name it thrustTransform.
## '''Throttle VFX Manager''': Configure as needed (?). No need to drag anywhere, it just need to be a component for the part.
## '''Flameout VFX Data''': Drag this up to the Flameout VFX property in Module_Engine.
## '''Module_Gimbal''': Configure details as needed (e.g., Gimbal Range and Gimbal Speed, etc.), then drag this up to the Gimbal property in Module_Engine.
## '''Module_Generator''': Configure details as needed, then drag this up to the Alternator property in Module_Engine.
## '''Module_Fairing''': Unless you plan for your engine to only ever be on the very first stage (i.e., a big booster), then you probably want it to have a fairing so it can be used in the second stage and above. Figure 3 shows an example for a working fairing from a Size Small (1.25m-class) engine that was created using this process. Shown below is the corresponding example of the PartComponentModule_Fairing portion of  the part JSON. As can be seen in Figure 3, the data fields that need to be populated in the Unity Editor include only a subset of what's in the auto-generated JSON. That said, everything the editor needs is in the example below and presenting it this way makes copy/paste possible where unity editor graphic would not allow that.[[File:Module Fairing Data.png|thumb|Figure 3: Example Fairing Data in Unity Editor]]&lt;syntaxhighlight lang="json"&gt;
      {
        "Name": "PartComponentModule_Fairing",
        "ComponentType": "KSP.Sim.impl.PartComponentModule_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
        "BehaviourType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
        "ModuleData": [
          {
            "Name": "Data_Fairing",
            "ModuleType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
            "DataType": "KSP.Modules.Data_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
            "Data": null,
            "DataObject": {
              "$type": "KSP.Modules.Data_Fairing, Assembly-CSharp",
              "FairingEnabled": {
                "ContextKey": "FairingEnabled",
                "storedValue": true
              },
              "FairingConstructionType": {
                "ContextKey": "FairingConstructionType",
                "storedValue": "CUSTOM"
              },
              "FloatingNodeEnabled": {
                "ContextKey": "FloatingNodeEnabled",
                "storedValue": true
              },
              "Length": {
                "ContextKey": "Length",
                "storedValue": -1.0
              },
              "DeployType": {
                "ContextKey": "DeployType",
                "storedValue": "Clamshellx4"
              },
              "EjectionForce": {
                "ContextKey": "EjectionForce",
                "storedValue": 100.0
              },
              "IsStagingEnabled": {
                "ContextKey": "IsStagingEnabled",
                "storedValue": true
              },
              "IsDeployed": {
                "ContextKey": "IsDeployed",
                "storedValue": false
              },
              "FloatingNodeSize": 1.0,
              "FloatingAttachNodeTag": "bottom",
              "FloatingNodePosition": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "FloatingNodeDirection": {
                "x": 0.0,
                "y": -1.0,
                "z": 0.0
              },
              "FloatingNodeIsMultiJoint": false,
              "FloatingNodeMultiJointMaxCount": 3,
              "FloatingNodeMultiJointOffset": 1.0,
              "FairingNode": "top",
              "NoseTip": 0.5,
              "EdgeWarp": 0.02,
              "AberrantNormalLimit": 45.0,
              "LocalUpAxis": {
                "x": 0.0,
                "y": -1.0,
                "z": 0.0
              },
              "Pivot": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "BaseModelTransformName": "Base",
              "CapRadius": 0.375,
              "BaseRadius": 0.625,
              "CloseRadius": 0.375,
              "MaxRadius": 6.0,
              "SnapThreshold": 0.25,
              "CreateShellColliders": false,
              "NumberOfCollidersPerCrossSection": 12,
              "MinHeightRadiusRatio": 0.07,
              "CrossSectionHeightMin": 0.3,
              "CrossSectionHeightMax": 1.1,
              "AerodynamicallyShieldContents": false,
              "ConeSweepRays": 120,
              "ConeSweepPrecision": 10.0,
              "AmountOfCollidersPerArc": 1,
              "ShouldCapOnAutoGenerate": false,
              "IsCapped": false,
              "IsShroud": true,
              "MassAreaRatio": 0.0,
              "FairingSideCount": 24,
              "FairingLengthSnapIncrement": 0.125,
              "FairingRadiusSnapIncrement": 0.125,
              "FairingSmoothingAngle": 35.0,
              "FairingThickness": 0.025,
              "FairingStartHeight": 0.0,
              "AllowConstructionTypeChange": true,
              "AllowFloatingNodeChange": true,
              "DefaultFairingEnabledToggle": true,
              "DefaultAutoConstruction": true,
              "DefaultDeployType": "Shroud",
              "DefaultFloatingNodeState": true,
              "LengthEditMinimum": 0.0,
              "LengthEditMaximum": 0.001,
              "LengthEditDefault": 1.0,
              "StageToggleDefault": false,
              "MaxAutoFairingTargetRadius": -1,
              "MinAutoFairingTargetRadius": -1,
              "CrossSections": [],
              "MassModifierAmount": 0.0,
              "DragCubeIndex": -1,
              "ModuleType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
              "MassModifier": 0.0,
              "DataType": "KSP.Modules.Data_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
              "IsActiveInStagingProp": {
                "ContextKey": null,
                "storedValue": false
              }
            }
          }
        ]
      }
&lt;/syntaxhighlight&gt;Of the information show above, the parts you will most likely need to customize for your fairing are Base Radius, Cross Section Height Max, and Fairing Thickness - the rest is likely to be the same for all your engines with one other important thing to note. The example above is for an engine that was made in Blender with the nozzle bell facing upwards. If your engine was made with the nozzle bell facing down, then you will need the '''Local Up Axis''' to be -1 in Y and you will also need set the '''Fairing Node''' to bottom.

== Final Flourishes (Final steps) ==
# '''Apply Options''': Select the root part and in the Inspector window near the top on the '''Prefab''' line, click the '''Overrides''' dropdown and pick '''Apply All'''. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# '''Save Part JSON''': Click '''Save Part JSON''' button at the bottom of the '''Core Part Data''' module. This will put the resulting part JSON in the &lt;code&gt;Assets&lt;/code&gt; folder for your Unity project. You need to do this any time you’ve edited the '''Core Part Data''' module (or also a module it depends on?).
# '''Make Prefab''': Grab the root part object and drag it to the Unity project &lt;code&gt;Assets&lt;/code&gt; folder.
# '''Add Part Icon''': Create an icon for your part that the game will use in the parts picker. This needs to be a PNG file with specific dimensions. It should conform to the style used by other parts in the game. However you do this, you need to name the file &lt;code&gt;&lt;part_name&gt;_icon.png&lt;/code&gt;, and you need to drag that file into the &lt;code&gt;Assets&lt;/code&gt; folder in Unity.
## '''Convert Icon to Sprite''': Select the part icon in the Assets folder. In the Inspector window, click the pulldown menu for Texture Type and change this from Default to Sprite (2D and UI), then click '''Apply'''. If this is not done, your lovely icon will not display!
# '''Make Root Part Addressable:''' Select the root part’s prefab in the &lt;code&gt;Assets&lt;/code&gt; folder and in the '''Inspector''' window check the box for '''Addressable'''.
# '''Make JSON Addressable''': Select the part’s JSON in the &lt;code&gt;Assets&lt;/code&gt; folder and in the '''Inspector''' window check the box for '''Addressable'''.
# '''Make the Icon Addressable''': Select the root part’s icon in the &lt;code&gt;Assets&lt;/code&gt; folder and in the '''Inspector''' window check the box for '''Addressable'''.
# '''Configure Addressable Properties''': In the '''Addressables Groups''' expand your mod's Group and find your part.
## '''Group Name \ Addressable Name''': Change the information in the '''Group Name''' '''\''' '''Addressable Name''' from &lt;code&gt;Assets/&lt;part_name&gt;*&lt;/code&gt; to be just &lt;code&gt;&lt;part_name&gt;*&lt;/code&gt;. So &lt;code&gt;Assets/&lt;part_name&gt;.prefab&lt;/code&gt; becomes &lt;code&gt;&lt;part_name&gt;.prefab&lt;/code&gt;, and so forth. You can leave the &lt;code&gt;Assets/&lt;/code&gt; part of the path definition alone for each of these, that’s as it should be. The value for the '''Addressable Name''' needs to be the same as the file name it’s associated with and must not include any path parts. All of these need to be based on the '''Part Name''' established in the '''Core Part Data''' module.
## '''Labels''': For the JSON set this to &lt;code&gt;parts_data&lt;/code&gt;. Leave it blank for the prefab. If &lt;code&gt;parts_data&lt;/code&gt; is not an option in the dropdown for Labels, then click '''Manage Labels''', click the + button to add a new label, and set the '''Label Name''' to &lt;code&gt;parts_data&lt;/code&gt;. Click '''Save'''.
# '''Build Mod or Build And Test''': Select either Build Mod or Build And Test to have KSP2 Unity Tools prepare and deploy your parts pack mod.
# '''Launch Game and Test!'''
# '''''Rinse and Repeat for Additional Parts'''''
== '''Mentions''' ==
This guide is based on the videos: How to create parts for KSP2 and How to make engines for KSP2 (see: [[Part modding videos (tutorials)]]), and on other notes and guidance from the KSP2 Modding Society discord.

Also the web pages: [https://luxstice.notion.site/KSP2-Part-tutorial-almost-from-scratch-1f336b7c97ae4280afb6a4e3aa6080b2 KSP2 Part tutorial (almost) from scratch], and [https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314 Tutorial: My First Part]

[[Category:Parts and modules]]</text>
      <sha1>5m3zl6sryx8eelz6jyzbmqqpx96gv71</sha1>
    </revision>
    <revision>
      <id>430</id>
      <parentid>429</parentid>
      <timestamp>2024-02-24T00:29:33Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <origin>430</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="24082" sha1="4ak2prh6rrn4wzxjdsxzlw0he0whivh" xml:space="preserve">The aim of this tutorial is to guide you through the process of creating your first '''part mod''' for Kerbal Space Program 2. We will go over everything from creating the part's mesh and textures to setting up the part in Unity to be bundled into a KSP2 mod.

The way this tutorial will be structured is as a succession of steps which may link to other tutorials on this wiki, do not hesitate to keep this main page open while perusing the other tutorials. We aim at being as comprehensive as possible to enable you to make any part mod, but this page is still work in progress so stuff might be incomplete and/or subject to change in the future.

== Magnificent Mesh Modelling (Creating the part asset) ==
The first step in your part mod creation journey is to create the part's "3D asset", meaning its 3D mesh, textures and eventual animations. You can use any software you're comfortable with to do so but here are some guides for some specific software if you desire:

# [[Modeling the mesh in Blender]]
# [[Texturing the mesh in Substance 3D Painter]]
# [[Preparing the mesh for Unity]]

Here are some resources that can be useful for modelling and texturing, regardless of the software you're using:

* [[Sizes]]
* [[Texturing]]

== Part Pack Prep (Basic Unity part mod project setup) ==
Now that you have created a model and textures for your part, the next step is to set up a Unity project that will be used to configure your part and build the asset bundles that will contain your mod's contents.

# '''Creating the project:''' Follow the [[Setting up Unity]] tutorial to create and set up a project for part modding.
# '''Parts Pack folder''': Under Assets, create a folder (R-Click Assets: Create &gt; Folder) and name it the same as your parts pack mod. If your mod is called My Awesome Mod then this would be &lt;code&gt;Assets\MyAwesomeMod&lt;/code&gt;.
# '''Materials folder''': Inside your parts pack folder create a folder called Materials. You’ll be storing the textures and materials you need there. E.g., &lt;code&gt;Assets\MyAwesomeMod\Materials&lt;/code&gt;. This is just to aid in organization.
# '''Parts folder''': Inside your parts pack folder create a folder called Parts. You’ll be storing the part meshes and related things there. E.g., &lt;code&gt;Assets\MyAwesomeMod\Parts&lt;/code&gt;. You can have whatever organization you like here, so if you want to group some parts you might create group folders within Parts (e.g., Methalox Engines, Nuclear Engines, Ion Engines, etc.). This is just to aid in organization and is optional.
# '''Plugin Folder and Content''': In your Unity project's &lt;code&gt;Assets\plugin_template&lt;/code&gt; folder create a &lt;code&gt;localizations&lt;/code&gt; folder. '''NOTE!''' This is currently required to be exactly this – localizations (plural), not localization (singular). This will be where you put the localization file.
## Create Localization file: Localization files are CSV files following a particular format. These must have lines ending with LF not LF/NL, and they must reference the same &lt;part_name&gt; you use in the Part Production process below. There are some other restrictions for content, particularly that if you want a string that contains a “,” that string needs to be enclosed in quotes or the comma will mess with how the strings are parsed. These files are where the part’s Title, Subtitle, Manufacturer, and Description are configured. Here’s an example:&lt;syntaxhighlight lang="text"&gt;
Key,Type,Desc,English,French

Parts/Title/spark_spt100,Text,,SPT-100,SPT-100
Parts/Subtitle/spark_spt100,Text,,Hall Effect Thruster with Xenon Tank,Moteur à Effet Hall et Réservoir de Xénon
Parts/Manufacturer/spark_spt100,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc.","Stellar Plasma-Assisted Rocket Kinetics, inc."
Parts/Description/spark_spt100,Text,,"The SPT-100 is the pinnacle in tiny (0.625m-class) Ion engines, providing high Isp and low thrust with an integral toroidal xenon tank. Strap this little guy onto a probe core and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!","Le SPT-100 a le dessus dans la catégorie des très petits (0.625m) moteurs ioniques, avec une haute impulsion spécifique et une poussée faible ainsi qu'un réservoir toroïdal de xénon intégré. Accrochez ce petit gars à vos sondes et assurez-vous d'avoir du stock d'électrons car vous allez aller de partout bien lentement!"

Parts/Title/spark_x3,Text,,X3 NHT,X3 NHT
Parts/Subtitle/spark_x3,Text,,Three-Channel Nested Hall Effect Thruster,Moteur à Effet Hall à 3 Canaux Concentriques
Parts/Manufacturer/spark_x3,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc.","Stellar Plasma-Assisted Rocket Kinetics, inc."
Parts/Description/spark_x3,Text,,"The SPARK X3 is the pinnacle in small (1.25m-class) Ion engines, providing high Isp and low thrust. Strap this bad boy onto your large probe or small capsule and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!","Le SPARK X3 a le dessus dans la catégorie des petits (1.25m) moteurs ioniques, avec une haute impulsion spécifique et une poussée faible ainsi qu'un réservoir toroïdal de xénon intégré. Accrochez ce petit gars à vos grandes sondes et assurez-vous d'avoir du stock d'électrons car vous allez aller de partout bien lentement!"
&lt;/syntaxhighlight&gt;

== Primary Part Production (Basic part setup) ==
This part of the tutorial will go over how to create a basic KSP2 part in Unity.
# '''Create Root Part Object''': Create an empty game object under your scene (R-click '''Scene''': '''Game Object''' '''&gt;''' '''Create Empty'''). Name this object the same as your part.
## Recommended naming scheme: &lt;code&gt;&lt;mod_name&gt;_&lt;part_name&gt;&lt;/code&gt;. If your mod is called &lt;code&gt;My Awesome Mod&lt;/code&gt; and your part title is &lt;code&gt;My Part&lt;/code&gt;, then your part name might be &lt;code&gt;my_awesome_mod_my_part&lt;/code&gt; for example. Part names must be unique, though you can have any descriptive title you like (that is done later in Localization). A naming scheme like this helps to prevent naming collisions in case anyone else might make a part they want to call &lt;code&gt;My Part&lt;/code&gt;, like yours.
# '''Create Model Object''': Create an empty game object under your root part object and name this one &lt;code&gt;model&lt;/code&gt;.
# '''Create Part Folder''': Create a Part folder named for your part inside your Parts folder. E.g., &lt;code&gt;Assets\MyAwesomeMod\Parts\MyPart&lt;/code&gt;, or &lt;code&gt;Assets\MyAwesomeMod\Parts\ThisGroup\MyPart&lt;/code&gt; if you’re grouping parts.

=== Mesh setup ===
# '''Bring in the Mesh''': Drag a copy of your part’s FBX file into the part folder.
## If you have baked textures for your part that go with the FBX (meaning, they’re based on the UV Unwrap specific to that FBX), then drag those into this same folder along with the FBX.
# '''Create Part Mesh Object''': Drag a copy of the part's FBX from the Part folder in Unity to the &lt;code&gt;model&lt;/code&gt; object created in step 2. Don’t drag the FBX file from your computer’s files system, you need to use the copy you just placed in step 4. This will create a '''prefab''' for your part as a child of the model object.
# '''Unpack Prefab''': Right-Click part object: '''Prefab &gt; Unpack'''.
# '''Remove Unnecessary Things''': Remove any objects that came in with the FBX that you don’t actually need in the game like lights, cameras, empty nodes, etc. If it’s not an actual object you want the game to render, then delete it.
# '''Orient Part''': Your model will appear in the Unity scene oriented as you built it in Blender, but this may not be the way you want it to be oriented in the game. If you need changes to the position, rotation, or scale of the part do those now using the Transform panel within the Inspector Window with your part object selected. For example, to flip a part over just give a rotation of 180 in Z, etc.

=== Material setup ===

# '''Create the material:''' Create a material in Unity for each material in Substance Painter (right-click on the project window &gt; '''Create &gt; Material''')
# '''Select the KSP2 Shader:''' Select all materials. In the '''Inspector''' window, in '''Shader''', select '''KSP &gt; Parts &gt; Paintable'''.
# '''Apply the textures:''' For each material, assign the textures to the '''Albedo''', '''Metallic''', '''Normal''', '''Emissive''' and '''Paintable''' channels.
## For Normal channels, click the '''Fix Now''' button.
# '''Apply materials:''' For each mesh, assign the materials to the corresponding locations. Click on '''Apply'''.

=== Collider setup ===
# '''Create Collider Object''': R-Click &lt;code&gt;mesh&lt;/code&gt; object: Create Empty. Name this object &lt;code&gt;col&lt;/code&gt;.
# '''Create Collider''': In the Inspector window for the col object click “Add Component”. Search for Mesh Collider and pick it. This will create a Mesh Collider component in the col object. Click the arrowhead to the left of it to expand it and see its properties.
## '''Select Mesh''': In the Mesh Collider properties select the Mesh you want to use. If your FBX is all one object you can pick that, or you can pick a suitable primitive like cube or cylinder, etc.
## '''Position, Rotation, and Scale''': Set the position, rotation, and scale of the mesh to encompass the part. You should see a green mesh represented in the Scene window to help guide you to make sure you’ve got the right position, rotation, and scale.
## '''Convex''': Check “Convex”

=== Core Part Data setup ===
# '''Add Core Part Data''': Select your Root Part Object. In the Inspector Window click “Add Component”. Search for “Core Part Data” and pick that. Open it up and configure as follows:
## '''Part Name''': The Part Name needs to be the same as what you’ve used for the Root Part object, i.e., my_awesome_mod_my_part or whatever you used.
## '''Author''': Use what you like here, typically your KSP Forum screen name or whatever you go by as your modding author name.
## '''Category''': Select an appropriate category for your part.
## '''Family''': If you wish to identify a “Family” for your part, this needs to be a particular string. You can find examples in the game’s files, or part JSONS, or ask in the KSP2 Modding Society discord to get this information.
## '''Co Lift, Co Mass, Co Pressure, etc.''': These parameters allow you to set the Center of Lift, Center of Mass, Center of Pressure, etc. Adjust these to get the markers in the Unity scene where they should be for your part. Typically, Co Pressure and Co Lift are in the same place.
## '''Fuel Cross Feed''': Check if fuel should be able to transit through your part on the way to other parts. Typically set to true, but not always.
## '''Mass''': Set this in metric tons, not Kg.
## '''Attach Rules''': Check the types of attachment your part should allow. Checking “Stack” or “Srf Attach” will allow your part to attach in a stack or to a surface. Checking “Allow Stack”, “Allow Srf Attach”, etc. will allow other parts to stack attach or surface attach respectively. ''Currently (?) Allow Collision, Allow Dock, Allow Rotate, and Allow Root have no effect in game (check this)''.
## '''Attach Nodes''': If Stack is checked above, then you need a “top” and a “bottom” node, if Srf Attach is checked above, then you need a “srfAttach” node. Note, node names are case sensitive and having a node is not enough by itself, you do also need the corresponding Attach Rule set true or the node will have no effect. Under Attach Nodes click the + button to add a blank node and configure as needed.
### '''Node ID''': “top”, “bottom”, “srfAttach”, etc. (case sensitive!)
### '''Node Type''': Select as appropriate. (Stack for Stack, Surface for Surface…)
### '''Attach Method''': Select Fixed_Joint for Stack and Hinge_Joint for Surface Attach.
### '''Is Multi Joint''': In general set to True for stack attach to help prevent noodle rockets.
### '''Multi Joint Max Joint''': ''Set to 3 if you set Is Multi Joint to true?''
### '''Position''': Set as appropriate. Should be on the skin or outside of the part where you would expect to find it on your part in the VAB.
### '''Orientation''': Set as appropriate. The Orientation vector should be a unit vector (length 1) pointing in the direction of the part that will attach to the node, so pointing away from your part.
### '''Size''': Affects rigidity of your part. If your part is connected to another part with the same “size” node, then rigidity will be optimal, and otherwise it will be suboptimal.
### '''Visual Size''': Set the same as Size.
### '''Is Resource Crossfeed''': Set as needed for this node.
### '''Is Rigid''': Set as needed for this node.
### ''Rinse and Repeat'': Subsequent nodes created with the + button will inherit settings from the last node made, so this may accelerate the process as you just need to change the Node Id, Position and Orientation for new nodes that are similar to the previous created node.
# '''Add Module_Color''': You need this to be able to paint your part with base and accent colors. As above, click Add Component and search for Module Color.
# '''Add Module_Drag''': All parts need this. As above, click Add Component and search for Module Color.

== Crazy Customization (Adding functionalities to the part) ==
# '''Add other modules as needed'''. For example, if your part is an engine you’ll also need:
## '''thrustTransform''' object: Create an empty game object as a child of the root part and name it thrustTransform.
## '''Throttle VFX Manager''': Configure as needed (?). No need to drag anywhere, it just need to be a component for the part.
## '''Flameout VFX Data''': Drag this up to the Flameout VFX property in Module_Engine.
## '''Module_Gimbal''': Configure details as needed (e.g., Gimbal Range and Gimbal Speed, etc.), then drag this up to the Gimbal property in Module_Engine.
## '''Module_Generator''': Configure details as needed, then drag this up to the Alternator property in Module_Engine.
## '''Module_Fairing''': Unless you plan for your engine to only ever be on the very first stage (i.e., a big booster), then you probably want it to have a fairing so it can be used in the second stage and above. Figure 3 shows an example for a working fairing from a Size Small (1.25m-class) engine that was created using this process. Shown below is the corresponding example of the PartComponentModule_Fairing portion of  the part JSON. As can be seen in Figure 3, the data fields that need to be populated in the Unity Editor include only a subset of what's in the auto-generated JSON. That said, everything the editor needs is in the example below and presenting it this way makes copy/paste possible where unity editor graphic would not allow that.[[File:Module Fairing Data.png|thumb|Figure 3: Example Fairing Data in Unity Editor]]&lt;syntaxhighlight lang="json"&gt;
      {
        "Name": "PartComponentModule_Fairing",
        "ComponentType": "KSP.Sim.impl.PartComponentModule_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
        "BehaviourType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
        "ModuleData": [
          {
            "Name": "Data_Fairing",
            "ModuleType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
            "DataType": "KSP.Modules.Data_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
            "Data": null,
            "DataObject": {
              "$type": "KSP.Modules.Data_Fairing, Assembly-CSharp",
              "FairingEnabled": {
                "ContextKey": "FairingEnabled",
                "storedValue": true
              },
              "FairingConstructionType": {
                "ContextKey": "FairingConstructionType",
                "storedValue": "CUSTOM"
              },
              "FloatingNodeEnabled": {
                "ContextKey": "FloatingNodeEnabled",
                "storedValue": true
              },
              "Length": {
                "ContextKey": "Length",
                "storedValue": -1.0
              },
              "DeployType": {
                "ContextKey": "DeployType",
                "storedValue": "Clamshellx4"
              },
              "EjectionForce": {
                "ContextKey": "EjectionForce",
                "storedValue": 100.0
              },
              "IsStagingEnabled": {
                "ContextKey": "IsStagingEnabled",
                "storedValue": true
              },
              "IsDeployed": {
                "ContextKey": "IsDeployed",
                "storedValue": false
              },
              "FloatingNodeSize": 1.0,
              "FloatingAttachNodeTag": "bottom",
              "FloatingNodePosition": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "FloatingNodeDirection": {
                "x": 0.0,
                "y": -1.0,
                "z": 0.0
              },
              "FloatingNodeIsMultiJoint": false,
              "FloatingNodeMultiJointMaxCount": 3,
              "FloatingNodeMultiJointOffset": 1.0,
              "FairingNode": "top",
              "NoseTip": 0.5,
              "EdgeWarp": 0.02,
              "AberrantNormalLimit": 45.0,
              "LocalUpAxis": {
                "x": 0.0,
                "y": -1.0,
                "z": 0.0
              },
              "Pivot": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "BaseModelTransformName": "Base",
              "CapRadius": 0.375,
              "BaseRadius": 0.625,
              "CloseRadius": 0.375,
              "MaxRadius": 6.0,
              "SnapThreshold": 0.25,
              "CreateShellColliders": false,
              "NumberOfCollidersPerCrossSection": 12,
              "MinHeightRadiusRatio": 0.07,
              "CrossSectionHeightMin": 0.3,
              "CrossSectionHeightMax": 1.1,
              "AerodynamicallyShieldContents": false,
              "ConeSweepRays": 120,
              "ConeSweepPrecision": 10.0,
              "AmountOfCollidersPerArc": 1,
              "ShouldCapOnAutoGenerate": false,
              "IsCapped": false,
              "IsShroud": true,
              "MassAreaRatio": 0.0,
              "FairingSideCount": 24,
              "FairingLengthSnapIncrement": 0.125,
              "FairingRadiusSnapIncrement": 0.125,
              "FairingSmoothingAngle": 35.0,
              "FairingThickness": 0.025,
              "FairingStartHeight": 0.0,
              "AllowConstructionTypeChange": true,
              "AllowFloatingNodeChange": true,
              "DefaultFairingEnabledToggle": true,
              "DefaultAutoConstruction": true,
              "DefaultDeployType": "Shroud",
              "DefaultFloatingNodeState": true,
              "LengthEditMinimum": 0.0,
              "LengthEditMaximum": 0.001,
              "LengthEditDefault": 1.0,
              "StageToggleDefault": false,
              "MaxAutoFairingTargetRadius": -1,
              "MinAutoFairingTargetRadius": -1,
              "CrossSections": [],
              "MassModifierAmount": 0.0,
              "DragCubeIndex": -1,
              "ModuleType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
              "MassModifier": 0.0,
              "DataType": "KSP.Modules.Data_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
              "IsActiveInStagingProp": {
                "ContextKey": null,
                "storedValue": false
              }
            }
          }
        ]
      }
&lt;/syntaxhighlight&gt;Of the information show above, the parts you will most likely need to customize for your fairing are Base Radius, Cross Section Height Max, and Fairing Thickness - the rest is likely to be the same for all your engines with one other important thing to note. The example above is for an engine that was made in Blender with the nozzle bell facing upwards. If your engine was made with the nozzle bell facing down, then you will need the '''Local Up Axis''' to be -1 in Y and you will also need set the '''Fairing Node''' to bottom.

== Final Flourishes (Final steps) ==
# '''Apply Options''': Select the root part and in the Inspector window near the top on the '''Prefab''' line, click the '''Overrides''' dropdown and pick '''Apply All'''. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# '''Save Part JSON''': Click '''Save Part JSON''' button at the bottom of the '''Core Part Data''' module. This will put the resulting part JSON in the &lt;code&gt;Assets&lt;/code&gt; folder for your Unity project. You need to do this any time you’ve edited the '''Core Part Data''' module (or also a module it depends on?).
# '''Make Prefab''': Grab the root part object and drag it to the Unity project &lt;code&gt;Assets&lt;/code&gt; folder.
# '''Add Part Icon''': Create an icon for your part that the game will use in the parts picker. This needs to be a PNG file with specific dimensions. It should conform to the style used by other parts in the game. However you do this, you need to name the file &lt;code&gt;&lt;part_name&gt;_icon.png&lt;/code&gt;, and you need to drag that file into the &lt;code&gt;Assets&lt;/code&gt; folder in Unity.
## '''Convert Icon to Sprite''': Select the part icon in the Assets folder. In the Inspector window, click the pulldown menu for Texture Type and change this from Default to Sprite (2D and UI), then click '''Apply'''. If this is not done, your lovely icon will not display!
# '''Make Root Part Addressable:''' Select the root part’s prefab in the &lt;code&gt;Assets&lt;/code&gt; folder and in the '''Inspector''' window check the box for '''Addressable'''.
# '''Make JSON Addressable''': Select the part’s JSON in the &lt;code&gt;Assets&lt;/code&gt; folder and in the '''Inspector''' window check the box for '''Addressable'''.
# '''Make the Icon Addressable''': Select the root part’s icon in the &lt;code&gt;Assets&lt;/code&gt; folder and in the '''Inspector''' window check the box for '''Addressable'''.
# '''Configure Addressable Properties''': In the '''Addressables Groups''' expand your mod's Group and find your part.
## '''Group Name \ Addressable Name''': Change the information in the '''Group Name''' '''\''' '''Addressable Name''' from &lt;code&gt;Assets/&lt;part_name&gt;*&lt;/code&gt; to be just &lt;code&gt;&lt;part_name&gt;*&lt;/code&gt;. So &lt;code&gt;Assets/&lt;part_name&gt;.prefab&lt;/code&gt; becomes &lt;code&gt;&lt;part_name&gt;.prefab&lt;/code&gt;, and so forth. You can leave the &lt;code&gt;Assets/&lt;/code&gt; part of the path definition alone for each of these, that’s as it should be. The value for the '''Addressable Name''' needs to be the same as the file name it’s associated with and must not include any path parts. All of these need to be based on the '''Part Name''' established in the '''Core Part Data''' module.
## '''Labels''': For the JSON set this to &lt;code&gt;parts_data&lt;/code&gt;. Leave it blank for the prefab. If &lt;code&gt;parts_data&lt;/code&gt; is not an option in the dropdown for Labels, then click '''Manage Labels''', click the + button to add a new label, and set the '''Label Name''' to &lt;code&gt;parts_data&lt;/code&gt;. Click '''Save'''.
# '''Build Mod or Build And Test''': Select either Build Mod or Build And Test to have KSP2 Unity Tools prepare and deploy your parts pack mod.
# '''Launch Game and Test!'''
# '''''Rinse and Repeat for Additional Parts'''''
== '''Mentions''' ==
This guide is based on the videos: How to create parts for KSP2 and How to make engines for KSP2 (see: [[Part modding videos (tutorials)]]), and on other notes and guidance from the KSP2 Modding Society discord.

Also the web pages: [https://luxstice.notion.site/KSP2-Part-tutorial-almost-from-scratch-1f336b7c97ae4280afb6a4e3aa6080b2 KSP2 Part tutorial (almost) from scratch], and [https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314 Tutorial: My First Part]

[[Category:Parts and modules]]</text>
      <sha1>4ak2prh6rrn4wzxjdsxzlw0he0whivh</sha1>
    </revision>
    <revision>
      <id>434</id>
      <parentid>430</parentid>
      <timestamp>2024-02-24T11:20:39Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <comment>/* Magnificent Mesh Modelling (Creating the part asset) */</comment>
      <origin>434</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="24047" sha1="mjctvw8ncsxl9lteoj8h6khwnzwun71" xml:space="preserve">The aim of this tutorial is to guide you through the process of creating your first '''part mod''' for Kerbal Space Program 2. We will go over everything from creating the part's mesh and textures to setting up the part in Unity to be bundled into a KSP2 mod.

The way this tutorial will be structured is as a succession of steps which may link to other tutorials on this wiki, do not hesitate to keep this main page open while perusing the other tutorials. We aim at being as comprehensive as possible to enable you to make any part mod, but this page is still work in progress so stuff might be incomplete and/or subject to change in the future.

== Magnificent Mesh Modelling (Creating the part asset) ==
The first step in your part mod creation journey is to create the part's "3D asset", meaning its 3D mesh, textures and eventual animations. You can use any software you're comfortable with to do so but here are some guides for some specific software if you desire:

# [[Modeling the mesh in Blender]]
# [[Texturing the mesh in Substance 3D Painter]]

Here are some resources that can be useful for modelling and texturing, regardless of the software you're using:

* [[Sizes]]
* [[Texturing]]

== Part Pack Prep (Basic Unity part mod project setup) ==
Now that you have created a model and textures for your part, the next step is to set up a Unity project that will be used to configure your part and build the asset bundles that will contain your mod's contents.

# '''Creating the project:''' Follow the [[Setting up Unity]] tutorial to create and set up a project for part modding.
# '''Parts Pack folder''': Under Assets, create a folder (R-Click Assets: Create &gt; Folder) and name it the same as your parts pack mod. If your mod is called My Awesome Mod then this would be &lt;code&gt;Assets\MyAwesomeMod&lt;/code&gt;.
# '''Materials folder''': Inside your parts pack folder create a folder called Materials. You’ll be storing the textures and materials you need there. E.g., &lt;code&gt;Assets\MyAwesomeMod\Materials&lt;/code&gt;. This is just to aid in organization.
# '''Parts folder''': Inside your parts pack folder create a folder called Parts. You’ll be storing the part meshes and related things there. E.g., &lt;code&gt;Assets\MyAwesomeMod\Parts&lt;/code&gt;. You can have whatever organization you like here, so if you want to group some parts you might create group folders within Parts (e.g., Methalox Engines, Nuclear Engines, Ion Engines, etc.). This is just to aid in organization and is optional.
# '''Plugin Folder and Content''': In your Unity project's &lt;code&gt;Assets\plugin_template&lt;/code&gt; folder create a &lt;code&gt;localizations&lt;/code&gt; folder. '''NOTE!''' This is currently required to be exactly this – localizations (plural), not localization (singular). This will be where you put the localization file.
## Create Localization file: Localization files are CSV files following a particular format. These must have lines ending with LF not LF/NL, and they must reference the same &lt;part_name&gt; you use in the Part Production process below. There are some other restrictions for content, particularly that if you want a string that contains a “,” that string needs to be enclosed in quotes or the comma will mess with how the strings are parsed. These files are where the part’s Title, Subtitle, Manufacturer, and Description are configured. Here’s an example:&lt;syntaxhighlight lang="text"&gt;
Key,Type,Desc,English,French

Parts/Title/spark_spt100,Text,,SPT-100,SPT-100
Parts/Subtitle/spark_spt100,Text,,Hall Effect Thruster with Xenon Tank,Moteur à Effet Hall et Réservoir de Xénon
Parts/Manufacturer/spark_spt100,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc.","Stellar Plasma-Assisted Rocket Kinetics, inc."
Parts/Description/spark_spt100,Text,,"The SPT-100 is the pinnacle in tiny (0.625m-class) Ion engines, providing high Isp and low thrust with an integral toroidal xenon tank. Strap this little guy onto a probe core and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!","Le SPT-100 a le dessus dans la catégorie des très petits (0.625m) moteurs ioniques, avec une haute impulsion spécifique et une poussée faible ainsi qu'un réservoir toroïdal de xénon intégré. Accrochez ce petit gars à vos sondes et assurez-vous d'avoir du stock d'électrons car vous allez aller de partout bien lentement!"

Parts/Title/spark_x3,Text,,X3 NHT,X3 NHT
Parts/Subtitle/spark_x3,Text,,Three-Channel Nested Hall Effect Thruster,Moteur à Effet Hall à 3 Canaux Concentriques
Parts/Manufacturer/spark_x3,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc.","Stellar Plasma-Assisted Rocket Kinetics, inc."
Parts/Description/spark_x3,Text,,"The SPARK X3 is the pinnacle in small (1.25m-class) Ion engines, providing high Isp and low thrust. Strap this bad boy onto your large probe or small capsule and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!","Le SPARK X3 a le dessus dans la catégorie des petits (1.25m) moteurs ioniques, avec une haute impulsion spécifique et une poussée faible ainsi qu'un réservoir toroïdal de xénon intégré. Accrochez ce petit gars à vos grandes sondes et assurez-vous d'avoir du stock d'électrons car vous allez aller de partout bien lentement!"
&lt;/syntaxhighlight&gt;

== Primary Part Production (Basic part setup) ==
This part of the tutorial will go over how to create a basic KSP2 part in Unity.
# '''Create Root Part Object''': Create an empty game object under your scene (R-click '''Scene''': '''Game Object''' '''&gt;''' '''Create Empty'''). Name this object the same as your part.
## Recommended naming scheme: &lt;code&gt;&lt;mod_name&gt;_&lt;part_name&gt;&lt;/code&gt;. If your mod is called &lt;code&gt;My Awesome Mod&lt;/code&gt; and your part title is &lt;code&gt;My Part&lt;/code&gt;, then your part name might be &lt;code&gt;my_awesome_mod_my_part&lt;/code&gt; for example. Part names must be unique, though you can have any descriptive title you like (that is done later in Localization). A naming scheme like this helps to prevent naming collisions in case anyone else might make a part they want to call &lt;code&gt;My Part&lt;/code&gt;, like yours.
# '''Create Model Object''': Create an empty game object under your root part object and name this one &lt;code&gt;model&lt;/code&gt;.
# '''Create Part Folder''': Create a Part folder named for your part inside your Parts folder. E.g., &lt;code&gt;Assets\MyAwesomeMod\Parts\MyPart&lt;/code&gt;, or &lt;code&gt;Assets\MyAwesomeMod\Parts\ThisGroup\MyPart&lt;/code&gt; if you’re grouping parts.

=== Mesh setup ===
# '''Bring in the Mesh''': Drag a copy of your part’s FBX file into the part folder.
## If you have baked textures for your part that go with the FBX (meaning, they’re based on the UV Unwrap specific to that FBX), then drag those into this same folder along with the FBX.
# '''Create Part Mesh Object''': Drag a copy of the part's FBX from the Part folder in Unity to the &lt;code&gt;model&lt;/code&gt; object created in step 2. Don’t drag the FBX file from your computer’s files system, you need to use the copy you just placed in step 4. This will create a '''prefab''' for your part as a child of the model object.
# '''Unpack Prefab''': Right-Click part object: '''Prefab &gt; Unpack'''.
# '''Remove Unnecessary Things''': Remove any objects that came in with the FBX that you don’t actually need in the game like lights, cameras, empty nodes, etc. If it’s not an actual object you want the game to render, then delete it.
# '''Orient Part''': Your model will appear in the Unity scene oriented as you built it in Blender, but this may not be the way you want it to be oriented in the game. If you need changes to the position, rotation, or scale of the part do those now using the Transform panel within the Inspector Window with your part object selected. For example, to flip a part over just give a rotation of 180 in Z, etc.

=== Material setup ===

# '''Create the material:''' Create a material in Unity for each material in Substance Painter (right-click on the project window &gt; '''Create &gt; Material''')
# '''Select the KSP2 Shader:''' Select all materials. In the '''Inspector''' window, in '''Shader''', select '''KSP &gt; Parts &gt; Paintable'''.
# '''Apply the textures:''' For each material, assign the textures to the '''Albedo''', '''Metallic''', '''Normal''', '''Emissive''' and '''Paintable''' channels.
## For Normal channels, click the '''Fix Now''' button.
# '''Apply materials:''' For each mesh, assign the materials to the corresponding locations. Click on '''Apply'''.

=== Collider setup ===
# '''Create Collider Object''': R-Click &lt;code&gt;mesh&lt;/code&gt; object: Create Empty. Name this object &lt;code&gt;col&lt;/code&gt;.
# '''Create Collider''': In the Inspector window for the col object click “Add Component”. Search for Mesh Collider and pick it. This will create a Mesh Collider component in the col object. Click the arrowhead to the left of it to expand it and see its properties.
## '''Select Mesh''': In the Mesh Collider properties select the Mesh you want to use. If your FBX is all one object you can pick that, or you can pick a suitable primitive like cube or cylinder, etc.
## '''Position, Rotation, and Scale''': Set the position, rotation, and scale of the mesh to encompass the part. You should see a green mesh represented in the Scene window to help guide you to make sure you’ve got the right position, rotation, and scale.
## '''Convex''': Check “Convex”

=== Core Part Data setup ===
# '''Add Core Part Data''': Select your Root Part Object. In the Inspector Window click “Add Component”. Search for “Core Part Data” and pick that. Open it up and configure as follows:
## '''Part Name''': The Part Name needs to be the same as what you’ve used for the Root Part object, i.e., my_awesome_mod_my_part or whatever you used.
## '''Author''': Use what you like here, typically your KSP Forum screen name or whatever you go by as your modding author name.
## '''Category''': Select an appropriate category for your part.
## '''Family''': If you wish to identify a “Family” for your part, this needs to be a particular string. You can find examples in the game’s files, or part JSONS, or ask in the KSP2 Modding Society discord to get this information.
## '''Co Lift, Co Mass, Co Pressure, etc.''': These parameters allow you to set the Center of Lift, Center of Mass, Center of Pressure, etc. Adjust these to get the markers in the Unity scene where they should be for your part. Typically, Co Pressure and Co Lift are in the same place.
## '''Fuel Cross Feed''': Check if fuel should be able to transit through your part on the way to other parts. Typically set to true, but not always.
## '''Mass''': Set this in metric tons, not Kg.
## '''Attach Rules''': Check the types of attachment your part should allow. Checking “Stack” or “Srf Attach” will allow your part to attach in a stack or to a surface. Checking “Allow Stack”, “Allow Srf Attach”, etc. will allow other parts to stack attach or surface attach respectively. ''Currently (?) Allow Collision, Allow Dock, Allow Rotate, and Allow Root have no effect in game (check this)''.
## '''Attach Nodes''': If Stack is checked above, then you need a “top” and a “bottom” node, if Srf Attach is checked above, then you need a “srfAttach” node. Note, node names are case sensitive and having a node is not enough by itself, you do also need the corresponding Attach Rule set true or the node will have no effect. Under Attach Nodes click the + button to add a blank node and configure as needed.
### '''Node ID''': “top”, “bottom”, “srfAttach”, etc. (case sensitive!)
### '''Node Type''': Select as appropriate. (Stack for Stack, Surface for Surface…)
### '''Attach Method''': Select Fixed_Joint for Stack and Hinge_Joint for Surface Attach.
### '''Is Multi Joint''': In general set to True for stack attach to help prevent noodle rockets.
### '''Multi Joint Max Joint''': ''Set to 3 if you set Is Multi Joint to true?''
### '''Position''': Set as appropriate. Should be on the skin or outside of the part where you would expect to find it on your part in the VAB.
### '''Orientation''': Set as appropriate. The Orientation vector should be a unit vector (length 1) pointing in the direction of the part that will attach to the node, so pointing away from your part.
### '''Size''': Affects rigidity of your part. If your part is connected to another part with the same “size” node, then rigidity will be optimal, and otherwise it will be suboptimal.
### '''Visual Size''': Set the same as Size.
### '''Is Resource Crossfeed''': Set as needed for this node.
### '''Is Rigid''': Set as needed for this node.
### ''Rinse and Repeat'': Subsequent nodes created with the + button will inherit settings from the last node made, so this may accelerate the process as you just need to change the Node Id, Position and Orientation for new nodes that are similar to the previous created node.
# '''Add Module_Color''': You need this to be able to paint your part with base and accent colors. As above, click Add Component and search for Module Color.
# '''Add Module_Drag''': All parts need this. As above, click Add Component and search for Module Color.

== Crazy Customization (Adding functionalities to the part) ==
# '''Add other modules as needed'''. For example, if your part is an engine you’ll also need:
## '''thrustTransform''' object: Create an empty game object as a child of the root part and name it thrustTransform.
## '''Throttle VFX Manager''': Configure as needed (?). No need to drag anywhere, it just need to be a component for the part.
## '''Flameout VFX Data''': Drag this up to the Flameout VFX property in Module_Engine.
## '''Module_Gimbal''': Configure details as needed (e.g., Gimbal Range and Gimbal Speed, etc.), then drag this up to the Gimbal property in Module_Engine.
## '''Module_Generator''': Configure details as needed, then drag this up to the Alternator property in Module_Engine.
## '''Module_Fairing''': Unless you plan for your engine to only ever be on the very first stage (i.e., a big booster), then you probably want it to have a fairing so it can be used in the second stage and above. Figure 3 shows an example for a working fairing from a Size Small (1.25m-class) engine that was created using this process. Shown below is the corresponding example of the PartComponentModule_Fairing portion of  the part JSON. As can be seen in Figure 3, the data fields that need to be populated in the Unity Editor include only a subset of what's in the auto-generated JSON. That said, everything the editor needs is in the example below and presenting it this way makes copy/paste possible where unity editor graphic would not allow that.[[File:Module Fairing Data.png|thumb|Figure 3: Example Fairing Data in Unity Editor]]&lt;syntaxhighlight lang="json"&gt;
      {
        "Name": "PartComponentModule_Fairing",
        "ComponentType": "KSP.Sim.impl.PartComponentModule_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
        "BehaviourType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
        "ModuleData": [
          {
            "Name": "Data_Fairing",
            "ModuleType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
            "DataType": "KSP.Modules.Data_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
            "Data": null,
            "DataObject": {
              "$type": "KSP.Modules.Data_Fairing, Assembly-CSharp",
              "FairingEnabled": {
                "ContextKey": "FairingEnabled",
                "storedValue": true
              },
              "FairingConstructionType": {
                "ContextKey": "FairingConstructionType",
                "storedValue": "CUSTOM"
              },
              "FloatingNodeEnabled": {
                "ContextKey": "FloatingNodeEnabled",
                "storedValue": true
              },
              "Length": {
                "ContextKey": "Length",
                "storedValue": -1.0
              },
              "DeployType": {
                "ContextKey": "DeployType",
                "storedValue": "Clamshellx4"
              },
              "EjectionForce": {
                "ContextKey": "EjectionForce",
                "storedValue": 100.0
              },
              "IsStagingEnabled": {
                "ContextKey": "IsStagingEnabled",
                "storedValue": true
              },
              "IsDeployed": {
                "ContextKey": "IsDeployed",
                "storedValue": false
              },
              "FloatingNodeSize": 1.0,
              "FloatingAttachNodeTag": "bottom",
              "FloatingNodePosition": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "FloatingNodeDirection": {
                "x": 0.0,
                "y": -1.0,
                "z": 0.0
              },
              "FloatingNodeIsMultiJoint": false,
              "FloatingNodeMultiJointMaxCount": 3,
              "FloatingNodeMultiJointOffset": 1.0,
              "FairingNode": "top",
              "NoseTip": 0.5,
              "EdgeWarp": 0.02,
              "AberrantNormalLimit": 45.0,
              "LocalUpAxis": {
                "x": 0.0,
                "y": -1.0,
                "z": 0.0
              },
              "Pivot": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "BaseModelTransformName": "Base",
              "CapRadius": 0.375,
              "BaseRadius": 0.625,
              "CloseRadius": 0.375,
              "MaxRadius": 6.0,
              "SnapThreshold": 0.25,
              "CreateShellColliders": false,
              "NumberOfCollidersPerCrossSection": 12,
              "MinHeightRadiusRatio": 0.07,
              "CrossSectionHeightMin": 0.3,
              "CrossSectionHeightMax": 1.1,
              "AerodynamicallyShieldContents": false,
              "ConeSweepRays": 120,
              "ConeSweepPrecision": 10.0,
              "AmountOfCollidersPerArc": 1,
              "ShouldCapOnAutoGenerate": false,
              "IsCapped": false,
              "IsShroud": true,
              "MassAreaRatio": 0.0,
              "FairingSideCount": 24,
              "FairingLengthSnapIncrement": 0.125,
              "FairingRadiusSnapIncrement": 0.125,
              "FairingSmoothingAngle": 35.0,
              "FairingThickness": 0.025,
              "FairingStartHeight": 0.0,
              "AllowConstructionTypeChange": true,
              "AllowFloatingNodeChange": true,
              "DefaultFairingEnabledToggle": true,
              "DefaultAutoConstruction": true,
              "DefaultDeployType": "Shroud",
              "DefaultFloatingNodeState": true,
              "LengthEditMinimum": 0.0,
              "LengthEditMaximum": 0.001,
              "LengthEditDefault": 1.0,
              "StageToggleDefault": false,
              "MaxAutoFairingTargetRadius": -1,
              "MinAutoFairingTargetRadius": -1,
              "CrossSections": [],
              "MassModifierAmount": 0.0,
              "DragCubeIndex": -1,
              "ModuleType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
              "MassModifier": 0.0,
              "DataType": "KSP.Modules.Data_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
              "IsActiveInStagingProp": {
                "ContextKey": null,
                "storedValue": false
              }
            }
          }
        ]
      }
&lt;/syntaxhighlight&gt;Of the information show above, the parts you will most likely need to customize for your fairing are Base Radius, Cross Section Height Max, and Fairing Thickness - the rest is likely to be the same for all your engines with one other important thing to note. The example above is for an engine that was made in Blender with the nozzle bell facing upwards. If your engine was made with the nozzle bell facing down, then you will need the '''Local Up Axis''' to be -1 in Y and you will also need set the '''Fairing Node''' to bottom.

== Final Flourishes (Final steps) ==
# '''Apply Options''': Select the root part and in the Inspector window near the top on the '''Prefab''' line, click the '''Overrides''' dropdown and pick '''Apply All'''. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# '''Save Part JSON''': Click '''Save Part JSON''' button at the bottom of the '''Core Part Data''' module. This will put the resulting part JSON in the &lt;code&gt;Assets&lt;/code&gt; folder for your Unity project. You need to do this any time you’ve edited the '''Core Part Data''' module (or also a module it depends on?).
# '''Make Prefab''': Grab the root part object and drag it to the Unity project &lt;code&gt;Assets&lt;/code&gt; folder.
# '''Add Part Icon''': Create an icon for your part that the game will use in the parts picker. This needs to be a PNG file with specific dimensions. It should conform to the style used by other parts in the game. However you do this, you need to name the file &lt;code&gt;&lt;part_name&gt;_icon.png&lt;/code&gt;, and you need to drag that file into the &lt;code&gt;Assets&lt;/code&gt; folder in Unity.
## '''Convert Icon to Sprite''': Select the part icon in the Assets folder. In the Inspector window, click the pulldown menu for Texture Type and change this from Default to Sprite (2D and UI), then click '''Apply'''. If this is not done, your lovely icon will not display!
# '''Make Root Part Addressable:''' Select the root part’s prefab in the &lt;code&gt;Assets&lt;/code&gt; folder and in the '''Inspector''' window check the box for '''Addressable'''.
# '''Make JSON Addressable''': Select the part’s JSON in the &lt;code&gt;Assets&lt;/code&gt; folder and in the '''Inspector''' window check the box for '''Addressable'''.
# '''Make the Icon Addressable''': Select the root part’s icon in the &lt;code&gt;Assets&lt;/code&gt; folder and in the '''Inspector''' window check the box for '''Addressable'''.
# '''Configure Addressable Properties''': In the '''Addressables Groups''' expand your mod's Group and find your part.
## '''Group Name \ Addressable Name''': Change the information in the '''Group Name''' '''\''' '''Addressable Name''' from &lt;code&gt;Assets/&lt;part_name&gt;*&lt;/code&gt; to be just &lt;code&gt;&lt;part_name&gt;*&lt;/code&gt;. So &lt;code&gt;Assets/&lt;part_name&gt;.prefab&lt;/code&gt; becomes &lt;code&gt;&lt;part_name&gt;.prefab&lt;/code&gt;, and so forth. You can leave the &lt;code&gt;Assets/&lt;/code&gt; part of the path definition alone for each of these, that’s as it should be. The value for the '''Addressable Name''' needs to be the same as the file name it’s associated with and must not include any path parts. All of these need to be based on the '''Part Name''' established in the '''Core Part Data''' module.
## '''Labels''': For the JSON set this to &lt;code&gt;parts_data&lt;/code&gt;. Leave it blank for the prefab. If &lt;code&gt;parts_data&lt;/code&gt; is not an option in the dropdown for Labels, then click '''Manage Labels''', click the + button to add a new label, and set the '''Label Name''' to &lt;code&gt;parts_data&lt;/code&gt;. Click '''Save'''.
# '''Build Mod or Build And Test''': Select either Build Mod or Build And Test to have KSP2 Unity Tools prepare and deploy your parts pack mod.
# '''Launch Game and Test!'''
# '''''Rinse and Repeat for Additional Parts'''''
== '''Mentions''' ==
This guide is based on the videos: How to create parts for KSP2 and How to make engines for KSP2 (see: [[Part modding videos (tutorials)]]), and on other notes and guidance from the KSP2 Modding Society discord.

Also the web pages: [https://luxstice.notion.site/KSP2-Part-tutorial-almost-from-scratch-1f336b7c97ae4280afb6a4e3aa6080b2 KSP2 Part tutorial (almost) from scratch], and [https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314 Tutorial: My First Part]

[[Category:Parts and modules]]</text>
      <sha1>mjctvw8ncsxl9lteoj8h6khwnzwun71</sha1>
    </revision>
    <revision>
      <id>437</id>
      <parentid>434</parentid>
      <timestamp>2024-02-24T11:46:11Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <comment>/* Mesh setup */</comment>
      <origin>437</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="24044" sha1="h3afr03zi71xw81ivtw91zlfzabzze0" xml:space="preserve">The aim of this tutorial is to guide you through the process of creating your first '''part mod''' for Kerbal Space Program 2. We will go over everything from creating the part's mesh and textures to setting up the part in Unity to be bundled into a KSP2 mod.

The way this tutorial will be structured is as a succession of steps which may link to other tutorials on this wiki, do not hesitate to keep this main page open while perusing the other tutorials. We aim at being as comprehensive as possible to enable you to make any part mod, but this page is still work in progress so stuff might be incomplete and/or subject to change in the future.

== Magnificent Mesh Modelling (Creating the part asset) ==
The first step in your part mod creation journey is to create the part's "3D asset", meaning its 3D mesh, textures and eventual animations. You can use any software you're comfortable with to do so but here are some guides for some specific software if you desire:

# [[Modeling the mesh in Blender]]
# [[Texturing the mesh in Substance 3D Painter]]

Here are some resources that can be useful for modelling and texturing, regardless of the software you're using:

* [[Sizes]]
* [[Texturing]]

== Part Pack Prep (Basic Unity part mod project setup) ==
Now that you have created a model and textures for your part, the next step is to set up a Unity project that will be used to configure your part and build the asset bundles that will contain your mod's contents.

# '''Creating the project:''' Follow the [[Setting up Unity]] tutorial to create and set up a project for part modding.
# '''Parts Pack folder''': Under Assets, create a folder (R-Click Assets: Create &gt; Folder) and name it the same as your parts pack mod. If your mod is called My Awesome Mod then this would be &lt;code&gt;Assets\MyAwesomeMod&lt;/code&gt;.
# '''Materials folder''': Inside your parts pack folder create a folder called Materials. You’ll be storing the textures and materials you need there. E.g., &lt;code&gt;Assets\MyAwesomeMod\Materials&lt;/code&gt;. This is just to aid in organization.
# '''Parts folder''': Inside your parts pack folder create a folder called Parts. You’ll be storing the part meshes and related things there. E.g., &lt;code&gt;Assets\MyAwesomeMod\Parts&lt;/code&gt;. You can have whatever organization you like here, so if you want to group some parts you might create group folders within Parts (e.g., Methalox Engines, Nuclear Engines, Ion Engines, etc.). This is just to aid in organization and is optional.
# '''Plugin Folder and Content''': In your Unity project's &lt;code&gt;Assets\plugin_template&lt;/code&gt; folder create a &lt;code&gt;localizations&lt;/code&gt; folder. '''NOTE!''' This is currently required to be exactly this – localizations (plural), not localization (singular). This will be where you put the localization file.
## Create Localization file: Localization files are CSV files following a particular format. These must have lines ending with LF not LF/NL, and they must reference the same &lt;part_name&gt; you use in the Part Production process below. There are some other restrictions for content, particularly that if you want a string that contains a “,” that string needs to be enclosed in quotes or the comma will mess with how the strings are parsed. These files are where the part’s Title, Subtitle, Manufacturer, and Description are configured. Here’s an example:&lt;syntaxhighlight lang="text"&gt;
Key,Type,Desc,English,French

Parts/Title/spark_spt100,Text,,SPT-100,SPT-100
Parts/Subtitle/spark_spt100,Text,,Hall Effect Thruster with Xenon Tank,Moteur à Effet Hall et Réservoir de Xénon
Parts/Manufacturer/spark_spt100,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc.","Stellar Plasma-Assisted Rocket Kinetics, inc."
Parts/Description/spark_spt100,Text,,"The SPT-100 is the pinnacle in tiny (0.625m-class) Ion engines, providing high Isp and low thrust with an integral toroidal xenon tank. Strap this little guy onto a probe core and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!","Le SPT-100 a le dessus dans la catégorie des très petits (0.625m) moteurs ioniques, avec une haute impulsion spécifique et une poussée faible ainsi qu'un réservoir toroïdal de xénon intégré. Accrochez ce petit gars à vos sondes et assurez-vous d'avoir du stock d'électrons car vous allez aller de partout bien lentement!"

Parts/Title/spark_x3,Text,,X3 NHT,X3 NHT
Parts/Subtitle/spark_x3,Text,,Three-Channel Nested Hall Effect Thruster,Moteur à Effet Hall à 3 Canaux Concentriques
Parts/Manufacturer/spark_x3,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc.","Stellar Plasma-Assisted Rocket Kinetics, inc."
Parts/Description/spark_x3,Text,,"The SPARK X3 is the pinnacle in small (1.25m-class) Ion engines, providing high Isp and low thrust. Strap this bad boy onto your large probe or small capsule and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!","Le SPARK X3 a le dessus dans la catégorie des petits (1.25m) moteurs ioniques, avec une haute impulsion spécifique et une poussée faible ainsi qu'un réservoir toroïdal de xénon intégré. Accrochez ce petit gars à vos grandes sondes et assurez-vous d'avoir du stock d'électrons car vous allez aller de partout bien lentement!"
&lt;/syntaxhighlight&gt;

== Primary Part Production (Basic part setup) ==
This part of the tutorial will go over how to create a basic KSP2 part in Unity.
# '''Create Root Part Object''': Create an empty game object under your scene (R-click '''Scene''': '''Game Object''' '''&gt;''' '''Create Empty'''). Name this object the same as your part.
## Recommended naming scheme: &lt;code&gt;&lt;mod_name&gt;_&lt;part_name&gt;&lt;/code&gt;. If your mod is called &lt;code&gt;My Awesome Mod&lt;/code&gt; and your part title is &lt;code&gt;My Part&lt;/code&gt;, then your part name might be &lt;code&gt;my_awesome_mod_my_part&lt;/code&gt; for example. Part names must be unique, though you can have any descriptive title you like (that is done later in Localization). A naming scheme like this helps to prevent naming collisions in case anyone else might make a part they want to call &lt;code&gt;My Part&lt;/code&gt;, like yours.
# '''Create Model Object''': Create an empty game object under your root part object and name this one &lt;code&gt;model&lt;/code&gt;.
# '''Create Part Folder''': Create a Part folder named for your part inside your Parts folder. E.g., &lt;code&gt;Assets\MyAwesomeMod\Parts\MyPart&lt;/code&gt;, or &lt;code&gt;Assets\MyAwesomeMod\Parts\ThisGroup\MyPart&lt;/code&gt; if you’re grouping parts.

=== Mesh setup ===
# '''Bring in the Mesh''': Drag a copy of your part’s FBX file into the part folder. If you have baked textures for your part that go with the FBX (meaning, they’re based on the UV Unwrap specific to that FBX), then drag those into this same folder along with the FBX.
# '''Create Part Mesh Object''': Drag a copy of the part's FBX from the Part folder in Unity to the &lt;code&gt;model&lt;/code&gt; object created in step 2. Don’t drag the FBX file from your computer’s files system, you need to use the copy you just placed in step 4. This will create a '''prefab''' for your part as a child of the model object.
# '''Unpack Prefab''': Right-Click part object: '''Prefab &gt; Unpack'''.
# '''Remove Unnecessary Things''': Remove any objects that came in with the FBX that you don’t actually need in the game like lights, cameras, empty nodes, etc. If it’s not an actual object you want the game to render, then delete it.
# '''Orient Part''': Your model will appear in the Unity scene oriented as you built it in Blender, but this may not be the way you want it to be oriented in the game. If you need changes to the position, rotation, or scale of the part do those now using the Transform panel within the Inspector Window with your part object selected. For example, to flip a part over just give a rotation of 180 in Z, etc.

=== Material setup ===

# '''Create the material:''' Create a material in Unity for each material in Substance Painter (right-click on the project window &gt; '''Create &gt; Material''')
# '''Select the KSP2 Shader:''' Select all materials. In the '''Inspector''' window, in '''Shader''', select '''KSP &gt; Parts &gt; Paintable'''.
# '''Apply the textures:''' For each material, assign the textures to the '''Albedo''', '''Metallic''', '''Normal''', '''Emissive''' and '''Paintable''' channels.
## For Normal channels, click the '''Fix Now''' button.
# '''Apply materials:''' For each mesh, assign the materials to the corresponding locations. Click on '''Apply'''.

=== Collider setup ===
# '''Create Collider Object''': R-Click &lt;code&gt;mesh&lt;/code&gt; object: Create Empty. Name this object &lt;code&gt;col&lt;/code&gt;.
# '''Create Collider''': In the Inspector window for the col object click “Add Component”. Search for Mesh Collider and pick it. This will create a Mesh Collider component in the col object. Click the arrowhead to the left of it to expand it and see its properties.
## '''Select Mesh''': In the Mesh Collider properties select the Mesh you want to use. If your FBX is all one object you can pick that, or you can pick a suitable primitive like cube or cylinder, etc.
## '''Position, Rotation, and Scale''': Set the position, rotation, and scale of the mesh to encompass the part. You should see a green mesh represented in the Scene window to help guide you to make sure you’ve got the right position, rotation, and scale.
## '''Convex''': Check “Convex”

=== Core Part Data setup ===
# '''Add Core Part Data''': Select your Root Part Object. In the Inspector Window click “Add Component”. Search for “Core Part Data” and pick that. Open it up and configure as follows:
## '''Part Name''': The Part Name needs to be the same as what you’ve used for the Root Part object, i.e., my_awesome_mod_my_part or whatever you used.
## '''Author''': Use what you like here, typically your KSP Forum screen name or whatever you go by as your modding author name.
## '''Category''': Select an appropriate category for your part.
## '''Family''': If you wish to identify a “Family” for your part, this needs to be a particular string. You can find examples in the game’s files, or part JSONS, or ask in the KSP2 Modding Society discord to get this information.
## '''Co Lift, Co Mass, Co Pressure, etc.''': These parameters allow you to set the Center of Lift, Center of Mass, Center of Pressure, etc. Adjust these to get the markers in the Unity scene where they should be for your part. Typically, Co Pressure and Co Lift are in the same place.
## '''Fuel Cross Feed''': Check if fuel should be able to transit through your part on the way to other parts. Typically set to true, but not always.
## '''Mass''': Set this in metric tons, not Kg.
## '''Attach Rules''': Check the types of attachment your part should allow. Checking “Stack” or “Srf Attach” will allow your part to attach in a stack or to a surface. Checking “Allow Stack”, “Allow Srf Attach”, etc. will allow other parts to stack attach or surface attach respectively. ''Currently (?) Allow Collision, Allow Dock, Allow Rotate, and Allow Root have no effect in game (check this)''.
## '''Attach Nodes''': If Stack is checked above, then you need a “top” and a “bottom” node, if Srf Attach is checked above, then you need a “srfAttach” node. Note, node names are case sensitive and having a node is not enough by itself, you do also need the corresponding Attach Rule set true or the node will have no effect. Under Attach Nodes click the + button to add a blank node and configure as needed.
### '''Node ID''': “top”, “bottom”, “srfAttach”, etc. (case sensitive!)
### '''Node Type''': Select as appropriate. (Stack for Stack, Surface for Surface…)
### '''Attach Method''': Select Fixed_Joint for Stack and Hinge_Joint for Surface Attach.
### '''Is Multi Joint''': In general set to True for stack attach to help prevent noodle rockets.
### '''Multi Joint Max Joint''': ''Set to 3 if you set Is Multi Joint to true?''
### '''Position''': Set as appropriate. Should be on the skin or outside of the part where you would expect to find it on your part in the VAB.
### '''Orientation''': Set as appropriate. The Orientation vector should be a unit vector (length 1) pointing in the direction of the part that will attach to the node, so pointing away from your part.
### '''Size''': Affects rigidity of your part. If your part is connected to another part with the same “size” node, then rigidity will be optimal, and otherwise it will be suboptimal.
### '''Visual Size''': Set the same as Size.
### '''Is Resource Crossfeed''': Set as needed for this node.
### '''Is Rigid''': Set as needed for this node.
### ''Rinse and Repeat'': Subsequent nodes created with the + button will inherit settings from the last node made, so this may accelerate the process as you just need to change the Node Id, Position and Orientation for new nodes that are similar to the previous created node.
# '''Add Module_Color''': You need this to be able to paint your part with base and accent colors. As above, click Add Component and search for Module Color.
# '''Add Module_Drag''': All parts need this. As above, click Add Component and search for Module Color.

== Crazy Customization (Adding functionalities to the part) ==
# '''Add other modules as needed'''. For example, if your part is an engine you’ll also need:
## '''thrustTransform''' object: Create an empty game object as a child of the root part and name it thrustTransform.
## '''Throttle VFX Manager''': Configure as needed (?). No need to drag anywhere, it just need to be a component for the part.
## '''Flameout VFX Data''': Drag this up to the Flameout VFX property in Module_Engine.
## '''Module_Gimbal''': Configure details as needed (e.g., Gimbal Range and Gimbal Speed, etc.), then drag this up to the Gimbal property in Module_Engine.
## '''Module_Generator''': Configure details as needed, then drag this up to the Alternator property in Module_Engine.
## '''Module_Fairing''': Unless you plan for your engine to only ever be on the very first stage (i.e., a big booster), then you probably want it to have a fairing so it can be used in the second stage and above. Figure 3 shows an example for a working fairing from a Size Small (1.25m-class) engine that was created using this process. Shown below is the corresponding example of the PartComponentModule_Fairing portion of  the part JSON. As can be seen in Figure 3, the data fields that need to be populated in the Unity Editor include only a subset of what's in the auto-generated JSON. That said, everything the editor needs is in the example below and presenting it this way makes copy/paste possible where unity editor graphic would not allow that.[[File:Module Fairing Data.png|thumb|Figure 3: Example Fairing Data in Unity Editor]]&lt;syntaxhighlight lang="json"&gt;
      {
        "Name": "PartComponentModule_Fairing",
        "ComponentType": "KSP.Sim.impl.PartComponentModule_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
        "BehaviourType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
        "ModuleData": [
          {
            "Name": "Data_Fairing",
            "ModuleType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
            "DataType": "KSP.Modules.Data_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
            "Data": null,
            "DataObject": {
              "$type": "KSP.Modules.Data_Fairing, Assembly-CSharp",
              "FairingEnabled": {
                "ContextKey": "FairingEnabled",
                "storedValue": true
              },
              "FairingConstructionType": {
                "ContextKey": "FairingConstructionType",
                "storedValue": "CUSTOM"
              },
              "FloatingNodeEnabled": {
                "ContextKey": "FloatingNodeEnabled",
                "storedValue": true
              },
              "Length": {
                "ContextKey": "Length",
                "storedValue": -1.0
              },
              "DeployType": {
                "ContextKey": "DeployType",
                "storedValue": "Clamshellx4"
              },
              "EjectionForce": {
                "ContextKey": "EjectionForce",
                "storedValue": 100.0
              },
              "IsStagingEnabled": {
                "ContextKey": "IsStagingEnabled",
                "storedValue": true
              },
              "IsDeployed": {
                "ContextKey": "IsDeployed",
                "storedValue": false
              },
              "FloatingNodeSize": 1.0,
              "FloatingAttachNodeTag": "bottom",
              "FloatingNodePosition": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "FloatingNodeDirection": {
                "x": 0.0,
                "y": -1.0,
                "z": 0.0
              },
              "FloatingNodeIsMultiJoint": false,
              "FloatingNodeMultiJointMaxCount": 3,
              "FloatingNodeMultiJointOffset": 1.0,
              "FairingNode": "top",
              "NoseTip": 0.5,
              "EdgeWarp": 0.02,
              "AberrantNormalLimit": 45.0,
              "LocalUpAxis": {
                "x": 0.0,
                "y": -1.0,
                "z": 0.0
              },
              "Pivot": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "BaseModelTransformName": "Base",
              "CapRadius": 0.375,
              "BaseRadius": 0.625,
              "CloseRadius": 0.375,
              "MaxRadius": 6.0,
              "SnapThreshold": 0.25,
              "CreateShellColliders": false,
              "NumberOfCollidersPerCrossSection": 12,
              "MinHeightRadiusRatio": 0.07,
              "CrossSectionHeightMin": 0.3,
              "CrossSectionHeightMax": 1.1,
              "AerodynamicallyShieldContents": false,
              "ConeSweepRays": 120,
              "ConeSweepPrecision": 10.0,
              "AmountOfCollidersPerArc": 1,
              "ShouldCapOnAutoGenerate": false,
              "IsCapped": false,
              "IsShroud": true,
              "MassAreaRatio": 0.0,
              "FairingSideCount": 24,
              "FairingLengthSnapIncrement": 0.125,
              "FairingRadiusSnapIncrement": 0.125,
              "FairingSmoothingAngle": 35.0,
              "FairingThickness": 0.025,
              "FairingStartHeight": 0.0,
              "AllowConstructionTypeChange": true,
              "AllowFloatingNodeChange": true,
              "DefaultFairingEnabledToggle": true,
              "DefaultAutoConstruction": true,
              "DefaultDeployType": "Shroud",
              "DefaultFloatingNodeState": true,
              "LengthEditMinimum": 0.0,
              "LengthEditMaximum": 0.001,
              "LengthEditDefault": 1.0,
              "StageToggleDefault": false,
              "MaxAutoFairingTargetRadius": -1,
              "MinAutoFairingTargetRadius": -1,
              "CrossSections": [],
              "MassModifierAmount": 0.0,
              "DragCubeIndex": -1,
              "ModuleType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
              "MassModifier": 0.0,
              "DataType": "KSP.Modules.Data_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
              "IsActiveInStagingProp": {
                "ContextKey": null,
                "storedValue": false
              }
            }
          }
        ]
      }
&lt;/syntaxhighlight&gt;Of the information show above, the parts you will most likely need to customize for your fairing are Base Radius, Cross Section Height Max, and Fairing Thickness - the rest is likely to be the same for all your engines with one other important thing to note. The example above is for an engine that was made in Blender with the nozzle bell facing upwards. If your engine was made with the nozzle bell facing down, then you will need the '''Local Up Axis''' to be -1 in Y and you will also need set the '''Fairing Node''' to bottom.

== Final Flourishes (Final steps) ==
# '''Apply Options''': Select the root part and in the Inspector window near the top on the '''Prefab''' line, click the '''Overrides''' dropdown and pick '''Apply All'''. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# '''Save Part JSON''': Click '''Save Part JSON''' button at the bottom of the '''Core Part Data''' module. This will put the resulting part JSON in the &lt;code&gt;Assets&lt;/code&gt; folder for your Unity project. You need to do this any time you’ve edited the '''Core Part Data''' module (or also a module it depends on?).
# '''Make Prefab''': Grab the root part object and drag it to the Unity project &lt;code&gt;Assets&lt;/code&gt; folder.
# '''Add Part Icon''': Create an icon for your part that the game will use in the parts picker. This needs to be a PNG file with specific dimensions. It should conform to the style used by other parts in the game. However you do this, you need to name the file &lt;code&gt;&lt;part_name&gt;_icon.png&lt;/code&gt;, and you need to drag that file into the &lt;code&gt;Assets&lt;/code&gt; folder in Unity.
## '''Convert Icon to Sprite''': Select the part icon in the Assets folder. In the Inspector window, click the pulldown menu for Texture Type and change this from Default to Sprite (2D and UI), then click '''Apply'''. If this is not done, your lovely icon will not display!
# '''Make Root Part Addressable:''' Select the root part’s prefab in the &lt;code&gt;Assets&lt;/code&gt; folder and in the '''Inspector''' window check the box for '''Addressable'''.
# '''Make JSON Addressable''': Select the part’s JSON in the &lt;code&gt;Assets&lt;/code&gt; folder and in the '''Inspector''' window check the box for '''Addressable'''.
# '''Make the Icon Addressable''': Select the root part’s icon in the &lt;code&gt;Assets&lt;/code&gt; folder and in the '''Inspector''' window check the box for '''Addressable'''.
# '''Configure Addressable Properties''': In the '''Addressables Groups''' expand your mod's Group and find your part.
## '''Group Name \ Addressable Name''': Change the information in the '''Group Name''' '''\''' '''Addressable Name''' from &lt;code&gt;Assets/&lt;part_name&gt;*&lt;/code&gt; to be just &lt;code&gt;&lt;part_name&gt;*&lt;/code&gt;. So &lt;code&gt;Assets/&lt;part_name&gt;.prefab&lt;/code&gt; becomes &lt;code&gt;&lt;part_name&gt;.prefab&lt;/code&gt;, and so forth. You can leave the &lt;code&gt;Assets/&lt;/code&gt; part of the path definition alone for each of these, that’s as it should be. The value for the '''Addressable Name''' needs to be the same as the file name it’s associated with and must not include any path parts. All of these need to be based on the '''Part Name''' established in the '''Core Part Data''' module.
## '''Labels''': For the JSON set this to &lt;code&gt;parts_data&lt;/code&gt;. Leave it blank for the prefab. If &lt;code&gt;parts_data&lt;/code&gt; is not an option in the dropdown for Labels, then click '''Manage Labels''', click the + button to add a new label, and set the '''Label Name''' to &lt;code&gt;parts_data&lt;/code&gt;. Click '''Save'''.
# '''Build Mod or Build And Test''': Select either Build Mod or Build And Test to have KSP2 Unity Tools prepare and deploy your parts pack mod.
# '''Launch Game and Test!'''
# '''''Rinse and Repeat for Additional Parts'''''
== '''Mentions''' ==
This guide is based on the videos: How to create parts for KSP2 and How to make engines for KSP2 (see: [[Part modding videos (tutorials)]]), and on other notes and guidance from the KSP2 Modding Society discord.

Also the web pages: [https://luxstice.notion.site/KSP2-Part-tutorial-almost-from-scratch-1f336b7c97ae4280afb6a4e3aa6080b2 KSP2 Part tutorial (almost) from scratch], and [https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314 Tutorial: My First Part]

[[Category:Parts and modules]]</text>
      <sha1>h3afr03zi71xw81ivtw91zlfzabzze0</sha1>
    </revision>
    <revision>
      <id>439</id>
      <parentid>437</parentid>
      <timestamp>2024-03-08T19:41:06Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>/* Material setup */</comment>
      <origin>439</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="24158" sha1="c5fgovcikg3hxzgaibh4fxw8qc4ppmy" xml:space="preserve">The aim of this tutorial is to guide you through the process of creating your first '''part mod''' for Kerbal Space Program 2. We will go over everything from creating the part's mesh and textures to setting up the part in Unity to be bundled into a KSP2 mod.

The way this tutorial will be structured is as a succession of steps which may link to other tutorials on this wiki, do not hesitate to keep this main page open while perusing the other tutorials. We aim at being as comprehensive as possible to enable you to make any part mod, but this page is still work in progress so stuff might be incomplete and/or subject to change in the future.

== Magnificent Mesh Modelling (Creating the part asset) ==
The first step in your part mod creation journey is to create the part's "3D asset", meaning its 3D mesh, textures and eventual animations. You can use any software you're comfortable with to do so but here are some guides for some specific software if you desire:

# [[Modeling the mesh in Blender]]
# [[Texturing the mesh in Substance 3D Painter]]

Here are some resources that can be useful for modelling and texturing, regardless of the software you're using:

* [[Sizes]]
* [[Texturing]]

== Part Pack Prep (Basic Unity part mod project setup) ==
Now that you have created a model and textures for your part, the next step is to set up a Unity project that will be used to configure your part and build the asset bundles that will contain your mod's contents.

# '''Creating the project:''' Follow the [[Setting up Unity]] tutorial to create and set up a project for part modding.
# '''Parts Pack folder''': Under Assets, create a folder (R-Click Assets: Create &gt; Folder) and name it the same as your parts pack mod. If your mod is called My Awesome Mod then this would be &lt;code&gt;Assets\MyAwesomeMod&lt;/code&gt;.
# '''Materials folder''': Inside your parts pack folder create a folder called Materials. You’ll be storing the textures and materials you need there. E.g., &lt;code&gt;Assets\MyAwesomeMod\Materials&lt;/code&gt;. This is just to aid in organization.
# '''Parts folder''': Inside your parts pack folder create a folder called Parts. You’ll be storing the part meshes and related things there. E.g., &lt;code&gt;Assets\MyAwesomeMod\Parts&lt;/code&gt;. You can have whatever organization you like here, so if you want to group some parts you might create group folders within Parts (e.g., Methalox Engines, Nuclear Engines, Ion Engines, etc.). This is just to aid in organization and is optional.
# '''Plugin Folder and Content''': In your Unity project's &lt;code&gt;Assets\plugin_template&lt;/code&gt; folder create a &lt;code&gt;localizations&lt;/code&gt; folder. '''NOTE!''' This is currently required to be exactly this – localizations (plural), not localization (singular). This will be where you put the localization file.
## Create Localization file: Localization files are CSV files following a particular format. These must have lines ending with LF not LF/NL, and they must reference the same &lt;part_name&gt; you use in the Part Production process below. There are some other restrictions for content, particularly that if you want a string that contains a “,” that string needs to be enclosed in quotes or the comma will mess with how the strings are parsed. These files are where the part’s Title, Subtitle, Manufacturer, and Description are configured. Here’s an example:&lt;syntaxhighlight lang="text"&gt;
Key,Type,Desc,English,French

Parts/Title/spark_spt100,Text,,SPT-100,SPT-100
Parts/Subtitle/spark_spt100,Text,,Hall Effect Thruster with Xenon Tank,Moteur à Effet Hall et Réservoir de Xénon
Parts/Manufacturer/spark_spt100,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc.","Stellar Plasma-Assisted Rocket Kinetics, inc."
Parts/Description/spark_spt100,Text,,"The SPT-100 is the pinnacle in tiny (0.625m-class) Ion engines, providing high Isp and low thrust with an integral toroidal xenon tank. Strap this little guy onto a probe core and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!","Le SPT-100 a le dessus dans la catégorie des très petits (0.625m) moteurs ioniques, avec une haute impulsion spécifique et une poussée faible ainsi qu'un réservoir toroïdal de xénon intégré. Accrochez ce petit gars à vos sondes et assurez-vous d'avoir du stock d'électrons car vous allez aller de partout bien lentement!"

Parts/Title/spark_x3,Text,,X3 NHT,X3 NHT
Parts/Subtitle/spark_x3,Text,,Three-Channel Nested Hall Effect Thruster,Moteur à Effet Hall à 3 Canaux Concentriques
Parts/Manufacturer/spark_x3,Text,,"Stellar Plasma-Assisted Rocket Kinetics, inc.","Stellar Plasma-Assisted Rocket Kinetics, inc."
Parts/Description/spark_x3,Text,,"The SPARK X3 is the pinnacle in small (1.25m-class) Ion engines, providing high Isp and low thrust. Strap this bad boy onto your large probe or small capsule and be sure to bring plenty of electrons because you're in for a long slow ride to anywhere!","Le SPARK X3 a le dessus dans la catégorie des petits (1.25m) moteurs ioniques, avec une haute impulsion spécifique et une poussée faible ainsi qu'un réservoir toroïdal de xénon intégré. Accrochez ce petit gars à vos grandes sondes et assurez-vous d'avoir du stock d'électrons car vous allez aller de partout bien lentement!"
&lt;/syntaxhighlight&gt;

== Primary Part Production (Basic part setup) ==
This part of the tutorial will go over how to create a basic KSP2 part in Unity.
# '''Create Root Part Object''': Create an empty game object under your scene (R-click '''Scene''': '''Game Object''' '''&gt;''' '''Create Empty'''). Name this object the same as your part.
## Recommended naming scheme: &lt;code&gt;&lt;mod_name&gt;_&lt;part_name&gt;&lt;/code&gt;. If your mod is called &lt;code&gt;My Awesome Mod&lt;/code&gt; and your part title is &lt;code&gt;My Part&lt;/code&gt;, then your part name might be &lt;code&gt;my_awesome_mod_my_part&lt;/code&gt; for example. Part names must be unique, though you can have any descriptive title you like (that is done later in Localization). A naming scheme like this helps to prevent naming collisions in case anyone else might make a part they want to call &lt;code&gt;My Part&lt;/code&gt;, like yours.
# '''Create Model Object''': Create an empty game object under your root part object and name this one &lt;code&gt;model&lt;/code&gt;.
# '''Create Part Folder''': Create a Part folder named for your part inside your Parts folder. E.g., &lt;code&gt;Assets\MyAwesomeMod\Parts\MyPart&lt;/code&gt;, or &lt;code&gt;Assets\MyAwesomeMod\Parts\ThisGroup\MyPart&lt;/code&gt; if you’re grouping parts.

=== Mesh setup ===
# '''Bring in the Mesh''': Drag a copy of your part’s FBX file into the part folder. If you have baked textures for your part that go with the FBX (meaning, they’re based on the UV Unwrap specific to that FBX), then drag those into this same folder along with the FBX.
# '''Create Part Mesh Object''': Drag a copy of the part's FBX from the Part folder in Unity to the &lt;code&gt;model&lt;/code&gt; object created in step 2. Don’t drag the FBX file from your computer’s files system, you need to use the copy you just placed in step 4. This will create a '''prefab''' for your part as a child of the model object.
# '''Unpack Prefab''': Right-Click part object: '''Prefab &gt; Unpack'''.
# '''Remove Unnecessary Things''': Remove any objects that came in with the FBX that you don’t actually need in the game like lights, cameras, empty nodes, etc. If it’s not an actual object you want the game to render, then delete it.
# '''Orient Part''': Your model will appear in the Unity scene oriented as you built it in Blender, but this may not be the way you want it to be oriented in the game. If you need changes to the position, rotation, or scale of the part do those now using the Transform panel within the Inspector Window with your part object selected. For example, to flip a part over just give a rotation of 180 in Z, etc.

=== Material setup ===

# '''Create the material:''' Create a material in Unity for each material in Substance Painter (right-click on the project window &gt; '''Create &gt; Material''')
# '''Select the KSP2 Shader:''' Select all materials. In the '''Inspector''' window, in '''Shader''', select '''KSP &gt; Parts &gt; Paintable'''.
# '''Apply the textures:''' For each material, assign the textures to the '''Albedo''', '''Metallic''', '''Normal''', '''Emissive''' and '''Paintable''' channels.
## For Normal channels, click the '''Fix Now''' button.
#'''Set properties''': Set '''Metallic/Smoothness Map''' to 1 and check '''Use PaintMask for Paint Smoothness'''.
# '''Apply materials:''' For each mesh, assign the materials to the corresponding locations. Click on '''Apply'''.

=== Collider setup ===
# '''Create Collider Object''': R-Click &lt;code&gt;mesh&lt;/code&gt; object: Create Empty. Name this object &lt;code&gt;col&lt;/code&gt;.
# '''Create Collider''': In the Inspector window for the col object click “Add Component”. Search for Mesh Collider and pick it. This will create a Mesh Collider component in the col object. Click the arrowhead to the left of it to expand it and see its properties.
## '''Select Mesh''': In the Mesh Collider properties select the Mesh you want to use. If your FBX is all one object you can pick that, or you can pick a suitable primitive like cube or cylinder, etc.
## '''Position, Rotation, and Scale''': Set the position, rotation, and scale of the mesh to encompass the part. You should see a green mesh represented in the Scene window to help guide you to make sure you’ve got the right position, rotation, and scale.
## '''Convex''': Check “Convex”

=== Core Part Data setup ===
# '''Add Core Part Data''': Select your Root Part Object. In the Inspector Window click “Add Component”. Search for “Core Part Data” and pick that. Open it up and configure as follows:
## '''Part Name''': The Part Name needs to be the same as what you’ve used for the Root Part object, i.e., my_awesome_mod_my_part or whatever you used.
## '''Author''': Use what you like here, typically your KSP Forum screen name or whatever you go by as your modding author name.
## '''Category''': Select an appropriate category for your part.
## '''Family''': If you wish to identify a “Family” for your part, this needs to be a particular string. You can find examples in the game’s files, or part JSONS, or ask in the KSP2 Modding Society discord to get this information.
## '''Co Lift, Co Mass, Co Pressure, etc.''': These parameters allow you to set the Center of Lift, Center of Mass, Center of Pressure, etc. Adjust these to get the markers in the Unity scene where they should be for your part. Typically, Co Pressure and Co Lift are in the same place.
## '''Fuel Cross Feed''': Check if fuel should be able to transit through your part on the way to other parts. Typically set to true, but not always.
## '''Mass''': Set this in metric tons, not Kg.
## '''Attach Rules''': Check the types of attachment your part should allow. Checking “Stack” or “Srf Attach” will allow your part to attach in a stack or to a surface. Checking “Allow Stack”, “Allow Srf Attach”, etc. will allow other parts to stack attach or surface attach respectively. ''Currently (?) Allow Collision, Allow Dock, Allow Rotate, and Allow Root have no effect in game (check this)''.
## '''Attach Nodes''': If Stack is checked above, then you need a “top” and a “bottom” node, if Srf Attach is checked above, then you need a “srfAttach” node. Note, node names are case sensitive and having a node is not enough by itself, you do also need the corresponding Attach Rule set true or the node will have no effect. Under Attach Nodes click the + button to add a blank node and configure as needed.
### '''Node ID''': “top”, “bottom”, “srfAttach”, etc. (case sensitive!)
### '''Node Type''': Select as appropriate. (Stack for Stack, Surface for Surface…)
### '''Attach Method''': Select Fixed_Joint for Stack and Hinge_Joint for Surface Attach.
### '''Is Multi Joint''': In general set to True for stack attach to help prevent noodle rockets.
### '''Multi Joint Max Joint''': ''Set to 3 if you set Is Multi Joint to true?''
### '''Position''': Set as appropriate. Should be on the skin or outside of the part where you would expect to find it on your part in the VAB.
### '''Orientation''': Set as appropriate. The Orientation vector should be a unit vector (length 1) pointing in the direction of the part that will attach to the node, so pointing away from your part.
### '''Size''': Affects rigidity of your part. If your part is connected to another part with the same “size” node, then rigidity will be optimal, and otherwise it will be suboptimal.
### '''Visual Size''': Set the same as Size.
### '''Is Resource Crossfeed''': Set as needed for this node.
### '''Is Rigid''': Set as needed for this node.
### ''Rinse and Repeat'': Subsequent nodes created with the + button will inherit settings from the last node made, so this may accelerate the process as you just need to change the Node Id, Position and Orientation for new nodes that are similar to the previous created node.
# '''Add Module_Color''': You need this to be able to paint your part with base and accent colors. As above, click Add Component and search for Module Color.
# '''Add Module_Drag''': All parts need this. As above, click Add Component and search for Module Color.

== Crazy Customization (Adding functionalities to the part) ==
# '''Add other modules as needed'''. For example, if your part is an engine you’ll also need:
## '''thrustTransform''' object: Create an empty game object as a child of the root part and name it thrustTransform.
## '''Throttle VFX Manager''': Configure as needed (?). No need to drag anywhere, it just need to be a component for the part.
## '''Flameout VFX Data''': Drag this up to the Flameout VFX property in Module_Engine.
## '''Module_Gimbal''': Configure details as needed (e.g., Gimbal Range and Gimbal Speed, etc.), then drag this up to the Gimbal property in Module_Engine.
## '''Module_Generator''': Configure details as needed, then drag this up to the Alternator property in Module_Engine.
## '''Module_Fairing''': Unless you plan for your engine to only ever be on the very first stage (i.e., a big booster), then you probably want it to have a fairing so it can be used in the second stage and above. Figure 3 shows an example for a working fairing from a Size Small (1.25m-class) engine that was created using this process. Shown below is the corresponding example of the PartComponentModule_Fairing portion of  the part JSON. As can be seen in Figure 3, the data fields that need to be populated in the Unity Editor include only a subset of what's in the auto-generated JSON. That said, everything the editor needs is in the example below and presenting it this way makes copy/paste possible where unity editor graphic would not allow that.[[File:Module Fairing Data.png|thumb|Figure 3: Example Fairing Data in Unity Editor]]&lt;syntaxhighlight lang="json"&gt;
      {
        "Name": "PartComponentModule_Fairing",
        "ComponentType": "KSP.Sim.impl.PartComponentModule_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
        "BehaviourType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
        "ModuleData": [
          {
            "Name": "Data_Fairing",
            "ModuleType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
            "DataType": "KSP.Modules.Data_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
            "Data": null,
            "DataObject": {
              "$type": "KSP.Modules.Data_Fairing, Assembly-CSharp",
              "FairingEnabled": {
                "ContextKey": "FairingEnabled",
                "storedValue": true
              },
              "FairingConstructionType": {
                "ContextKey": "FairingConstructionType",
                "storedValue": "CUSTOM"
              },
              "FloatingNodeEnabled": {
                "ContextKey": "FloatingNodeEnabled",
                "storedValue": true
              },
              "Length": {
                "ContextKey": "Length",
                "storedValue": -1.0
              },
              "DeployType": {
                "ContextKey": "DeployType",
                "storedValue": "Clamshellx4"
              },
              "EjectionForce": {
                "ContextKey": "EjectionForce",
                "storedValue": 100.0
              },
              "IsStagingEnabled": {
                "ContextKey": "IsStagingEnabled",
                "storedValue": true
              },
              "IsDeployed": {
                "ContextKey": "IsDeployed",
                "storedValue": false
              },
              "FloatingNodeSize": 1.0,
              "FloatingAttachNodeTag": "bottom",
              "FloatingNodePosition": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "FloatingNodeDirection": {
                "x": 0.0,
                "y": -1.0,
                "z": 0.0
              },
              "FloatingNodeIsMultiJoint": false,
              "FloatingNodeMultiJointMaxCount": 3,
              "FloatingNodeMultiJointOffset": 1.0,
              "FairingNode": "top",
              "NoseTip": 0.5,
              "EdgeWarp": 0.02,
              "AberrantNormalLimit": 45.0,
              "LocalUpAxis": {
                "x": 0.0,
                "y": -1.0,
                "z": 0.0
              },
              "Pivot": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "BaseModelTransformName": "Base",
              "CapRadius": 0.375,
              "BaseRadius": 0.625,
              "CloseRadius": 0.375,
              "MaxRadius": 6.0,
              "SnapThreshold": 0.25,
              "CreateShellColliders": false,
              "NumberOfCollidersPerCrossSection": 12,
              "MinHeightRadiusRatio": 0.07,
              "CrossSectionHeightMin": 0.3,
              "CrossSectionHeightMax": 1.1,
              "AerodynamicallyShieldContents": false,
              "ConeSweepRays": 120,
              "ConeSweepPrecision": 10.0,
              "AmountOfCollidersPerArc": 1,
              "ShouldCapOnAutoGenerate": false,
              "IsCapped": false,
              "IsShroud": true,
              "MassAreaRatio": 0.0,
              "FairingSideCount": 24,
              "FairingLengthSnapIncrement": 0.125,
              "FairingRadiusSnapIncrement": 0.125,
              "FairingSmoothingAngle": 35.0,
              "FairingThickness": 0.025,
              "FairingStartHeight": 0.0,
              "AllowConstructionTypeChange": true,
              "AllowFloatingNodeChange": true,
              "DefaultFairingEnabledToggle": true,
              "DefaultAutoConstruction": true,
              "DefaultDeployType": "Shroud",
              "DefaultFloatingNodeState": true,
              "LengthEditMinimum": 0.0,
              "LengthEditMaximum": 0.001,
              "LengthEditDefault": 1.0,
              "StageToggleDefault": false,
              "MaxAutoFairingTargetRadius": -1,
              "MinAutoFairingTargetRadius": -1,
              "CrossSections": [],
              "MassModifierAmount": 0.0,
              "DragCubeIndex": -1,
              "ModuleType": "KSP.Modules.Module_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
              "MassModifier": 0.0,
              "DataType": "KSP.Modules.Data_Fairing, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
              "IsActiveInStagingProp": {
                "ContextKey": null,
                "storedValue": false
              }
            }
          }
        ]
      }
&lt;/syntaxhighlight&gt;Of the information show above, the parts you will most likely need to customize for your fairing are Base Radius, Cross Section Height Max, and Fairing Thickness - the rest is likely to be the same for all your engines with one other important thing to note. The example above is for an engine that was made in Blender with the nozzle bell facing upwards. If your engine was made with the nozzle bell facing down, then you will need the '''Local Up Axis''' to be -1 in Y and you will also need set the '''Fairing Node''' to bottom.

== Final Flourishes (Final steps) ==
# '''Apply Options''': Select the root part and in the Inspector window near the top on the '''Prefab''' line, click the '''Overrides''' dropdown and pick '''Apply All'''. If this option is not available, then you’ve got nothing you need to do here. Move along, move along.
# '''Save Part JSON''': Click '''Save Part JSON''' button at the bottom of the '''Core Part Data''' module. This will put the resulting part JSON in the &lt;code&gt;Assets&lt;/code&gt; folder for your Unity project. You need to do this any time you’ve edited the '''Core Part Data''' module (or also a module it depends on?).
# '''Make Prefab''': Grab the root part object and drag it to the Unity project &lt;code&gt;Assets&lt;/code&gt; folder.
# '''Add Part Icon''': Create an icon for your part that the game will use in the parts picker. This needs to be a PNG file with specific dimensions. It should conform to the style used by other parts in the game. However you do this, you need to name the file &lt;code&gt;&lt;part_name&gt;_icon.png&lt;/code&gt;, and you need to drag that file into the &lt;code&gt;Assets&lt;/code&gt; folder in Unity.
## '''Convert Icon to Sprite''': Select the part icon in the Assets folder. In the Inspector window, click the pulldown menu for Texture Type and change this from Default to Sprite (2D and UI), then click '''Apply'''. If this is not done, your lovely icon will not display!
# '''Make Root Part Addressable:''' Select the root part’s prefab in the &lt;code&gt;Assets&lt;/code&gt; folder and in the '''Inspector''' window check the box for '''Addressable'''.
# '''Make JSON Addressable''': Select the part’s JSON in the &lt;code&gt;Assets&lt;/code&gt; folder and in the '''Inspector''' window check the box for '''Addressable'''.
# '''Make the Icon Addressable''': Select the root part’s icon in the &lt;code&gt;Assets&lt;/code&gt; folder and in the '''Inspector''' window check the box for '''Addressable'''.
# '''Configure Addressable Properties''': In the '''Addressables Groups''' expand your mod's Group and find your part.
## '''Group Name \ Addressable Name''': Change the information in the '''Group Name''' '''\''' '''Addressable Name''' from &lt;code&gt;Assets/&lt;part_name&gt;*&lt;/code&gt; to be just &lt;code&gt;&lt;part_name&gt;*&lt;/code&gt;. So &lt;code&gt;Assets/&lt;part_name&gt;.prefab&lt;/code&gt; becomes &lt;code&gt;&lt;part_name&gt;.prefab&lt;/code&gt;, and so forth. You can leave the &lt;code&gt;Assets/&lt;/code&gt; part of the path definition alone for each of these, that’s as it should be. The value for the '''Addressable Name''' needs to be the same as the file name it’s associated with and must not include any path parts. All of these need to be based on the '''Part Name''' established in the '''Core Part Data''' module.
## '''Labels''': For the JSON set this to &lt;code&gt;parts_data&lt;/code&gt;. Leave it blank for the prefab. If &lt;code&gt;parts_data&lt;/code&gt; is not an option in the dropdown for Labels, then click '''Manage Labels''', click the + button to add a new label, and set the '''Label Name''' to &lt;code&gt;parts_data&lt;/code&gt;. Click '''Save'''.
# '''Build Mod or Build And Test''': Select either Build Mod or Build And Test to have KSP2 Unity Tools prepare and deploy your parts pack mod.
# '''Launch Game and Test!'''
# '''''Rinse and Repeat for Additional Parts'''''
== '''Mentions''' ==
This guide is based on the videos: How to create parts for KSP2 and How to make engines for KSP2 (see: [[Part modding videos (tutorials)]]), and on other notes and guidance from the KSP2 Modding Society discord.

Also the web pages: [https://luxstice.notion.site/KSP2-Part-tutorial-almost-from-scratch-1f336b7c97ae4280afb6a4e3aa6080b2 KSP2 Part tutorial (almost) from scratch], and [https://luxstice.notion.site/Tutorial-My-First-Part-5f0cf456d7f4443d8c92658c7cc58314 Tutorial: My First Part]

[[Category:Parts and modules]]</text>
      <sha1>c5fgovcikg3hxzgaibh4fxw8qc4ppmy</sha1>
    </revision>
  </page>
  <page>
    <title>File:Thunderkit Settings.png</title>
    <ns>6</ns>
    <id>104</id>
    <revision>
      <id>343</id>
      <timestamp>2024-02-04T17:56:29Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <origin>343</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="19" sha1="3q39msymipani12qmvms69hprfguljw" xml:space="preserve">Thunderkit Settings</text>
      <sha1>3q39msymipani12qmvms69hprfguljw</sha1>
    </revision>
  </page>
  <page>
    <title>File:Addressables Groups - Manage Profiles.png</title>
    <ns>6</ns>
    <id>105</id>
    <revision>
      <id>347</id>
      <timestamp>2024-02-04T19:33:54Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <origin>347</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="76" sha1="i1317m3g9n9m3tpx281g83mymu19k0p" xml:space="preserve">Manage Profiles selection from Addressables Groups Profile: Default dropdown</text>
      <sha1>i1317m3g9n9m3tpx281g83mymu19k0p</sha1>
    </revision>
  </page>
  <page>
    <title>File:Addressables Profiles.png</title>
    <ns>6</ns>
    <id>106</id>
    <revision>
      <id>348</id>
      <timestamp>2024-02-04T19:36:24Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <origin>348</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="18" sha1="t0yl43wyfbc6xvxoazur45m0ugz0roq" xml:space="preserve">Create new Profile</text>
      <sha1>t0yl43wyfbc6xvxoazur45m0ugz0roq</sha1>
    </revision>
  </page>
  <page>
    <title>File:New Profile Setup.png</title>
    <ns>6</ns>
    <id>107</id>
    <revision>
      <id>349</id>
      <timestamp>2024-02-04T19:37:49Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <origin>349</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="17" sha1="5z9qh7fjjyw6rgy5dr6nqicrm9hen8k" xml:space="preserve">New Profile Setup</text>
      <sha1>5z9qh7fjjyw6rgy5dr6nqicrm9hen8k</sha1>
    </revision>
  </page>
  <page>
    <title>File:Inspector Default Local Group.png</title>
    <ns>6</ns>
    <id>108</id>
    <revision>
      <id>350</id>
      <timestamp>2024-02-04T19:39:08Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <origin>350</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="53" sha1="oukzdwtu0pwz2gkcfr8ssdhcwdrao26" xml:space="preserve">Default Local Group settings shown in Unity Inspector</text>
      <sha1>oukzdwtu0pwz2gkcfr8ssdhcwdrao26</sha1>
    </revision>
  </page>
  <page>
    <title>File:Import Process Complete dialog.png</title>
    <ns>6</ns>
    <id>109</id>
    <revision>
      <id>353</id>
      <timestamp>2024-02-04T19:57:44Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <origin>353</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="41" sha1="1xtbt374nna4ackrwcfjl7ouiiikk7y" xml:space="preserve">Thunderkit Import Process Complete dialog</text>
      <sha1>1xtbt374nna4ackrwcfjl7ouiiikk7y</sha1>
    </revision>
  </page>
  <page>
    <title>File:Module Fairing Data.png</title>
    <ns>6</ns>
    <id>110</id>
    <revision>
      <id>356</id>
      <timestamp>2024-02-04T21:51:01Z</timestamp>
      <contributor>
        <username>Schlosrat</username>
        <id>9</id>
      </contributor>
      <origin>356</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="47" sha1="fhjadkg9tefmajatyyc47lpll4xxgi9" xml:space="preserve">Example fairing data needed in the Unity editor</text>
      <sha1>fhjadkg9tefmajatyyc47lpll4xxgi9</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-09 16 13 04-Wwise Audiokinetic.png</title>
    <ns>6</ns>
    <id>111</id>
    <revision>
      <id>361</id>
      <timestamp>2024-02-10T06:33:28Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>361</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="20" sha1="nptvc8s8sc10gxrootq4241zfr0fz16" xml:space="preserve">Audiokinetic account</text>
      <sha1>nptvc8s8sc10gxrootq4241zfr0fz16</sha1>
    </revision>
  </page>
  <page>
    <title>Sounds for parts with Wwise and Unity</title>
    <ns>0</ns>
    <id>112</id>
    <revision>
      <id>362</id>
      <timestamp>2024-02-10T06:34:03Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <comment>Created page with "&lt;nowiki&gt;[[Category:Parts modding]]&lt;/nowiki&gt;  = Sounds for parts with Wwise and Unity = First, install your Unity environment, SpaceWarp template, ....  There are already excellent tutorials that explain these steps:  https://github.com/SpaceWarpDev/SpaceWarp.Template  [[:Category:Getting started]]  === First step: Wwise === You need to create an account : https://www.audiokinetic.com/fr/products/wwise/ [[File:2024-02-09 16 13 04-Wwise Audiokinetic.png|center|thumb]]"</comment>
      <origin>362</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="470" sha1="1zhvf1hd700w60ywumepalqfyucx2zh" xml:space="preserve">&lt;nowiki&gt;[[Category:Parts modding]]&lt;/nowiki&gt;

= Sounds for parts with Wwise and Unity =
First, install your Unity environment, SpaceWarp template, ....

There are already excellent tutorials that explain these steps:

https://github.com/SpaceWarpDev/SpaceWarp.Template

[[:Category:Getting started]]

=== First step: Wwise ===
You need to create an account : https://www.audiokinetic.com/fr/products/wwise/
[[File:2024-02-09 16 13 04-Wwise Audiokinetic.png|center|thumb]]</text>
      <sha1>1zhvf1hd700w60ywumepalqfyucx2zh</sha1>
    </revision>
    <revision>
      <id>364</id>
      <parentid>362</parentid>
      <timestamp>2024-02-10T06:54:17Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>364</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1177" sha1="td9txsmrd1btl82jetsvodutwet87ys" xml:space="preserve">&lt;nowiki&gt;[[Category:Parts modding]]&lt;/nowiki&gt;

= Sounds for parts with Wwise and Unity =
First, install your Unity environment, SpaceWarp template, ....

There are already excellent tutorials that explain these steps:

https://github.com/SpaceWarpDev/SpaceWarp.Template

[[:Category:Getting started]]

=== First step: Wwise ===
You need to create an account : https://www.audiokinetic.com/fr/products/wwise/
[[File:2024-02-09 16 13 04-Wwise Audiokinetic.png|center|thumb]]Next : Install Wwise Launcher
[[File:2024-02-09 16 15 29-Wwise Audiokinetic.png|center|thumb]]
'''Ok, now a warning :''' 
''When I started my mod, I couldn't get the sound to work with the latest 2023 version of Wwise.''

''So I continued to use version 2021 of Wwise to prepare my sounds and I integrated version 2023 of the Wwise libraries into Unity for maximum compatibility.''

''So I will explain how I did it but maybe you can try directly with the latest 2023 versions. If you succeed, let me know so that I can modify this tutorial.''

''So, this tutorial will first install version 2021 to be able to have a Wwise project in 2021 format then I update the Wwise libraries in Unity in 2023 format.''</text>
      <sha1>td9txsmrd1btl82jetsvodutwet87ys</sha1>
    </revision>
    <revision>
      <id>366</id>
      <parentid>364</parentid>
      <timestamp>2024-02-10T06:58:30Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>366</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1356" sha1="p1rvjjaauuntplpen5co7if8z2kwrlh" xml:space="preserve">&lt;nowiki&gt;[[Category:Parts modding]]&lt;/nowiki&gt;

= Sounds for parts with Wwise and Unity =
First, install your Unity environment, SpaceWarp template, ....

There are already excellent tutorials that explain these steps:

https://github.com/SpaceWarpDev/SpaceWarp.Template

[[:Category:Getting started]]

=== First step: Wwise ===
You need to create an account : https://www.audiokinetic.com/fr/products/wwise/
[[File:2024-02-09 16 13 04-Wwise Audiokinetic.png|center|thumb]]Next : Install Wwise Launcher
[[File:2024-02-09 16 15 29-Wwise Audiokinetic.png|center|thumb]]
Wwise is free for a 200 sounds databank.


'''Ok, now a warning :''' 
''When I started my mod, I couldn't get the sound to work with the latest 2023 version of Wwise.''

''So I continued to use version 2021 of Wwise to prepare my sounds and I integrated version 2023 of the Wwise libraries into Unity for maximum compatibility.''

''So I will explain how I did it but maybe you can try directly with the latest 2023 versions. If you succeed, let me know so that I can modify this tutorial.''

''So, this tutorial will first install version 2021 to be able to have a Wwise project in 2021 format then I update the Wwise libraries in Unity in 2023 format.''


For these reasons, here are the versions of Wwise on my computer:
[[File:2024-02-09 16 17 46-Audiokinetic Launcher.png|center|thumb]]</text>
      <sha1>p1rvjjaauuntplpen5co7if8z2kwrlh</sha1>
    </revision>
    <revision>
      <id>378</id>
      <parentid>366</parentid>
      <timestamp>2024-02-10T07:24:57Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>378</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3196" sha1="3hjr2oe2fuwpx7svesh2zs4a7rwr48o" xml:space="preserve">&lt;nowiki&gt;[[Category:Parts modding]]&lt;/nowiki&gt;

= Sounds for parts with Wwise and Unity =
First, install your Unity environment, SpaceWarp template, ....

There are already excellent tutorials that explain these steps:

https://github.com/SpaceWarpDev/SpaceWarp.Template

[[:Category:Getting started]]

=== First step: Wwise ===
You need to create an account : https://www.audiokinetic.com/fr/products/wwise/
[[File:2024-02-09 16 13 04-Wwise Audiokinetic.png|center|thumb]]Next : Install Wwise Launcher
[[File:2024-02-09 16 15 29-Wwise Audiokinetic.png|center|thumb]]
Wwise is free for a 200 sounds databank.


'''Ok, now a warning :''' 
''When I started my mod, I couldn't get the sound to work with the latest 2023 version of Wwise.''

''So I continued to use version 2021 of Wwise to prepare my sounds and I integrated version 2023 of the Wwise libraries into Unity for maximum compatibility.''

''So I will explain how I did it but maybe you can try directly with the latest 2023 versions. If you succeed, let me know so that I can modify this tutorial.''

''So, this tutorial will first install version 2021 to be able to have a Wwise project in 2021 format then I update the Wwise libraries in Unity in 2023 format.''


For these reasons, here are the versions of Wwise on my computer:
[[File:2024-02-09 16 17 46-Audiokinetic Launcher.png|center|thumb]]
Ok, now let's prepare the environment for Unity. Wwise normaly will found your existing projects. We'll integrate Wwise on projects now : 
[[File:2024-02-09 16 24 33-Audiokinetic Launcher.png|center|thumb]]
Next, select Wwise version (2021.1.13.8036 for me) and plateform(s) you want : 
[[File:2024-02-09 16 33 22-Audiokinetic Launcher.png|center|thumb]]
If some packages are missions for destination plateform(s), this message will appear : 
[[File:2024-02-09 16 34 07-Audiokinetic Launcher.png|center|thumb]]
Clic Modify Wwise…. And add it. 

'''The SDK is required. It should also be added.'''
[[File:2024-02-09 16 35 29-Paramètres.png|center|thumb]]
Clic on Next to perform installation.

When ok, come back to Unity integration. 

If SDK is not set, choose it : 
[[File:2024-02-09 16 30 58-Audiokinetic Launcher.png|center|thumb]]
Wwise project need to be created. For that, leave the field empty : 
[[File:2024-02-09 16 32 18-Audiokinetic Launcher.png|center|thumb]]
Unity integration is ready : 
[[File:2024-02-09 16 38 02-Paramètres.png|center|thumb]]
Then, clic on Integrate.
[[File:2024-02-09 16 48 45-Audiokinetic Launcher.png|center|thumb]]
Now that the Wwise project is created in 2021 format, I can update the Wwise libraries in the Unity project.
[[File:2024-02-09 17 21 46-Audiokinetic Launcher.png|center|thumb]]
It's OK. In the screenshot I can update to the latest version 2023. I won't do that because I'm sure everything is fine with the versions I chose.

I will do a test later for the latest updates.
[[File:2024-02-09 18 29 10-Audiokinetic Launcher.png|center|thumb]]
Normaly, now, your Wwise project will appear on the Wwise Launcher. I work on my projects with the 2021 version of Wwise. I will open the Wwise project that was created:
[[File:2024-02-09 18 31 21-Audiokinetic Launcher.png|center|thumb]]

END</text>
      <sha1>3hjr2oe2fuwpx7svesh2zs4a7rwr48o</sha1>
    </revision>
    <revision>
      <id>405</id>
      <parentid>378</parentid>
      <timestamp>2024-02-10T08:07:12Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>405</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6844" sha1="6hp6r9evwste03h3m776oza0pih66fz" xml:space="preserve">&lt;nowiki&gt;[[Category:Parts modding]]&lt;/nowiki&gt;

= Sounds for parts with Wwise and Unity =
First, install your Unity environment, SpaceWarp template, ....

There are already excellent tutorials that explain these steps:

https://github.com/SpaceWarpDev/SpaceWarp.Template

[[:Category:Getting started]]

=== First step: Wwise ===
You need to create an account : https://www.audiokinetic.com/fr/products/wwise/
[[File:2024-02-09 16 13 04-Wwise Audiokinetic.png|center|thumb]]Next : Install Wwise Launcher
[[File:2024-02-09 16 15 29-Wwise Audiokinetic.png|center|thumb]]
Wwise is free for a 200 sounds databank.


'''Ok, now a warning :''' 
''When I started my mod, I couldn't get the sound to work with the latest 2023 version of Wwise.''

''So I continued to use version 2021 of Wwise to prepare my sounds and I integrated version 2023 of the Wwise libraries into Unity for maximum compatibility.''

''So I will explain how I did it but maybe you can try directly with the latest 2023 versions. If you succeed, let me know so that I can modify this tutorial.''

''So, this tutorial will first install version 2021 to be able to have a Wwise project in 2021 format then I update the Wwise libraries in Unity in 2023 format.''


For these reasons, here are the versions of Wwise on my computer:
[[File:2024-02-09 16 17 46-Audiokinetic Launcher.png|center|thumb]]
Ok, now let's prepare the environment for Unity. Wwise normaly will found your existing projects. We'll integrate Wwise on projects now : 
[[File:2024-02-09 16 24 33-Audiokinetic Launcher.png|center|thumb]]
Next, select Wwise version (2021.1.13.8036 for me) and plateform(s) you want : 
[[File:2024-02-09 16 33 22-Audiokinetic Launcher.png|center|thumb]]
If some packages are missions for destination plateform(s), this message will appear : 
[[File:2024-02-09 16 34 07-Audiokinetic Launcher.png|center|thumb]]
Clic Modify Wwise…. And add it. 

'''The SDK is required. It should also be added.'''
[[File:2024-02-09 16 35 29-Paramètres.png|center|thumb]]
Clic on Next to perform installation.

When ok, come back to Unity integration. 

If SDK is not set, choose it : 
[[File:2024-02-09 16 30 58-Audiokinetic Launcher.png|center|thumb]]
Wwise project need to be created. For that, leave the field empty : 
[[File:2024-02-09 16 32 18-Audiokinetic Launcher.png|center|thumb]]
Unity integration is ready : 
[[File:2024-02-09 16 38 02-Paramètres.png|center|thumb]]
Then, clic on Integrate.
[[File:2024-02-09 16 48 45-Audiokinetic Launcher.png|center|thumb]]
Now that the Wwise project is created in 2021 format, I can update the Wwise libraries in the Unity project.
[[File:2024-02-09 17 21 46-Audiokinetic Launcher.png|center|thumb]]
It's OK. In the screenshot I can update to the latest version 2023. I won't do that because I'm sure everything is fine with the versions I chose.

I will do a test later for the latest updates.
[[File:2024-02-09 18 29 10-Audiokinetic Launcher.png|center|thumb]]
Normaly, now, your Wwise project will appear on the Wwise Launcher. I work on my projects with the 2021 version of Wwise. I will open the Wwise project that was created:
[[File:2024-02-09 18 31 21-Audiokinetic Launcher.png|center|thumb]]

=== Step 2 : Wwise project ===
You need to create your sound databank : 
[[File:2024-02-09 18 32 27-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
[[File:2024-02-09 18 33 01-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Your soundbank is now created. 
[[File:2024-02-09 18 34 25-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
I'm only using windows plateform and English language but you can add/remove/modify :
[[File:2024-02-10 08 38 58-.png|center|thumb]]
[[File:2024-02-10 08 38 19-.png|center|thumb]]
Next step : importing your audio files. I'm using .wav format.
[[File:2024-02-09 18 35 12-.png|center|thumb]]
[[File:2024-02-09 18 36 43-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Select your wave file on your computer.

Then, import : 
[[File:2024-02-09 18 37 25-Audio File Importer.png|center|thumb]]
My new sound appears on the list : 
[[File:2024-02-09 18 38 28-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
You can double click on you audio (for example if you want to set a loop) : 
[[File:2024-02-09 18 40 54-Property Editor.png|center|thumb]]
And close the window.

Now, you have to set events with your audio for using in Unity : one for playing it, one for stopping it :
[[File:2024-02-09 18 44 46-.png|center|thumb]]
[[File:2024-02-10 05 45 52-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Clic on your new event for setting it : 
[[File:2024-02-10 05 47 01-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Right clic on Target field for assign an audio to this event : 
[[File:2024-02-10 05 47 57-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Select your audio :
[[File:2024-02-10 05 48 24-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Same event creation for stopping audio action : 
[[File:2024-02-10 05 49 57-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Same for playing, assign your audio to this envent.

Now both events appear on the list : 
[[File:2024-02-10 05 51 23-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
To finish, you must assign new events to your soundbank. For that, select your soundbank and drag and drop your events on the bottom window :
[[File:2024-02-10 05 52 56-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Ok, ready now.

Now, just generate your soundbank for using it with Unity and your final mod : 
[[File:2024-02-10 05 54 02-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
[[File:2024-02-10 05 55 16-Generating SoundBanks - Completed.png|center|thumb]]
Your soundbank is now in your wwsise folder '''&lt;Wwise Project&gt;/GeneratedSoundBanks/Windows'''

You have to copy the file .bnk in your KSP2 mod folder '''&lt;Your Mod&gt;/assets/soundbanks/'''

Now, keep your Wwise Project open and start Unity.

=== Step 3 : Unity project ===
Normaly, both are connected. We will verify in the wwise picker window : 
[[File:2024-02-10 06 18 27-kesasolar.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]
All your soundbank events normaly appear on this window.

I will show you 2 ways for using them.

==== Example 1 : add an engine sound ====
First, I create an empty gameobject for sound : u_amb_Engine
[[File:2024-02-10 06 24 23-kesa.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]
And on it few Components : 
[[File:2024-02-10 06 25 59-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
'''In Rigidbody, check "Is Kinematic" and uncheck "Use Gravity" !'''

Next, add audio Components : 
[[File:2024-02-10 06 27 52-kesa.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]
[[File:2024-02-10 06 28 21-kesa.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]











END</text>
      <sha1>6hp6r9evwste03h3m776oza0pih66fz</sha1>
    </revision>
    <revision>
      <id>416</id>
      <parentid>405</parentid>
      <timestamp>2024-02-10T08:22:02Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>416</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8872" sha1="o7fn1cuib9l4aa5l9tcoog178sxdv96" xml:space="preserve">&lt;nowiki&gt;[[Category:Parts modding]]&lt;/nowiki&gt;

= Sounds for parts with Wwise and Unity =
First, install your Unity environment, SpaceWarp template, ....

There are already excellent tutorials that explain these steps:

https://github.com/SpaceWarpDev/SpaceWarp.Template

[[:Category:Getting started]]

=== First step: Wwise ===
You need to create an account : https://www.audiokinetic.com/fr/products/wwise/
[[File:2024-02-09 16 13 04-Wwise Audiokinetic.png|center|thumb]]Next : Install Wwise Launcher
[[File:2024-02-09 16 15 29-Wwise Audiokinetic.png|center|thumb]]
Wwise is free for a 200 sounds databank.


'''Ok, now a warning :''' 
''When I started my mod, I couldn't get the sound to work with the latest 2023 version of Wwise.''

''So I continued to use version 2021 of Wwise to prepare my sounds and I integrated version 2023 of the Wwise libraries into Unity for maximum compatibility.''

''So I will explain how I did it but maybe you can try directly with the latest 2023 versions. If you succeed, let me know so that I can modify this tutorial.''

''So, this tutorial will first install version 2021 to be able to have a Wwise project in 2021 format then I update the Wwise libraries in Unity in 2023 format.''


For these reasons, here are the versions of Wwise on my computer:
[[File:2024-02-09 16 17 46-Audiokinetic Launcher.png|center|thumb]]
Ok, now let's prepare the environment for Unity. Wwise normaly will found your existing projects. We'll integrate Wwise on projects now : 
[[File:2024-02-09 16 24 33-Audiokinetic Launcher.png|center|thumb]]
Next, select Wwise version (2021.1.13.8036 for me) and plateform(s) you want : 
[[File:2024-02-09 16 33 22-Audiokinetic Launcher.png|center|thumb]]
If some packages are missions for destination plateform(s), this message will appear : 
[[File:2024-02-09 16 34 07-Audiokinetic Launcher.png|center|thumb]]
Clic Modify Wwise…. And add it. 

'''The SDK is required. It should also be added.'''
[[File:2024-02-09 16 35 29-Paramètres.png|center|thumb]]
Clic on Next to perform installation.

When ok, come back to Unity integration. 

If SDK is not set, choose it : 
[[File:2024-02-09 16 30 58-Audiokinetic Launcher.png|center|thumb]]
Wwise project need to be created. For that, leave the field empty : 
[[File:2024-02-09 16 32 18-Audiokinetic Launcher.png|center|thumb]]
Unity integration is ready : 
[[File:2024-02-09 16 38 02-Paramètres.png|center|thumb]]
Then, clic on Integrate.
[[File:2024-02-09 16 48 45-Audiokinetic Launcher.png|center|thumb]]
Now that the Wwise project is created in 2021 format, I can update the Wwise libraries in the Unity project.
[[File:2024-02-09 17 21 46-Audiokinetic Launcher.png|center|thumb]]
It's OK. In the screenshot I can update to the latest version 2023. I won't do that because I'm sure everything is fine with the versions I chose.

I will do a test later for the latest updates.
[[File:2024-02-09 18 29 10-Audiokinetic Launcher.png|center|thumb]]
Normaly, now, your Wwise project will appear on the Wwise Launcher. I work on my projects with the 2021 version of Wwise. I will open the Wwise project that was created:
[[File:2024-02-09 18 31 21-Audiokinetic Launcher.png|center|thumb]]

=== Step 2 : Wwise project ===
You need to create your sound databank : 
[[File:2024-02-09 18 32 27-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
[[File:2024-02-09 18 33 01-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Your soundbank is now created. 
[[File:2024-02-09 18 34 25-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
I'm only using windows plateform and English language but you can add/remove/modify :
[[File:2024-02-10 08 38 58-.png|center|thumb]]
[[File:2024-02-10 08 38 19-.png|center|thumb]]
Next step : importing your audio files. I'm using .wav format.
[[File:2024-02-09 18 35 12-.png|center|thumb]]
[[File:2024-02-09 18 36 43-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Select your wave file on your computer.

Then, import : 
[[File:2024-02-09 18 37 25-Audio File Importer.png|center|thumb]]
My new sound appears on the list : 
[[File:2024-02-09 18 38 28-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
You can double click on you audio (for example if you want to set a loop) : 
[[File:2024-02-09 18 40 54-Property Editor.png|center|thumb]]
And close the window.

Now, you have to set events with your audio for using in Unity : one for playing it, one for stopping it :
[[File:2024-02-09 18 44 46-.png|center|thumb]]
[[File:2024-02-10 05 45 52-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Clic on your new event for setting it : 
[[File:2024-02-10 05 47 01-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Right clic on Target field for assign an audio to this event : 
[[File:2024-02-10 05 47 57-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Select your audio :
[[File:2024-02-10 05 48 24-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Same event creation for stopping audio action : 
[[File:2024-02-10 05 49 57-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Same for playing, assign your audio to this envent.

Now both events appear on the list : 
[[File:2024-02-10 05 51 23-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
To finish, you must assign new events to your soundbank. For that, select your soundbank and drag and drop your events on the bottom window :
[[File:2024-02-10 05 52 56-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Ok, ready now.

Now, just generate your soundbank for using it with Unity and your final mod : 
[[File:2024-02-10 05 54 02-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
[[File:2024-02-10 05 55 16-Generating SoundBanks - Completed.png|center|thumb]]
Your soundbank is now in your wwsise folder '''&lt;Wwise Project&gt;/GeneratedSoundBanks/Windows'''

You have to copy the file .bnk in your KSP2 mod folder '''&lt;Your Mod&gt;/assets/soundbanks/'''

Now, keep your Wwise Project open and start Unity.

=== Step 3 : Unity project ===
Normaly, both are connected. We will verify in the wwise picker window : 
[[File:2024-02-10 06 18 27-kesasolar.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]
All your soundbank events normaly appear on this window.

I will show you 2 ways for using them.

==== Example 1 : add an engine sound ====
First, I create an empty gameobject for sound : u_amb_Engine
[[File:2024-02-10 06 24 23-kesa.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]
And on it few Components : 
[[File:2024-02-10 06 25 59-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
'''In Rigidbody, check "Is Kinematic" and uncheck "Use Gravity" !'''

Next, add audio Components : 
[[File:2024-02-10 06 27 52-kesa.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]
[[File:2024-02-10 06 28 21-kesa.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]

For Rtpc mapping, I’ve created AllRTPC:
[[File:2024-02-10 06 34 51-kesa.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]
And for your engine audio :
[[File:2024-02-10 06 28 59-kesa.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]
I’ve select 2 events for playing and stopping my engine sound : engine3_play &amp; engine3_stop

That’s all. Now your engine will have sound !!!

==== Example 2 : sound in animation ====
For this example, I will show a solar panel with animations for deploying and retracting.

First, I create an empty gameobject u_amb_audio_solar_arrays
[[File:2024-02-10 09 13 08-kesasolar.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]
I've add components on it : 
[[File:2024-02-10 07 05 11-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
'''In Rigidbody, check "Is Kinematic" and uncheck "Use Gravity" !'''

On the gameobject with Animator component : 
[[File:2024-02-10 07 10 51-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Drag &amp; drop your u_amb_audio_solar_arrays gameobject in Animation Events Object field.

Then, we can set audio in animations, on deploying and retracting.

On the first timeline, in your animation windows, on the first frame, right clic : 
[[File:2024-02-10 07 14 49-Animation.png|center|thumb]]
And set in Inspector : 
[[File:2024-02-10 07 15 36-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Same action for the last animation frame : 
[[File:2024-02-10 07 16 29-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Now, my animation has 2 audio events (white rectangles), in the first frame to start the sound, in the last frame to stop it : 
[[File:2024-02-10 07 17 23-Animation.png|center|thumb]]
Animations can have multiples sound events : 
[[File:2024-02-10 07 18 54-Animation.png|center|thumb]]
That’s all, now your part has sounds.

You know as much as I do now. I hope this tutorial will help you.

Don't hesitate to provide feedback, corrections, ... I don't have the knowledge :-)</text>
      <sha1>o7fn1cuib9l4aa5l9tcoog178sxdv96</sha1>
    </revision>
    <revision>
      <id>417</id>
      <parentid>416</parentid>
      <timestamp>2024-02-10T08:26:47Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>417</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8871" sha1="f768najxi90dsr9awdsryfgv524w2iy" xml:space="preserve">&lt;nowiki&gt;[[Category:Parts modding]]&lt;/nowiki&gt;

= Sounds for parts with Wwise and Unity =
First, install your Unity environment, SpaceWarp template, ...

There are already excellent tutorials that explain these steps:

https://github.com/SpaceWarpDev/SpaceWarp.Template

[[:Category:Getting started]]

=== First step: Wwise ===
You need to create an account : https://www.audiokinetic.com/fr/products/wwise/
[[File:2024-02-09 16 13 04-Wwise Audiokinetic.png|center|thumb]]Next : Install Wwise Launcher
[[File:2024-02-09 16 15 29-Wwise Audiokinetic.png|center|thumb]]
Wwise is free for a 200 sounds databank.


'''Ok, now a warning :''' 
''When I started my mod, I couldn't get the sound to work with the latest 2023 version of Wwise.''

''So I continued to use version 2021 of Wwise to prepare my sounds and I integrated version 2023 of the Wwise libraries into Unity for maximum compatibility.''

''So I will explain how I did it but maybe you can try directly with the latest 2023 versions. If you succeed, let me know so that I can modify this tutorial.''

''So, this tutorial will first install version 2021 to be able to have a Wwise project in 2021 format then I update the Wwise libraries in Unity in 2023 format.''


For these reasons, here are the versions of Wwise on my computer:
[[File:2024-02-09 16 17 46-Audiokinetic Launcher.png|center|thumb]]
Ok, now let's prepare the environment for Unity. Wwise normaly will found your existing projects. We'll integrate Wwise on projects now : 
[[File:2024-02-09 16 24 33-Audiokinetic Launcher.png|center|thumb]]
Next, select Wwise version (2021.1.13.8036 for me) and plateform(s) you want : 
[[File:2024-02-09 16 33 22-Audiokinetic Launcher.png|center|thumb]]
If some packages are missions for destination plateform(s), this message will appear : 
[[File:2024-02-09 16 34 07-Audiokinetic Launcher.png|center|thumb]]
Clic Modify Wwise…. And add it. 

'''The SDK is required. It should also be added.'''
[[File:2024-02-09 16 35 29-Paramètres.png|center|thumb]]
Clic on Next to perform installation.

When ok, come back to Unity integration. 

If SDK is not set, choose it : 
[[File:2024-02-09 16 30 58-Audiokinetic Launcher.png|center|thumb]]
Wwise project need to be created. For that, leave the field empty : 
[[File:2024-02-09 16 32 18-Audiokinetic Launcher.png|center|thumb]]
Unity integration is ready : 
[[File:2024-02-09 16 38 02-Paramètres.png|center|thumb]]
Then, clic on Integrate.
[[File:2024-02-09 16 48 45-Audiokinetic Launcher.png|center|thumb]]
Now that the Wwise project is created in 2021 format, I can update the Wwise libraries in the Unity project.
[[File:2024-02-09 17 21 46-Audiokinetic Launcher.png|center|thumb]]
It's OK. In the screenshot I can update to the latest version 2023. I won't do that because I'm sure everything is fine with the versions I chose.

I will do a test later for the latest updates.
[[File:2024-02-09 18 29 10-Audiokinetic Launcher.png|center|thumb]]
Normaly, now, your Wwise project will appear on the Wwise Launcher. I work on my projects with the 2021 version of Wwise. I will open the Wwise project that was created:
[[File:2024-02-09 18 31 21-Audiokinetic Launcher.png|center|thumb]]

=== Step 2 : Wwise project ===
You need to create your sound databank : 
[[File:2024-02-09 18 32 27-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
[[File:2024-02-09 18 33 01-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Your soundbank is now created. 
[[File:2024-02-09 18 34 25-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
I'm only using windows plateform and English language but you can add/remove/modify :
[[File:2024-02-10 08 38 58-.png|center|thumb]]
[[File:2024-02-10 08 38 19-.png|center|thumb]]
Next step : importing your audio files. I'm using .wav format.
[[File:2024-02-09 18 35 12-.png|center|thumb]]
[[File:2024-02-09 18 36 43-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Select your wave file on your computer.

Then, import : 
[[File:2024-02-09 18 37 25-Audio File Importer.png|center|thumb]]
My new sound appears on the list : 
[[File:2024-02-09 18 38 28-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
You can double click on you audio (for example if you want to set a loop) : 
[[File:2024-02-09 18 40 54-Property Editor.png|center|thumb]]
And close the window.

Now, you have to set events with your audio for using in Unity : one for playing it, one for stopping it :
[[File:2024-02-09 18 44 46-.png|center|thumb]]
[[File:2024-02-10 05 45 52-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Clic on your new event for setting it : 
[[File:2024-02-10 05 47 01-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Right clic on Target field for assign an audio to this event : 
[[File:2024-02-10 05 47 57-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Select your audio :
[[File:2024-02-10 05 48 24-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Same event creation for stopping audio action : 
[[File:2024-02-10 05 49 57-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Same for playing, assign your audio to this envent.

Now both events appear on the list : 
[[File:2024-02-10 05 51 23-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
To finish, you must assign new events to your soundbank. For that, select your soundbank and drag and drop your events on the bottom window :
[[File:2024-02-10 05 52 56-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Ok, ready now.

Now, just generate your soundbank for using it with Unity and your final mod : 
[[File:2024-02-10 05 54 02-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
[[File:2024-02-10 05 55 16-Generating SoundBanks - Completed.png|center|thumb]]
Your soundbank is now in your wwsise folder '''&lt;Wwise Project&gt;/GeneratedSoundBanks/Windows'''

You have to copy the file .bnk in your KSP2 mod folder '''&lt;Your Mod&gt;/assets/soundbanks/'''

Now, keep your Wwise Project open and start Unity.

=== Step 3 : Unity project ===
Normaly, both are connected. We will verify in the wwise picker window : 
[[File:2024-02-10 06 18 27-kesasolar.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]
All your soundbank events normaly appear on this window.

I will show you 2 ways for using them.

==== Example 1 : add an engine sound ====
First, I create an empty gameobject for sound : u_amb_Engine
[[File:2024-02-10 06 24 23-kesa.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]
And on it few Components : 
[[File:2024-02-10 06 25 59-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
'''In Rigidbody, check "Is Kinematic" and uncheck "Use Gravity" !'''

Next, add audio Components : 
[[File:2024-02-10 06 27 52-kesa.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]
[[File:2024-02-10 06 28 21-kesa.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]

For Rtpc mapping, I’ve created AllRTPC:
[[File:2024-02-10 06 34 51-kesa.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]
And for your engine audio :
[[File:2024-02-10 06 28 59-kesa.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]
I’ve select 2 events for playing and stopping my engine sound : engine3_play &amp; engine3_stop

That’s all. Now your engine will have sound !!!

==== Example 2 : sound in animation ====
For this example, I will show a solar panel with animations for deploying and retracting.

First, I create an empty gameobject u_amb_audio_solar_arrays
[[File:2024-02-10 09 13 08-kesasolar.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]
I've add components on it : 
[[File:2024-02-10 07 05 11-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
'''In Rigidbody, check "Is Kinematic" and uncheck "Use Gravity" !'''

On the gameobject with Animator component : 
[[File:2024-02-10 07 10 51-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Drag &amp; drop your u_amb_audio_solar_arrays gameobject in Animation Events Object field.

Then, we can set audio in animations, on deploying and retracting.

On the first timeline, in your animation windows, on the first frame, right clic : 
[[File:2024-02-10 07 14 49-Animation.png|center|thumb]]
And set in Inspector : 
[[File:2024-02-10 07 15 36-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Same action for the last animation frame : 
[[File:2024-02-10 07 16 29-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Now, my animation has 2 audio events (white rectangles), in the first frame to start the sound, in the last frame to stop it : 
[[File:2024-02-10 07 17 23-Animation.png|center|thumb]]
Animations can have multiples sound events : 
[[File:2024-02-10 07 18 54-Animation.png|center|thumb]]
That’s all, now your part has sounds.

You know as much as I do now. I hope this tutorial will help you.

Don't hesitate to provide feedback, corrections, ... I don't have the knowledge :-)</text>
      <sha1>f768najxi90dsr9awdsryfgv524w2iy</sha1>
    </revision>
    <revision>
      <id>418</id>
      <parentid>417</parentid>
      <timestamp>2024-02-10T08:31:53Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <origin>418</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8854" sha1="t9z3ocs3p7f5hbc4pyh9zelr6j0nrat" xml:space="preserve">[[Category:Parts modding]]

= Sounds for parts with Wwise and Unity =
First, install your Unity environment, SpaceWarp template, ...

There are already excellent tutorials that explain these steps:

https://github.com/SpaceWarpDev/SpaceWarp.Template

[[:Category:Getting started]]

=== First step: Wwise ===
You need to create an account : https://www.audiokinetic.com/fr/products/wwise/
[[File:2024-02-09 16 13 04-Wwise Audiokinetic.png|center|thumb]]Next : Install Wwise Launcher
[[File:2024-02-09 16 15 29-Wwise Audiokinetic.png|center|thumb]]
Wwise is free for a 200 sounds databank.


'''Ok, now a warning :''' 
''When I started my mod, I couldn't get the sound to work with the latest 2023 version of Wwise.''

''So I continued to use version 2021 of Wwise to prepare my sounds and I integrated version 2023 of the Wwise libraries into Unity for maximum compatibility.''

''So I will explain how I did it but maybe you can try directly with the latest 2023 versions. If you succeed, let me know so that I can modify this tutorial.''

''So, this tutorial will first install version 2021 to be able to have a Wwise project in 2021 format then I update the Wwise libraries in Unity in 2023 format.''


For these reasons, here are the versions of Wwise on my computer:
[[File:2024-02-09 16 17 46-Audiokinetic Launcher.png|center|thumb]]
Ok, now let's prepare the environment for Unity. Wwise normaly will found your existing projects. We'll integrate Wwise on projects now : 
[[File:2024-02-09 16 24 33-Audiokinetic Launcher.png|center|thumb]]
Next, select Wwise version (2021.1.13.8036 for me) and plateform(s) you want : 
[[File:2024-02-09 16 33 22-Audiokinetic Launcher.png|center|thumb]]
If some packages are missions for destination plateform(s), this message will appear : 
[[File:2024-02-09 16 34 07-Audiokinetic Launcher.png|center|thumb]]
Clic Modify Wwise…. And add it. 

'''The SDK is required. It should also be added.'''
[[File:2024-02-09 16 35 29-Paramètres.png|center|thumb]]
Clic on Next to perform installation.

When ok, come back to Unity integration. 

If SDK is not set, choose it : 
[[File:2024-02-09 16 30 58-Audiokinetic Launcher.png|center|thumb]]
Wwise project need to be created. For that, leave the field empty : 
[[File:2024-02-09 16 32 18-Audiokinetic Launcher.png|center|thumb]]
Unity integration is ready : 
[[File:2024-02-09 16 38 02-Paramètres.png|center|thumb]]
Then, clic on Integrate.
[[File:2024-02-09 16 48 45-Audiokinetic Launcher.png|center|thumb]]
Now that the Wwise project is created in 2021 format, I can update the Wwise libraries in the Unity project.
[[File:2024-02-09 17 21 46-Audiokinetic Launcher.png|center|thumb]]
It's OK. In the screenshot I can update to the latest version 2023. I won't do that because I'm sure everything is fine with the versions I chose.

I will do a test later for the latest updates.
[[File:2024-02-09 18 29 10-Audiokinetic Launcher.png|center|thumb]]
Normaly, now, your Wwise project will appear on the Wwise Launcher. I work on my projects with the 2021 version of Wwise. I will open the Wwise project that was created:
[[File:2024-02-09 18 31 21-Audiokinetic Launcher.png|center|thumb]]

=== Step 2 : Wwise project ===
You need to create your sound databank : 
[[File:2024-02-09 18 32 27-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
[[File:2024-02-09 18 33 01-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Your soundbank is now created. 
[[File:2024-02-09 18 34 25-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
I'm only using windows plateform and English language but you can add/remove/modify :
[[File:2024-02-10 08 38 58-.png|center|thumb]]
[[File:2024-02-10 08 38 19-.png|center|thumb]]
Next step : importing your audio files. I'm using .wav format.
[[File:2024-02-09 18 35 12-.png|center|thumb]]
[[File:2024-02-09 18 36 43-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Select your wave file on your computer.

Then, import : 
[[File:2024-02-09 18 37 25-Audio File Importer.png|center|thumb]]
My new sound appears on the list : 
[[File:2024-02-09 18 38 28-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
You can double click on you audio (for example if you want to set a loop) : 
[[File:2024-02-09 18 40 54-Property Editor.png|center|thumb]]
And close the window.

Now, you have to set events with your audio for using in Unity : one for playing it, one for stopping it :
[[File:2024-02-09 18 44 46-.png|center|thumb]]
[[File:2024-02-10 05 45 52-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Clic on your new event for setting it : 
[[File:2024-02-10 05 47 01-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Right clic on Target field for assign an audio to this event : 
[[File:2024-02-10 05 47 57-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Select your audio :
[[File:2024-02-10 05 48 24-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Same event creation for stopping audio action : 
[[File:2024-02-10 05 49 57-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Same for playing, assign your audio to this envent.

Now both events appear on the list : 
[[File:2024-02-10 05 51 23-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
To finish, you must assign new events to your soundbank. For that, select your soundbank and drag and drop your events on the bottom window :
[[File:2024-02-10 05 52 56-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Ok, ready now.

Now, just generate your soundbank for using it with Unity and your final mod : 
[[File:2024-02-10 05 54 02-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
[[File:2024-02-10 05 55 16-Generating SoundBanks - Completed.png|center|thumb]]
Your soundbank is now in your wwsise folder '''&lt;Wwise Project&gt;/GeneratedSoundBanks/Windows'''

You have to copy the file .bnk in your KSP2 mod folder '''&lt;Your Mod&gt;/assets/soundbanks/'''

Now, keep your Wwise Project open and start Unity.

=== Step 3 : Unity project ===
Normaly, both are connected. We will verify in the wwise picker window : 
[[File:2024-02-10 06 18 27-kesasolar.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]
All your soundbank events normaly appear on this window.

I will show you 2 ways for using them.

==== Example 1 : add an engine sound ====
First, I create an empty gameobject for sound : u_amb_Engine
[[File:2024-02-10 06 24 23-kesa.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]
And on it few Components : 
[[File:2024-02-10 06 25 59-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
'''In Rigidbody, check "Is Kinematic" and uncheck "Use Gravity" !'''

Next, add audio Components : 
[[File:2024-02-10 06 27 52-kesa.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]
[[File:2024-02-10 06 28 21-kesa.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]

For Rtpc mapping, I’ve created AllRTPC:
[[File:2024-02-10 06 34 51-kesa.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]
And for your engine audio :
[[File:2024-02-10 06 28 59-kesa.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]
I’ve select 2 events for playing and stopping my engine sound : engine3_play &amp; engine3_stop

That’s all. Now your engine will have sound !!!

==== Example 2 : sound in animation ====
For this example, I will show a solar panel with animations for deploying and retracting.

First, I create an empty gameobject u_amb_audio_solar_arrays
[[File:2024-02-10 09 13 08-kesasolar.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]
I've add components on it : 
[[File:2024-02-10 07 05 11-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
'''In Rigidbody, check "Is Kinematic" and uncheck "Use Gravity" !'''

On the gameobject with Animator component : 
[[File:2024-02-10 07 10 51-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Drag &amp; drop your u_amb_audio_solar_arrays gameobject in Animation Events Object field.

Then, we can set audio in animations, on deploying and retracting.

On the first timeline, in your animation windows, on the first frame, right clic : 
[[File:2024-02-10 07 14 49-Animation.png|center|thumb]]
And set in Inspector : 
[[File:2024-02-10 07 15 36-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Same action for the last animation frame : 
[[File:2024-02-10 07 16 29-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Now, my animation has 2 audio events (white rectangles), in the first frame to start the sound, in the last frame to stop it : 
[[File:2024-02-10 07 17 23-Animation.png|center|thumb]]
Animations can have multiples sound events : 
[[File:2024-02-10 07 18 54-Animation.png|center|thumb]]
That’s all, now your part has sounds.

You know as much as I do now. I hope this tutorial will help you.

Don't hesitate to provide feedback, corrections, ... I don't have the knowledge :-)</text>
      <sha1>t9z3ocs3p7f5hbc4pyh9zelr6j0nrat</sha1>
    </revision>
    <revision>
      <id>419</id>
      <parentid>418</parentid>
      <timestamp>2024-02-10T08:31:58Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>419</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8867" sha1="d2zm37964cmyf01o25fd68mweffhc33" xml:space="preserve">[[Category:Parts modding]]

= Sounds for parts with Wwise and Unity =
First, install your Unity environment, SpaceWarp template, ...

There are already excellent tutorials that explain these steps:

https://github.com/SpaceWarpDev/SpaceWarp.Template

[[:Category:Getting started]]

=== First step: Wwise installation ===
You need to create an account : https://www.audiokinetic.com/fr/products/wwise/
[[File:2024-02-09 16 13 04-Wwise Audiokinetic.png|center|thumb]]Next : Install Wwise Launcher
[[File:2024-02-09 16 15 29-Wwise Audiokinetic.png|center|thumb]]
Wwise is free for a 200 sounds databank.


'''Ok, now a warning :''' 
''When I started my mod, I couldn't get the sound to work with the latest 2023 version of Wwise.''

''So I continued to use version 2021 of Wwise to prepare my sounds and I integrated version 2023 of the Wwise libraries into Unity for maximum compatibility.''

''So I will explain how I did it but maybe you can try directly with the latest 2023 versions. If you succeed, let me know so that I can modify this tutorial.''

''So, this tutorial will first install version 2021 to be able to have a Wwise project in 2021 format then I update the Wwise libraries in Unity in 2023 format.''


For these reasons, here are the versions of Wwise on my computer:
[[File:2024-02-09 16 17 46-Audiokinetic Launcher.png|center|thumb]]
Ok, now let's prepare the environment for Unity. Wwise normaly will found your existing projects. We'll integrate Wwise on projects now : 
[[File:2024-02-09 16 24 33-Audiokinetic Launcher.png|center|thumb]]
Next, select Wwise version (2021.1.13.8036 for me) and plateform(s) you want : 
[[File:2024-02-09 16 33 22-Audiokinetic Launcher.png|center|thumb]]
If some packages are missions for destination plateform(s), this message will appear : 
[[File:2024-02-09 16 34 07-Audiokinetic Launcher.png|center|thumb]]
Clic Modify Wwise…. And add it. 

'''The SDK is required. It should also be added.'''
[[File:2024-02-09 16 35 29-Paramètres.png|center|thumb]]
Clic on Next to perform installation.

When ok, come back to Unity integration. 

If SDK is not set, choose it : 
[[File:2024-02-09 16 30 58-Audiokinetic Launcher.png|center|thumb]]
Wwise project need to be created. For that, leave the field empty : 
[[File:2024-02-09 16 32 18-Audiokinetic Launcher.png|center|thumb]]
Unity integration is ready : 
[[File:2024-02-09 16 38 02-Paramètres.png|center|thumb]]
Then, clic on Integrate.
[[File:2024-02-09 16 48 45-Audiokinetic Launcher.png|center|thumb]]
Now that the Wwise project is created in 2021 format, I can update the Wwise libraries in the Unity project.
[[File:2024-02-09 17 21 46-Audiokinetic Launcher.png|center|thumb]]
It's OK. In the screenshot I can update to the latest version 2023. I won't do that because I'm sure everything is fine with the versions I chose.

I will do a test later for the latest updates.
[[File:2024-02-09 18 29 10-Audiokinetic Launcher.png|center|thumb]]
Normaly, now, your Wwise project will appear on the Wwise Launcher. I work on my projects with the 2021 version of Wwise. I will open the Wwise project that was created:
[[File:2024-02-09 18 31 21-Audiokinetic Launcher.png|center|thumb]]

=== Step 2 : Wwise project ===
You need to create your sound databank : 
[[File:2024-02-09 18 32 27-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
[[File:2024-02-09 18 33 01-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Your soundbank is now created. 
[[File:2024-02-09 18 34 25-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
I'm only using windows plateform and English language but you can add/remove/modify :
[[File:2024-02-10 08 38 58-.png|center|thumb]]
[[File:2024-02-10 08 38 19-.png|center|thumb]]
Next step : importing your audio files. I'm using .wav format.
[[File:2024-02-09 18 35 12-.png|center|thumb]]
[[File:2024-02-09 18 36 43-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Select your wave file on your computer.

Then, import : 
[[File:2024-02-09 18 37 25-Audio File Importer.png|center|thumb]]
My new sound appears on the list : 
[[File:2024-02-09 18 38 28-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
You can double click on you audio (for example if you want to set a loop) : 
[[File:2024-02-09 18 40 54-Property Editor.png|center|thumb]]
And close the window.

Now, you have to set events with your audio for using in Unity : one for playing it, one for stopping it :
[[File:2024-02-09 18 44 46-.png|center|thumb]]
[[File:2024-02-10 05 45 52-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Clic on your new event for setting it : 
[[File:2024-02-10 05 47 01-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Right clic on Target field for assign an audio to this event : 
[[File:2024-02-10 05 47 57-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Select your audio :
[[File:2024-02-10 05 48 24-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Same event creation for stopping audio action : 
[[File:2024-02-10 05 49 57-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Same for playing, assign your audio to this envent.

Now both events appear on the list : 
[[File:2024-02-10 05 51 23-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
To finish, you must assign new events to your soundbank. For that, select your soundbank and drag and drop your events on the bottom window :
[[File:2024-02-10 05 52 56-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Ok, ready now.

Now, just generate your soundbank for using it with Unity and your final mod : 
[[File:2024-02-10 05 54 02-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
[[File:2024-02-10 05 55 16-Generating SoundBanks - Completed.png|center|thumb]]
Your soundbank is now in your wwsise folder '''&lt;Wwise Project&gt;/GeneratedSoundBanks/Windows'''

You have to copy the file .bnk in your KSP2 mod folder '''&lt;Your Mod&gt;/assets/soundbanks/'''

Now, keep your Wwise Project open and start Unity.

=== Step 3 : Unity project ===
Normaly, both are connected. We will verify in the wwise picker window : 
[[File:2024-02-10 06 18 27-kesasolar.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]
All your soundbank events normaly appear on this window.

I will show you 2 ways for using them.

==== Example 1 : add an engine sound ====
First, I create an empty gameobject for sound : u_amb_Engine
[[File:2024-02-10 06 24 23-kesa.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]
And on it few Components : 
[[File:2024-02-10 06 25 59-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
'''In Rigidbody, check "Is Kinematic" and uncheck "Use Gravity" !'''

Next, add audio Components : 
[[File:2024-02-10 06 27 52-kesa.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]
[[File:2024-02-10 06 28 21-kesa.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]

For Rtpc mapping, I’ve created AllRTPC:
[[File:2024-02-10 06 34 51-kesa.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]
And for your engine audio :
[[File:2024-02-10 06 28 59-kesa.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]
I’ve select 2 events for playing and stopping my engine sound : engine3_play &amp; engine3_stop

That’s all. Now your engine will have sound !!!

==== Example 2 : sound in animation ====
For this example, I will show a solar panel with animations for deploying and retracting.

First, I create an empty gameobject u_amb_audio_solar_arrays
[[File:2024-02-10 09 13 08-kesasolar.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png|center|thumb]]
I've add components on it : 
[[File:2024-02-10 07 05 11-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
'''In Rigidbody, check "Is Kinematic" and uncheck "Use Gravity" !'''

On the gameobject with Animator component : 
[[File:2024-02-10 07 10 51-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Drag &amp; drop your u_amb_audio_solar_arrays gameobject in Animation Events Object field.

Then, we can set audio in animations, on deploying and retracting.

On the first timeline, in your animation windows, on the first frame, right clic : 
[[File:2024-02-10 07 14 49-Animation.png|center|thumb]]
And set in Inspector : 
[[File:2024-02-10 07 15 36-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Same action for the last animation frame : 
[[File:2024-02-10 07 16 29-Kesa solar - Wwise 2021.1.13.png|center|thumb]]
Now, my animation has 2 audio events (white rectangles), in the first frame to start the sound, in the last frame to stop it : 
[[File:2024-02-10 07 17 23-Animation.png|center|thumb]]
Animations can have multiples sound events : 
[[File:2024-02-10 07 18 54-Animation.png|center|thumb]]
That’s all, now your part has sounds.

You know as much as I do now. I hope this tutorial will help you.

Don't hesitate to provide feedback, corrections, ... I don't have the knowledge :-)</text>
      <sha1>d2zm37964cmyf01o25fd68mweffhc33</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-09 16 15 29-Wwise Audiokinetic.png</title>
    <ns>6</ns>
    <id>113</id>
    <revision>
      <id>363</id>
      <timestamp>2024-02-10T06:36:35Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>363</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="23" sha1="n3j7xx4rr69g7imuh9k6qeudg2vzvn1" xml:space="preserve">Install Wwsize launcher</text>
      <sha1>n3j7xx4rr69g7imuh9k6qeudg2vzvn1</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-09 16 17 46-Audiokinetic Launcher.png</title>
    <ns>6</ns>
    <id>114</id>
    <revision>
      <id>365</id>
      <timestamp>2024-02-10T06:57:50Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>365</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="14" sha1="it1uqdq4oqrccu9roo6rbwzqfwmqbwp" xml:space="preserve">Wwise versions</text>
      <sha1>it1uqdq4oqrccu9roo6rbwzqfwmqbwp</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-09 16 24 33-Audiokinetic Launcher.png</title>
    <ns>6</ns>
    <id>115</id>
    <revision>
      <id>367</id>
      <timestamp>2024-02-10T07:02:23Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>367</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="25" sha1="ai1o3ocop8ut9mu15p8k7u5mgiiw2l1" xml:space="preserve">Unity project integration</text>
      <sha1>ai1o3ocop8ut9mu15p8k7u5mgiiw2l1</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-09 16 33 22-Audiokinetic Launcher.png</title>
    <ns>6</ns>
    <id>116</id>
    <revision>
      <id>368</id>
      <timestamp>2024-02-10T07:06:45Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>368</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="42" sha1="jphvqmooummzl00b4hru92jai40eii7" xml:space="preserve">Wwise version and destination plateform(s)</text>
      <sha1>jphvqmooummzl00b4hru92jai40eii7</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-09 16 34 07-Audiokinetic Launcher.png</title>
    <ns>6</ns>
    <id>117</id>
    <revision>
      <id>369</id>
      <timestamp>2024-02-10T07:08:40Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>369</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="26" sha1="hy75z7i3u9m1eesqn13i4oxxwiki28n" xml:space="preserve">Missing plateform packages</text>
      <sha1>hy75z7i3u9m1eesqn13i4oxxwiki28n</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-09 16 35 29-Paramètres.png</title>
    <ns>6</ns>
    <id>118</id>
    <revision>
      <id>370</id>
      <timestamp>2024-02-10T07:10:58Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>370</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="12" sha1="0wifd8f7himg5bk8zciikyl5okv7jm3" xml:space="preserve">Add packages</text>
      <sha1>0wifd8f7himg5bk8zciikyl5okv7jm3</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-09 16 30 58-Audiokinetic Launcher.png</title>
    <ns>6</ns>
    <id>119</id>
    <revision>
      <id>371</id>
      <timestamp>2024-02-10T07:14:38Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>371</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3" sha1="554cpzdlmcj0wrkn3hqjapyht8odfmf" xml:space="preserve">SDK</text>
      <sha1>554cpzdlmcj0wrkn3hqjapyht8odfmf</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-09 16 32 18-Audiokinetic Launcher.png</title>
    <ns>6</ns>
    <id>120</id>
    <revision>
      <id>372</id>
      <timestamp>2024-02-10T07:15:57Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>372</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="22" sha1="9rgurtavy5cbphrnq1nq8aakmu32yf5" xml:space="preserve">Wwise project creation</text>
      <sha1>9rgurtavy5cbphrnq1nq8aakmu32yf5</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-09 16 38 02-Paramètres.png</title>
    <ns>6</ns>
    <id>121</id>
    <revision>
      <id>373</id>
      <timestamp>2024-02-10T07:16:53Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>373</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="23" sha1="8pfigndhvmls6hfvhw03jaqx1e70b2l" xml:space="preserve">Unity integration ready</text>
      <sha1>8pfigndhvmls6hfvhw03jaqx1e70b2l</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-09 16 48 45-Audiokinetic Launcher.png</title>
    <ns>6</ns>
    <id>122</id>
    <revision>
      <id>374</id>
      <timestamp>2024-02-10T07:18:09Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>374</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="34" sha1="940x7koucyjmp2m7ej4axhzuzyxpkkk" xml:space="preserve">Integrating Wwise on Unity project</text>
      <sha1>940x7koucyjmp2m7ej4axhzuzyxpkkk</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-09 17 21 46-Audiokinetic Launcher.png</title>
    <ns>6</ns>
    <id>123</id>
    <revision>
      <id>375</id>
      <timestamp>2024-02-10T07:19:54Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>375</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="32" sha1="s7lt4lrd8z8fefvyqueog0lnkv7rbfk" xml:space="preserve">Wwise librairies update in Unity</text>
      <sha1>s7lt4lrd8z8fefvyqueog0lnkv7rbfk</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-09 18 29 10-Audiokinetic Launcher.png</title>
    <ns>6</ns>
    <id>124</id>
    <revision>
      <id>376</id>
      <timestamp>2024-02-10T07:22:33Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>376</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="16" sha1="2qbrccz2dw439gfv5huk8qquypa4934" xml:space="preserve">Integration done</text>
      <sha1>2qbrccz2dw439gfv5huk8qquypa4934</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-09 18 31 21-Audiokinetic Launcher.png</title>
    <ns>6</ns>
    <id>125</id>
    <revision>
      <id>377</id>
      <timestamp>2024-02-10T07:23:39Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>377</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="17" sha1="0da7a8cc7oj617yyja0p2he8xi1a2yh" xml:space="preserve">Wwise projects ok</text>
      <sha1>0da7a8cc7oj617yyja0p2he8xi1a2yh</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-09 18 32 27-Kesa solar - Wwise 2021.1.13.png</title>
    <ns>6</ns>
    <id>126</id>
    <revision>
      <id>379</id>
      <timestamp>2024-02-10T07:27:38Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>379</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="15" sha1="ruujfdhv6hjs7k6gid48kapt8jw0q5p" xml:space="preserve">Create databank</text>
      <sha1>ruujfdhv6hjs7k6gid48kapt8jw0q5p</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-09 18 33 01-Kesa solar - Wwise 2021.1.13.png</title>
    <ns>6</ns>
    <id>127</id>
    <revision>
      <id>380</id>
      <timestamp>2024-02-10T07:28:21Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>380</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="15" sha1="i1bnzmyz5hto4puc1mfp48b6muobqfm" xml:space="preserve">Naming databank</text>
      <sha1>i1bnzmyz5hto4puc1mfp48b6muobqfm</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-10 08 38 58-.png</title>
    <ns>6</ns>
    <id>128</id>
    <revision>
      <id>381</id>
      <timestamp>2024-02-10T07:40:16Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>381</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="9" sha1="pl2dyniqj98bksdo9tntr53ih73xzhl" xml:space="preserve">Languages</text>
      <sha1>pl2dyniqj98bksdo9tntr53ih73xzhl</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-10 08 38 19-.png</title>
    <ns>6</ns>
    <id>129</id>
    <revision>
      <id>382</id>
      <timestamp>2024-02-10T07:40:39Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>382</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="10" sha1="rvzeitikigntfc9y23f3kx8xyme2xwr" xml:space="preserve">Plateforms</text>
      <sha1>rvzeitikigntfc9y23f3kx8xyme2xwr</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-09 18 35 12-.png</title>
    <ns>6</ns>
    <id>130</id>
    <revision>
      <id>383</id>
      <timestamp>2024-02-10T07:41:40Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>383</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="17" sha1="l0htv8pyu2bnbwohou86peycg4htm0t" xml:space="preserve">Import audio file</text>
      <sha1>l0htv8pyu2bnbwohou86peycg4htm0t</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-09 18 34 25-Kesa solar - Wwise 2021.1.13.png</title>
    <ns>6</ns>
    <id>131</id>
    <revision>
      <id>384</id>
      <timestamp>2024-02-10T07:42:44Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>384</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="17" sha1="b3jji14p5xwojlq4cxlsg67tnhxve7x" xml:space="preserve">Soundbank created</text>
      <sha1>b3jji14p5xwojlq4cxlsg67tnhxve7x</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-09 18 35 56-Audio File Importer.png</title>
    <ns>6</ns>
    <id>132</id>
    <revision>
      <id>385</id>
      <timestamp>2024-02-10T07:43:55Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>385</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="17" sha1="fqq20ilex65oxemoteu90muwxgofi2j" xml:space="preserve">Choose audio file</text>
      <sha1>fqq20ilex65oxemoteu90muwxgofi2j</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-09 18 36 43-Kesa solar - Wwise 2021.1.13.png</title>
    <ns>6</ns>
    <id>133</id>
    <revision>
      <id>386</id>
      <timestamp>2024-02-10T07:44:23Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>386</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="17" sha1="fqq20ilex65oxemoteu90muwxgofi2j" xml:space="preserve">Choose audio file</text>
      <sha1>fqq20ilex65oxemoteu90muwxgofi2j</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-09 18 37 25-Audio File Importer.png</title>
    <ns>6</ns>
    <id>134</id>
    <revision>
      <id>387</id>
      <timestamp>2024-02-10T07:45:05Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>387</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="17" sha1="l0htv8pyu2bnbwohou86peycg4htm0t" xml:space="preserve">Import audio file</text>
      <sha1>l0htv8pyu2bnbwohou86peycg4htm0t</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-09 18 38 28-Kesa solar - Wwise 2021.1.13.png</title>
    <ns>6</ns>
    <id>135</id>
    <revision>
      <id>388</id>
      <timestamp>2024-02-10T07:45:56Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>388</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="11" sha1="6tnxjj12aoaetvbymo23e4q34mp1xsr" xml:space="preserve">Sounds list</text>
      <sha1>6tnxjj12aoaetvbymo23e4q34mp1xsr</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-09 18 40 54-Property Editor.png</title>
    <ns>6</ns>
    <id>136</id>
    <revision>
      <id>389</id>
      <timestamp>2024-02-10T07:46:40Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>389</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="11" sha1="gfq50v1j24ry5gsoz5s9v0up6uoxx8z" xml:space="preserve">Loop option</text>
      <sha1>gfq50v1j24ry5gsoz5s9v0up6uoxx8z</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-09 18 44 46-.png</title>
    <ns>6</ns>
    <id>137</id>
    <revision>
      <id>390</id>
      <timestamp>2024-02-10T07:47:45Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>390</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="15" sha1="n8xft7bv75r0woxp1ihm0yje90ljt9u" xml:space="preserve">New audio event</text>
      <sha1>n8xft7bv75r0woxp1ihm0yje90ljt9u</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-10 05 45 52-Kesa solar - Wwise 2021.1.13.png</title>
    <ns>6</ns>
    <id>138</id>
    <revision>
      <id>391</id>
      <timestamp>2024-02-10T07:48:42Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>391</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="17" sha1="s3fbeznvm2m5cl2kgbjauig7nlkr70x" xml:space="preserve">Audio events list</text>
      <sha1>s3fbeznvm2m5cl2kgbjauig7nlkr70x</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-10 05 47 01-Kesa solar - Wwise 2021.1.13.png</title>
    <ns>6</ns>
    <id>139</id>
    <revision>
      <id>392</id>
      <timestamp>2024-02-10T07:49:44Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>392</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="14" sha1="qbj966gpjjmttnnruyowwh6ct51shbt" xml:space="preserve">Set play event</text>
      <sha1>qbj966gpjjmttnnruyowwh6ct51shbt</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-10 05 47 57-Kesa solar - Wwise 2021.1.13.png</title>
    <ns>6</ns>
    <id>140</id>
    <revision>
      <id>393</id>
      <timestamp>2024-02-10T07:50:40Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>393</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="12" sha1="iq2cjy09ctbdczmfx3b3uclsqnzl4i5" xml:space="preserve">Assign audio</text>
      <sha1>iq2cjy09ctbdczmfx3b3uclsqnzl4i5</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-10 05 48 24-Kesa solar - Wwise 2021.1.13.png</title>
    <ns>6</ns>
    <id>141</id>
    <revision>
      <id>394</id>
      <timestamp>2024-02-10T07:51:45Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>394</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="15" sha1="a2tnndt4u5096fn43tgjh50y89no7dy" xml:space="preserve">Assigning audio</text>
      <sha1>a2tnndt4u5096fn43tgjh50y89no7dy</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-10 05 49 57-Kesa solar - Wwise 2021.1.13.png</title>
    <ns>6</ns>
    <id>142</id>
    <revision>
      <id>395</id>
      <timestamp>2024-02-10T07:52:27Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>395</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="20" sha1="mcsujpvpm9hmhgnjqtzk979r5qn2bdn" xml:space="preserve">Stopping audio event</text>
      <sha1>mcsujpvpm9hmhgnjqtzk979r5qn2bdn</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-10 05 51 23-Kesa solar - Wwise 2021.1.13.png</title>
    <ns>6</ns>
    <id>143</id>
    <revision>
      <id>396</id>
      <timestamp>2024-02-10T07:53:16Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>396</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="15" sha1="20b2yp9o6c0g18uyt256jxz14ht056a" xml:space="preserve">New events list</text>
      <sha1>20b2yp9o6c0g18uyt256jxz14ht056a</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-10 05 52 56-Kesa solar - Wwise 2021.1.13.png</title>
    <ns>6</ns>
    <id>144</id>
    <revision>
      <id>397</id>
      <timestamp>2024-02-10T07:55:29Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>397</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="33" sha1="guk7zyhwj3ymp5cg1i89ra6z6p96ue4" xml:space="preserve">Drag and drop events in soundbank</text>
      <sha1>guk7zyhwj3ymp5cg1i89ra6z6p96ue4</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-10 05 54 02-Kesa solar - Wwise 2021.1.13.png</title>
    <ns>6</ns>
    <id>145</id>
    <revision>
      <id>398</id>
      <timestamp>2024-02-10T07:56:10Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>398</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="21" sha1="cwysrmynys8qs6x7ef97yregqjeej7p" xml:space="preserve">Soundbank events list</text>
      <sha1>cwysrmynys8qs6x7ef97yregqjeej7p</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-10 05 55 16-Generating SoundBanks - Completed.png</title>
    <ns>6</ns>
    <id>146</id>
    <revision>
      <id>399</id>
      <timestamp>2024-02-10T07:57:58Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>399</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="29" sha1="szqznrgu1fu08n4cz4425gbn5pp871v" xml:space="preserve">Soundbank generation finished</text>
      <sha1>szqznrgu1fu08n4cz4425gbn5pp871v</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-10 06 18 27-kesasolar.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png</title>
    <ns>6</ns>
    <id>147</id>
    <revision>
      <id>400</id>
      <timestamp>2024-02-10T08:00:50Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>400</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="21" sha1="e9u2beakixgvlob9erdqpio7l9urmkr" xml:space="preserve">Wwise picker on Unity</text>
      <sha1>e9u2beakixgvlob9erdqpio7l9urmkr</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-10 06 24 23-kesa.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png</title>
    <ns>6</ns>
    <id>148</id>
    <revision>
      <id>401</id>
      <timestamp>2024-02-10T08:03:10Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>401</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="16" sha1="qy6lk53rrtdhkpccir4lqm335j49yj4" xml:space="preserve">Audio gameobject</text>
      <sha1>qy6lk53rrtdhkpccir4lqm335j49yj4</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-10 06 25 59-Kesa solar - Wwise 2021.1.13.png</title>
    <ns>6</ns>
    <id>149</id>
    <revision>
      <id>402</id>
      <timestamp>2024-02-10T08:03:56Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>402</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="16" sha1="gbpa3grza39jyldr8zkorxi4v3pdaki" xml:space="preserve">First components</text>
      <sha1>gbpa3grza39jyldr8zkorxi4v3pdaki</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-10 06 27 52-kesa.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png</title>
    <ns>6</ns>
    <id>150</id>
    <revision>
      <id>403</id>
      <timestamp>2024-02-10T08:06:25Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>403</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="19" sha1="drg6xrjp7jdpkfu9wecgct4zq83807e" xml:space="preserve">AkGameObj Component</text>
      <sha1>drg6xrjp7jdpkfu9wecgct4zq83807e</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-10 06 28 21-kesa.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png</title>
    <ns>6</ns>
    <id>151</id>
    <revision>
      <id>404</id>
      <timestamp>2024-02-10T08:07:02Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>404</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="24" sha1="ggnviv1rqe7u00sq6cgnjj9hpa2z4h2" xml:space="preserve">KSP Part Audio Component</text>
      <sha1>ggnviv1rqe7u00sq6cgnjj9hpa2z4h2</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-10 06 34 51-kesa.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png</title>
    <ns>6</ns>
    <id>152</id>
    <revision>
      <id>406</id>
      <timestamp>2024-02-10T08:08:08Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>406</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="12" sha1="oyt8nfcxxgqaktku2odbqeainb9x74s" xml:space="preserve">Rtpc mapping</text>
      <sha1>oyt8nfcxxgqaktku2odbqeainb9x74s</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-10 06 28 59-kesa.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png</title>
    <ns>6</ns>
    <id>153</id>
    <revision>
      <id>407</id>
      <timestamp>2024-02-10T08:10:15Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>407</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="22" sha1="0yolaxsbbjvu665lmr8o5smqjoux71s" xml:space="preserve">Engine sound component</text>
      <sha1>0yolaxsbbjvu665lmr8o5smqjoux71s</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-10 09 13 08-kesasolar.Unity - Default - Windows, Mac, Linux - Unity 2022.3.5f1 DX11 .png</title>
    <ns>6</ns>
    <id>154</id>
    <revision>
      <id>408</id>
      <timestamp>2024-02-10T08:13:58Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>408</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="24" sha1="gu8dlpgtl0ogsdtam0yckyn4egi9g07" xml:space="preserve">u_amb_audio_solar_arrays</text>
      <sha1>gu8dlpgtl0ogsdtam0yckyn4egi9g07</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-10 07 05 11-Kesa solar - Wwise 2021.1.13.png</title>
    <ns>6</ns>
    <id>155</id>
    <revision>
      <id>409</id>
      <timestamp>2024-02-10T08:15:05Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>409</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="35" sha1="q4k4a6xnuvkirk7dse8xzn1l70mx09p" xml:space="preserve">u_amb_audio_solar_arrays Components</text>
      <sha1>q4k4a6xnuvkirk7dse8xzn1l70mx09p</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-10 07 10 51-Kesa solar - Wwise 2021.1.13.png</title>
    <ns>6</ns>
    <id>156</id>
    <revision>
      <id>410</id>
      <timestamp>2024-02-10T08:16:10Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>410</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="25" sha1="t1xrnv5039e8wh4tmtypv57z231o1ot" xml:space="preserve">Animator audio Components</text>
      <sha1>t1xrnv5039e8wh4tmtypv57z231o1ot</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-10 07 14 49-Animation.png</title>
    <ns>6</ns>
    <id>157</id>
    <revision>
      <id>411</id>
      <timestamp>2024-02-10T08:17:10Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>411</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="27" sha1="iyeelppulv5julzzjcx4pvrfr2dly10" xml:space="preserve">Add first frame audio event</text>
      <sha1>iyeelppulv5julzzjcx4pvrfr2dly10</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-10 07 15 36-Kesa solar - Wwise 2021.1.13.png</title>
    <ns>6</ns>
    <id>158</id>
    <revision>
      <id>412</id>
      <timestamp>2024-02-10T08:17:55Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>412</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="9" sha1="f78wwbvlirwci501qpsbtefxqyeqr1h" xml:space="preserve">Inspector</text>
      <sha1>f78wwbvlirwci501qpsbtefxqyeqr1h</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-10 07 16 29-Kesa solar - Wwise 2021.1.13.png</title>
    <ns>6</ns>
    <id>159</id>
    <revision>
      <id>413</id>
      <timestamp>2024-02-10T08:18:33Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>413</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="10" sha1="imxyubrk3ffm5iwpsbgin1a4fs4pw4r" xml:space="preserve">Last frame</text>
      <sha1>imxyubrk3ffm5iwpsbgin1a4fs4pw4r</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-10 07 17 23-Animation.png</title>
    <ns>6</ns>
    <id>160</id>
    <revision>
      <id>414</id>
      <timestamp>2024-02-10T08:19:15Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>414</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="27" sha1="2220u5sk5j3dbzxchymyay7v2k0oowe" xml:space="preserve">Animation with audio events</text>
      <sha1>2220u5sk5j3dbzxchymyay7v2k0oowe</sha1>
    </revision>
  </page>
  <page>
    <title>File:2024-02-10 07 18 54-Animation.png</title>
    <ns>6</ns>
    <id>161</id>
    <revision>
      <id>415</id>
      <timestamp>2024-02-10T08:20:10Z</timestamp>
      <contributor>
        <username>JiMKesa</username>
        <id>21</id>
      </contributor>
      <origin>415</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="23" sha1="ido68vxswcqmjntmm3i5q0s1uiqc2f1" xml:space="preserve">Other animation example</text>
      <sha1>ido68vxswcqmjntmm3i5q0s1uiqc2f1</sha1>
    </revision>
  </page>
  <page>
    <title>File:Blender UV map example.png</title>
    <ns>6</ns>
    <id>162</id>
    <revision>
      <id>431</id>
      <timestamp>2024-02-24T11:13:24Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <origin>431</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="50" sha1="o1rxa32wkgsexkwkjj606z30bl2tv36" xml:space="preserve">An example of an UV map for a KSP2 part in Blender</text>
      <sha1>o1rxa32wkgsexkwkjj606z30bl2tv36</sha1>
    </revision>
  </page>
  <page>
    <title>File:Blender FBX export settings for KSP2.png</title>
    <ns>6</ns>
    <id>163</id>
    <revision>
      <id>432</id>
      <timestamp>2024-02-24T11:17:18Z</timestamp>
      <contributor>
        <username>Safarte</username>
        <id>14</id>
      </contributor>
      <origin>432</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="69" sha1="o0jw0f7rax3l6xrmcjvvtkk3eoxyt9j" xml:space="preserve">Screenshot of Blender FBX export settings used for KSP2 part modding.</text>
      <sha1>o0jw0f7rax3l6xrmcjvvtkk3eoxyt9j</sha1>
    </revision>
  </page>
  <page>
    <title>KSP1:Homepage</title>
    <ns>0</ns>
    <id>164</id>
    <revision>
      <id>440</id>
      <timestamp>2024-05-07T16:50:05Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Created page with "This is a homepage for Kerbal Space Program (1) modding."</comment>
      <origin>440</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="56" sha1="q9kypctyx3s796be4zd4jsmoatwkeis" xml:space="preserve">This is a homepage for Kerbal Space Program (1) modding.</text>
      <sha1>q9kypctyx3s796be4zd4jsmoatwkeis</sha1>
    </revision>
  </page>
  <page>
    <title>KSP1:Homepage</title>
    <ns>3000</ns>
    <id>165</id>
    <revision>
      <id>441</id>
      <timestamp>2024-05-07T17:08:00Z</timestamp>
      <contributor>
        <username>Munix</username>
        <id>3</id>
      </contributor>
      <comment>Created page with "This is a homepage for Kerbal Space Program (1) modding."</comment>
      <origin>441</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="56" sha1="q9kypctyx3s796be4zd4jsmoatwkeis" xml:space="preserve">This is a homepage for Kerbal Space Program (1) modding.</text>
      <sha1>q9kypctyx3s796be4zd4jsmoatwkeis</sha1>
    </revision>
  </page>
  <page>
    <title>User:LakeshaBecker92</title>
    <ns>2</ns>
    <id>169</id>
    <revision>
      <id>445</id>
      <timestamp>2025-01-19T08:17:39Z</timestamp>
      <contributor>
        <username>LakeshaBecker92</username>
        <id>25</id>
      </contributor>
      <comment>Created page with "Hello! My name is Lakesha. I am pleased that I could join to the entire globe. I live in Great Britain, in the NA region. I dream to visit the various nations, to obtain familiarized with interesting individuals.&lt;br&gt;&lt;br&gt;Also visit my web-site: [https://apparcadepro.com/ https://unityverselabs.com/]"</comment>
      <origin>445</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="299" sha1="9qvqq6pxjpg1zlb3ww4bbodvhsojiu0" xml:space="preserve">Hello! My name is Lakesha. I am pleased that I could join to the entire globe. I live in Great Britain, in the NA region. I dream to visit the various nations, to obtain familiarized with interesting individuals.&lt;br&gt;&lt;br&gt;Also visit my web-site: [https://apparcadepro.com/ https://unityverselabs.com/]</text>
      <sha1>9qvqq6pxjpg1zlb3ww4bbodvhsojiu0</sha1>
    </revision>
  </page>
</mediawiki>
